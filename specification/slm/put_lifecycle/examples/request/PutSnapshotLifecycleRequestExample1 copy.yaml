summary: Create a policy
method_request: PUT /_slm/policy/daily-snapshots
description: >
  Run `PUT /_slm/policy/daily-snapshots` to create a lifecycle policy. The `schedule` is when the snapshot should be taken, in this
  case, 1:30am daily. The `retention` details specify to: keep snapshots for 30 days; always keep at least 5 successful snapshots,
  even if they're more than 30 days old; keep no more than 50 successful snapshots, even if they're less than 30 days old.
# type: request
value: "{

  \  \"schedule\": \"0 30 1 * * ?\",

  \  \"name\": \"<daily-snap-{now/d}>\",

  \  \"repository\": \"my_repository\",

  \  \"config\": {

  \    \"indices\": [\"data-*\", \"important\"],

  \    \"ignore_unavailable\": false,

  \    \"include_global_state\": false

  \  },

  \  \"retention\": {

  \    \"expire_after\": \"30d\",

  \    \"min_count\": 5,

  \    \"max_count\": 50

  \  }

  }"
alternatives:
  - language: Python
    code: |-
      resp = client.slm.put_lifecycle(
          policy_id="daily-snapshots",
          schedule="0 30 1 * * ?",
          name="<daily-snap-{now/d}>",
          repository="my_repository",
          config={
              "indices": [
                  "data-*",
                  "important"
              ],
              "ignore_unavailable": False,
              "include_global_state": False
          },
          retention={
              "expire_after": "30d",
              "min_count": 5,
              "max_count": 50
          },
      )
  - language: JavaScript
    code: |-
      const response = await client.slm.putLifecycle({
        policy_id: "daily-snapshots",
        schedule: "0 30 1 * * ?",
        name: "<daily-snap-{now/d}>",
        repository: "my_repository",
        config: {
          indices: ["data-*", "important"],
          ignore_unavailable: false,
          include_global_state: false,
        },
        retention: {
          expire_after: "30d",
          min_count: 5,
          max_count: 50,
        },
      });
  - language: Ruby
    code: |-
      response = client.slm.put_lifecycle(
        policy_id: "daily-snapshots",
        body: {
          "schedule": "0 30 1 * * ?",
          "name": "<daily-snap-{now/d}>",
          "repository": "my_repository",
          "config": {
            "indices": [
              "data-*",
              "important"
            ],
            "ignore_unavailable": false,
            "include_global_state": false
          },
          "retention": {
            "expire_after": "30d",
            "min_count": 5,
            "max_count": 50
          }
        }
      )
  - language: PHP
    code: |-
      $resp = $client->slm()->putLifecycle([
          "policy_id" => "daily-snapshots",
          "body" => [
              "schedule" => "0 30 1 * * ?",
              "name" => "<daily-snap-{now/d}>",
              "repository" => "my_repository",
              "config" => [
                  "indices" => array(
                      "data-*",
                      "important",
                  ),
                  "ignore_unavailable" => false,
                  "include_global_state" => false,
              ],
              "retention" => [
                  "expire_after" => "30d",
                  "min_count" => 5,
                  "max_count" => 50,
              ],
          ],
      ]);
  - language: curl
    code:
      "curl -X PUT -H \"Authorization: ApiKey $ELASTIC_API_KEY\" -H \"Content-Type: application/json\" -d '{\"schedule\":\"0 30 1 *
      *
      ?\",\"name\":\"<daily-snap-{now/d}>\",\"repository\":\"my_repository\",\"config\":{\"indices\":[\"data-*\",\"important\"],\"i\
      gnore_unavailable\":false,\"include_global_state\":false},\"retention\":{\"expire_after\":\"30d\",\"min_count\":5,\"max_count\
      \":50}}' \"$ELASTICSEARCH_URL/_slm/policy/daily-snapshots\""
  - language: Java
    code: |
      client.slm().putLifecycle(p -> p
          .config(c -> c
              .ignoreUnavailable(false)
              .indices(List.of("data-*","important"))
              .includeGlobalState(false)
          )
          .name("<daily-snap-{now/d}>")
          .policyId("daily-snapshots")
          .repository("my_repository")
          .retention(r -> r
              .expireAfter(e -> e
                  .time("30d")
              )
              .maxCount(50)
              .minCount(5)
          )
          .schedule("0 30 1 * * ?")
      );
