summary: Regression example 1
method_request: POST _ml/data_frame/_evaluate
description: >
  Run `POST _ml/data_frame/_evaluate` to evaluate the testing error of a regression job for an annotated index. The term query in
  the body limits evaluation to be performed on the test split only. The `actual_field` contains the ground truth for house prices.
  The `predicted_field` contains the house price calculated by the regression analysis.
# type: request
value:
  index: house_price_predictions
  query:
    bool:
      filter:
        - term:
            ml.is_training: false
  evaluation:
    regression:
      actual_field: price
      predicted_field: ml.price_prediction
      metrics:
        r_squared: {}
        mse: {}
        msle:
          offset: 10
        huber:
          delta: 1.5
alternatives:
  - language: Python
    code: |-
      resp = client.ml.evaluate_data_frame(
          index="house_price_predictions",
          query={
              "bool": {
                  "filter": [
                      {
                          "term": {
                              "ml.is_training": False
                          }
                      }
                  ]
              }
          },
          evaluation={
              "regression": {
                  "actual_field": "price",
                  "predicted_field": "ml.price_prediction",
                  "metrics": {
                      "r_squared": {},
                      "mse": {},
                      "msle": {
                          "offset": 10
                      },
                      "huber": {
                          "delta": 1.5
                      }
                  }
              }
          },
      )
  - language: JavaScript
    code: |-
      const response = await client.ml.evaluateDataFrame({
        index: "house_price_predictions",
        query: {
          bool: {
            filter: [
              {
                term: {
                  "ml.is_training": false,
                },
              },
            ],
          },
        },
        evaluation: {
          regression: {
            actual_field: "price",
            predicted_field: "ml.price_prediction",
            metrics: {
              r_squared: {},
              mse: {},
              msle: {
                offset: 10,
              },
              huber: {
                delta: 1.5,
              },
            },
          },
        },
      });
  - language: Ruby
    code: |-
      response = client.ml.evaluate_data_frame(
        body: {
          "index": "house_price_predictions",
          "query": {
            "bool": {
              "filter": [
                {
                  "term": {
                    "ml.is_training": false
                  }
                }
              ]
            }
          },
          "evaluation": {
            "regression": {
              "actual_field": "price",
              "predicted_field": "ml.price_prediction",
              "metrics": {
                "r_squared": {},
                "mse": {},
                "msle": {
                  "offset": 10
                },
                "huber": {
                  "delta": 1.5
                }
              }
            }
          }
        }
      )
  - language: PHP
    code: |-
      $resp = $client->ml()->evaluateDataFrame([
          "body" => [
              "index" => "house_price_predictions",
              "query" => [
                  "bool" => [
                      "filter" => array(
                          [
                              "term" => [
                                  "ml.is_training" => false,
                              ],
                          ],
                      ),
                  ],
              ],
              "evaluation" => [
                  "regression" => [
                      "actual_field" => "price",
                      "predicted_field" => "ml.price_prediction",
                      "metrics" => [
                          "r_squared" => new ArrayObject([]),
                          "mse" => new ArrayObject([]),
                          "msle" => [
                              "offset" => 10,
                          ],
                          "huber" => [
                              "delta" => 1.5,
                          ],
                      ],
                  ],
              ],
          ],
      ]);
  - language: curl
    code:
      "curl -X POST -H \"Authorization: ApiKey $ELASTIC_API_KEY\" -H \"Content-Type: application/json\" -d
      '{\"index\":\"house_price_predictions\",\"query\":{\"bool\":{\"filter\":[{\"term\":{\"ml.is_training\":false}}]}},\"evaluation\
      \":{\"regression\":{\"actual_field\":\"price\",\"predicted_field\":\"ml.price_prediction\",\"metrics\":{\"r_squared\":{},\"mse\
      \":{},\"msle\":{\"offset\":10},\"huber\":{\"delta\":1.5}}}}}' \"$ELASTICSEARCH_URL/_ml/data_frame/_evaluate\""
  - language: Java
    code: |
      client.ml().evaluateDataFrame(e -> e
          .evaluation(ev -> ev
              .regression(r -> r
                  .actualField("price")
                  .predictedField("ml.price_prediction")
                  .metrics(m -> m
                      .msle(ms -> ms
                          .offset(10.0D)
                      )
                      .huber(h -> h
                          .delta(1.5D)
                      )
                  )
              )
          )
          .index("house_price_predictions")
          .query(q -> q
              .bool(b -> b
                  .filter(f -> f
                      .term(t -> t
                          .field("ml.is_training")
                          .value(FieldValue.of(false))
                      )
                  )
              )
          )
      );
