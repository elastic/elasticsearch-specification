# summary:
method_request: PUT /_ml/anomaly_detectors/job-01
description: A request to create an anomaly detection job and datafeed.
value:
  analysis_config:
    bucket_span: 15m
    detectors:
      - detector_description: Sum of bytes
        function: sum
        field_name: bytes
  data_description:
    time_field: timestamp
    time_format: epoch_ms
  analysis_limits:
    model_memory_limit: 11MB
  model_plot_config:
    enabled: true
    annotations_enabled: true
  results_index_name: test-job1
  datafeed_config:
    indices:
      - kibana_sample_data_logs
    query:
      bool:
        must:
          - match_all: {}
    runtime_mappings:
      hour_of_day:
        type: long
        script:
          source: "emit(doc['timestamp'].value.getHour());"
    datafeed_id: datafeed-test-job1
alternatives:
  - language: Python
    code: |-
      resp = client.ml.put_job(
          job_id="job-01",
          analysis_config={
              "bucket_span": "15m",
              "detectors": [
                  {
                      "detector_description": "Sum of bytes",
                      "function": "sum",
                      "field_name": "bytes"
                  }
              ]
          },
          data_description={
              "time_field": "timestamp",
              "time_format": "epoch_ms"
          },
          analysis_limits={
              "model_memory_limit": "11MB"
          },
          model_plot_config={
              "enabled": True,
              "annotations_enabled": True
          },
          results_index_name="test-job1",
          datafeed_config={
              "indices": [
                  "kibana_sample_data_logs"
              ],
              "query": {
                  "bool": {
                      "must": [
                          {
                              "match_all": {}
                          }
                      ]
                  }
              },
              "runtime_mappings": {
                  "hour_of_day": {
                      "type": "long",
                      "script": {
                          "source": "emit(doc['timestamp'].value.getHour());"
                      }
                  }
              },
              "datafeed_id": "datafeed-test-job1"
          },
      )
  - language: JavaScript
    code: |-
      const response = await client.ml.putJob({
        job_id: "job-01",
        analysis_config: {
          bucket_span: "15m",
          detectors: [
            {
              detector_description: "Sum of bytes",
              function: "sum",
              field_name: "bytes",
            },
          ],
        },
        data_description: {
          time_field: "timestamp",
          time_format: "epoch_ms",
        },
        analysis_limits: {
          model_memory_limit: "11MB",
        },
        model_plot_config: {
          enabled: true,
          annotations_enabled: true,
        },
        results_index_name: "test-job1",
        datafeed_config: {
          indices: ["kibana_sample_data_logs"],
          query: {
            bool: {
              must: [
                {
                  match_all: {},
                },
              ],
            },
          },
          runtime_mappings: {
            hour_of_day: {
              type: "long",
              script: {
                source: "emit(doc['timestamp'].value.getHour());",
              },
            },
          },
          datafeed_id: "datafeed-test-job1",
        },
      });
  - language: Ruby
    code: |-
      response = client.ml.put_job(
        job_id: "job-01",
        body: {
          "analysis_config": {
            "bucket_span": "15m",
            "detectors": [
              {
                "detector_description": "Sum of bytes",
                "function": "sum",
                "field_name": "bytes"
              }
            ]
          },
          "data_description": {
            "time_field": "timestamp",
            "time_format": "epoch_ms"
          },
          "analysis_limits": {
            "model_memory_limit": "11MB"
          },
          "model_plot_config": {
            "enabled": true,
            "annotations_enabled": true
          },
          "results_index_name": "test-job1",
          "datafeed_config": {
            "indices": [
              "kibana_sample_data_logs"
            ],
            "query": {
              "bool": {
                "must": [
                  {
                    "match_all": {}
                  }
                ]
              }
            },
            "runtime_mappings": {
              "hour_of_day": {
                "type": "long",
                "script": {
                  "source": "emit(doc['timestamp'].value.getHour());"
                }
              }
            },
            "datafeed_id": "datafeed-test-job1"
          }
        }
      )
  - language: PHP
    code: |-
      $resp = $client->ml()->putJob([
          "job_id" => "job-01",
          "body" => [
              "analysis_config" => [
                  "bucket_span" => "15m",
                  "detectors" => array(
                      [
                          "detector_description" => "Sum of bytes",
                          "function" => "sum",
                          "field_name" => "bytes",
                      ],
                  ),
              ],
              "data_description" => [
                  "time_field" => "timestamp",
                  "time_format" => "epoch_ms",
              ],
              "analysis_limits" => [
                  "model_memory_limit" => "11MB",
              ],
              "model_plot_config" => [
                  "enabled" => true,
                  "annotations_enabled" => true,
              ],
              "results_index_name" => "test-job1",
              "datafeed_config" => [
                  "indices" => array(
                      "kibana_sample_data_logs",
                  ),
                  "query" => [
                      "bool" => [
                          "must" => array(
                              [
                                  "match_all" => new ArrayObject([]),
                              ],
                          ),
                      ],
                  ],
                  "runtime_mappings" => [
                      "hour_of_day" => [
                          "type" => "long",
                          "script" => [
                              "source" => "emit(doc['timestamp'].value.getHour());",
                          ],
                      ],
                  ],
                  "datafeed_id" => "datafeed-test-job1",
              ],
          ],
      ]);
  - language: curl
    code:
      "curl -X PUT -H \"Authorization: ApiKey $ELASTIC_API_KEY\" -H \"Content-Type: application/json\" -d
      '{\"analysis_config\":{\"bucket_span\":\"15m\",\"detectors\":[{\"detector_description\":\"Sum of
      bytes\",\"function\":\"sum\",\"field_name\":\"bytes\"}]},\"data_description\":{\"time_field\":\"timestamp\",\"time_format\":\
      \"epoch_ms\"},\"analysis_limits\":{\"model_memory_limit\":\"11MB\"},\"model_plot_config\":{\"enabled\":true,\"annotations_ena\
      bled\":true},\"results_index_name\":\"test-job1\",\"datafeed_config\":{\"indices\":[\"kibana_sample_data_logs\"],\"query\":{\
      \"bool\":{\"must\":[{\"match_all\":{}}]}},\"runtime_mappings\":{\"hour_of_day\":{\"type\":\"long\",\"script\":{\"source\":\"e\
      mit(doc['\"'\"'timestamp'\"'\"'].value.getHour());\"}}},\"datafeed_id\":\"datafeed-test-job1\"}}'
      \"$ELASTICSEARCH_URL/_ml/anomaly_detectors/job-01\""
