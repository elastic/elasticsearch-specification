summary: Roles for specific groups
method_request: POST /_security/role_mapping/mapping4
description: >
  Run `POST /_security/role_mapping/mapping4` to match any user where either the username is `esadmin` or the user is in the
  `cn=admin,dc=example,dc=com group`. This example is useful when the group names in your identity management system (such as Active
  Directory, or a SAML Identity Provider) do not have a one-to-one correspondence with the names of roles in Elasticsearch. The role
  mapping is the means by which you link a group name with a role name.
# type: request
value: |-
  {
    "roles": [ "superuser" ],
    "enabled": true,
    "rules": {
      "any": [
        {
          "field": {
            "username": "esadmin"
          }
        },
        {
          "field": {
            "groups": "cn=admins,dc=example,dc=com"
          }
        }
      ]
    }
  }
alternatives:
  - language: Python
    code: |-
      resp = client.security.put_role_mapping(
          name="mapping4",
          roles=[
              "superuser"
          ],
          enabled=True,
          rules={
              "any": [
                  {
                      "field": {
                          "username": "esadmin"
                      }
                  },
                  {
                      "field": {
                          "groups": "cn=admins,dc=example,dc=com"
                      }
                  }
              ]
          },
      )
  - language: JavaScript
    code: |-
      const response = await client.security.putRoleMapping({
        name: "mapping4",
        roles: ["superuser"],
        enabled: true,
        rules: {
          any: [
            {
              field: {
                username: "esadmin",
              },
            },
            {
              field: {
                groups: "cn=admins,dc=example,dc=com",
              },
            },
          ],
        },
      });
  - language: Ruby
    code: |-
      response = client.security.put_role_mapping(
        name: "mapping4",
        body: {
          "roles": [
            "superuser"
          ],
          "enabled": true,
          "rules": {
            "any": [
              {
                "field": {
                  "username": "esadmin"
                }
              },
              {
                "field": {
                  "groups": "cn=admins,dc=example,dc=com"
                }
              }
            ]
          }
        }
      )
  - language: PHP
    code: |-
      $resp = $client->security()->putRoleMapping([
          "name" => "mapping4",
          "body" => [
              "roles" => array(
                  "superuser",
              ),
              "enabled" => true,
              "rules" => [
                  "any" => array(
                      [
                          "field" => [
                              "username" => "esadmin",
                          ],
                      ],
                      [
                          "field" => [
                              "groups" => "cn=admins,dc=example,dc=com",
                          ],
                      ],
                  ),
              ],
          ],
      ]);
  - language: curl
    code:
      "curl -X POST -H \"Authorization: ApiKey $ELASTIC_API_KEY\" -H \"Content-Type: application/json\" -d
      '{\"roles\":[\"superuser\"],\"enabled\":true,\"rules\":{\"any\":[{\"field\":{\"username\":\"esadmin\"}},{\"field\":{\"groups\
      \":\"cn=admins,dc=example,dc=com\"}}]}}' \"$ELASTICSEARCH_URL/_security/role_mapping/mapping4\""
  - language: Java
    code: |
      client.security().putRoleMapping(p -> p
          .enabled(true)
          .name("mapping4")
          .roles("superuser")
          .rules(r -> r
              .any(List.of(RoleMappingRule.of(ro -> ro
                      .field(NamedValue.of("username",List.of(FieldValue.of("esadmin"))
                      ))), RoleMappingRule.of(rol -> rol
                      .field(NamedValue.of("groups",List.of(FieldValue.of("cn=admins,dc=example,dc=com"))
                      )))
                  )
              )
          )
      );
