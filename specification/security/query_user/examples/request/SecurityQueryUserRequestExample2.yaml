summary: Query users with multiple conditions
method_request: POST /_security/_query/user
description: >
  Run `POST /_security/_query/user`. Use a `bool` query to issue complex logical conditions: The `email` must end with
  `example.com`. The user must be enabled. The result will be filtered to only contain users with at least one role that contains
  the substring `other`. The offset to begin the search result is the second (zero-based index) user. The page size of the response
  is two users. The result is sorted by `username` in descending order.
# type: request
value: |-
  {
    "query": {
      "bool": {
        "must": [
          {
            "wildcard": {
              "email": "*example.com" 
            }
          },
          {
            "term": {
              "enabled": true 
            }
          }
        ],
        "filter": [
          {
            "wildcard": {
              "roles": "*other*" 
            }
          }
        ]
      }
    },
    "from": 1, 
    "size": 2, 
    "sort": [
      { "username": { "order": "desc"} } 
    ]
  }
alternatives:
  - language: Python
    code: |-
      resp = client.security.query_user(
          query={
              "bool": {
                  "must": [
                      {
                          "wildcard": {
                              "email": "*example.com"
                          }
                      },
                      {
                          "term": {
                              "enabled": True
                          }
                      }
                  ],
                  "filter": [
                      {
                          "wildcard": {
                              "roles": "*other*"
                          }
                      }
                  ]
              }
          },
          from=1,
          size=2,
          sort=[
              {
                  "username": {
                      "order": "desc"
                  }
              }
          ],
      )
  - language: JavaScript
    code: |-
      const response = await client.security.queryUser({
        query: {
          bool: {
            must: [
              {
                wildcard: {
                  email: "*example.com",
                },
              },
              {
                term: {
                  enabled: true,
                },
              },
            ],
            filter: [
              {
                wildcard: {
                  roles: "*other*",
                },
              },
            ],
          },
        },
        from: 1,
        size: 2,
        sort: [
          {
            username: {
              order: "desc",
            },
          },
        ],
      });
  - language: Ruby
    code: |-
      response = client.security.query_user(
        body: {
          "query": {
            "bool": {
              "must": [
                {
                  "wildcard": {
                    "email": "*example.com"
                  }
                },
                {
                  "term": {
                    "enabled": true
                  }
                }
              ],
              "filter": [
                {
                  "wildcard": {
                    "roles": "*other*"
                  }
                }
              ]
            }
          },
          "from": 1,
          "size": 2,
          "sort": [
            {
              "username": {
                "order": "desc"
              }
            }
          ]
        }
      )
  - language: PHP
    code: |-
      $resp = $client->security()->queryUser([
          "body" => [
              "query" => [
                  "bool" => [
                      "must" => array(
                          [
                              "wildcard" => [
                                  "email" => "*example.com",
                              ],
                          ],
                          [
                              "term" => [
                                  "enabled" => true,
                              ],
                          ],
                      ),
                      "filter" => array(
                          [
                              "wildcard" => [
                                  "roles" => "*other*",
                              ],
                          ],
                      ),
                  ],
              ],
              "from" => 1,
              "size" => 2,
              "sort" => array(
                  [
                      "username" => [
                          "order" => "desc",
                      ],
                  ],
              ),
          ],
      ]);
  - language: curl
    code:
      "curl -X POST -H \"Authorization: ApiKey $ELASTIC_API_KEY\" -H \"Content-Type: application/json\" -d
      '{\"query\":{\"bool\":{\"must\":[{\"wildcard\":{\"email\":\"*example.com\"}},{\"term\":{\"enabled\":true}}],\"filter\":[{\"wi\
      ldcard\":{\"roles\":\"*other*\"}}]}},\"from\":1,\"size\":2,\"sort\":[{\"username\":{\"order\":\"desc\"}}]}'
      \"$ELASTICSEARCH_URL/_security/_query/user\""
