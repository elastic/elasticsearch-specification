summary: Existing pipeline definitions
method_request: POST /_ingest/_simulate
description:
  In this example the index `my-index` has a default pipeline called `my-pipeline` and a final pipeline called
  `my-final-pipeline`. Since both documents are being ingested into `my-index`, both pipelines are run using the pipeline
  definitions that are already in the system.
# type: request
value:
  docs:
    - _id: 123
      _index: my-index
      _source:
        foo: bar
    - _id: 456
      _index: my-index
      _source:
        foo: rab
alternatives:
  - language: Python
    code: |-
      resp = client.simulate.ingest(
          docs=[
              {
                  "_id": 123,
                  "_index": "my-index",
                  "_source": {
                      "foo": "bar"
                  }
              },
              {
                  "_id": 456,
                  "_index": "my-index",
                  "_source": {
                      "foo": "rab"
                  }
              }
          ],
      )
  - language: JavaScript
    code: |-
      const response = await client.simulate.ingest({
        docs: [
          {
            _id: 123,
            _index: "my-index",
            _source: {
              foo: "bar",
            },
          },
          {
            _id: 456,
            _index: "my-index",
            _source: {
              foo: "rab",
            },
          },
        ],
      });
  - language: Ruby
    code: |-
      response = client.simulate.ingest(
        body: {
          "docs": [
            {
              "_id": 123,
              "_index": "my-index",
              "_source": {
                "foo": "bar"
              }
            },
            {
              "_id": 456,
              "_index": "my-index",
              "_source": {
                "foo": "rab"
              }
            }
          ]
        }
      )
  - language: PHP
    code: |-
      $resp = $client->simulate()->ingest([
          "body" => [
              "docs" => array(
                  [
                      "_id" => 123,
                      "_index" => "my-index",
                      "_source" => [
                          "foo" => "bar",
                      ],
                  ],
                  [
                      "_id" => 456,
                      "_index" => "my-index",
                      "_source" => [
                          "foo" => "rab",
                      ],
                  ],
              ),
          ],
      ]);
  - language: curl
    code:
      "curl -X POST -H \"Authorization: ApiKey $ELASTIC_API_KEY\" -H \"Content-Type: application/json\" -d
      '{\"docs\":[{\"_id\":123,\"_index\":\"my-index\",\"_source\":{\"foo\":\"bar\"}},{\"_id\":456,\"_index\":\"my-index\",\"_source\
      \":{\"foo\":\"rab\"}}]}' \"$ELASTICSEARCH_URL/_ingest/_simulate\""
  - language: Java
    code: |
      client.simulate().ingest(i -> i
          .docs(List.of(Document.of(d -> d
                  .id("123")
                  .index("my-index")
                  .source(JsonData.fromJson("{\"foo\":\"bar\"}"))),Document.of(d -> d
                  .id("456")
                  .index("my-index")
                  .source(JsonData.fromJson("{\"foo\":\"rab\"}")))))
      );
