summary: Create an ingest pipeline with metadata.
method_request: PUT /_ingest/pipeline/my-pipeline-id
description: You can use the `_meta` parameter to add arbitrary metadata to a pipeline.
# type: request
value: "{

  \  \"description\" : \"My optional pipeline description\",

  \  \"processors\" : [

  \    {

  \      \"set\" : {

  \        \"description\" : \"My optional processor description\",

  \        \"field\": \"my-keyword-field\",

  \        \"value\": \"foo\"

  \      }

  \    }

  \  ],

  \  \"_meta\": {

  \    \"reason\": \"set my-keyword-field to foo\",

  \    \"serialization\": {

  \      \"class\": \"MyPipeline\",

  \      \"id\": 10

  \    }

  \  }

  }"
alternatives:
  - language: Python
    code: |-
      resp = client.ingest.put_pipeline(
          id="my-pipeline-id",
          description="My optional pipeline description",
          processors=[
              {
                  "set": {
                      "description": "My optional processor description",
                      "field": "my-keyword-field",
                      "value": "foo"
                  }
              }
          ],
          meta={
              "reason": "set my-keyword-field to foo",
              "serialization": {
                  "class": "MyPipeline",
                  "id": 10
              }
          },
      )
  - language: JavaScript
    code: |-
      const response = await client.ingest.putPipeline({
        id: "my-pipeline-id",
        description: "My optional pipeline description",
        processors: [
          {
            set: {
              description: "My optional processor description",
              field: "my-keyword-field",
              value: "foo",
            },
          },
        ],
        meta: {
          reason: "set my-keyword-field to foo",
          serialization: {
            class: "MyPipeline",
            id: 10,
          },
        },
      });
  - language: Ruby
    code: |-
      response = client.ingest.put_pipeline(
        id: "my-pipeline-id",
        body: {
          "description": "My optional pipeline description",
          "processors": [
            {
              "set": {
                "description": "My optional processor description",
                "field": "my-keyword-field",
                "value": "foo"
              }
            }
          ],
          "_meta": {
            "reason": "set my-keyword-field to foo",
            "serialization": {
              "class": "MyPipeline",
              "id": 10
            }
          }
        }
      )
  - language: PHP
    code: |-
      $resp = $client->ingest()->putPipeline([
          "id" => "my-pipeline-id",
          "body" => [
              "description" => "My optional pipeline description",
              "processors" => array(
                  [
                      "set" => [
                          "description" => "My optional processor description",
                          "field" => "my-keyword-field",
                          "value" => "foo",
                      ],
                  ],
              ),
              "_meta" => [
                  "reason" => "set my-keyword-field to foo",
                  "serialization" => [
                      "class" => "MyPipeline",
                      "id" => 10,
                  ],
              ],
          ],
      ]);
  - language: curl
    code:
      'curl -X PUT -H "Authorization: ApiKey $ELASTIC_API_KEY" -H "Content-Type: application/json" -d ''{"description":"My
      optional pipeline description","processors":[{"set":{"description":"My optional processor
      description","field":"my-keyword-field","value":"foo"}}],"_meta":{"reason":"set my-keyword-field to
      foo","serialization":{"class":"MyPipeline","id":10}}}'' "$ELASTICSEARCH_URL/_ingest/pipeline/my-pipeline-id"'
  - language: Java
    code: >
      client.ingest().putPipeline(p -> p
          .meta(Map.of("serialization", JsonData.fromJson("{\"class\":\"MyPipeline\",\"id\":10}"),"reason", JsonData.fromJson("\"set my-keyword-field to foo\"")))
          .description("My optional pipeline description")
          .id("my-pipeline-id")
          .processors(pr -> pr
              .set(s -> s
                  .field("my-keyword-field")
                  .value(JsonData.fromJson("\"foo\""))
                  .description("My optional processor description")
              )
          )
      );
