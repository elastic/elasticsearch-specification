/*
 * Licensed to Elasticsearch B.V. under one or more contributor
 * license agreements. See the NOTICE file distributed with
 * this work for additional information regarding copyright
 * ownership. Elasticsearch B.V. licenses this file to you under
 * the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

import { TaskType } from '@inference/_types/TaskType'
import { UserDefinedValue } from '@spec_utils/UserDefinedValue'
import { RequestBase } from '@_types/Base'
import { Id } from '@_types/common'
import { float, long } from '@_types/Numeric'
import { Duration } from '@_types/Time'

/**
 * Perform inference on the service using the Unified Schema
 * @rest_spec_name inference.unified_inference
 * @availability stack since=8.18.0 stability=stable visibility=public
 * @availability serverless stability=stable visibility=public
 */
export interface Request extends RequestBase {
  path_parts: {
    /**
     * The task type
     */
    task_type?: TaskType
    /**
     * The inference Id
     */
    inference_id: Id
  }
  query_parameters: {
    /**
     * Specifies the amount of time to wait for the inference request to complete.
     * @server_default 30s
     */
    timeout?: Duration
  }
  body: {
    /**
     * A list of objects representing the conversation.
     */
    messages: Array<Message>
    /**
     * The ID of the model to use.
     */
    model?: string
    /**
     * The upper bound limit for the number of tokens that can be generated for a completion request.
     */
    max_completion_tokens?: long
    /**
     * A sequence of strings to control when the model should stop generating additional tokens.
     */
    stop?: Array<string>
    /**
     * The sampling temperature to use.
     */
    temperature?: float
    /**
     * Controls which tool is called by the model.
     */
    tool_choice?: CompletionToolType
    /**
     * A list of tools that the model can call.
     */
    tools?: Array<CompletionTool>
    /**
     * Nucleus sampling, an alternative to sampling with temperature.
     */
    top_p?: float
  }
}

/**
 * @codegen_names string, object
 */
export type CompletionToolType = string | CompletionToolChoice

/**
 * An object style representation of a single portion of a conversation.
 */
export interface ContentObject {
  /**
   * The text content.
   */
  text: string
  /**
   * The type of content.
   */
  type: string
}

/**
 * The function that the model called.
 */
export interface ToolCallFunction {
  /**
   * The arguments to call the function with in JSON format.
   */
  arguments: string
  /**
   * The name of the function to call.
   */
  name: string
}

/**
 * A tool call generated by the model.
 */
export interface ToolCall {
  /**
   * The identifier of the tool call.
   */
  id: Id
  /**
   * The function that the model called.
   */
  function: ToolCallFunction
  /**
   * The type of the tool call.
   */
  type: string
}

/**
 * @codegen_names string, object
 */
export type MessageContent = string | Array<ContentObject>

/**
 * An object representing part of the conversation.
 */
export interface Message {
  /**
   * The content of the message.
   */
  content?: MessageContent
  /**
   * The role of the message author.
   */
  role: string
  /**
   * The tool call that this message is responding to.
   */
  tool_call_id?: Id
  /**
   * The tool calls generated by the model.
   */
  tool_calls?: Array<ToolCall>
}

/**
 * The tool choice function.
 *
 */
export interface CompletionToolChoiceFunction {
  /**
   * The name of the function to call.
   */
  name: string
}

/**
 * Controls which tool is called by the model.
 */
export interface CompletionToolChoice {
  /**
   * The type of the tool.
   */
  type: string
  /**
   * The tool choice function.
   */
  function: CompletionToolChoiceFunction
}

/**
 * The completion tool function definition.
 */
export interface CompletionToolFunction {
  /**
   * A description of what the function does.
   * This is used by the model to choose when and how to call the function.
   */
  description?: string
  /**
   * The name of the function.
   */
  name: string
  /**
   * The parameters the functional accepts. This should be formatted as a JSON object.
   */
  parameters?: UserDefinedValue
  /**
   * Whether to enable schema adherence when generating the function call.
   */
  strict?: boolean
}

/**
 * A list of tools that the model can call.
 */
export interface CompletionTool {
  /**
   * The type of tool.
   */
  type: string
  /**
   * The function definition.
   */
  function: CompletionToolFunction
}
