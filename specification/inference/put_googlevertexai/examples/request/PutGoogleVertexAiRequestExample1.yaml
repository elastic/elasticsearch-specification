summary: A text embedding task
description:
  Run `PUT _inference/text_embedding/google_vertex_ai_embeddings` to create an inference endpoint to perform a
  `text_embedding` task type.
method_request: 'PUT _inference/text_embedding/google_vertex_ai_embeddingss'
# type: "request"
value: |-
  {
      "service": "googlevertexai",
      "service_settings": {
          "service_account_json": "service-account-json",
          "model_id": "model-id",
          "location": "location",
          "project_id": "project-id"
      }
  }
alternatives:
  - language: Python
    code: |-
      resp = client.inference.put(
          task_type="text_embedding",
          inference_id="google_vertex_ai_embeddingss",
          inference_config={
              "service": "googlevertexai",
              "service_settings": {
                  "service_account_json": "service-account-json",
                  "model_id": "model-id",
                  "location": "location",
                  "project_id": "project-id"
              }
          },
      )
  - language: JavaScript
    code: |-
      const response = await client.inference.put({
        task_type: "text_embedding",
        inference_id: "google_vertex_ai_embeddingss",
        inference_config: {
          service: "googlevertexai",
          service_settings: {
            service_account_json: "service-account-json",
            model_id: "model-id",
            location: "location",
            project_id: "project-id",
          },
        },
      });
  - language: Ruby
    code: |-
      response = client.inference.put(
        task_type: "text_embedding",
        inference_id: "google_vertex_ai_embeddingss",
        body: {
          "service": "googlevertexai",
          "service_settings": {
            "service_account_json": "service-account-json",
            "model_id": "model-id",
            "location": "location",
            "project_id": "project-id"
          }
        }
      )
  - language: PHP
    code: |-
      $resp = $client->inference()->put([
          "task_type" => "text_embedding",
          "inference_id" => "google_vertex_ai_embeddingss",
          "body" => [
              "service" => "googlevertexai",
              "service_settings" => [
                  "service_account_json" => "service-account-json",
                  "model_id" => "model-id",
                  "location" => "location",
                  "project_id" => "project-id",
              ],
          ],
      ]);
  - language: curl
    code:
      "curl -X PUT -H \"Authorization: ApiKey $ELASTIC_API_KEY\" -H \"Content-Type: application/json\" -d
      '{\"service\":\"googlevertexai\",\"service_settings\":{\"service_account_json\":\"service-account-json\",\"model_id\":\"model\
      -id\",\"location\":\"location\",\"project_id\":\"project-id\"}}'
      \"$ELASTICSEARCH_URL/_inference/text_embedding/google_vertex_ai_embeddingss\""
  - language: Java
    code: >
      client.inference().put(p -> p
          .inferenceId("google_vertex_ai_embeddingss")
          .taskType(TaskType.TextEmbedding)
          .inferenceConfig(i -> i
              .service("googlevertexai")
              .serviceSettings(JsonData.fromJson("{\"service_account_json\":\"service-account-json\",\"model_id\":\"model-id\",\"location\":\"location\",\"project_id\":\"project-id\"}"))
          )
      );
