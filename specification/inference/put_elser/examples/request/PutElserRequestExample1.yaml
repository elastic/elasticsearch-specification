summary: A sparse embedding task
description:
  Run `PUT _inference/sparse_embedding/my-elser-model` to create an inference endpoint that performs a `sparse_embedding`
  task. The request will automatically download the ELSER model if it isn't already downloaded and then deploy the model.
method_request: 'PUT _inference/sparse_embedding/my-elser-model'
# type: "request"
value: |-
  {
      "service": "elser",
      "service_settings": {
          "num_allocations": 1,
          "num_threads": 1
      }
  }
alternatives:
  - language: Python
    code: |-
      resp = client.inference.put(
          task_type="sparse_embedding",
          inference_id="my-elser-model",
          inference_config={
              "service": "elser",
              "service_settings": {
                  "num_allocations": 1,
                  "num_threads": 1
              }
          },
      )
  - language: JavaScript
    code: |-
      const response = await client.inference.put({
        task_type: "sparse_embedding",
        inference_id: "my-elser-model",
        inference_config: {
          service: "elser",
          service_settings: {
            num_allocations: 1,
            num_threads: 1,
          },
        },
      });
  - language: Ruby
    code: |-
      response = client.inference.put(
        task_type: "sparse_embedding",
        inference_id: "my-elser-model",
        body: {
          "service": "elser",
          "service_settings": {
            "num_allocations": 1,
            "num_threads": 1
          }
        }
      )
  - language: PHP
    code: |-
      $resp = $client->inference()->put([
          "task_type" => "sparse_embedding",
          "inference_id" => "my-elser-model",
          "body" => [
              "service" => "elser",
              "service_settings" => [
                  "num_allocations" => 1,
                  "num_threads" => 1,
              ],
          ],
      ]);
  - language: curl
    code:
      'curl -X PUT -H "Authorization: ApiKey $ELASTIC_API_KEY" -H "Content-Type: application/json" -d
      ''{"service":"elser","service_settings":{"num_allocations":1,"num_threads":1}}''
      "$ELASTICSEARCH_URL/_inference/sparse_embedding/my-elser-model"'
  - language: Java
    code: |
      client.inference().put(p -> p
          .inferenceId("my-elser-model")
          .taskType(TaskType.SparseEmbedding)
          .inferenceConfig(i -> i
              .service("elser")
              .serviceSettings(JsonData.fromJson("{\"num_allocations\":1,\"num_threads\":1}"))
          )
      );
