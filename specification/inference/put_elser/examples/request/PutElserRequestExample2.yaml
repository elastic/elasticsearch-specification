summary: Adaptive allocations
description:
  Run `PUT _inference/sparse_embedding/my-elser-model` to create an inference endpoint that performs a `sparse_embedding`
  task with adaptive allocations. When adaptive allocations are enabled, the number of allocations of the model is set automatically
  based on the current load.
method_request: 'PUT _inference/sparse_embedding/my-elser-model'
# type: "request"
value: |-
  {
      "service": "elser",
      "service_settings": {
          "adaptive_allocations": {
              "enabled": true,
              "min_number_of_allocations": 3,
              "max_number_of_allocations": 10
          },
          "num_threads": 1
      }
  }
alternatives:
  - language: Python
    code: |-
      resp = client.inference.put(
          task_type="sparse_embedding",
          inference_id="my-elser-model",
          inference_config={
              "service": "elser",
              "service_settings": {
                  "adaptive_allocations": {
                      "enabled": True,
                      "min_number_of_allocations": 3,
                      "max_number_of_allocations": 10
                  },
                  "num_threads": 1
              }
          },
      )
  - language: JavaScript
    code: |-
      const response = await client.inference.put({
        task_type: "sparse_embedding",
        inference_id: "my-elser-model",
        inference_config: {
          service: "elser",
          service_settings: {
            adaptive_allocations: {
              enabled: true,
              min_number_of_allocations: 3,
              max_number_of_allocations: 10,
            },
            num_threads: 1,
          },
        },
      });
  - language: Ruby
    code: |-
      response = client.inference.put(
        task_type: "sparse_embedding",
        inference_id: "my-elser-model",
        body: {
          "service": "elser",
          "service_settings": {
            "adaptive_allocations": {
              "enabled": true,
              "min_number_of_allocations": 3,
              "max_number_of_allocations": 10
            },
            "num_threads": 1
          }
        }
      )
  - language: PHP
    code: |-
      $resp = $client->inference()->put([
          "task_type" => "sparse_embedding",
          "inference_id" => "my-elser-model",
          "body" => [
              "service" => "elser",
              "service_settings" => [
                  "adaptive_allocations" => [
                      "enabled" => true,
                      "min_number_of_allocations" => 3,
                      "max_number_of_allocations" => 10,
                  ],
                  "num_threads" => 1,
              ],
          ],
      ]);
  - language: curl
    code:
      "curl -X PUT -H \"Authorization: ApiKey $ELASTIC_API_KEY\" -H \"Content-Type: application/json\" -d
      '{\"service\":\"elser\",\"service_settings\":{\"adaptive_allocations\":{\"enabled\":true,\"min_number_of_allocations\":3,\"ma\
      x_number_of_allocations\":10},\"num_threads\":1}}' \"$ELASTICSEARCH_URL/_inference/sparse_embedding/my-elser-model\""
  - language: Java
    code: >
      client.inference().put(p -> p
          .inferenceId("my-elser-model")
          .taskType(TaskType.SparseEmbedding)
          .inferenceConfig(i -> i
              .service("elser")
              .serviceSettings(JsonData.fromJson("{\"adaptive_allocations\":{\"enabled\":true,\"min_number_of_allocations\":3,\"max_number_of_allocations\":10},\"num_threads\":1}"))
          )
      );
