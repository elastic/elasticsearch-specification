summary: Restore with rename pattern
method_request: POST /_snapshot/my_repository/snapshot_2/_restore?wait_for_completion=true
description: >
  Run `POST /_snapshot/my_repository/snapshot_2/_restore?wait_for_completion=true`. It restores `index_1` and `index_2` from
  `snapshot_2`. The `rename_pattern` and `rename_replacement` parameters indicate any index matching the regular expression
  `index_(.+)` will be renamed using the pattern `restored_index_$1`. For example, `index_1` will be renamed to `restored_index_1`.
# type: request
value: "{

  \  \"indices\": \"index_1,index_2\",

  \  \"ignore_unavailable\": true,

  \  \"include_global_state\": false,

  \  \"rename_pattern\": \"index_(.+)\",

  \  \"rename_replacement\": \"restored_index_$1\",

  \  \"include_aliases\": false

  }"
alternatives:
  - language: Python
    code: |-
      resp = client.snapshot.restore(
          repository="my_repository",
          snapshot="snapshot_2",
          wait_for_completion=True,
          indices="index_1,index_2",
          ignore_unavailable=True,
          include_global_state=False,
          rename_pattern="index_(.+)",
          rename_replacement="restored_index_$1",
          include_aliases=False,
      )
  - language: JavaScript
    code: |-
      const response = await client.snapshot.restore({
        repository: "my_repository",
        snapshot: "snapshot_2",
        wait_for_completion: "true",
        indices: "index_1,index_2",
        ignore_unavailable: true,
        include_global_state: false,
        rename_pattern: "index_(.+)",
        rename_replacement: "restored_index_$1",
        include_aliases: false,
      });
  - language: Ruby
    code: |-
      response = client.snapshot.restore(
        repository: "my_repository",
        snapshot: "snapshot_2",
        wait_for_completion: "true",
        body: {
          "indices": "index_1,index_2",
          "ignore_unavailable": true,
          "include_global_state": false,
          "rename_pattern": "index_(.+)",
          "rename_replacement": "restored_index_$1",
          "include_aliases": false
        }
      )
  - language: PHP
    code: |-
      $resp = $client->snapshot()->restore([
          "repository" => "my_repository",
          "snapshot" => "snapshot_2",
          "wait_for_completion" => "true",
          "body" => [
              "indices" => "index_1,index_2",
              "ignore_unavailable" => true,
              "include_global_state" => false,
              "rename_pattern" => "index_(.+)",
              "rename_replacement" => "restored_index_$1",
              "include_aliases" => false,
          ],
      ]);
  - language: curl
    code:
      "curl -X POST -H \"Authorization: ApiKey $ELASTIC_API_KEY\" -H \"Content-Type: application/json\" -d
      '{\"indices\":\"index_1,index_2\",\"ignore_unavailable\":true,\"include_global_state\":false,\"rename_pattern\":\"index_(.+)\
      \",\"rename_replacement\":\"restored_index_$1\",\"include_aliases\":false}'
      \"$ELASTICSEARCH_URL/_snapshot/my_repository/snapshot_2/_restore?wait_for_completion=true\""
  - language: Java
    code: |
      client.snapshot().restore(r -> r
          .ignoreUnavailable(true)
          .includeAliases(false)
          .includeGlobalState(false)
          .indices("index_1,index_2")
          .renamePattern("index_(.+)")
          .renameReplacement("restored_index_$1")
          .repository("my_repository")
          .snapshot("snapshot_2")
          .waitForCompletion(true)
      );
