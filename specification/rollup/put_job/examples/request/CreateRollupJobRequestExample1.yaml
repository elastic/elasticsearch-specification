# summary:
method_request: PUT _rollup/job/sensor
description: >
  Run `PUT _rollup/job/sensor` to create a rollup job that targets the `sensor-*` index pattern. This configuration enables date
  histograms to be used on the `timestamp` field and terms aggregations to be used on the `node` field. This configuration defines
  metrics over two fields: `temperature` and `voltage`. For the `temperature` field, it collects the `min`, `max`, and `sum` of the
  temperature. For `voltage`, it collects the `average`.
# type: request
value: "{

  \  \"index_pattern\": \"sensor-*\",

  \  \"rollup_index\": \"sensor_rollup\",

  \  \"cron\": \"*/30 * * * * ?\",

  \  \"page_size\": 1000,

  \  \"groups\": {

  \    \"date_histogram\": {

  \      \"field\": \"timestamp\",

  \      \"fixed_interval\": \"1h\",

  \      \"delay\": \"7d\"

  \    },

  \    \"terms\": {

  \      \"fields\": [ \"node\" ]

  \    }

  \  },

  \  \"metrics\": [

  \      {

  \      \"field\": \"temperature\",

  \      \"metrics\": [ \"min\", \"max\", \"sum\" ]

  \    },

  \    {

  \      \"field\": \"voltage\",

  \      \"metrics\": [ \"avg\" ]

  \    }

  \  ]

  }"
alternatives:
  - language: Python
    code: |-
      resp = client.rollup.put_job(
          id="sensor",
          index_pattern="sensor-*",
          rollup_index="sensor_rollup",
          cron="*/30 * * * * ?",
          page_size=1000,
          groups={
              "date_histogram": {
                  "field": "timestamp",
                  "fixed_interval": "1h",
                  "delay": "7d"
              },
              "terms": {
                  "fields": [
                      "node"
                  ]
              }
          },
          metrics=[
              {
                  "field": "temperature",
                  "metrics": [
                      "min",
                      "max",
                      "sum"
                  ]
              },
              {
                  "field": "voltage",
                  "metrics": [
                      "avg"
                  ]
              }
          ],
      )
  - language: JavaScript
    code: |-
      const response = await client.rollup.putJob({
        id: "sensor",
        index_pattern: "sensor-*",
        rollup_index: "sensor_rollup",
        cron: "*/30 * * * * ?",
        page_size: 1000,
        groups: {
          date_histogram: {
            field: "timestamp",
            fixed_interval: "1h",
            delay: "7d",
          },
          terms: {
            fields: ["node"],
          },
        },
        metrics: [
          {
            field: "temperature",
            metrics: ["min", "max", "sum"],
          },
          {
            field: "voltage",
            metrics: ["avg"],
          },
        ],
      });
  - language: Ruby
    code: |-
      response = client.rollup.put_job(
        id: "sensor",
        body: {
          "index_pattern": "sensor-*",
          "rollup_index": "sensor_rollup",
          "cron": "*/30 * * * * ?",
          "page_size": 1000,
          "groups": {
            "date_histogram": {
              "field": "timestamp",
              "fixed_interval": "1h",
              "delay": "7d"
            },
            "terms": {
              "fields": [
                "node"
              ]
            }
          },
          "metrics": [
            {
              "field": "temperature",
              "metrics": [
                "min",
                "max",
                "sum"
              ]
            },
            {
              "field": "voltage",
              "metrics": [
                "avg"
              ]
            }
          ]
        }
      )
  - language: PHP
    code: |-
      $resp = $client->rollup()->putJob([
          "id" => "sensor",
          "body" => [
              "index_pattern" => "sensor-*",
              "rollup_index" => "sensor_rollup",
              "cron" => "*/30 * * * * ?",
              "page_size" => 1000,
              "groups" => [
                  "date_histogram" => [
                      "field" => "timestamp",
                      "fixed_interval" => "1h",
                      "delay" => "7d",
                  ],
                  "terms" => [
                      "fields" => array(
                          "node",
                      ),
                  ],
              ],
              "metrics" => array(
                  [
                      "field" => "temperature",
                      "metrics" => array(
                          "min",
                          "max",
                          "sum",
                      ),
                  ],
                  [
                      "field" => "voltage",
                      "metrics" => array(
                          "avg",
                      ),
                  ],
              ),
          ],
      ]);
  - language: curl
    code:
      "curl -X PUT -H \"Authorization: ApiKey $ELASTIC_API_KEY\" -H \"Content-Type: application/json\" -d
      '{\"index_pattern\":\"sensor-*\",\"rollup_index\":\"sensor_rollup\",\"cron\":\"*/30 * * * *
      ?\",\"page_size\":1000,\"groups\":{\"date_histogram\":{\"field\":\"timestamp\",\"fixed_interval\":\"1h\",\"delay\":\"7d\"},\"\
      terms\":{\"fields\":[\"node\"]}},\"metrics\":[{\"field\":\"temperature\",\"metrics\":[\"min\",\"max\",\"sum\"]},{\"field\":\"\
      voltage\",\"metrics\":[\"avg\"]}]}' \"$ELASTICSEARCH_URL/_rollup/job/sensor\""
