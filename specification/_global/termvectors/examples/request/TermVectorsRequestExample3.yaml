summary: Terms filtering
method_request: GET /imdb/_termvectors
description: >
  Run `GET /imdb/_termvectors` to filter the terms returned based on their tf-idf scores. It returns the three most "interesting"
  keywords from the artificial document having the given "plot" field value. Notice that the keyword "Tony" or any stop words are
  not part of the response, as their tf-idf must be too low.
# type: request
value: |-
  {
    "doc": {
      "plot": "When wealthy industrialist Tony Stark is forced to build an armored suit after a life-threatening incident, he ultimately decides to use its technology to fight against evil."
    },
    "term_statistics": true,
    "field_statistics": true,
    "positions": false,
    "offsets": false,
    "filter": {
      "max_num_terms": 3,
      "min_term_freq": 1,
      "min_doc_freq": 1
    }
  }
alternatives:
  - language: Python
    code: >-
      resp = client.termvectors(
          index="imdb",
          doc={
              "plot": "When wealthy industrialist Tony Stark is forced to build an armored suit after a life-threatening incident, he ultimately decides to use its technology to fight against evil."
          },
          term_statistics=True,
          field_statistics=True,
          positions=False,
          offsets=False,
          filter={
              "max_num_terms": 3,
              "min_term_freq": 1,
              "min_doc_freq": 1
          },
      )
  - language: JavaScript
    code: >-
      const response = await client.termvectors({
        index: "imdb",
        doc: {
          plot: "When wealthy industrialist Tony Stark is forced to build an armored suit after a life-threatening incident, he ultimately decides to use its technology to fight against evil.",
        },
        term_statistics: true,
        field_statistics: true,
        positions: false,
        offsets: false,
        filter: {
          max_num_terms: 3,
          min_term_freq: 1,
          min_doc_freq: 1,
        },
      });
  - language: Ruby
    code: >-
      response = client.termvectors(
        index: "imdb",
        body: {
          "doc": {
            "plot": "When wealthy industrialist Tony Stark is forced to build an armored suit after a life-threatening incident, he ultimately decides to use its technology to fight against evil."
          },
          "term_statistics": true,
          "field_statistics": true,
          "positions": false,
          "offsets": false,
          "filter": {
            "max_num_terms": 3,
            "min_term_freq": 1,
            "min_doc_freq": 1
          }
        }
      )
  - language: PHP
    code: >-
      $resp = $client->termvectors([
          "index" => "imdb",
          "body" => [
              "doc" => [
                  "plot" => "When wealthy industrialist Tony Stark is forced to build an armored suit after a life-threatening incident, he ultimately decides to use its technology to fight against evil.",
              ],
              "term_statistics" => true,
              "field_statistics" => true,
              "positions" => false,
              "offsets" => false,
              "filter" => [
                  "max_num_terms" => 3,
                  "min_term_freq" => 1,
                  "min_doc_freq" => 1,
              ],
          ],
      ]);
  - language: curl
    code:
      "curl -X GET -H \"Authorization: ApiKey $ELASTIC_API_KEY\" -H \"Content-Type: application/json\" -d '{\"doc\":{\"plot\":\"When
      wealthy industrialist Tony Stark is forced to build an armored suit after a life-threatening incident, he ultimately decides
      to use its technology to fight against
      evil.\"},\"term_statistics\":true,\"field_statistics\":true,\"positions\":false,\"offsets\":false,\"filter\":{\"max_num_terms\
      \":3,\"min_term_freq\":1,\"min_doc_freq\":1}}' \"$ELASTICSEARCH_URL/imdb/_termvectors\""
  - language: Java
    code: >
      client.termvectors(t -> t
          .doc(JsonData.fromJson("{\"plot\":\"When wealthy industrialist Tony Stark is forced to build an armored suit after a life-threatening incident, he ultimately decides to use its technology to fight against evil.\"}"))
          .fieldStatistics(true)
          .filter(f -> f
              .maxNumTerms(3)
              .minDocFreq(1)
              .minTermFreq(1)
          )
          .index("imdb")
          .offsets(false)
          .positions(false)
          .termStatistics(true)
      );
