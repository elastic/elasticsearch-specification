{
  "_info": {
    "hash": "843b724",
    "license": {
      "name": "Apache 2.0",
      "url": "https://github.com/elastic/elasticsearch-specification/blob/master/LICENSE"
    },
    "title": "Elasticsearch Request & Response Specification",
    "version": "main"
  },
  "endpoints": [
    {
      "accept": [
        "application/json"
      ],
      "description": "Deletes an async search by ID. If the search is still running, the search request will be cancelled. Otherwise, the saved search results are deleted.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/async-search.html",
      "name": "async_search.delete",
      "request": {
        "name": "Request",
        "namespace": "async_search.delete"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "async_search.delete"
      },
      "since": "7.7.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "DELETE"
          ],
          "path": "/_async_search/{id}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Retrieves the results of a previously submitted async search request given its ID.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/async-search.html",
      "name": "async_search.get",
      "request": {
        "name": "Request",
        "namespace": "async_search.get"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "async_search.get"
      },
      "since": "7.7.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/_async_search/{id}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Retrieves the status of a previously submitted async search request given its ID.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/async-search.html",
      "name": "async_search.status",
      "request": {
        "name": "Request",
        "namespace": "async_search.status"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "async_search.status"
      },
      "since": "7.11.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/_async_search/status/{id}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Executes a search request asynchronously.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/async-search.html",
      "name": "async_search.submit",
      "request": {
        "name": "Request",
        "namespace": "async_search.submit"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "async_search.submit"
      },
      "since": "7.7.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "POST"
          ],
          "path": "/_async_search"
        },
        {
          "methods": [
            "POST"
          ],
          "path": "/{index}/_async_search"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Deletes an autoscaling policy. Designed for indirect use by ECE/ESS and ECK. Direct use is not supported.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/autoscaling-delete-autoscaling-policy.html",
      "name": "autoscaling.delete_autoscaling_policy",
      "request": {
        "name": "Request",
        "namespace": "autoscaling.delete_autoscaling_policy"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "autoscaling.delete_autoscaling_policy"
      },
      "since": "7.11.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "DELETE"
          ],
          "path": "/_autoscaling/policy/{name}"
        }
      ],
      "visibility": "private"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Gets the current autoscaling capacity based on the configured autoscaling policy. Designed for indirect use by ECE/ESS and ECK. Direct use is not supported.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/autoscaling-get-autoscaling-capacity.html",
      "name": "autoscaling.get_autoscaling_capacity",
      "request": {
        "name": "Request",
        "namespace": "autoscaling.get_autoscaling_capacity"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "autoscaling.get_autoscaling_capacity"
      },
      "since": "7.11.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/_autoscaling/capacity"
        }
      ],
      "visibility": "private"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Retrieves an autoscaling policy. Designed for indirect use by ECE/ESS and ECK. Direct use is not supported.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/autoscaling-get-autoscaling-policy.html",
      "name": "autoscaling.get_autoscaling_policy",
      "request": {
        "name": "Request",
        "namespace": "autoscaling.get_autoscaling_policy"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "autoscaling.get_autoscaling_policy"
      },
      "since": "7.11.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/_autoscaling/policy/{name}"
        }
      ],
      "visibility": "private"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Creates a new autoscaling policy. Designed for indirect use by ECE/ESS and ECK. Direct use is not supported.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/autoscaling-put-autoscaling-policy.html",
      "name": "autoscaling.put_autoscaling_policy",
      "request": {
        "name": "Request",
        "namespace": "autoscaling.put_autoscaling_policy"
      },
      "requestBodyRequired": true,
      "response": {
        "name": "Response",
        "namespace": "autoscaling.put_autoscaling_policy"
      },
      "since": "7.11.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "PUT"
          ],
          "path": "/_autoscaling/policy/{name}"
        }
      ],
      "visibility": "private"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/x-ndjson"
      ],
      "description": "Allows to perform multiple index/update/delete operations in a single request.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/docs-bulk.html",
      "name": "bulk",
      "request": {
        "name": "Request",
        "namespace": "_global.bulk"
      },
      "requestBodyRequired": true,
      "response": {
        "name": "Response",
        "namespace": "_global.bulk"
      },
      "since": "0.0.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "POST",
            "PUT"
          ],
          "path": "/_bulk"
        },
        {
          "methods": [
            "POST",
            "PUT"
          ],
          "path": "/{index}/_bulk"
        },
        {
          "methods": [
            "POST",
            "PUT"
          ],
          "path": "/{index}/{type}/_bulk"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "text/plain",
        "application/json"
      ],
      "description": "Shows information about currently configured aliases to indices including filter and routing infos.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/cat-alias.html",
      "name": "cat.aliases",
      "request": {
        "name": "Request",
        "namespace": "cat.aliases"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "cat.aliases"
      },
      "since": "0.0.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/_cat/aliases"
        },
        {
          "methods": [
            "GET"
          ],
          "path": "/_cat/aliases/{name}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "text/plain",
        "application/json"
      ],
      "description": "Provides a snapshot of how many shards are allocated to each data node and how much disk space they are using.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/cat-allocation.html",
      "name": "cat.allocation",
      "request": {
        "name": "Request",
        "namespace": "cat.allocation"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "cat.allocation"
      },
      "since": "0.0.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/_cat/allocation"
        },
        {
          "methods": [
            "GET"
          ],
          "path": "/_cat/allocation/{node_id}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "text/plain",
        "application/json"
      ],
      "description": "Provides quick access to the document count of the entire cluster, or individual indices.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/cat-count.html",
      "name": "cat.count",
      "request": {
        "name": "Request",
        "namespace": "cat.count"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "cat.count"
      },
      "since": "0.0.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/_cat/count"
        },
        {
          "methods": [
            "GET"
          ],
          "path": "/_cat/count/{index}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "text/plain",
        "application/json"
      ],
      "description": "Shows how much heap memory is currently being used by fielddata on every data node in the cluster.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/cat-fielddata.html",
      "name": "cat.fielddata",
      "request": {
        "name": "Request",
        "namespace": "cat.fielddata"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "cat.fielddata"
      },
      "since": "0.0.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/_cat/fielddata"
        },
        {
          "methods": [
            "GET"
          ],
          "path": "/_cat/fielddata/{fields}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "text/plain",
        "application/json"
      ],
      "description": "Returns a concise representation of the cluster health.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/cat-health.html",
      "name": "cat.health",
      "request": {
        "name": "Request",
        "namespace": "cat.health"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "cat.health"
      },
      "since": "0.0.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/_cat/health"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "text/plain"
      ],
      "description": "Returns help for the Cat APIs.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/cat.html",
      "name": "cat.help",
      "request": {
        "name": "Request",
        "namespace": "cat.help"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "cat.help"
      },
      "since": "0.0.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/_cat"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "text/plain",
        "application/json"
      ],
      "description": "Returns information about indices: number of primaries and replicas, document counts, disk size, ...",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/cat-indices.html",
      "name": "cat.indices",
      "request": {
        "name": "Request",
        "namespace": "cat.indices"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "cat.indices"
      },
      "since": "0.0.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/_cat/indices"
        },
        {
          "methods": [
            "GET"
          ],
          "path": "/_cat/indices/{index}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "text/plain",
        "application/json"
      ],
      "description": "Returns information about the master node.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/cat-master.html",
      "name": "cat.master",
      "request": {
        "name": "Request",
        "namespace": "cat.master"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "cat.master"
      },
      "since": "0.0.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/_cat/master"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "text/plain",
        "application/json"
      ],
      "description": "Gets configuration and usage information about data frame analytics jobs.",
      "docUrl": "http://www.elastic.co/guide/en/elasticsearch/reference/current/cat-dfanalytics.html",
      "name": "cat.ml_data_frame_analytics",
      "request": {
        "name": "Request",
        "namespace": "cat.ml_data_frame_analytics"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "cat.ml_data_frame_analytics"
      },
      "since": "7.7.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/_cat/ml/data_frame/analytics"
        },
        {
          "methods": [
            "GET"
          ],
          "path": "/_cat/ml/data_frame/analytics/{id}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "text/plain",
        "application/json"
      ],
      "description": "Gets configuration and usage information about datafeeds.",
      "docUrl": "http://www.elastic.co/guide/en/elasticsearch/reference/current/cat-datafeeds.html",
      "name": "cat.ml_datafeeds",
      "request": {
        "name": "Request",
        "namespace": "cat.ml_datafeeds"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "cat.ml_datafeeds"
      },
      "since": "7.7.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/_cat/ml/datafeeds"
        },
        {
          "methods": [
            "GET"
          ],
          "path": "/_cat/ml/datafeeds/{datafeed_id}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "text/plain",
        "application/json"
      ],
      "description": "Gets configuration and usage information about anomaly detection jobs.",
      "docUrl": "http://www.elastic.co/guide/en/elasticsearch/reference/current/cat-anomaly-detectors.html",
      "name": "cat.ml_jobs",
      "request": {
        "name": "Request",
        "namespace": "cat.ml_jobs"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "cat.ml_jobs"
      },
      "since": "7.7.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/_cat/ml/anomaly_detectors"
        },
        {
          "methods": [
            "GET"
          ],
          "path": "/_cat/ml/anomaly_detectors/{job_id}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "text/plain",
        "application/json"
      ],
      "description": "Gets configuration and usage information about inference trained models.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/cat-trained-model.html",
      "name": "cat.ml_trained_models",
      "request": {
        "name": "Request",
        "namespace": "cat.ml_trained_models"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "cat.ml_trained_models"
      },
      "since": "7.7.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/_cat/ml/trained_models"
        },
        {
          "methods": [
            "GET"
          ],
          "path": "/_cat/ml/trained_models/{model_id}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "text/plain",
        "application/json"
      ],
      "description": "Returns information about custom node attributes.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/cat-nodeattrs.html",
      "name": "cat.nodeattrs",
      "request": {
        "name": "Request",
        "namespace": "cat.nodeattrs"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "cat.nodeattrs"
      },
      "since": "0.0.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/_cat/nodeattrs"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "text/plain",
        "application/json"
      ],
      "description": "Returns basic statistics about performance of cluster nodes.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/cat-nodes.html",
      "name": "cat.nodes",
      "request": {
        "name": "Request",
        "namespace": "cat.nodes"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "cat.nodes"
      },
      "since": "0.0.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/_cat/nodes"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "text/plain",
        "application/json"
      ],
      "description": "Returns a concise representation of the cluster pending tasks.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/cat-pending-tasks.html",
      "name": "cat.pending_tasks",
      "request": {
        "name": "Request",
        "namespace": "cat.pending_tasks"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "cat.pending_tasks"
      },
      "since": "0.0.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/_cat/pending_tasks"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "text/plain",
        "application/json"
      ],
      "description": "Returns information about installed plugins across nodes node.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/cat-plugins.html",
      "name": "cat.plugins",
      "request": {
        "name": "Request",
        "namespace": "cat.plugins"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "cat.plugins"
      },
      "since": "0.0.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/_cat/plugins"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "text/plain",
        "application/json"
      ],
      "description": "Returns information about index shard recoveries, both on-going completed.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/cat-recovery.html",
      "name": "cat.recovery",
      "request": {
        "name": "Request",
        "namespace": "cat.recovery"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "cat.recovery"
      },
      "since": "0.0.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/_cat/recovery"
        },
        {
          "methods": [
            "GET"
          ],
          "path": "/_cat/recovery/{index}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "text/plain",
        "application/json"
      ],
      "description": "Returns information about snapshot repositories registered in the cluster.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/cat-repositories.html",
      "name": "cat.repositories",
      "request": {
        "name": "Request",
        "namespace": "cat.repositories"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "cat.repositories"
      },
      "since": "2.1.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/_cat/repositories"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "text/plain",
        "application/json"
      ],
      "description": "Provides low-level information about the segments in the shards of an index.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/cat-segments.html",
      "name": "cat.segments",
      "request": {
        "name": "Request",
        "namespace": "cat.segments"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "cat.segments"
      },
      "since": "0.0.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/_cat/segments"
        },
        {
          "methods": [
            "GET"
          ],
          "path": "/_cat/segments/{index}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "text/plain",
        "application/json"
      ],
      "description": "Provides a detailed view of shard allocation on nodes.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/cat-shards.html",
      "name": "cat.shards",
      "request": {
        "name": "Request",
        "namespace": "cat.shards"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "cat.shards"
      },
      "since": "0.0.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/_cat/shards"
        },
        {
          "methods": [
            "GET"
          ],
          "path": "/_cat/shards/{index}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "text/plain",
        "application/json"
      ],
      "description": "Returns all snapshots in a specific repository.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/cat-snapshots.html",
      "name": "cat.snapshots",
      "request": {
        "name": "Request",
        "namespace": "cat.snapshots"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "cat.snapshots"
      },
      "since": "2.1.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/_cat/snapshots"
        },
        {
          "methods": [
            "GET"
          ],
          "path": "/_cat/snapshots/{repository}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "text/plain",
        "application/json"
      ],
      "description": "Returns information about the tasks currently executing on one or more nodes in the cluster.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/tasks.html",
      "name": "cat.tasks",
      "request": {
        "name": "Request",
        "namespace": "cat.tasks"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "cat.tasks"
      },
      "since": "5.0.0",
      "stability": "experimental",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/_cat/tasks"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "text/plain",
        "application/json"
      ],
      "description": "Returns information about existing templates.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/cat-templates.html",
      "name": "cat.templates",
      "request": {
        "name": "Request",
        "namespace": "cat.templates"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "cat.templates"
      },
      "since": "5.2.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/_cat/templates"
        },
        {
          "methods": [
            "GET"
          ],
          "path": "/_cat/templates/{name}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "text/plain",
        "application/json"
      ],
      "description": "Returns cluster-wide thread pool statistics per node.\nBy default the active, queue and rejected statistics are returned for all thread pools.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/cat-thread-pool.html",
      "name": "cat.thread_pool",
      "request": {
        "name": "Request",
        "namespace": "cat.thread_pool"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "cat.thread_pool"
      },
      "since": "0.0.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/_cat/thread_pool"
        },
        {
          "methods": [
            "GET"
          ],
          "path": "/_cat/thread_pool/{thread_pool_patterns}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "text/plain",
        "application/json"
      ],
      "description": "Gets configuration and usage information about transforms.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/cat-transforms.html",
      "name": "cat.transforms",
      "request": {
        "name": "Request",
        "namespace": "cat.transforms"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "cat.transforms"
      },
      "since": "7.7.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/_cat/transforms"
        },
        {
          "methods": [
            "GET"
          ],
          "path": "/_cat/transforms/{transform_id}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Deletes auto-follow patterns.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/ccr-delete-auto-follow-pattern.html",
      "name": "ccr.delete_auto_follow_pattern",
      "request": {
        "name": "Request",
        "namespace": "ccr.delete_auto_follow_pattern"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "ccr.delete_auto_follow_pattern"
      },
      "since": "6.5.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "DELETE"
          ],
          "path": "/_ccr/auto_follow/{name}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Creates a new follower index configured to follow the referenced leader index.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/ccr-put-follow.html",
      "name": "ccr.follow",
      "request": {
        "name": "Request",
        "namespace": "ccr.follow"
      },
      "requestBodyRequired": true,
      "response": {
        "name": "Response",
        "namespace": "ccr.follow"
      },
      "since": "6.5.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "PUT"
          ],
          "path": "/{index}/_ccr/follow"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Retrieves information about all follower indices, including parameters and status for each follower index",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/ccr-get-follow-info.html",
      "name": "ccr.follow_info",
      "request": {
        "name": "Request",
        "namespace": "ccr.follow_info"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "ccr.follow_info"
      },
      "since": "6.7.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/{index}/_ccr/info"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Retrieves follower stats. return shard-level stats about the following tasks associated with each shard for the specified indices.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/ccr-get-follow-stats.html",
      "name": "ccr.follow_stats",
      "request": {
        "name": "Request",
        "namespace": "ccr.follow_stats"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "ccr.follow_stats"
      },
      "since": "6.5.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/{index}/_ccr/stats"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Removes the follower retention leases from the leader.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/ccr-post-forget-follower.html",
      "name": "ccr.forget_follower",
      "request": {
        "name": "Request",
        "namespace": "ccr.forget_follower"
      },
      "requestBodyRequired": true,
      "response": {
        "name": "Response",
        "namespace": "ccr.forget_follower"
      },
      "since": "6.7.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "POST"
          ],
          "path": "/{index}/_ccr/forget_follower"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Gets configured auto-follow patterns. Returns the specified auto-follow pattern collection.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/ccr-get-auto-follow-pattern.html",
      "name": "ccr.get_auto_follow_pattern",
      "request": {
        "name": "Request",
        "namespace": "ccr.get_auto_follow_pattern"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "ccr.get_auto_follow_pattern"
      },
      "since": "6.5.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/_ccr/auto_follow"
        },
        {
          "methods": [
            "GET"
          ],
          "path": "/_ccr/auto_follow/{name}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Pauses an auto-follow pattern",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/ccr-pause-auto-follow-pattern.html",
      "name": "ccr.pause_auto_follow_pattern",
      "request": {
        "name": "Request",
        "namespace": "ccr.pause_auto_follow_pattern"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "ccr.pause_auto_follow_pattern"
      },
      "since": "7.5.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "POST"
          ],
          "path": "/_ccr/auto_follow/{name}/pause"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Pauses a follower index. The follower index will not fetch any additional operations from the leader index.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/ccr-post-pause-follow.html",
      "name": "ccr.pause_follow",
      "request": {
        "name": "Request",
        "namespace": "ccr.pause_follow"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "ccr.pause_follow"
      },
      "since": "6.5.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "POST"
          ],
          "path": "/{index}/_ccr/pause_follow"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Creates a new named collection of auto-follow patterns against a specified remote cluster. Newly created indices on the remote cluster matching any of the specified patterns will be automatically configured as follower indices.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/ccr-put-auto-follow-pattern.html",
      "name": "ccr.put_auto_follow_pattern",
      "request": {
        "name": "Request",
        "namespace": "ccr.put_auto_follow_pattern"
      },
      "requestBodyRequired": true,
      "response": {
        "name": "Response",
        "namespace": "ccr.put_auto_follow_pattern"
      },
      "since": "6.5.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "PUT"
          ],
          "path": "/_ccr/auto_follow/{name}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Resumes an auto-follow pattern that has been paused",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/ccr-resume-auto-follow-pattern.html",
      "name": "ccr.resume_auto_follow_pattern",
      "request": {
        "name": "Request",
        "namespace": "ccr.resume_auto_follow_pattern"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "ccr.resume_auto_follow_pattern"
      },
      "since": "7.5.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "POST"
          ],
          "path": "/_ccr/auto_follow/{name}/resume"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Resumes a follower index that has been paused",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/ccr-post-resume-follow.html",
      "name": "ccr.resume_follow",
      "request": {
        "name": "Request",
        "namespace": "ccr.resume_follow"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "ccr.resume_follow"
      },
      "since": "6.5.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "POST"
          ],
          "path": "/{index}/_ccr/resume_follow"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Gets all stats related to cross-cluster replication.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/ccr-get-stats.html",
      "name": "ccr.stats",
      "request": {
        "name": "Request",
        "namespace": "ccr.stats"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "ccr.stats"
      },
      "since": "6.5.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/_ccr/stats"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Stops the following task associated with a follower index and removes index metadata and settings associated with cross-cluster replication.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/ccr-post-unfollow.html",
      "name": "ccr.unfollow",
      "request": {
        "name": "Request",
        "namespace": "ccr.unfollow"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "ccr.unfollow"
      },
      "since": "6.5.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "POST"
          ],
          "path": "/{index}/_ccr/unfollow"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json",
        "text/plain"
      ],
      "description": "Explicitly clears the search context for a scroll.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/clear-scroll-api.html",
      "name": "clear_scroll",
      "request": {
        "name": "Request",
        "namespace": "_global.clear_scroll"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "_global.clear_scroll"
      },
      "since": "0.0.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "DELETE"
          ],
          "path": "/_search/scroll"
        },
        {
          "deprecation": {
            "description": "A scroll id can be quite large and should be specified as part of the body",
            "version": "7.0.0"
          },
          "methods": [
            "DELETE"
          ],
          "path": "/_search/scroll/{scroll_id}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Close a point in time",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/point-in-time-api.html",
      "name": "close_point_in_time",
      "request": {
        "name": "Request",
        "namespace": "_global.close_point_in_time"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "_global.close_point_in_time"
      },
      "since": "7.10.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "DELETE"
          ],
          "path": "/_pit"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Provides explanations for shard allocations in the cluster.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-allocation-explain.html",
      "name": "cluster.allocation_explain",
      "request": {
        "name": "Request",
        "namespace": "cluster.allocation_explain"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "cluster.allocation_explain"
      },
      "since": "5.0.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET",
            "POST"
          ],
          "path": "/_cluster/allocation/explain"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Deletes a component template",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/indices-component-template.html",
      "name": "cluster.delete_component_template",
      "request": {
        "name": "Request",
        "namespace": "cluster.delete_component_template"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "cluster.delete_component_template"
      },
      "since": "7.8.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "DELETE"
          ],
          "path": "/_component_template/{name}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Clears cluster voting config exclusions.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/voting-config-exclusions.html",
      "name": "cluster.delete_voting_config_exclusions",
      "request": {
        "name": "Request",
        "namespace": "cluster.delete_voting_config_exclusions"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "cluster.delete_voting_config_exclusions"
      },
      "since": "7.0.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "DELETE"
          ],
          "path": "/_cluster/voting_config_exclusions"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Returns information about whether a particular component template exist",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/indices-component-template.html",
      "name": "cluster.exists_component_template",
      "request": {
        "name": "Request",
        "namespace": "cluster.exists_component_template"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "cluster.exists_component_template"
      },
      "since": "7.8.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "HEAD"
          ],
          "path": "/_component_template/{name}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Returns one or more component templates",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/indices-component-template.html",
      "name": "cluster.get_component_template",
      "request": {
        "name": "Request",
        "namespace": "cluster.get_component_template"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "cluster.get_component_template"
      },
      "since": "7.8.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/_component_template"
        },
        {
          "methods": [
            "GET"
          ],
          "path": "/_component_template/{name}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Returns cluster settings.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-get-settings.html",
      "name": "cluster.get_settings",
      "request": {
        "name": "Request",
        "namespace": "cluster.get_settings"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "cluster.get_settings"
      },
      "since": "0.0.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/_cluster/settings"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Returns basic information about the health of the cluster.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-health.html",
      "name": "cluster.health",
      "request": {
        "name": "Request",
        "namespace": "cluster.health"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "cluster.health"
      },
      "since": "1.3.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/_cluster/health"
        },
        {
          "methods": [
            "GET"
          ],
          "path": "/_cluster/health/{index}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Returns a list of any cluster-level changes (e.g. create index, update mapping,\nallocate or fail shard) which have not yet been executed.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-pending.html",
      "name": "cluster.pending_tasks",
      "request": {
        "name": "Request",
        "namespace": "cluster.pending_tasks"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "cluster.pending_tasks"
      },
      "since": "0.0.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/_cluster/pending_tasks"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Updates the cluster voting config exclusions by node ids or node names.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/voting-config-exclusions.html",
      "name": "cluster.post_voting_config_exclusions",
      "request": {
        "name": "Request",
        "namespace": "cluster.post_voting_config_exclusions"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "cluster.post_voting_config_exclusions"
      },
      "since": "7.0.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "POST"
          ],
          "path": "/_cluster/voting_config_exclusions"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Creates or updates a component template",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/indices-component-template.html",
      "name": "cluster.put_component_template",
      "request": {
        "name": "Request",
        "namespace": "cluster.put_component_template"
      },
      "requestBodyRequired": true,
      "response": {
        "name": "Response",
        "namespace": "cluster.put_component_template"
      },
      "since": "7.8.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "PUT",
            "POST"
          ],
          "path": "/_component_template/{name}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Updates the cluster settings.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-update-settings.html",
      "name": "cluster.put_settings",
      "request": {
        "name": "Request",
        "namespace": "cluster.put_settings"
      },
      "requestBodyRequired": true,
      "response": {
        "name": "Response",
        "namespace": "cluster.put_settings"
      },
      "since": "0.0.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "PUT"
          ],
          "path": "/_cluster/settings"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Returns the information about configured remote clusters.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-remote-info.html",
      "name": "cluster.remote_info",
      "request": {
        "name": "Request",
        "namespace": "cluster.remote_info"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "cluster.remote_info"
      },
      "since": "6.1.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/_remote/info"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Allows to manually change the allocation of individual shards in the cluster.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-reroute.html",
      "name": "cluster.reroute",
      "request": {
        "name": "Request",
        "namespace": "cluster.reroute"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "cluster.reroute"
      },
      "since": "5.0.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "POST"
          ],
          "path": "/_cluster/reroute"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Returns a comprehensive information about the state of the cluster.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-state.html",
      "name": "cluster.state",
      "privileges": {
        "cluster": [
          "monitor",
          "manage"
        ]
      },
      "request": {
        "name": "Request",
        "namespace": "cluster.state"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "cluster.state"
      },
      "since": "1.3.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/_cluster/state"
        },
        {
          "methods": [
            "GET"
          ],
          "path": "/_cluster/state/{metric}"
        },
        {
          "methods": [
            "GET"
          ],
          "path": "/_cluster/state/{metric}/{index}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Returns high-level overview of cluster statistics.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-stats.html",
      "name": "cluster.stats",
      "request": {
        "name": "Request",
        "namespace": "cluster.stats"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "cluster.stats"
      },
      "since": "1.3.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/_cluster/stats"
        },
        {
          "methods": [
            "GET"
          ],
          "path": "/_cluster/stats/nodes/{node_id}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Returns number of documents matching a query.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/search-count.html",
      "name": "count",
      "request": {
        "name": "Request",
        "namespace": "_global.count"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "_global.count"
      },
      "since": "0.0.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "POST",
            "GET"
          ],
          "path": "/_count"
        },
        {
          "methods": [
            "POST",
            "GET"
          ],
          "path": "/{index}/_count"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Creates a new document in the index.\n\nReturns a 409 response when a document with a same ID already exists in the index.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/docs-index_.html",
      "name": "create",
      "request": {
        "name": "Request",
        "namespace": "_global.create"
      },
      "requestBodyRequired": true,
      "response": {
        "name": "Response",
        "namespace": "_global.create"
      },
      "since": "5.0.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "PUT",
            "POST"
          ],
          "path": "/{index}/_create/{id}"
        },
        {
          "deprecation": {
            "description": "Specifying types in urls has been deprecated",
            "version": "7.0.0"
          },
          "methods": [
            "PUT",
            "POST"
          ],
          "path": "/{index}/{type}/{id}/_create"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Deletes the specified dangling index",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/modules-gateway-dangling-indices.html",
      "name": "dangling_indices.delete_dangling_index",
      "request": {
        "name": "Request",
        "namespace": "dangling_indices.delete_dangling_index"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "dangling_indices.delete_dangling_index"
      },
      "since": "7.9.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "DELETE"
          ],
          "path": "/_dangling/{index_uuid}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Imports the specified dangling index",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/modules-gateway-dangling-indices.html",
      "name": "dangling_indices.import_dangling_index",
      "request": {
        "name": "Request",
        "namespace": "dangling_indices.import_dangling_index"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "dangling_indices.import_dangling_index"
      },
      "since": "7.9.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "POST"
          ],
          "path": "/_dangling/{index_uuid}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Returns all dangling indices.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/modules-gateway-dangling-indices.html",
      "name": "dangling_indices.list_dangling_indices",
      "request": {
        "name": "Request",
        "namespace": "dangling_indices.list_dangling_indices"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "dangling_indices.list_dangling_indices"
      },
      "since": "7.9.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/_dangling"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Deletes an existing transform.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/delete-transform.html",
      "name": "data_frame_transform_deprecated.delete_transform",
      "request": null,
      "requestBodyRequired": false,
      "response": null,
      "stability": "beta",
      "urls": [
        {
          "deprecation": {
            "description": "[_data_frame/transforms/] is deprecated, use [_transform/] in the future.",
            "version": "7.5.0"
          },
          "methods": [
            "DELETE"
          ],
          "path": "/_data_frame/transforms/{transform_id}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Retrieves configuration information for transforms.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/get-transform.html",
      "name": "data_frame_transform_deprecated.get_transform",
      "request": null,
      "requestBodyRequired": false,
      "response": null,
      "stability": "beta",
      "urls": [
        {
          "deprecation": {
            "description": "[_data_frame/transforms/] is deprecated, use [_transform/] in the future.",
            "version": "7.5.0"
          },
          "methods": [
            "GET"
          ],
          "path": "/_data_frame/transforms/{transform_id}"
        },
        {
          "deprecation": {
            "description": "[_data_frame/transforms/] is deprecated, use [_transform/] in the future.",
            "version": "7.5.0"
          },
          "methods": [
            "GET"
          ],
          "path": "/_data_frame/transforms"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Retrieves usage information for transforms.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/get-transform-stats.html",
      "name": "data_frame_transform_deprecated.get_transform_stats",
      "request": null,
      "requestBodyRequired": false,
      "response": null,
      "stability": "beta",
      "urls": [
        {
          "deprecation": {
            "description": "[_data_frame/transforms/] is deprecated, use [_transform/] in the future.",
            "version": "7.5.0"
          },
          "methods": [
            "GET"
          ],
          "path": "/_data_frame/transforms/{transform_id}/_stats"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Previews a transform.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/preview-transform.html",
      "name": "data_frame_transform_deprecated.preview_transform",
      "request": null,
      "requestBodyRequired": true,
      "response": null,
      "stability": "beta",
      "urls": [
        {
          "deprecation": {
            "description": "[_data_frame/transforms/] is deprecated, use [_transform/] in the future.",
            "version": "7.5.0"
          },
          "methods": [
            "POST"
          ],
          "path": "/_data_frame/transforms/_preview"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Instantiates a transform.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/put-transform.html",
      "name": "data_frame_transform_deprecated.put_transform",
      "request": null,
      "requestBodyRequired": true,
      "response": null,
      "stability": "beta",
      "urls": [
        {
          "deprecation": {
            "description": "[_data_frame/transforms/] is deprecated, use [_transform/] in the future.",
            "version": "7.5.0"
          },
          "methods": [
            "PUT"
          ],
          "path": "/_data_frame/transforms/{transform_id}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Starts one or more transforms.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/start-transform.html",
      "name": "data_frame_transform_deprecated.start_transform",
      "request": null,
      "requestBodyRequired": false,
      "response": null,
      "stability": "beta",
      "urls": [
        {
          "deprecation": {
            "description": "[_data_frame/transforms/] is deprecated, use [_transform/] in the future.",
            "version": "7.5.0"
          },
          "methods": [
            "POST"
          ],
          "path": "/_data_frame/transforms/{transform_id}/_start"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Stops one or more transforms.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/stop-transform.html",
      "name": "data_frame_transform_deprecated.stop_transform",
      "request": null,
      "requestBodyRequired": false,
      "response": null,
      "stability": "beta",
      "urls": [
        {
          "deprecation": {
            "description": "[_data_frame/transforms/] is deprecated, use [_transform/] in the future.",
            "version": "7.5.0"
          },
          "methods": [
            "POST"
          ],
          "path": "/_data_frame/transforms/{transform_id}/_stop"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Updates certain properties of a transform.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/update-transform.html",
      "name": "data_frame_transform_deprecated.update_transform",
      "request": null,
      "requestBodyRequired": true,
      "response": null,
      "stability": "beta",
      "urls": [
        {
          "deprecation": {
            "description": "[_data_frame/transforms/] is deprecated, use [_transform/] in the future.",
            "version": "7.5.0"
          },
          "methods": [
            "POST"
          ],
          "path": "/_data_frame/transforms/{transform_id}/_update"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Removes a document from the index.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/docs-delete.html",
      "name": "delete",
      "request": {
        "name": "Request",
        "namespace": "_global.delete"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "_global.delete"
      },
      "since": "0.0.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "DELETE"
          ],
          "path": "/{index}/_doc/{id}"
        },
        {
          "deprecation": {
            "description": "Specifying types in urls has been deprecated",
            "version": "7.0.0"
          },
          "methods": [
            "DELETE"
          ],
          "path": "/{index}/{type}/{id}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Deletes documents matching the provided query.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/docs-delete-by-query.html",
      "name": "delete_by_query",
      "request": {
        "name": "Request",
        "namespace": "_global.delete_by_query"
      },
      "requestBodyRequired": true,
      "response": {
        "name": "Response",
        "namespace": "_global.delete_by_query"
      },
      "since": "5.0.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "POST"
          ],
          "path": "/{index}/_delete_by_query"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Changes the number of requests per second for a particular Delete By Query operation.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-delete-by-query.html",
      "name": "delete_by_query_rethrottle",
      "request": {
        "name": "Request",
        "namespace": "_global.delete_by_query_rethrottle"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "_global.delete_by_query_rethrottle"
      },
      "since": "6.5.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "POST"
          ],
          "path": "/_delete_by_query/{task_id}/_rethrottle"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Deletes a script.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/modules-scripting.html",
      "name": "delete_script",
      "request": {
        "name": "Request",
        "namespace": "_global.delete_script"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "_global.delete_script"
      },
      "since": "0.0.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "DELETE"
          ],
          "path": "/_scripts/{id}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Deletes an existing enrich policy and its enrich index.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/delete-enrich-policy-api.html",
      "name": "enrich.delete_policy",
      "request": {
        "name": "Request",
        "namespace": "enrich.delete_policy"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "enrich.delete_policy"
      },
      "since": "7.5.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "DELETE"
          ],
          "path": "/_enrich/policy/{name}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Creates the enrich index for an existing enrich policy.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/execute-enrich-policy-api.html",
      "name": "enrich.execute_policy",
      "request": {
        "name": "Request",
        "namespace": "enrich.execute_policy"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "enrich.execute_policy"
      },
      "since": "7.5.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "PUT"
          ],
          "path": "/_enrich/policy/{name}/_execute"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Gets information about an enrich policy.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/get-enrich-policy-api.html",
      "name": "enrich.get_policy",
      "request": {
        "name": "Request",
        "namespace": "enrich.get_policy"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "enrich.get_policy"
      },
      "since": "7.5.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/_enrich/policy/{name}"
        },
        {
          "methods": [
            "GET"
          ],
          "path": "/_enrich/policy"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Creates a new enrich policy.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/put-enrich-policy-api.html",
      "name": "enrich.put_policy",
      "request": {
        "name": "Request",
        "namespace": "enrich.put_policy"
      },
      "requestBodyRequired": true,
      "response": {
        "name": "Response",
        "namespace": "enrich.put_policy"
      },
      "since": "7.5.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "PUT"
          ],
          "path": "/_enrich/policy/{name}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Gets enrich coordinator statistics and information about enrich policies that are currently executing.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/enrich-stats-api.html",
      "name": "enrich.stats",
      "request": {
        "name": "Request",
        "namespace": "enrich.stats"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "enrich.stats"
      },
      "since": "7.5.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/_enrich/_stats"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Deletes an async EQL search by ID. If the search is still running, the search request will be cancelled. Otherwise, the saved search results are deleted.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/eql-search-api.html",
      "name": "eql.delete",
      "request": {
        "name": "Request",
        "namespace": "eql.delete"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "eql.delete"
      },
      "since": "7.9.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "DELETE"
          ],
          "path": "/_eql/search/{id}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Returns async results from previously executed Event Query Language (EQL) search",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/eql-search-api.html",
      "name": "eql.get",
      "request": {
        "name": "Request",
        "namespace": "eql.get"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "eql.get"
      },
      "since": "7.9.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/_eql/search/{id}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Returns the status of a previously submitted async or stored Event Query Language (EQL) search",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/eql-search-api.html",
      "name": "eql.get_status",
      "request": {
        "name": "Request",
        "namespace": "eql.get_status"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "eql.get_status"
      },
      "since": "7.9.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/_eql/search/status/{id}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Returns results matching a query expressed in Event Query Language (EQL)",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/eql-search-api.html",
      "name": "eql.search",
      "request": {
        "name": "Request",
        "namespace": "eql.search"
      },
      "requestBodyRequired": true,
      "response": {
        "name": "Response",
        "namespace": "eql.search"
      },
      "since": "7.9.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET",
            "POST"
          ],
          "path": "/{index}/_eql/search"
        }
      ],
      "visibility": "feature_flag"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Returns information about whether a document exists in an index.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/docs-get.html",
      "name": "exists",
      "request": {
        "name": "Request",
        "namespace": "_global.exists"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "_global.exists"
      },
      "since": "0.0.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "HEAD"
          ],
          "path": "/{index}/_doc/{id}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Returns information about whether a document source exists in an index.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/docs-get.html",
      "name": "exists_source",
      "request": {
        "name": "Request",
        "namespace": "_global.exists_source"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "_global.exists_source"
      },
      "since": "5.4.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "HEAD"
          ],
          "path": "/{index}/_source/{id}"
        },
        {
          "deprecation": {
            "description": "Specifying types in urls has been deprecated",
            "version": "7.0.0"
          },
          "methods": [
            "HEAD"
          ],
          "path": "/{index}/{type}/{id}/_source"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Returns information about why a specific matches (or doesn't match) a query.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/search-explain.html",
      "name": "explain",
      "request": {
        "name": "Request",
        "namespace": "_global.explain"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "_global.explain"
      },
      "since": "0.0.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET",
            "POST"
          ],
          "path": "/{index}/_explain/{id}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Gets a list of features which can be included in snapshots using the feature_states field when creating a snapshot",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/get-features-api.html",
      "name": "features.get_features",
      "request": {
        "name": "Request",
        "namespace": "features.get_features"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "features.get_features"
      },
      "since": "7.12.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/_features"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Resets the internal state of features, usually by deleting system indices",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/modules-snapshots.html",
      "name": "features.reset_features",
      "request": {
        "name": "Request",
        "namespace": "features.reset_features"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "features.reset_features"
      },
      "since": "7.12.0",
      "stability": "experimental",
      "urls": [
        {
          "methods": [
            "POST"
          ],
          "path": "/_features/_reset"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Returns the information about the capabilities of fields among multiple indices.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/search-field-caps.html",
      "name": "field_caps",
      "request": {
        "name": "Request",
        "namespace": "_global.field_caps"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "_global.field_caps"
      },
      "since": "5.4.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET",
            "POST"
          ],
          "path": "/_field_caps"
        },
        {
          "methods": [
            "GET",
            "POST"
          ],
          "path": "/{index}/_field_caps"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Returns the current global checkpoints for an index. This API is design for internal use by the fleet server project.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/get-global-checkpoints.html",
      "name": "fleet.global_checkpoints",
      "request": null,
      "requestBodyRequired": false,
      "response": null,
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/{index}/_fleet/global_checkpoints"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Returns a document.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/docs-get.html",
      "name": "get",
      "request": {
        "name": "Request",
        "namespace": "_global.get"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "_global.get"
      },
      "since": "0.0.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/{index}/_doc/{id}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Returns a script.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/modules-scripting.html",
      "name": "get_script",
      "request": {
        "name": "Request",
        "namespace": "_global.get_script"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "_global.get_script"
      },
      "since": "0.0.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/_scripts/{id}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Returns all script contexts.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/painless/master/painless-contexts.html",
      "name": "get_script_context",
      "request": {
        "name": "Request",
        "namespace": "_global.get_script_context"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "_global.get_script_context"
      },
      "since": "0.0.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/_script_context"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Returns available script types, languages and contexts",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/modules-scripting.html",
      "name": "get_script_languages",
      "request": {
        "name": "Request",
        "namespace": "_global.get_script_languages"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "_global.get_script_languages"
      },
      "since": "0.0.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/_script_language"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Returns the source of a document.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/docs-get.html",
      "name": "get_source",
      "request": {
        "name": "Request",
        "namespace": "_global.get_source"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "_global.get_source"
      },
      "since": "0.0.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/{index}/_source/{id}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Explore extracted and summarized information about the documents and terms in an index.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/graph-explore-api.html",
      "name": "graph.explore",
      "request": {
        "name": "Request",
        "namespace": "graph.explore"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "graph.explore"
      },
      "since": "0.0.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET",
            "POST"
          ],
          "path": "/{index}/_graph/explore"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Deletes the specified lifecycle policy definition. A currently used policy cannot be deleted.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/ilm-delete-lifecycle.html",
      "name": "ilm.delete_lifecycle",
      "request": {
        "name": "Request",
        "namespace": "ilm.delete_lifecycle"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "ilm.delete_lifecycle"
      },
      "since": "6.6.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "DELETE"
          ],
          "path": "/_ilm/policy/{policy}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Retrieves information about the index's current lifecycle state, such as the currently executing phase, action, and step.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/ilm-explain-lifecycle.html",
      "name": "ilm.explain_lifecycle",
      "request": {
        "name": "Request",
        "namespace": "ilm.explain_lifecycle"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "ilm.explain_lifecycle"
      },
      "since": "6.6.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/{index}/_ilm/explain"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Returns the specified policy definition. Includes the policy version and last modified date.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/ilm-get-lifecycle.html",
      "name": "ilm.get_lifecycle",
      "request": {
        "name": "Request",
        "namespace": "ilm.get_lifecycle"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "ilm.get_lifecycle"
      },
      "since": "6.6.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/_ilm/policy/{policy}"
        },
        {
          "methods": [
            "GET"
          ],
          "path": "/_ilm/policy"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Retrieves the current index lifecycle management (ILM) status.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/ilm-get-status.html",
      "name": "ilm.get_status",
      "request": {
        "name": "Request",
        "namespace": "ilm.get_status"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "ilm.get_status"
      },
      "since": "6.6.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/_ilm/status"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Migrates the indices and ILM policies away from custom node attribute allocation routing to data tiers routing",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/ilm-migrate-to-data-tiers.html",
      "name": "ilm.migrate_to_data_tiers",
      "request": null,
      "requestBodyRequired": false,
      "response": null,
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "POST"
          ],
          "path": "/_ilm/migrate_to_data_tiers"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Manually moves an index into the specified step and executes that step.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/ilm-move-to-step.html",
      "name": "ilm.move_to_step",
      "request": {
        "name": "Request",
        "namespace": "ilm.move_to_step"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "ilm.move_to_step"
      },
      "since": "6.6.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "POST"
          ],
          "path": "/_ilm/move/{index}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Creates a lifecycle policy",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/ilm-put-lifecycle.html",
      "name": "ilm.put_lifecycle",
      "request": {
        "name": "Request",
        "namespace": "ilm.put_lifecycle"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "ilm.put_lifecycle"
      },
      "since": "6.6.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "PUT"
          ],
          "path": "/_ilm/policy/{policy}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Removes the assigned lifecycle policy and stops managing the specified index",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/ilm-remove-policy.html",
      "name": "ilm.remove_policy",
      "request": {
        "name": "Request",
        "namespace": "ilm.remove_policy"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "ilm.remove_policy"
      },
      "since": "6.6.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "POST"
          ],
          "path": "/{index}/_ilm/remove"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Retries executing the policy for an index that is in the ERROR step.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/ilm-retry-policy.html",
      "name": "ilm.retry",
      "request": {
        "name": "Request",
        "namespace": "ilm.retry"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "ilm.retry"
      },
      "since": "6.6.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "POST"
          ],
          "path": "/{index}/_ilm/retry"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Start the index lifecycle management (ILM) plugin.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/ilm-start.html",
      "name": "ilm.start",
      "request": {
        "name": "Request",
        "namespace": "ilm.start"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "ilm.start"
      },
      "since": "6.6.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "POST"
          ],
          "path": "/_ilm/start"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Halts all lifecycle management operations and stops the index lifecycle management (ILM) plugin",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/ilm-stop.html",
      "name": "ilm.stop",
      "request": {
        "name": "Request",
        "namespace": "ilm.stop"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "ilm.stop"
      },
      "since": "6.6.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "POST"
          ],
          "path": "/_ilm/stop"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Creates or updates a document in an index.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/docs-index_.html",
      "name": "index",
      "request": {
        "name": "Request",
        "namespace": "_global.index"
      },
      "requestBodyRequired": true,
      "response": {
        "name": "Response",
        "namespace": "_global.index"
      },
      "since": "0.0.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "PUT",
            "POST"
          ],
          "path": "/{index}/_doc/{id}"
        },
        {
          "methods": [
            "POST"
          ],
          "path": "/{index}/_doc"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Adds a block to an index.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/index-modules-blocks.html",
      "name": "indices.add_block",
      "request": {
        "name": "Request",
        "namespace": "indices.add_block"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "indices.add_block"
      },
      "since": "7.9.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "PUT"
          ],
          "path": "/{index}/_block/{block}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Performs the analysis process on a text and return the tokens breakdown of the text.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/indices-analyze.html",
      "name": "indices.analyze",
      "request": {
        "name": "Request",
        "namespace": "indices.analyze"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "indices.analyze"
      },
      "since": "0.0.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET",
            "POST"
          ],
          "path": "/_analyze"
        },
        {
          "methods": [
            "GET",
            "POST"
          ],
          "path": "/{index}/_analyze"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Clears all or specific caches for one or more indices.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/indices-clearcache.html",
      "name": "indices.clear_cache",
      "request": {
        "name": "Request",
        "namespace": "indices.clear_cache"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "indices.clear_cache"
      },
      "since": "0.0.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "POST"
          ],
          "path": "/_cache/clear"
        },
        {
          "methods": [
            "POST"
          ],
          "path": "/{index}/_cache/clear"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Clones an index",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/indices-clone-index.html",
      "name": "indices.clone",
      "request": {
        "name": "Request",
        "namespace": "indices.clone"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "indices.clone"
      },
      "since": "7.4.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "PUT",
            "POST"
          ],
          "path": "/{index}/_clone/{target}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Closes an index.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/indices-open-close.html",
      "name": "indices.close",
      "request": {
        "name": "Request",
        "namespace": "indices.close"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "indices.close"
      },
      "since": "0.0.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "POST"
          ],
          "path": "/{index}/_close"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Creates an index with optional settings and mappings.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/indices-create-index.html",
      "name": "indices.create",
      "privileges": {
        "index": [
          "create_index",
          "manage"
        ]
      },
      "request": {
        "name": "Request",
        "namespace": "indices.create"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "indices.create"
      },
      "since": "0.0.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "PUT"
          ],
          "path": "/{index}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Creates a data stream",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/data-streams.html",
      "name": "indices.create_data_stream",
      "request": {
        "name": "Request",
        "namespace": "indices.create_data_stream"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "indices.create_data_stream"
      },
      "since": "7.9.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "PUT"
          ],
          "path": "/_data_stream/{name}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Provides statistics on operations happening in a data stream.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/data-streams.html",
      "name": "indices.data_streams_stats",
      "request": {
        "name": "Request",
        "namespace": "indices.data_streams_stats"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "indices.data_streams_stats"
      },
      "since": "7.9.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/_data_stream/_stats"
        },
        {
          "methods": [
            "GET"
          ],
          "path": "/_data_stream/{name}/_stats"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Deletes an index.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/indices-delete-index.html",
      "name": "indices.delete",
      "request": {
        "name": "Request",
        "namespace": "indices.delete"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "indices.delete"
      },
      "since": "0.0.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "DELETE"
          ],
          "path": "/{index}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Deletes an alias.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/indices-aliases.html",
      "name": "indices.delete_alias",
      "request": {
        "name": "Request",
        "namespace": "indices.delete_alias"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "indices.delete_alias"
      },
      "since": "0.0.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "DELETE"
          ],
          "path": "/{index}/_alias/{name}"
        },
        {
          "methods": [
            "DELETE"
          ],
          "path": "/{index}/_aliases/{name}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Deletes a data stream.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/data-streams.html",
      "name": "indices.delete_data_stream",
      "request": {
        "name": "Request",
        "namespace": "indices.delete_data_stream"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "indices.delete_data_stream"
      },
      "since": "7.9.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "DELETE"
          ],
          "path": "/_data_stream/{name}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Deletes an index template.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/indices-templates.html",
      "name": "indices.delete_index_template",
      "request": {
        "name": "Request",
        "namespace": "indices.delete_index_template"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "indices.delete_index_template"
      },
      "since": "7.8.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "DELETE"
          ],
          "path": "/_index_template/{name}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Deletes an index template.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/indices-templates.html",
      "name": "indices.delete_template",
      "request": {
        "name": "Request",
        "namespace": "indices.delete_template"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "indices.delete_template"
      },
      "since": "0.0.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "DELETE"
          ],
          "path": "/_template/{name}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Analyzes the disk usage of each field of an index or data stream",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/indices-disk-usage.html",
      "name": "indices.disk_usage",
      "request": {
        "name": "Request",
        "namespace": "indices.disk_usage"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "indices.disk_usage"
      },
      "since": "7.15.0",
      "stability": "experimental",
      "urls": [
        {
          "methods": [
            "POST"
          ],
          "path": "/{index}/_disk_usage"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Returns information about whether a particular index exists.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/indices-exists.html",
      "name": "indices.exists",
      "request": {
        "name": "Request",
        "namespace": "indices.exists"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "indices.exists"
      },
      "since": "0.0.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "HEAD"
          ],
          "path": "/{index}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Returns information about whether a particular alias exists.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/indices-aliases.html",
      "name": "indices.exists_alias",
      "request": {
        "name": "Request",
        "namespace": "indices.exists_alias"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "indices.exists_alias"
      },
      "since": "0.0.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "HEAD"
          ],
          "path": "/_alias/{name}"
        },
        {
          "methods": [
            "HEAD"
          ],
          "path": "/{index}/_alias/{name}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Returns information about whether a particular index template exists.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/indices-templates.html",
      "name": "indices.exists_index_template",
      "request": {
        "name": "Request",
        "namespace": "indices.exists_index_template"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "indices.exists_index_template"
      },
      "since": "0.0.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "HEAD"
          ],
          "path": "/_index_template/{name}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Returns information about whether a particular index template exists.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/indices-templates.html",
      "name": "indices.exists_template",
      "request": {
        "name": "Request",
        "namespace": "indices.exists_template"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "indices.exists_template"
      },
      "since": "0.0.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "HEAD"
          ],
          "path": "/_template/{name}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Returns information about whether a particular document type exists. (DEPRECATED)",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/indices-types-exists.html",
      "name": "indices.exists_type",
      "request": {
        "name": "Request",
        "namespace": "indices.exists_type"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "indices.exists_type"
      },
      "since": "0.0.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "HEAD"
          ],
          "path": "/{index}/_mapping/{type}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Returns the field usage stats for each field of an index",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/field-usage-stats.html",
      "name": "indices.field_usage_stats",
      "request": null,
      "requestBodyRequired": false,
      "response": null,
      "stability": "experimental",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/{index}/_field_usage_stats"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Performs the flush operation on one or more indices.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/indices-flush.html",
      "name": "indices.flush",
      "request": {
        "name": "Request",
        "namespace": "indices.flush"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "indices.flush"
      },
      "since": "0.0.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "POST",
            "GET"
          ],
          "path": "/_flush"
        },
        {
          "methods": [
            "POST",
            "GET"
          ],
          "path": "/{index}/_flush"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Performs the force merge operation on one or more indices.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/indices-forcemerge.html",
      "name": "indices.forcemerge",
      "request": {
        "name": "Request",
        "namespace": "indices.forcemerge"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "indices.forcemerge"
      },
      "since": "2.1.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "POST"
          ],
          "path": "/_forcemerge"
        },
        {
          "methods": [
            "POST"
          ],
          "path": "/{index}/_forcemerge"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Freezes an index. A frozen index has almost no overhead on the cluster (except for maintaining its metadata in memory) and is read-only.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/freeze-index-api.html",
      "name": "indices.freeze",
      "request": {
        "name": "Request",
        "namespace": "indices.freeze"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "indices.freeze"
      },
      "since": "6.6.0",
      "stability": "stable",
      "urls": [
        {
          "deprecation": {
            "description": "Frozen indices are deprecated because they provide no benefit given improvements in heap memory utilization. They will be removed in a future release.",
            "version": "7.14.0"
          },
          "methods": [
            "POST"
          ],
          "path": "/{index}/_freeze"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Returns information about one or more indices.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/indices-get-index.html",
      "name": "indices.get",
      "request": {
        "name": "Request",
        "namespace": "indices.get"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "indices.get"
      },
      "since": "0.0.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/{index}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Returns an alias.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/indices-aliases.html",
      "name": "indices.get_alias",
      "request": {
        "name": "Request",
        "namespace": "indices.get_alias"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "indices.get_alias"
      },
      "since": "0.0.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/_alias"
        },
        {
          "methods": [
            "GET"
          ],
          "path": "/_alias/{name}"
        },
        {
          "methods": [
            "GET"
          ],
          "path": "/{index}/_alias/{name}"
        },
        {
          "methods": [
            "GET"
          ],
          "path": "/{index}/_alias"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Returns data streams.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/data-streams.html",
      "name": "indices.get_data_stream",
      "request": {
        "name": "Request",
        "namespace": "indices.get_data_stream"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "indices.get_data_stream"
      },
      "since": "7.9.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/_data_stream"
        },
        {
          "methods": [
            "GET"
          ],
          "path": "/_data_stream/{name}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Returns mapping for one or more fields.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/indices-get-field-mapping.html",
      "name": "indices.get_field_mapping",
      "request": {
        "name": "Request",
        "namespace": "indices.get_field_mapping"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "indices.get_field_mapping"
      },
      "since": "0.0.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/_mapping/field/{fields}"
        },
        {
          "methods": [
            "GET"
          ],
          "path": "/{index}/_mapping/field/{fields}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Returns an index template.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/indices-templates.html",
      "name": "indices.get_index_template",
      "request": {
        "name": "Request",
        "namespace": "indices.get_index_template"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "indices.get_index_template"
      },
      "since": "7.9.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/_index_template"
        },
        {
          "methods": [
            "GET"
          ],
          "path": "/_index_template/{name}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Returns mappings for one or more indices.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/indices-get-mapping.html",
      "name": "indices.get_mapping",
      "request": {
        "name": "Request",
        "namespace": "indices.get_mapping"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "indices.get_mapping"
      },
      "since": "0.0.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/_mapping"
        },
        {
          "methods": [
            "GET"
          ],
          "path": "/{index}/_mapping"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Returns settings for one or more indices.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/indices-get-settings.html",
      "name": "indices.get_settings",
      "request": {
        "name": "Request",
        "namespace": "indices.get_settings"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "indices.get_settings"
      },
      "since": "0.0.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/_settings"
        },
        {
          "methods": [
            "GET"
          ],
          "path": "/{index}/_settings"
        },
        {
          "methods": [
            "GET"
          ],
          "path": "/{index}/_settings/{name}"
        },
        {
          "methods": [
            "GET"
          ],
          "path": "/_settings/{name}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Returns an index template.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/indices-templates.html",
      "name": "indices.get_template",
      "request": {
        "name": "Request",
        "namespace": "indices.get_template"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "indices.get_template"
      },
      "since": "0.0.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/_template"
        },
        {
          "methods": [
            "GET"
          ],
          "path": "/_template/{name}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Migrates an alias to a data stream",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/data-streams.html",
      "name": "indices.migrate_to_data_stream",
      "request": {
        "name": "Request",
        "namespace": "indices.migrate_to_data_stream"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "indices.migrate_to_data_stream"
      },
      "since": "7.9.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "POST"
          ],
          "path": "/_data_stream/_migrate/{name}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Opens an index.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/indices-open-close.html",
      "name": "indices.open",
      "request": {
        "name": "Request",
        "namespace": "indices.open"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "indices.open"
      },
      "since": "0.0.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "POST"
          ],
          "path": "/{index}/_open"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Promotes a data stream from a replicated data stream managed by CCR to a regular data stream",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/data-streams.html",
      "name": "indices.promote_data_stream",
      "request": {
        "name": "Request",
        "namespace": "indices.promote_data_stream"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "indices.promote_data_stream"
      },
      "since": "7.9.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "POST"
          ],
          "path": "/_data_stream/_promote/{name}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Creates or updates an alias.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/indices-aliases.html",
      "name": "indices.put_alias",
      "request": {
        "name": "Request",
        "namespace": "indices.put_alias"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "indices.put_alias"
      },
      "since": "0.0.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "PUT",
            "POST"
          ],
          "path": "/{index}/_alias/{name}"
        },
        {
          "methods": [
            "PUT",
            "POST"
          ],
          "path": "/{index}/_aliases/{name}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Creates or updates an index template.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/indices-templates.html",
      "name": "indices.put_index_template",
      "request": {
        "name": "Request",
        "namespace": "indices.put_index_template"
      },
      "requestBodyRequired": true,
      "response": {
        "name": "Response",
        "namespace": "indices.put_index_template"
      },
      "since": "7.9.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "PUT",
            "POST"
          ],
          "path": "/_index_template/{name}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Updates the index mappings.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/indices-put-mapping.html",
      "name": "indices.put_mapping",
      "request": {
        "name": "Request",
        "namespace": "indices.put_mapping"
      },
      "requestBodyRequired": true,
      "response": {
        "name": "Response",
        "namespace": "indices.put_mapping"
      },
      "since": "0.0.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "PUT",
            "POST"
          ],
          "path": "/{index}/_mapping"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Updates the index settings.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/indices-update-settings.html",
      "name": "indices.put_settings",
      "request": {
        "name": "Request",
        "namespace": "indices.put_settings"
      },
      "requestBodyRequired": true,
      "response": {
        "name": "Response",
        "namespace": "indices.put_settings"
      },
      "since": "0.0.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "PUT"
          ],
          "path": "/_settings"
        },
        {
          "methods": [
            "PUT"
          ],
          "path": "/{index}/_settings"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Creates or updates an index template.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/indices-templates.html",
      "name": "indices.put_template",
      "request": {
        "name": "Request",
        "namespace": "indices.put_template"
      },
      "requestBodyRequired": true,
      "response": {
        "name": "Response",
        "namespace": "indices.put_template"
      },
      "since": "0.0.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "PUT",
            "POST"
          ],
          "path": "/_template/{name}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Returns information about ongoing index shard recoveries.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/indices-recovery.html",
      "name": "indices.recovery",
      "request": {
        "name": "Request",
        "namespace": "indices.recovery"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "indices.recovery"
      },
      "since": "0.0.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/_recovery"
        },
        {
          "methods": [
            "GET"
          ],
          "path": "/{index}/_recovery"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Performs the refresh operation in one or more indices.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/indices-refresh.html",
      "name": "indices.refresh",
      "request": {
        "name": "Request",
        "namespace": "indices.refresh"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "indices.refresh"
      },
      "since": "0.0.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "POST",
            "GET"
          ],
          "path": "/_refresh"
        },
        {
          "methods": [
            "POST",
            "GET"
          ],
          "path": "/{index}/_refresh"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Reloads an index's search analyzers and their resources.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/indices-reload-analyzers.html",
      "name": "indices.reload_search_analyzers",
      "request": {
        "name": "Request",
        "namespace": "indices.reload_search_analyzers"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "indices.reload_search_analyzers"
      },
      "since": "7.3.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET",
            "POST"
          ],
          "path": "/{index}/_reload_search_analyzers"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Returns information about any matching indices, aliases, and data streams",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/indices-resolve-index-api.html",
      "name": "indices.resolve_index",
      "request": {
        "name": "Request",
        "namespace": "indices.resolve_index"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "indices.resolve_index"
      },
      "since": "7.9.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/_resolve/index/{name}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Updates an alias to point to a new index when the existing index\nis considered to be too large or too old.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/indices-rollover-index.html",
      "name": "indices.rollover",
      "request": {
        "name": "Request",
        "namespace": "indices.rollover"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "indices.rollover"
      },
      "since": "5.0.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "POST"
          ],
          "path": "/{alias}/_rollover"
        },
        {
          "methods": [
            "POST"
          ],
          "path": "/{alias}/_rollover/{new_index}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Provides low-level information about segments in a Lucene index.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/indices-segments.html",
      "name": "indices.segments",
      "request": {
        "name": "Request",
        "namespace": "indices.segments"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "indices.segments"
      },
      "since": "0.0.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/_segments"
        },
        {
          "methods": [
            "GET"
          ],
          "path": "/{index}/_segments"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Provides store information for shard copies of indices.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/indices-shards-stores.html",
      "name": "indices.shard_stores",
      "request": {
        "name": "Request",
        "namespace": "indices.shard_stores"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "indices.shard_stores"
      },
      "since": "0.0.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/_shard_stores"
        },
        {
          "methods": [
            "GET"
          ],
          "path": "/{index}/_shard_stores"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Allow to shrink an existing index into a new index with fewer primary shards.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/indices-shrink-index.html",
      "name": "indices.shrink",
      "request": {
        "name": "Request",
        "namespace": "indices.shrink"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "indices.shrink"
      },
      "since": "5.0.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "PUT",
            "POST"
          ],
          "path": "/{index}/_shrink/{target}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Simulate matching the given index name against the index templates in the system",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/indices-templates.html",
      "name": "indices.simulate_index_template",
      "request": {
        "name": "Request",
        "namespace": "indices.simulate_index_template"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "indices.simulate_index_template"
      },
      "since": "7.9.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "POST"
          ],
          "path": "/_index_template/_simulate_index/{name}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Simulate resolving the given template name or body",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/indices-templates.html",
      "name": "indices.simulate_template",
      "request": {
        "name": "Request",
        "namespace": "indices.simulate_template"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "indices.simulate_template"
      },
      "since": "0.0.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "POST"
          ],
          "path": "/_index_template/_simulate"
        },
        {
          "methods": [
            "POST"
          ],
          "path": "/_index_template/_simulate/{name}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Allows you to split an existing index into a new index with more primary shards.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/indices-split-index.html",
      "name": "indices.split",
      "request": {
        "name": "Request",
        "namespace": "indices.split"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "indices.split"
      },
      "since": "6.1.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "PUT",
            "POST"
          ],
          "path": "/{index}/_split/{target}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Provides statistics on operations happening in an index.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/indices-stats.html",
      "name": "indices.stats",
      "request": {
        "name": "Request",
        "namespace": "indices.stats"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "indices.stats"
      },
      "since": "0.0.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/_stats"
        },
        {
          "methods": [
            "GET"
          ],
          "path": "/_stats/{metric}"
        },
        {
          "methods": [
            "GET"
          ],
          "path": "/{index}/_stats"
        },
        {
          "methods": [
            "GET"
          ],
          "path": "/{index}/_stats/{metric}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Unfreezes an index. When a frozen index is unfrozen, the index goes through the normal recovery process and becomes writeable again.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/unfreeze-index-api.html",
      "name": "indices.unfreeze",
      "request": {
        "name": "Request",
        "namespace": "indices.unfreeze"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "indices.unfreeze"
      },
      "since": "6.6.0",
      "stability": "stable",
      "urls": [
        {
          "deprecation": {
            "description": "Frozen indices are deprecated because they provide no benefit given improvements in heap memory utilization. They will be removed in a future release.",
            "version": "7.14.0"
          },
          "methods": [
            "POST"
          ],
          "path": "/{index}/_unfreeze"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Updates index aliases.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/indices-aliases.html",
      "name": "indices.update_aliases",
      "request": {
        "name": "Request",
        "namespace": "indices.update_aliases"
      },
      "requestBodyRequired": true,
      "response": {
        "name": "Response",
        "namespace": "indices.update_aliases"
      },
      "since": "1.3.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "POST"
          ],
          "path": "/_aliases"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Allows a user to validate a potentially expensive query without executing it.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/search-validate.html",
      "name": "indices.validate_query",
      "request": {
        "name": "Request",
        "namespace": "indices.validate_query"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "indices.validate_query"
      },
      "since": "1.3.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET",
            "POST"
          ],
          "path": "/_validate/query"
        },
        {
          "methods": [
            "GET",
            "POST"
          ],
          "path": "/{index}/_validate/query"
        },
        {
          "deprecation": {
            "description": "Specifying types in urls has been deprecated",
            "version": "7.0.0"
          },
          "methods": [
            "GET",
            "POST"
          ],
          "path": "/{index}/{type}/_validate/query"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Returns basic information about the cluster.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/index.html",
      "name": "info",
      "request": {
        "name": "Request",
        "namespace": "_global.info"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "_global.info"
      },
      "since": "0.0.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Deletes a pipeline.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/delete-pipeline-api.html",
      "name": "ingest.delete_pipeline",
      "request": {
        "name": "Request",
        "namespace": "ingest.delete_pipeline"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "ingest.delete_pipeline"
      },
      "since": "5.0.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "DELETE"
          ],
          "path": "/_ingest/pipeline/{id}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Returns statistical information about geoip databases",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/geoip-stats-api.html",
      "name": "ingest.geo_ip_stats",
      "request": {
        "name": "Request",
        "namespace": "ingest.geo_ip_stats"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "ingest.geo_ip_stats"
      },
      "since": "7.13.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/_ingest/geoip/stats"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Returns a pipeline.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/get-pipeline-api.html",
      "name": "ingest.get_pipeline",
      "request": {
        "name": "Request",
        "namespace": "ingest.get_pipeline"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "ingest.get_pipeline"
      },
      "since": "5.0.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/_ingest/pipeline"
        },
        {
          "methods": [
            "GET"
          ],
          "path": "/_ingest/pipeline/{id}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Returns a list of the built-in patterns.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/grok-processor.html#grok-processor-rest-get",
      "name": "ingest.processor_grok",
      "request": {
        "name": "Request",
        "namespace": "ingest.processor_grok"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "ingest.processor_grok"
      },
      "since": "6.1.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/_ingest/processor/grok"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Creates or updates a pipeline.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/put-pipeline-api.html",
      "name": "ingest.put_pipeline",
      "request": {
        "name": "Request",
        "namespace": "ingest.put_pipeline"
      },
      "requestBodyRequired": true,
      "response": {
        "name": "Response",
        "namespace": "ingest.put_pipeline"
      },
      "since": "5.0.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "PUT"
          ],
          "path": "/_ingest/pipeline/{id}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Allows to simulate a pipeline with example documents.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/simulate-pipeline-api.html",
      "name": "ingest.simulate",
      "request": {
        "name": "Request",
        "namespace": "ingest.simulate"
      },
      "requestBodyRequired": true,
      "response": {
        "name": "Response",
        "namespace": "ingest.simulate"
      },
      "since": "5.0.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET",
            "POST"
          ],
          "path": "/_ingest/pipeline/_simulate"
        },
        {
          "methods": [
            "GET",
            "POST"
          ],
          "path": "/_ingest/pipeline/{id}/_simulate"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Deletes licensing information for the cluster",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/delete-license.html",
      "name": "license.delete",
      "request": {
        "name": "Request",
        "namespace": "license.delete"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "license.delete"
      },
      "since": "0.0.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "DELETE"
          ],
          "path": "/_license"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Retrieves licensing information for the cluster",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/get-license.html",
      "name": "license.get",
      "request": {
        "name": "Request",
        "namespace": "license.get"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "license.get"
      },
      "since": "0.0.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/_license"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Retrieves information about the status of the basic license.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/get-basic-status.html",
      "name": "license.get_basic_status",
      "request": {
        "name": "Request",
        "namespace": "license.get_basic_status"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "license.get_basic_status"
      },
      "since": "6.3.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/_license/basic_status"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Retrieves information about the status of the trial license.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/get-trial-status.html",
      "name": "license.get_trial_status",
      "request": {
        "name": "Request",
        "namespace": "license.get_trial_status"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "license.get_trial_status"
      },
      "since": "6.1.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/_license/trial_status"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Updates the license for the cluster.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/update-license.html",
      "name": "license.post",
      "request": {
        "name": "Request",
        "namespace": "license.post"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "license.post"
      },
      "since": "0.0.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "PUT",
            "POST"
          ],
          "path": "/_license"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Starts an indefinite basic license.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/start-basic.html",
      "name": "license.post_start_basic",
      "request": {
        "name": "Request",
        "namespace": "license.post_start_basic"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "license.post_start_basic"
      },
      "since": "6.3.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "POST"
          ],
          "path": "/_license/start_basic"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "starts a limited time trial license.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/start-trial.html",
      "name": "license.post_start_trial",
      "request": {
        "name": "Request",
        "namespace": "license.post_start_trial"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "license.post_start_trial"
      },
      "since": "6.1.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "POST"
          ],
          "path": "/_license/start_trial"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Deletes Logstash Pipelines used by Central Management",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/logstash-api-delete-pipeline.html",
      "name": "logstash.delete_pipeline",
      "request": {
        "name": "Request",
        "namespace": "logstash.delete_pipeline"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "logstash.delete_pipeline"
      },
      "since": "7.12.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "DELETE"
          ],
          "path": "/_logstash/pipeline/{id}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Retrieves Logstash Pipelines used by Central Management",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/logstash-api-get-pipeline.html",
      "name": "logstash.get_pipeline",
      "request": {
        "name": "Request",
        "namespace": "logstash.get_pipeline"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "logstash.get_pipeline"
      },
      "since": "7.12.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/_logstash/pipeline/{id}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Adds and updates Logstash Pipelines used for Central Management",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/logstash-api-put-pipeline.html",
      "name": "logstash.put_pipeline",
      "request": {
        "name": "Request",
        "namespace": "logstash.put_pipeline"
      },
      "requestBodyRequired": true,
      "response": {
        "name": "Response",
        "namespace": "logstash.put_pipeline"
      },
      "since": "7.12.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "PUT"
          ],
          "path": "/_logstash/pipeline/{id}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Allows to get multiple documents in one request.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/docs-multi-get.html",
      "name": "mget",
      "request": {
        "name": "Request",
        "namespace": "_global.mget"
      },
      "requestBodyRequired": true,
      "response": {
        "name": "Response",
        "namespace": "_global.mget"
      },
      "since": "0.0.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET",
            "POST"
          ],
          "path": "/_mget"
        },
        {
          "methods": [
            "GET",
            "POST"
          ],
          "path": "/{index}/_mget"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Retrieves information about different cluster, node, and index level settings that use deprecated features that will be removed or changed in the next major version.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/migration-api-deprecation.html",
      "name": "migration.deprecations",
      "request": {
        "name": "Request",
        "namespace": "migration.deprecations"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "migration.deprecations"
      },
      "since": "6.1.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/_migration/deprecations"
        },
        {
          "methods": [
            "GET"
          ],
          "path": "/{index}/_migration/deprecations"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Closes one or more anomaly detection jobs. A job can be opened and closed multiple times throughout its lifecycle.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-close-job.html",
      "name": "ml.close_job",
      "privileges": {
        "cluster": [
          "manage_ml"
        ]
      },
      "request": {
        "name": "Request",
        "namespace": "ml.close_job"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "ml.close_job"
      },
      "since": "5.4.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "POST"
          ],
          "path": "/_ml/anomaly_detectors/{job_id}/_close"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Deletes a calendar.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-delete-calendar.html",
      "name": "ml.delete_calendar",
      "request": {
        "name": "Request",
        "namespace": "ml.delete_calendar"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "ml.delete_calendar"
      },
      "since": "6.2.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "DELETE"
          ],
          "path": "/_ml/calendars/{calendar_id}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Deletes scheduled events from a calendar.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-delete-calendar-event.html",
      "name": "ml.delete_calendar_event",
      "request": {
        "name": "Request",
        "namespace": "ml.delete_calendar_event"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "ml.delete_calendar_event"
      },
      "since": "6.2.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "DELETE"
          ],
          "path": "/_ml/calendars/{calendar_id}/events/{event_id}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Deletes anomaly detection jobs from a calendar.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-delete-calendar-job.html",
      "name": "ml.delete_calendar_job",
      "request": {
        "name": "Request",
        "namespace": "ml.delete_calendar_job"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "ml.delete_calendar_job"
      },
      "since": "6.2.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "DELETE"
          ],
          "path": "/_ml/calendars/{calendar_id}/jobs/{job_id}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Deletes an existing data frame analytics job.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/delete-dfanalytics.html",
      "name": "ml.delete_data_frame_analytics",
      "request": {
        "name": "Request",
        "namespace": "ml.delete_data_frame_analytics"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "ml.delete_data_frame_analytics"
      },
      "since": "7.3.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "DELETE"
          ],
          "path": "/_ml/data_frame/analytics/{id}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Deletes an existing datafeed.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-delete-datafeed.html",
      "name": "ml.delete_datafeed",
      "request": {
        "name": "Request",
        "namespace": "ml.delete_datafeed"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "ml.delete_datafeed"
      },
      "since": "5.4.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "DELETE"
          ],
          "path": "/_ml/datafeeds/{datafeed_id}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Deletes expired and unused machine learning data.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-delete-expired-data.html",
      "name": "ml.delete_expired_data",
      "request": {
        "name": "Request",
        "namespace": "ml.delete_expired_data"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "ml.delete_expired_data"
      },
      "since": "5.4.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "DELETE"
          ],
          "path": "/_ml/_delete_expired_data/{job_id}"
        },
        {
          "methods": [
            "DELETE"
          ],
          "path": "/_ml/_delete_expired_data"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Deletes a filter.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-delete-filter.html",
      "name": "ml.delete_filter",
      "request": {
        "name": "Request",
        "namespace": "ml.delete_filter"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "ml.delete_filter"
      },
      "since": "5.4.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "DELETE"
          ],
          "path": "/_ml/filters/{filter_id}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Deletes forecasts from a machine learning job.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-delete-forecast.html",
      "name": "ml.delete_forecast",
      "request": {
        "name": "Request",
        "namespace": "ml.delete_forecast"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "ml.delete_forecast"
      },
      "since": "6.5.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "DELETE"
          ],
          "path": "/_ml/anomaly_detectors/{job_id}/_forecast"
        },
        {
          "methods": [
            "DELETE"
          ],
          "path": "/_ml/anomaly_detectors/{job_id}/_forecast/{forecast_id}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Deletes an existing anomaly detection job.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-delete-job.html",
      "name": "ml.delete_job",
      "request": {
        "name": "Request",
        "namespace": "ml.delete_job"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "ml.delete_job"
      },
      "since": "5.4.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "DELETE"
          ],
          "path": "/_ml/anomaly_detectors/{job_id}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Deletes an existing model snapshot.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-delete-snapshot.html",
      "name": "ml.delete_model_snapshot",
      "request": {
        "name": "Request",
        "namespace": "ml.delete_model_snapshot"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "ml.delete_model_snapshot"
      },
      "since": "5.4.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "DELETE"
          ],
          "path": "/_ml/anomaly_detectors/{job_id}/model_snapshots/{snapshot_id}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Deletes an existing trained inference model that is currently not referenced by an ingest pipeline.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/delete-trained-models.html",
      "name": "ml.delete_trained_model",
      "request": {
        "name": "Request",
        "namespace": "ml.delete_trained_model"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "ml.delete_trained_model"
      },
      "since": "7.10.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "DELETE"
          ],
          "path": "/_ml/trained_models/{model_id}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Deletes a model alias that refers to the trained model",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/delete-trained-models-aliases.html",
      "name": "ml.delete_trained_model_alias",
      "request": {
        "name": "Request",
        "namespace": "ml.delete_trained_model_alias"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "ml.delete_trained_model_alias"
      },
      "since": "7.13.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "DELETE"
          ],
          "path": "/_ml/trained_models/{model_id}/model_aliases/{model_alias}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Estimates the model memory",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-apis.html",
      "name": "ml.estimate_model_memory",
      "request": {
        "name": "Request",
        "namespace": "ml.estimate_model_memory"
      },
      "requestBodyRequired": true,
      "response": {
        "name": "Response",
        "namespace": "ml.estimate_model_memory"
      },
      "since": "7.7.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "POST"
          ],
          "path": "/_ml/anomaly_detectors/_estimate_model_memory"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Evaluates the data frame analytics for an annotated index.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/evaluate-dfanalytics.html",
      "name": "ml.evaluate_data_frame",
      "request": {
        "name": "Request",
        "namespace": "ml.evaluate_data_frame"
      },
      "requestBodyRequired": true,
      "response": {
        "name": "Response",
        "namespace": "ml.evaluate_data_frame"
      },
      "since": "7.3.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "POST"
          ],
          "path": "/_ml/data_frame/_evaluate"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Explains a data frame analytics config.",
      "docUrl": "http://www.elastic.co/guide/en/elasticsearch/reference/current/explain-dfanalytics.html",
      "name": "ml.explain_data_frame_analytics",
      "request": {
        "name": "Request",
        "namespace": "ml.explain_data_frame_analytics"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "ml.explain_data_frame_analytics"
      },
      "since": "7.3.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET",
            "POST"
          ],
          "path": "/_ml/data_frame/analytics/_explain"
        },
        {
          "methods": [
            "GET",
            "POST"
          ],
          "path": "/_ml/data_frame/analytics/{id}/_explain"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Forces any buffered data to be processed by the job.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-flush-job.html",
      "name": "ml.flush_job",
      "request": {
        "name": "Request",
        "namespace": "ml.flush_job"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "ml.flush_job"
      },
      "since": "5.4.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "POST"
          ],
          "path": "/_ml/anomaly_detectors/{job_id}/_flush"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Predicts the future behavior of a time series by using its historical behavior.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-forecast.html",
      "name": "ml.forecast",
      "request": {
        "name": "Request",
        "namespace": "ml.forecast"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "ml.forecast"
      },
      "since": "6.1.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "POST"
          ],
          "path": "/_ml/anomaly_detectors/{job_id}/_forecast"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Retrieves anomaly detection job results for one or more buckets.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-get-bucket.html",
      "name": "ml.get_buckets",
      "request": {
        "name": "Request",
        "namespace": "ml.get_buckets"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "ml.get_buckets"
      },
      "since": "5.4.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET",
            "POST"
          ],
          "path": "/_ml/anomaly_detectors/{job_id}/results/buckets/{timestamp}"
        },
        {
          "methods": [
            "GET",
            "POST"
          ],
          "path": "/_ml/anomaly_detectors/{job_id}/results/buckets"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Retrieves information about the scheduled events in calendars.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-get-calendar-event.html",
      "name": "ml.get_calendar_events",
      "request": {
        "name": "Request",
        "namespace": "ml.get_calendar_events"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "ml.get_calendar_events"
      },
      "since": "6.2.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/_ml/calendars/{calendar_id}/events"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Retrieves configuration information for calendars.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-get-calendar.html",
      "name": "ml.get_calendars",
      "request": {
        "name": "Request",
        "namespace": "ml.get_calendars"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "ml.get_calendars"
      },
      "since": "6.2.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET",
            "POST"
          ],
          "path": "/_ml/calendars"
        },
        {
          "methods": [
            "GET",
            "POST"
          ],
          "path": "/_ml/calendars/{calendar_id}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Retrieves anomaly detection job results for one or more categories.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-get-category.html",
      "name": "ml.get_categories",
      "request": {
        "name": "Request",
        "namespace": "ml.get_categories"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "ml.get_categories"
      },
      "since": "5.4.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET",
            "POST"
          ],
          "path": "/_ml/anomaly_detectors/{job_id}/results/categories/{category_id}"
        },
        {
          "methods": [
            "GET",
            "POST"
          ],
          "path": "/_ml/anomaly_detectors/{job_id}/results/categories/"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Retrieves configuration information for data frame analytics jobs.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/get-dfanalytics.html",
      "name": "ml.get_data_frame_analytics",
      "request": {
        "name": "Request",
        "namespace": "ml.get_data_frame_analytics"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "ml.get_data_frame_analytics"
      },
      "since": "7.3.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/_ml/data_frame/analytics/{id}"
        },
        {
          "methods": [
            "GET"
          ],
          "path": "/_ml/data_frame/analytics"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Retrieves usage information for data frame analytics jobs.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/get-dfanalytics-stats.html",
      "name": "ml.get_data_frame_analytics_stats",
      "request": {
        "name": "Request",
        "namespace": "ml.get_data_frame_analytics_stats"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "ml.get_data_frame_analytics_stats"
      },
      "since": "7.3.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/_ml/data_frame/analytics/_stats"
        },
        {
          "methods": [
            "GET"
          ],
          "path": "/_ml/data_frame/analytics/{id}/_stats"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Retrieves usage information for datafeeds.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-get-datafeed-stats.html",
      "name": "ml.get_datafeed_stats",
      "request": {
        "name": "Request",
        "namespace": "ml.get_datafeed_stats"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "ml.get_datafeed_stats"
      },
      "since": "5.5.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/_ml/datafeeds/{datafeed_id}/_stats"
        },
        {
          "methods": [
            "GET"
          ],
          "path": "/_ml/datafeeds/_stats"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Retrieves configuration information for datafeeds.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-get-datafeed.html",
      "name": "ml.get_datafeeds",
      "request": {
        "name": "Request",
        "namespace": "ml.get_datafeeds"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "ml.get_datafeeds"
      },
      "since": "5.5.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/_ml/datafeeds/{datafeed_id}"
        },
        {
          "methods": [
            "GET"
          ],
          "path": "/_ml/datafeeds"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Retrieves filters.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-get-filter.html",
      "name": "ml.get_filters",
      "request": {
        "name": "Request",
        "namespace": "ml.get_filters"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "ml.get_filters"
      },
      "since": "5.5.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/_ml/filters"
        },
        {
          "methods": [
            "GET"
          ],
          "path": "/_ml/filters/{filter_id}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Retrieves anomaly detection job results for one or more influencers.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-get-influencer.html",
      "name": "ml.get_influencers",
      "request": {
        "name": "Request",
        "namespace": "ml.get_influencers"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "ml.get_influencers"
      },
      "since": "5.4.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET",
            "POST"
          ],
          "path": "/_ml/anomaly_detectors/{job_id}/results/influencers"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Retrieves usage information for anomaly detection jobs.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-get-job-stats.html",
      "name": "ml.get_job_stats",
      "request": {
        "name": "Request",
        "namespace": "ml.get_job_stats"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "ml.get_job_stats"
      },
      "since": "5.5.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/_ml/anomaly_detectors/_stats"
        },
        {
          "methods": [
            "GET"
          ],
          "path": "/_ml/anomaly_detectors/{job_id}/_stats"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Retrieves configuration information for anomaly detection jobs.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-get-job.html",
      "name": "ml.get_jobs",
      "request": {
        "name": "Request",
        "namespace": "ml.get_jobs"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "ml.get_jobs"
      },
      "since": "5.5.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/_ml/anomaly_detectors/{job_id}"
        },
        {
          "methods": [
            "GET"
          ],
          "path": "/_ml/anomaly_detectors"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Retrieves information about model snapshots.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-get-snapshot.html",
      "name": "ml.get_model_snapshots",
      "request": {
        "name": "Request",
        "namespace": "ml.get_model_snapshots"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "ml.get_model_snapshots"
      },
      "since": "5.4.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET",
            "POST"
          ],
          "path": "/_ml/anomaly_detectors/{job_id}/model_snapshots/{snapshot_id}"
        },
        {
          "methods": [
            "GET",
            "POST"
          ],
          "path": "/_ml/anomaly_detectors/{job_id}/model_snapshots"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Retrieves overall bucket results that summarize the bucket results of multiple anomaly detection jobs.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-get-overall-buckets.html",
      "name": "ml.get_overall_buckets",
      "request": {
        "name": "Request",
        "namespace": "ml.get_overall_buckets"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "ml.get_overall_buckets"
      },
      "since": "6.1.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET",
            "POST"
          ],
          "path": "/_ml/anomaly_detectors/{job_id}/results/overall_buckets"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Retrieves anomaly records for an anomaly detection job.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-get-record.html",
      "name": "ml.get_records",
      "request": {
        "name": "Request",
        "namespace": "ml.get_records"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "ml.get_records"
      },
      "since": "5.4.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET",
            "POST"
          ],
          "path": "/_ml/anomaly_detectors/{job_id}/results/records"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Get information about trained model deployments.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-get-trained-model-deployment-stats.html",
      "name": "ml.get_trained_model_deployment_stats",
      "request": null,
      "requestBodyRequired": false,
      "response": null,
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/_ml/trained_models/{model_id}/deployment/_stats"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Retrieves configuration information for a trained inference model.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/get-trained-models.html",
      "name": "ml.get_trained_models",
      "request": {
        "name": "Request",
        "namespace": "ml.get_trained_models"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "ml.get_trained_models"
      },
      "since": "7.10.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/_ml/trained_models/{model_id}"
        },
        {
          "methods": [
            "GET"
          ],
          "path": "/_ml/trained_models"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Retrieves usage information for trained inference models.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/get-trained-models-stats.html",
      "name": "ml.get_trained_models_stats",
      "request": {
        "name": "Request",
        "namespace": "ml.get_trained_models_stats"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "ml.get_trained_models_stats"
      },
      "since": "7.10.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/_ml/trained_models/{model_id}/_stats"
        },
        {
          "methods": [
            "GET"
          ],
          "path": "/_ml/trained_models/_stats"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Evaluate a trained model.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/infer-trained-model-deployment.html",
      "name": "ml.infer_trained_model_deployment",
      "request": null,
      "requestBodyRequired": true,
      "response": null,
      "stability": "experimental",
      "urls": [
        {
          "methods": [
            "POST"
          ],
          "path": "/_ml/trained_models/{model_id}/deployment/_infer"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Returns defaults and limits used by machine learning.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/get-ml-info.html",
      "name": "ml.info",
      "request": {
        "name": "Request",
        "namespace": "ml.info"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "ml.info"
      },
      "since": "6.3.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/_ml/info"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Opens one or more anomaly detection jobs.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-open-job.html",
      "name": "ml.open_job",
      "request": {
        "name": "Request",
        "namespace": "ml.open_job"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "ml.open_job"
      },
      "since": "5.4.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "POST"
          ],
          "path": "/_ml/anomaly_detectors/{job_id}/_open"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Posts scheduled events in a calendar.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-post-calendar-event.html",
      "name": "ml.post_calendar_events",
      "request": {
        "name": "Request",
        "namespace": "ml.post_calendar_events"
      },
      "requestBodyRequired": true,
      "response": {
        "name": "Response",
        "namespace": "ml.post_calendar_events"
      },
      "since": "6.2.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "POST"
          ],
          "path": "/_ml/calendars/{calendar_id}/events"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/x-ndjson",
        "application/json"
      ],
      "description": "Sends data to an anomaly detection job for analysis.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-post-data.html",
      "name": "ml.post_data",
      "request": {
        "name": "Request",
        "namespace": "ml.post_data"
      },
      "requestBodyRequired": true,
      "response": {
        "name": "Response",
        "namespace": "ml.post_data"
      },
      "since": "5.4.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "POST"
          ],
          "path": "/_ml/anomaly_detectors/{job_id}/_data"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Previews that will be analyzed given a data frame analytics config.",
      "docUrl": "http://www.elastic.co/guide/en/elasticsearch/reference/current/preview-dfanalytics.html",
      "name": "ml.preview_data_frame_analytics",
      "request": {
        "name": "Request",
        "namespace": "ml.preview_data_frame_analytics"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "ml.preview_data_frame_analytics"
      },
      "since": "7.13.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET",
            "POST"
          ],
          "path": "/_ml/data_frame/analytics/_preview"
        },
        {
          "methods": [
            "GET",
            "POST"
          ],
          "path": "/_ml/data_frame/analytics/{id}/_preview"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Previews a datafeed.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-preview-datafeed.html",
      "name": "ml.preview_datafeed",
      "request": {
        "name": "Request",
        "namespace": "ml.preview_datafeed"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "ml.preview_datafeed"
      },
      "since": "5.4.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET",
            "POST"
          ],
          "path": "/_ml/datafeeds/{datafeed_id}/_preview"
        },
        {
          "methods": [
            "GET",
            "POST"
          ],
          "path": "/_ml/datafeeds/_preview"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Instantiates a calendar.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-put-calendar.html",
      "name": "ml.put_calendar",
      "request": {
        "name": "Request",
        "namespace": "ml.put_calendar"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "ml.put_calendar"
      },
      "since": "6.2.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "PUT"
          ],
          "path": "/_ml/calendars/{calendar_id}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Adds an anomaly detection job to a calendar.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-put-calendar-job.html",
      "name": "ml.put_calendar_job",
      "request": {
        "name": "Request",
        "namespace": "ml.put_calendar_job"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "ml.put_calendar_job"
      },
      "since": "6.2.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "PUT"
          ],
          "path": "/_ml/calendars/{calendar_id}/jobs/{job_id}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Instantiates a data frame analytics job.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/put-dfanalytics.html",
      "name": "ml.put_data_frame_analytics",
      "privileges": {
        "cluster": [
          "manage_ml"
        ],
        "index": [
          "create_index",
          "index",
          "manage",
          "read",
          "view_index_metadata"
        ]
      },
      "request": {
        "name": "Request",
        "namespace": "ml.put_data_frame_analytics"
      },
      "requestBodyRequired": true,
      "response": {
        "name": "Response",
        "namespace": "ml.put_data_frame_analytics"
      },
      "since": "7.3.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "PUT"
          ],
          "path": "/_ml/data_frame/analytics/{id}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Instantiates a datafeed.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-put-datafeed.html",
      "name": "ml.put_datafeed",
      "request": {
        "name": "Request",
        "namespace": "ml.put_datafeed"
      },
      "requestBodyRequired": true,
      "response": {
        "name": "Response",
        "namespace": "ml.put_datafeed"
      },
      "since": "5.4.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "PUT"
          ],
          "path": "/_ml/datafeeds/{datafeed_id}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Instantiates a filter.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-put-filter.html",
      "name": "ml.put_filter",
      "request": {
        "name": "Request",
        "namespace": "ml.put_filter"
      },
      "requestBodyRequired": true,
      "response": {
        "name": "Response",
        "namespace": "ml.put_filter"
      },
      "since": "5.4.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "PUT"
          ],
          "path": "/_ml/filters/{filter_id}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Instantiates an anomaly detection job.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-put-job.html",
      "name": "ml.put_job",
      "request": {
        "name": "Request",
        "namespace": "ml.put_job"
      },
      "requestBodyRequired": true,
      "response": {
        "name": "Response",
        "namespace": "ml.put_job"
      },
      "since": "5.4.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "PUT"
          ],
          "path": "/_ml/anomaly_detectors/{job_id}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Creates an inference trained model.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/put-trained-models.html",
      "name": "ml.put_trained_model",
      "request": {
        "name": "Request",
        "namespace": "ml.put_trained_model"
      },
      "requestBodyRequired": true,
      "response": {
        "name": "Response",
        "namespace": "ml.put_trained_model"
      },
      "since": "7.10.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "PUT"
          ],
          "path": "/_ml/trained_models/{model_id}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Creates a new model alias (or reassigns an existing one) to refer to the trained model",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/put-trained-models-aliases.html",
      "name": "ml.put_trained_model_alias",
      "request": {
        "name": "Request",
        "namespace": "ml.put_trained_model_alias"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "ml.put_trained_model_alias"
      },
      "since": "7.13.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "PUT"
          ],
          "path": "/_ml/trained_models/{model_id}/model_aliases/{model_alias}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Creates part of a trained model definition",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/put-trained-model-definition-part.html",
      "name": "ml.put_trained_model_definition_part",
      "request": null,
      "requestBodyRequired": true,
      "response": null,
      "stability": "experimental",
      "urls": [
        {
          "methods": [
            "PUT"
          ],
          "path": "/_ml/trained_models/{model_id}/definition/{part}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Creates a trained model vocabulary",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/put-trained-model-vocabulary.html",
      "name": "ml.put_trained_model_vocabulary",
      "request": null,
      "requestBodyRequired": true,
      "response": null,
      "stability": "experimental",
      "urls": [
        {
          "methods": [
            "PUT"
          ],
          "path": "/_ml/trained_models/{model_id}/vocabulary"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Resets an existing anomaly detection job.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-reset-job.html",
      "name": "ml.reset_job",
      "request": {
        "name": "Request",
        "namespace": "ml.reset_job"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "ml.reset_job"
      },
      "since": "7.14.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "POST"
          ],
          "path": "/_ml/anomaly_detectors/{job_id}/_reset"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Reverts to a specific snapshot.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-revert-snapshot.html",
      "name": "ml.revert_model_snapshot",
      "request": {
        "name": "Request",
        "namespace": "ml.revert_model_snapshot"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "ml.revert_model_snapshot"
      },
      "since": "5.4.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "POST"
          ],
          "path": "/_ml/anomaly_detectors/{job_id}/model_snapshots/{snapshot_id}/_revert"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Sets a cluster wide upgrade_mode setting that prepares machine learning indices for an upgrade.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-set-upgrade-mode.html",
      "name": "ml.set_upgrade_mode",
      "request": {
        "name": "Request",
        "namespace": "ml.set_upgrade_mode"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "ml.set_upgrade_mode"
      },
      "since": "6.7.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "POST"
          ],
          "path": "/_ml/set_upgrade_mode"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Starts a data frame analytics job.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/start-dfanalytics.html",
      "name": "ml.start_data_frame_analytics",
      "request": {
        "name": "Request",
        "namespace": "ml.start_data_frame_analytics"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "ml.start_data_frame_analytics"
      },
      "since": "5.4.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "POST"
          ],
          "path": "/_ml/data_frame/analytics/{id}/_start"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Starts one or more datafeeds.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-start-datafeed.html",
      "name": "ml.start_datafeed",
      "request": {
        "name": "Request",
        "namespace": "ml.start_datafeed"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "ml.start_datafeed"
      },
      "since": "5.5.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "POST"
          ],
          "path": "/_ml/datafeeds/{datafeed_id}/_start"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Start a trained model deployment.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/start-trained-model-deployment.html",
      "name": "ml.start_trained_model_deployment",
      "request": null,
      "requestBodyRequired": false,
      "response": null,
      "stability": "experimental",
      "urls": [
        {
          "methods": [
            "POST"
          ],
          "path": "/_ml/trained_models/{model_id}/deployment/_start"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Stops one or more data frame analytics jobs.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/stop-dfanalytics.html",
      "name": "ml.stop_data_frame_analytics",
      "request": {
        "name": "Request",
        "namespace": "ml.stop_data_frame_analytics"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "ml.stop_data_frame_analytics"
      },
      "since": "7.3.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "POST"
          ],
          "path": "/_ml/data_frame/analytics/{id}/_stop"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Stops one or more datafeeds.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-stop-datafeed.html",
      "name": "ml.stop_datafeed",
      "request": {
        "name": "Request",
        "namespace": "ml.stop_datafeed"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "ml.stop_datafeed"
      },
      "since": "5.4.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "POST"
          ],
          "path": "/_ml/datafeeds/{datafeed_id}/_stop"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Stop a trained model deployment.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/stop-trained-model-deployment.html",
      "name": "ml.stop_trained_model_deployment",
      "request": null,
      "requestBodyRequired": false,
      "response": null,
      "stability": "experimental",
      "urls": [
        {
          "methods": [
            "POST"
          ],
          "path": "/_ml/trained_models/{model_id}/deployment/_stop"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Updates certain properties of a data frame analytics job.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/update-dfanalytics.html",
      "name": "ml.update_data_frame_analytics",
      "request": {
        "name": "Request",
        "namespace": "ml.update_data_frame_analytics"
      },
      "requestBodyRequired": true,
      "response": {
        "name": "Response",
        "namespace": "ml.update_data_frame_analytics"
      },
      "since": "7.3.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "POST"
          ],
          "path": "/_ml/data_frame/analytics/{id}/_update"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Updates certain properties of a datafeed.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-update-datafeed.html",
      "name": "ml.update_datafeed",
      "request": null,
      "requestBodyRequired": true,
      "response": null,
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "POST"
          ],
          "path": "/_ml/datafeeds/{datafeed_id}/_update"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Updates the description of a filter, adds items, or removes items.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-update-filter.html",
      "name": "ml.update_filter",
      "request": {
        "name": "Request",
        "namespace": "ml.update_filter"
      },
      "requestBodyRequired": true,
      "response": {
        "name": "Response",
        "namespace": "ml.update_filter"
      },
      "since": "6.4.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "POST"
          ],
          "path": "/_ml/filters/{filter_id}/_update"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Updates certain properties of an anomaly detection job.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-update-job.html",
      "name": "ml.update_job",
      "request": {
        "name": "Request",
        "namespace": "ml.update_job"
      },
      "requestBodyRequired": true,
      "response": {
        "name": "Response",
        "namespace": "ml.update_job"
      },
      "since": "5.5.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "POST"
          ],
          "path": "/_ml/anomaly_detectors/{job_id}/_update"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Updates certain properties of a snapshot.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-update-snapshot.html",
      "name": "ml.update_model_snapshot",
      "request": {
        "name": "Request",
        "namespace": "ml.update_model_snapshot"
      },
      "requestBodyRequired": true,
      "response": {
        "name": "Response",
        "namespace": "ml.update_model_snapshot"
      },
      "since": "5.4.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "POST"
          ],
          "path": "/_ml/anomaly_detectors/{job_id}/model_snapshots/{snapshot_id}/_update"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Upgrades a given job snapshot to the current major version.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-upgrade-job-model-snapshot.html",
      "name": "ml.upgrade_job_snapshot",
      "request": {
        "name": "Request",
        "namespace": "ml.upgrade_job_snapshot"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "ml.upgrade_job_snapshot"
      },
      "since": "5.4.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "POST"
          ],
          "path": "/_ml/anomaly_detectors/{job_id}/model_snapshots/{snapshot_id}/_upgrade"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Validates an anomaly detection job.",
      "docUrl": "https://www.elastic.co/guide/en/machine-learning/current/ml-jobs.html",
      "name": "ml.validate",
      "request": {
        "name": "Request",
        "namespace": "ml.validate"
      },
      "requestBodyRequired": true,
      "response": {
        "name": "Response",
        "namespace": "ml.validate"
      },
      "since": "6.3.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "POST"
          ],
          "path": "/_ml/anomaly_detectors/_validate"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Validates an anomaly detection detector.",
      "docUrl": "https://www.elastic.co/guide/en/machine-learning/current/ml-jobs.html",
      "name": "ml.validate_detector",
      "request": {
        "name": "Request",
        "namespace": "ml.validate_detector"
      },
      "requestBodyRequired": true,
      "response": {
        "name": "Response",
        "namespace": "ml.validate_detector"
      },
      "since": "5.4.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "POST"
          ],
          "path": "/_ml/anomaly_detectors/_validate/detector"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/x-ndjson"
      ],
      "description": "Used by the monitoring features to send monitoring data.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/monitor-elasticsearch-cluster.html",
      "name": "monitoring.bulk",
      "request": {
        "name": "Request",
        "namespace": "monitoring.bulk"
      },
      "requestBodyRequired": true,
      "response": {
        "name": "Response",
        "namespace": "monitoring.bulk"
      },
      "since": "6.3.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "POST",
            "PUT"
          ],
          "path": "/_monitoring/bulk"
        },
        {
          "deprecation": {
            "description": "Specifying types in urls has been deprecated",
            "version": "7.0.0"
          },
          "methods": [
            "POST",
            "PUT"
          ],
          "path": "/_monitoring/{type}/bulk"
        }
      ],
      "visibility": "private"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/x-ndjson"
      ],
      "description": "Allows to execute several search operations in one request.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/search-multi-search.html",
      "name": "msearch",
      "request": {
        "name": "Request",
        "namespace": "_global.msearch"
      },
      "requestBodyRequired": true,
      "response": {
        "name": "Response",
        "namespace": "_global.msearch"
      },
      "since": "1.3.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET",
            "POST"
          ],
          "path": "/_msearch"
        },
        {
          "methods": [
            "GET",
            "POST"
          ],
          "path": "/{index}/_msearch"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/x-ndjson"
      ],
      "description": "Allows to execute several search template operations in one request.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/search-multi-search.html",
      "name": "msearch_template",
      "request": {
        "name": "Request",
        "namespace": "_global.msearch_template"
      },
      "requestBodyRequired": true,
      "response": {
        "name": "Response",
        "namespace": "_global.msearch_template"
      },
      "since": "5.0.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET",
            "POST"
          ],
          "path": "/_msearch/template"
        },
        {
          "methods": [
            "GET",
            "POST"
          ],
          "path": "/{index}/_msearch/template"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Returns multiple termvectors in one request.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/docs-multi-termvectors.html",
      "name": "mtermvectors",
      "request": {
        "name": "Request",
        "namespace": "_global.mtermvectors"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "_global.mtermvectors"
      },
      "since": "0.0.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET",
            "POST"
          ],
          "path": "/_mtermvectors"
        },
        {
          "methods": [
            "GET",
            "POST"
          ],
          "path": "/{index}/_mtermvectors"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Removes the archived repositories metering information present in the cluster.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/clear-repositories-metering-archive-api.html",
      "name": "nodes.clear_repositories_metering_archive",
      "request": null,
      "requestBodyRequired": false,
      "response": null,
      "stability": "experimental",
      "urls": [
        {
          "methods": [
            "DELETE"
          ],
          "path": "/_nodes/{node_id}/_repositories_metering/{max_archive_version}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Returns cluster repositories metering information.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/get-repositories-metering-api.html",
      "name": "nodes.get_repositories_metering_info",
      "request": null,
      "requestBodyRequired": false,
      "response": null,
      "stability": "experimental",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/_nodes/{node_id}/_repositories_metering"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "text/plain"
      ],
      "description": "Returns information about hot threads on each node in the cluster.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-nodes-hot-threads.html",
      "name": "nodes.hot_threads",
      "request": {
        "name": "Request",
        "namespace": "nodes.hot_threads"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "nodes.hot_threads"
      },
      "since": "0.0.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/_nodes/hot_threads"
        },
        {
          "methods": [
            "GET"
          ],
          "path": "/_nodes/{node_id}/hot_threads"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Returns information about nodes in the cluster.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-nodes-info.html",
      "name": "nodes.info",
      "request": {
        "name": "Request",
        "namespace": "nodes.info"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "nodes.info"
      },
      "since": "1.3.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/_nodes"
        },
        {
          "methods": [
            "GET"
          ],
          "path": "/_nodes/{node_id}"
        },
        {
          "methods": [
            "GET"
          ],
          "path": "/_nodes/{metric}"
        },
        {
          "methods": [
            "GET"
          ],
          "path": "/_nodes/{node_id}/{metric}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Reloads secure settings.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/secure-settings.html#reloadable-secure-settings",
      "name": "nodes.reload_secure_settings",
      "request": {
        "name": "Request",
        "namespace": "nodes.reload_secure_settings"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "nodes.reload_secure_settings"
      },
      "since": "6.5.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "POST"
          ],
          "path": "/_nodes/reload_secure_settings"
        },
        {
          "methods": [
            "POST"
          ],
          "path": "/_nodes/{node_id}/reload_secure_settings"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Returns statistical information about nodes in the cluster.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-nodes-stats.html",
      "name": "nodes.stats",
      "request": {
        "name": "Request",
        "namespace": "nodes.stats"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "nodes.stats"
      },
      "since": "0.0.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/_nodes/stats"
        },
        {
          "methods": [
            "GET"
          ],
          "path": "/_nodes/{node_id}/stats"
        },
        {
          "methods": [
            "GET"
          ],
          "path": "/_nodes/stats/{metric}"
        },
        {
          "methods": [
            "GET"
          ],
          "path": "/_nodes/{node_id}/stats/{metric}"
        },
        {
          "methods": [
            "GET"
          ],
          "path": "/_nodes/stats/{metric}/{index_metric}"
        },
        {
          "methods": [
            "GET"
          ],
          "path": "/_nodes/{node_id}/stats/{metric}/{index_metric}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Returns low-level information about REST actions usage on nodes.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-nodes-usage.html",
      "name": "nodes.usage",
      "request": {
        "name": "Request",
        "namespace": "nodes.usage"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "nodes.usage"
      },
      "since": "6.0.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/_nodes/usage"
        },
        {
          "methods": [
            "GET"
          ],
          "path": "/_nodes/{node_id}/usage"
        },
        {
          "methods": [
            "GET"
          ],
          "path": "/_nodes/usage/{metric}"
        },
        {
          "methods": [
            "GET"
          ],
          "path": "/_nodes/{node_id}/usage/{metric}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Open a point in time that can be used in subsequent searches",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/point-in-time-api.html",
      "name": "open_point_in_time",
      "request": {
        "name": "Request",
        "namespace": "_global.open_point_in_time"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "_global.open_point_in_time"
      },
      "since": "7.10.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "POST"
          ],
          "path": "/{index}/_pit"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Returns whether the cluster is running.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/index.html",
      "name": "ping",
      "request": {
        "name": "Request",
        "namespace": "_global.ping"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "_global.ping"
      },
      "since": "0.0.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "HEAD"
          ],
          "path": "/"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Creates or updates a script.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/modules-scripting.html",
      "name": "put_script",
      "request": {
        "name": "Request",
        "namespace": "_global.put_script"
      },
      "requestBodyRequired": true,
      "response": {
        "name": "Response",
        "namespace": "_global.put_script"
      },
      "since": "0.0.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "PUT",
            "POST"
          ],
          "path": "/_scripts/{id}"
        },
        {
          "methods": [
            "PUT",
            "POST"
          ],
          "path": "/_scripts/{id}/{context}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Allows to evaluate the quality of ranked search results over a set of typical search queries",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/search-rank-eval.html",
      "name": "rank_eval",
      "privileges": {
        "index": [
          "read"
        ]
      },
      "request": {
        "name": "Request",
        "namespace": "_global.rank_eval"
      },
      "requestBodyRequired": true,
      "response": {
        "name": "Response",
        "namespace": "_global.rank_eval"
      },
      "since": "6.2.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET",
            "POST"
          ],
          "path": "/_rank_eval"
        },
        {
          "methods": [
            "GET",
            "POST"
          ],
          "path": "/{index}/_rank_eval"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Allows to copy documents from one index to another, optionally filtering the source\ndocuments by a query, changing the destination index settings, or fetching the\ndocuments from a remote cluster.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/docs-reindex.html",
      "name": "reindex",
      "request": {
        "name": "Request",
        "namespace": "_global.reindex"
      },
      "requestBodyRequired": true,
      "response": {
        "name": "Response",
        "namespace": "_global.reindex"
      },
      "since": "2.3.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "POST"
          ],
          "path": "/_reindex"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Changes the number of requests per second for a particular Reindex operation.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/docs-reindex.html",
      "name": "reindex_rethrottle",
      "request": {
        "name": "Request",
        "namespace": "_global.reindex_rethrottle"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "_global.reindex_rethrottle"
      },
      "since": "2.4.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "POST"
          ],
          "path": "/_reindex/{task_id}/_rethrottle"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Allows to use the Mustache language to pre-render a search definition.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/render-search-template-api.html",
      "name": "render_search_template",
      "request": {
        "name": "Request",
        "namespace": "_global.render_search_template"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "_global.render_search_template"
      },
      "since": "0.0.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET",
            "POST"
          ],
          "path": "/_render/template"
        },
        {
          "methods": [
            "GET",
            "POST"
          ],
          "path": "/_render/template/{id}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Deletes an existing rollup job.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/rollup-delete-job.html",
      "name": "rollup.delete_job",
      "request": {
        "name": "Request",
        "namespace": "rollup.delete_job"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "rollup.delete_job"
      },
      "since": "6.3.0",
      "stability": "experimental",
      "urls": [
        {
          "methods": [
            "DELETE"
          ],
          "path": "/_rollup/job/{id}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Retrieves the configuration, stats, and status of rollup jobs.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/rollup-get-job.html",
      "name": "rollup.get_jobs",
      "request": {
        "name": "Request",
        "namespace": "rollup.get_jobs"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "rollup.get_jobs"
      },
      "since": "6.3.0",
      "stability": "experimental",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/_rollup/job/{id}"
        },
        {
          "methods": [
            "GET"
          ],
          "path": "/_rollup/job/"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Returns the capabilities of any rollup jobs that have been configured for a specific index or index pattern.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/rollup-get-rollup-caps.html",
      "name": "rollup.get_rollup_caps",
      "request": {
        "name": "Request",
        "namespace": "rollup.get_rollup_caps"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "rollup.get_rollup_caps"
      },
      "since": "6.3.0",
      "stability": "experimental",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/_rollup/data/{id}"
        },
        {
          "methods": [
            "GET"
          ],
          "path": "/_rollup/data/"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Returns the rollup capabilities of all jobs inside of a rollup index (e.g. the index where rollup data is stored).",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/rollup-get-rollup-index-caps.html",
      "name": "rollup.get_rollup_index_caps",
      "request": {
        "name": "Request",
        "namespace": "rollup.get_rollup_index_caps"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "rollup.get_rollup_index_caps"
      },
      "since": "6.4.0",
      "stability": "experimental",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/{index}/_rollup/data"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Creates a rollup job.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/rollup-put-job.html",
      "name": "rollup.put_job",
      "request": {
        "name": "Request",
        "namespace": "rollup.put_job"
      },
      "requestBodyRequired": true,
      "response": {
        "name": "Response",
        "namespace": "rollup.put_job"
      },
      "since": "6.3.0",
      "stability": "experimental",
      "urls": [
        {
          "methods": [
            "PUT"
          ],
          "path": "/_rollup/job/{id}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Rollup an index",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/xpack-rollup.html",
      "name": "rollup.rollup",
      "request": {
        "name": "Request",
        "namespace": "rollup.rollup"
      },
      "requestBodyRequired": true,
      "response": {
        "name": "Response",
        "namespace": "rollup.rollup"
      },
      "since": "7.13.0",
      "stability": "experimental",
      "urls": [
        {
          "methods": [
            "POST"
          ],
          "path": "/{index}/_rollup/{rollup_index}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Enables searching rolled-up data using the standard query DSL.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/rollup-search.html",
      "name": "rollup.rollup_search",
      "request": {
        "name": "Request",
        "namespace": "rollup.rollup_search"
      },
      "requestBodyRequired": true,
      "response": {
        "name": "Response",
        "namespace": "rollup.rollup_search"
      },
      "since": "6.3.0",
      "stability": "experimental",
      "urls": [
        {
          "methods": [
            "GET",
            "POST"
          ],
          "path": "/{index}/_rollup_search"
        },
        {
          "deprecation": {
            "description": "Specifying types in urls has been deprecated",
            "version": "7.0.0"
          },
          "methods": [
            "GET",
            "POST"
          ],
          "path": "/{index}/{type}/_rollup_search"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Starts an existing, stopped rollup job.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/rollup-start-job.html",
      "name": "rollup.start_job",
      "request": {
        "name": "Request",
        "namespace": "rollup.start_job"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "rollup.start_job"
      },
      "since": "6.3.0",
      "stability": "experimental",
      "urls": [
        {
          "methods": [
            "POST"
          ],
          "path": "/_rollup/job/{id}/_start"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Stops an existing, started rollup job.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/rollup-stop-job.html",
      "name": "rollup.stop_job",
      "request": {
        "name": "Request",
        "namespace": "rollup.stop_job"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "rollup.stop_job"
      },
      "since": "6.3.0",
      "stability": "experimental",
      "urls": [
        {
          "methods": [
            "POST"
          ],
          "path": "/_rollup/job/{id}/_stop"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Allows an arbitrary script to be executed and a result to be returned",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/painless/master/painless-execute-api.html",
      "name": "scripts_painless_execute",
      "request": {
        "name": "Request",
        "namespace": "_global.scripts_painless_execute"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "_global.scripts_painless_execute"
      },
      "since": "6.3.0",
      "stability": "experimental",
      "urls": [
        {
          "methods": [
            "GET",
            "POST"
          ],
          "path": "/_scripts/painless/_execute"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Allows to retrieve a large numbers of results from a single search request.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/search-request-body.html#request-body-search-scroll",
      "name": "scroll",
      "request": {
        "name": "Request",
        "namespace": "_global.scroll"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "_global.scroll"
      },
      "since": "0.0.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET",
            "POST"
          ],
          "path": "/_search/scroll"
        },
        {
          "deprecation": {
            "description": "A scroll id can be quite large and should be specified as part of the body",
            "version": "7.0.0"
          },
          "methods": [
            "GET",
            "POST"
          ],
          "path": "/_search/scroll/{scroll_id}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Returns results matching a query.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/search-search.html",
      "name": "search",
      "request": {
        "name": "Request",
        "namespace": "_global.search"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "_global.search"
      },
      "since": "0.0.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET",
            "POST"
          ],
          "path": "/_search"
        },
        {
          "methods": [
            "GET",
            "POST"
          ],
          "path": "/{index}/_search"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/vnd.mapbox-vector-tile"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Searches a vector tile for geospatial values. Returns results as a binary Mapbox vector tile.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/search-vector-tile-api.html",
      "name": "search_mvt",
      "request": {
        "name": "Request",
        "namespace": "_global.search_mvt"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "_global.search_mvt"
      },
      "since": "7.15.0",
      "stability": "experimental",
      "urls": [
        {
          "methods": [
            "POST",
            "GET"
          ],
          "path": "/{index}/_mvt/{field}/{zoom}/{x}/{y}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Returns information about the indices and shards that a search request would be executed against.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/search-shards.html",
      "name": "search_shards",
      "request": {
        "name": "Request",
        "namespace": "_global.search_shards"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "_global.search_shards"
      },
      "since": "0.0.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET",
            "POST"
          ],
          "path": "/_search_shards"
        },
        {
          "methods": [
            "GET",
            "POST"
          ],
          "path": "/{index}/_search_shards"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Allows to use the Mustache language to pre-render a search definition.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html",
      "name": "search_template",
      "request": {
        "name": "Request",
        "namespace": "_global.search_template"
      },
      "requestBodyRequired": true,
      "response": {
        "name": "Response",
        "namespace": "_global.search_template"
      },
      "since": "2.0.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET",
            "POST"
          ],
          "path": "/_search/template"
        },
        {
          "methods": [
            "GET",
            "POST"
          ],
          "path": "/{index}/_search/template"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Retrieve node-level cache statistics about searchable snapshots.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/searchable-snapshots-apis.html",
      "name": "searchable_snapshots.cache_stats",
      "request": null,
      "requestBodyRequired": false,
      "response": null,
      "stability": "experimental",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/_searchable_snapshots/cache/stats"
        },
        {
          "methods": [
            "GET"
          ],
          "path": "/_searchable_snapshots/{node_id}/cache/stats"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Clear the cache of searchable snapshots.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/searchable-snapshots-apis.html",
      "name": "searchable_snapshots.clear_cache",
      "request": {
        "name": "Request",
        "namespace": "searchable_snapshots.clear_cache"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "searchable_snapshots.clear_cache"
      },
      "since": "7.10.0",
      "stability": "experimental",
      "urls": [
        {
          "methods": [
            "POST"
          ],
          "path": "/_searchable_snapshots/cache/clear"
        },
        {
          "methods": [
            "POST"
          ],
          "path": "/{index}/_searchable_snapshots/cache/clear"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Mount a snapshot as a searchable index.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/searchable-snapshots-api-mount-snapshot.html",
      "name": "searchable_snapshots.mount",
      "request": {
        "name": "Request",
        "namespace": "searchable_snapshots.mount"
      },
      "requestBodyRequired": true,
      "response": {
        "name": "Response",
        "namespace": "searchable_snapshots.mount"
      },
      "since": "7.10.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "POST"
          ],
          "path": "/_snapshot/{repository}/{snapshot}/_mount"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Retrieve shard-level statistics about searchable snapshots.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/searchable-snapshots-apis.html",
      "name": "searchable_snapshots.stats",
      "request": {
        "name": "Request",
        "namespace": "searchable_snapshots.stats"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "searchable_snapshots.stats"
      },
      "since": "7.10.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/_searchable_snapshots/stats"
        },
        {
          "methods": [
            "GET"
          ],
          "path": "/{index}/_searchable_snapshots/stats"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Enables authentication as a user and retrieve information about the authenticated user.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-authenticate.html",
      "name": "security.authenticate",
      "request": {
        "name": "Request",
        "namespace": "security.authenticate"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "security.authenticate"
      },
      "since": "5.5.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/_security/_authenticate"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Changes the passwords of users in the native realm and built-in users.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-change-password.html",
      "name": "security.change_password",
      "request": {
        "name": "Request",
        "namespace": "security.change_password"
      },
      "requestBodyRequired": true,
      "response": {
        "name": "Response",
        "namespace": "security.change_password"
      },
      "since": "0.0.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "PUT",
            "POST"
          ],
          "path": "/_security/user/{username}/_password"
        },
        {
          "methods": [
            "PUT",
            "POST"
          ],
          "path": "/_security/user/_password"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Clear a subset or all entries from the API key cache.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-clear-api-key-cache.html",
      "name": "security.clear_api_key_cache",
      "request": {
        "name": "Request",
        "namespace": "security.clear_api_key_cache"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "security.clear_api_key_cache"
      },
      "since": "7.10.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "POST"
          ],
          "path": "/_security/api_key/{ids}/_clear_cache"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Evicts application privileges from the native application privileges cache.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-clear-privilege-cache.html",
      "name": "security.clear_cached_privileges",
      "request": {
        "name": "Request",
        "namespace": "security.clear_cached_privileges"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "security.clear_cached_privileges"
      },
      "since": "7.9.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "POST"
          ],
          "path": "/_security/privilege/{application}/_clear_cache"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Evicts users from the user cache. Can completely clear the cache or evict specific users.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-clear-cache.html",
      "name": "security.clear_cached_realms",
      "request": {
        "name": "Request",
        "namespace": "security.clear_cached_realms"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "security.clear_cached_realms"
      },
      "since": "0.0.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "POST"
          ],
          "path": "/_security/realm/{realms}/_clear_cache"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Evicts roles from the native role cache.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-clear-role-cache.html",
      "name": "security.clear_cached_roles",
      "request": {
        "name": "Request",
        "namespace": "security.clear_cached_roles"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "security.clear_cached_roles"
      },
      "since": "0.0.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "POST"
          ],
          "path": "/_security/role/{name}/_clear_cache"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Evicts tokens from the service account token caches.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-clear-service-token-caches.html",
      "name": "security.clear_cached_service_tokens",
      "request": {
        "name": "Request",
        "namespace": "security.clear_cached_service_tokens"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "security.clear_cached_service_tokens"
      },
      "since": "0.0.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "POST"
          ],
          "path": "/_security/service/{namespace}/{service}/credential/token/{name}/_clear_cache"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Creates an API key for access without requiring basic authentication.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-create-api-key.html",
      "name": "security.create_api_key",
      "request": {
        "name": "Request",
        "namespace": "security.create_api_key"
      },
      "requestBodyRequired": true,
      "response": {
        "name": "Response",
        "namespace": "security.create_api_key"
      },
      "since": "6.7.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "PUT",
            "POST"
          ],
          "path": "/_security/api_key"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Creates a service account token for access without requiring basic authentication.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-create-service-token.html",
      "name": "security.create_service_token",
      "request": {
        "name": "Request",
        "namespace": "security.create_service_token"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "security.create_service_token"
      },
      "since": "0.0.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "PUT",
            "POST"
          ],
          "path": "/_security/service/{namespace}/{service}/credential/token/{name}"
        },
        {
          "methods": [
            "POST"
          ],
          "path": "/_security/service/{namespace}/{service}/credential/token"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Removes application privileges.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-delete-privilege.html",
      "name": "security.delete_privileges",
      "request": {
        "name": "Request",
        "namespace": "security.delete_privileges"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "security.delete_privileges"
      },
      "since": "6.4.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "DELETE"
          ],
          "path": "/_security/privilege/{application}/{name}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Removes roles in the native realm.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-delete-role.html",
      "name": "security.delete_role",
      "request": {
        "name": "Request",
        "namespace": "security.delete_role"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "security.delete_role"
      },
      "since": "0.0.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "DELETE"
          ],
          "path": "/_security/role/{name}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Removes role mappings.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-delete-role-mapping.html",
      "name": "security.delete_role_mapping",
      "request": {
        "name": "Request",
        "namespace": "security.delete_role_mapping"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "security.delete_role_mapping"
      },
      "since": "5.5.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "DELETE"
          ],
          "path": "/_security/role_mapping/{name}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Deletes a service account token.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-delete-service-token.html",
      "name": "security.delete_service_token",
      "request": {
        "name": "Request",
        "namespace": "security.delete_service_token"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "security.delete_service_token"
      },
      "since": "5.5.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "DELETE"
          ],
          "path": "/_security/service/{namespace}/{service}/credential/token/{name}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Deletes users from the native realm.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-delete-user.html",
      "name": "security.delete_user",
      "request": {
        "name": "Request",
        "namespace": "security.delete_user"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "security.delete_user"
      },
      "since": "0.0.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "DELETE"
          ],
          "path": "/_security/user/{username}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Disables users in the native realm.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-disable-user.html",
      "name": "security.disable_user",
      "request": {
        "name": "Request",
        "namespace": "security.disable_user"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "security.disable_user"
      },
      "since": "0.0.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "PUT",
            "POST"
          ],
          "path": "/_security/user/{username}/_disable"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Enables users in the native realm.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-enable-user.html",
      "name": "security.enable_user",
      "request": {
        "name": "Request",
        "namespace": "security.enable_user"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "security.enable_user"
      },
      "since": "0.0.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "PUT",
            "POST"
          ],
          "path": "/_security/user/{username}/_enable"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Allows a kibana instance to configure itself to communicate with a secured elasticsearch cluster.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/security-api-kibana-enrollment.html",
      "name": "security.enroll_kibana",
      "request": null,
      "requestBodyRequired": false,
      "response": null,
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/_security/enroll/kibana"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Allows a new node to enroll to an existing cluster with security enabled.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/security-api-node-enrollment.html",
      "name": "security.enroll_node",
      "request": null,
      "requestBodyRequired": false,
      "response": null,
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/_security/enroll/node"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Retrieves information for one or more API keys.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-get-api-key.html",
      "name": "security.get_api_key",
      "request": {
        "name": "Request",
        "namespace": "security.get_api_key"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "security.get_api_key"
      },
      "since": "6.7.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/_security/api_key"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Retrieves the list of cluster privileges and index privileges that are available in this version of Elasticsearch.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-get-builtin-privileges.html",
      "name": "security.get_builtin_privileges",
      "request": {
        "name": "Request",
        "namespace": "security.get_builtin_privileges"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "security.get_builtin_privileges"
      },
      "since": "7.3.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/_security/privilege/_builtin"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Retrieves application privileges.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-get-privileges.html",
      "name": "security.get_privileges",
      "request": {
        "name": "Request",
        "namespace": "security.get_privileges"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "security.get_privileges"
      },
      "since": "6.4.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/_security/privilege"
        },
        {
          "methods": [
            "GET"
          ],
          "path": "/_security/privilege/{application}"
        },
        {
          "methods": [
            "GET"
          ],
          "path": "/_security/privilege/{application}/{name}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Retrieves roles in the native realm.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-get-role.html",
      "name": "security.get_role",
      "request": {
        "name": "Request",
        "namespace": "security.get_role"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "security.get_role"
      },
      "since": "0.0.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/_security/role/{name}"
        },
        {
          "methods": [
            "GET"
          ],
          "path": "/_security/role"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Retrieves role mappings.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-get-role-mapping.html",
      "name": "security.get_role_mapping",
      "request": {
        "name": "Request",
        "namespace": "security.get_role_mapping"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "security.get_role_mapping"
      },
      "since": "5.5.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/_security/role_mapping/{name}"
        },
        {
          "methods": [
            "GET"
          ],
          "path": "/_security/role_mapping"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Retrieves information about service accounts.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-get-service-accounts.html",
      "name": "security.get_service_accounts",
      "request": {
        "name": "Request",
        "namespace": "security.get_service_accounts"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "security.get_service_accounts"
      },
      "since": "7.13.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/_security/service/{namespace}/{service}"
        },
        {
          "methods": [
            "GET"
          ],
          "path": "/_security/service/{namespace}"
        },
        {
          "methods": [
            "GET"
          ],
          "path": "/_security/service"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Retrieves information of all service credentials for a service account.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-get-service-credentials.html",
      "name": "security.get_service_credentials",
      "request": {
        "name": "Request",
        "namespace": "security.get_service_credentials"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "security.get_service_credentials"
      },
      "since": "7.13.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/_security/service/{namespace}/{service}/credential"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Creates a bearer token for access without requiring basic authentication.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-get-token.html",
      "name": "security.get_token",
      "request": {
        "name": "Request",
        "namespace": "security.get_token"
      },
      "requestBodyRequired": true,
      "response": {
        "name": "Response",
        "namespace": "security.get_token"
      },
      "since": "5.5.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "POST"
          ],
          "path": "/_security/oauth2/token"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Retrieves information about users in the native realm and built-in users.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-get-user.html",
      "name": "security.get_user",
      "request": {
        "name": "Request",
        "namespace": "security.get_user"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "security.get_user"
      },
      "since": "0.0.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/_security/user/{username}"
        },
        {
          "methods": [
            "GET"
          ],
          "path": "/_security/user"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Retrieves security privileges for the logged in user.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-get-user-privileges.html",
      "name": "security.get_user_privileges",
      "request": {
        "name": "Request",
        "namespace": "security.get_user_privileges"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "security.get_user_privileges"
      },
      "since": "6.5.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/_security/user/_privileges"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Creates an API key on behalf of another user.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-grant-api-key.html",
      "name": "security.grant_api_key",
      "request": {
        "name": "Request",
        "namespace": "security.grant_api_key"
      },
      "requestBodyRequired": true,
      "response": {
        "name": "Response",
        "namespace": "security.grant_api_key"
      },
      "since": "7.9.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "POST"
          ],
          "path": "/_security/api_key/grant"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Determines whether the specified user has a specified list of privileges.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-has-privileges.html",
      "name": "security.has_privileges",
      "request": {
        "name": "Request",
        "namespace": "security.has_privileges"
      },
      "requestBodyRequired": true,
      "response": {
        "name": "Response",
        "namespace": "security.has_privileges"
      },
      "since": "6.4.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET",
            "POST"
          ],
          "path": "/_security/user/_has_privileges"
        },
        {
          "methods": [
            "GET",
            "POST"
          ],
          "path": "/_security/user/{user}/_has_privileges"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Invalidates one or more API keys.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-invalidate-api-key.html",
      "name": "security.invalidate_api_key",
      "request": {
        "name": "Request",
        "namespace": "security.invalidate_api_key"
      },
      "requestBodyRequired": true,
      "response": {
        "name": "Response",
        "namespace": "security.invalidate_api_key"
      },
      "since": "6.7.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "DELETE"
          ],
          "path": "/_security/api_key"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Invalidates one or more access tokens or refresh tokens.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-invalidate-token.html",
      "name": "security.invalidate_token",
      "request": {
        "name": "Request",
        "namespace": "security.invalidate_token"
      },
      "requestBodyRequired": true,
      "response": {
        "name": "Response",
        "namespace": "security.invalidate_token"
      },
      "since": "5.5.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "DELETE"
          ],
          "path": "/_security/oauth2/token"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Adds or updates application privileges.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-put-privileges.html",
      "name": "security.put_privileges",
      "request": {
        "name": "Request",
        "namespace": "security.put_privileges"
      },
      "requestBodyRequired": true,
      "response": {
        "name": "Response",
        "namespace": "security.put_privileges"
      },
      "since": "6.4.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "PUT",
            "POST"
          ],
          "path": "/_security/privilege/"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Adds and updates roles in the native realm.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-put-role.html",
      "name": "security.put_role",
      "request": {
        "name": "Request",
        "namespace": "security.put_role"
      },
      "requestBodyRequired": true,
      "response": {
        "name": "Response",
        "namespace": "security.put_role"
      },
      "since": "0.0.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "PUT",
            "POST"
          ],
          "path": "/_security/role/{name}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Creates and updates role mappings.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-put-role-mapping.html",
      "name": "security.put_role_mapping",
      "request": {
        "name": "Request",
        "namespace": "security.put_role_mapping"
      },
      "requestBodyRequired": true,
      "response": {
        "name": "Response",
        "namespace": "security.put_role_mapping"
      },
      "since": "5.5.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "PUT",
            "POST"
          ],
          "path": "/_security/role_mapping/{name}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Adds and updates users in the native realm. These users are commonly referred to as native users.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-put-user.html",
      "name": "security.put_user",
      "request": {
        "name": "Request",
        "namespace": "security.put_user"
      },
      "requestBodyRequired": true,
      "response": {
        "name": "Response",
        "namespace": "security.put_user"
      },
      "since": "0.0.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "PUT",
            "POST"
          ],
          "path": "/_security/user/{username}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Retrieves information for API keys using a subset of query DSL",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-query-api-key.html",
      "name": "security.query_api_keys",
      "request": null,
      "requestBodyRequired": false,
      "response": null,
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET",
            "POST"
          ],
          "path": "/_security/_query/api_key"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Exchanges a SAML Response message for an Elasticsearch access token and refresh token pair",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-saml-authenticate.html",
      "name": "security.saml_authenticate",
      "request": null,
      "requestBodyRequired": true,
      "response": null,
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "POST"
          ],
          "path": "/_security/saml/authenticate"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Verifies the logout response sent from the SAML IdP",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-saml-complete-logout.html",
      "name": "security.saml_complete_logout",
      "request": null,
      "requestBodyRequired": true,
      "response": null,
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "POST"
          ],
          "path": "/_security/saml/complete_logout"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Consumes a SAML LogoutRequest",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-saml-invalidate.html",
      "name": "security.saml_invalidate",
      "request": null,
      "requestBodyRequired": true,
      "response": null,
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "POST"
          ],
          "path": "/_security/saml/invalidate"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Invalidates an access token and a refresh token that were generated via the SAML Authenticate API",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-saml-logout.html",
      "name": "security.saml_logout",
      "request": null,
      "requestBodyRequired": true,
      "response": null,
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "POST"
          ],
          "path": "/_security/saml/logout"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Creates a SAML authentication request",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-saml-prepare-authentication.html",
      "name": "security.saml_prepare_authentication",
      "request": null,
      "requestBodyRequired": true,
      "response": null,
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "POST"
          ],
          "path": "/_security/saml/prepare"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Generates SAML metadata for the Elastic stack SAML 2.0 Service Provider",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-saml-sp-metadata.html",
      "name": "security.saml_service_provider_metadata",
      "request": null,
      "requestBodyRequired": false,
      "response": null,
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/_security/saml/metadata/{realm_name}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Removes a node from the shutdown list. Designed for indirect use by ECE/ESS and ECK. Direct use is not supported.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current",
      "name": "shutdown.delete_node",
      "request": {
        "name": "Request",
        "namespace": "shutdown.delete_node"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "shutdown.delete_node"
      },
      "since": "7.13.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "DELETE"
          ],
          "path": "/_nodes/{node_id}/shutdown"
        }
      ],
      "visibility": "private"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Retrieve status of a node or nodes that are currently marked as shutting down. Designed for indirect use by ECE/ESS and ECK. Direct use is not supported.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current",
      "name": "shutdown.get_node",
      "request": {
        "name": "Request",
        "namespace": "shutdown.get_node"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "shutdown.get_node"
      },
      "since": "7.13.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/_nodes/shutdown"
        },
        {
          "methods": [
            "GET"
          ],
          "path": "/_nodes/{node_id}/shutdown"
        }
      ],
      "visibility": "private"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Adds a node to be shut down. Designed for indirect use by ECE/ESS and ECK. Direct use is not supported.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current",
      "name": "shutdown.put_node",
      "request": {
        "name": "Request",
        "namespace": "shutdown.put_node"
      },
      "requestBodyRequired": true,
      "response": {
        "name": "Response",
        "namespace": "shutdown.put_node"
      },
      "since": "7.13.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "PUT"
          ],
          "path": "/_nodes/{node_id}/shutdown"
        }
      ],
      "visibility": "private"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Deletes an existing snapshot lifecycle policy.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/slm-api-delete-policy.html",
      "name": "slm.delete_lifecycle",
      "request": {
        "name": "Request",
        "namespace": "slm.delete_lifecycle"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "slm.delete_lifecycle"
      },
      "since": "7.4.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "DELETE"
          ],
          "path": "/_slm/policy/{policy_id}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Immediately creates a snapshot according to the lifecycle policy, without waiting for the scheduled time.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/slm-api-execute-lifecycle.html",
      "name": "slm.execute_lifecycle",
      "request": {
        "name": "Request",
        "namespace": "slm.execute_lifecycle"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "slm.execute_lifecycle"
      },
      "since": "7.4.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "PUT"
          ],
          "path": "/_slm/policy/{policy_id}/_execute"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Deletes any snapshots that are expired according to the policy's retention rules.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/slm-api-execute-retention.html",
      "name": "slm.execute_retention",
      "request": {
        "name": "Request",
        "namespace": "slm.execute_retention"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "slm.execute_retention"
      },
      "since": "7.5.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "POST"
          ],
          "path": "/_slm/_execute_retention"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Retrieves one or more snapshot lifecycle policy definitions and information about the latest snapshot attempts.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/slm-api-get-policy.html",
      "name": "slm.get_lifecycle",
      "request": {
        "name": "Request",
        "namespace": "slm.get_lifecycle"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "slm.get_lifecycle"
      },
      "since": "7.4.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/_slm/policy/{policy_id}"
        },
        {
          "methods": [
            "GET"
          ],
          "path": "/_slm/policy"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Returns global and policy-level statistics about actions taken by snapshot lifecycle management.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/slm-api-get-stats.html",
      "name": "slm.get_stats",
      "request": {
        "name": "Request",
        "namespace": "slm.get_stats"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "slm.get_stats"
      },
      "since": "7.5.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/_slm/stats"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Retrieves the status of snapshot lifecycle management (SLM).",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/slm-api-get-status.html",
      "name": "slm.get_status",
      "request": {
        "name": "Request",
        "namespace": "slm.get_status"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "slm.get_status"
      },
      "since": "7.6.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/_slm/status"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Creates or updates a snapshot lifecycle policy.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/slm-api-put-policy.html",
      "name": "slm.put_lifecycle",
      "request": {
        "name": "Request",
        "namespace": "slm.put_lifecycle"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "slm.put_lifecycle"
      },
      "since": "7.4.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "PUT"
          ],
          "path": "/_slm/policy/{policy_id}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Turns on snapshot lifecycle management (SLM).",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/slm-api-start.html",
      "name": "slm.start",
      "request": {
        "name": "Request",
        "namespace": "slm.start"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "slm.start"
      },
      "since": "7.6.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "POST"
          ],
          "path": "/_slm/start"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Turns off snapshot lifecycle management (SLM).",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/slm-api-stop.html",
      "name": "slm.stop",
      "request": {
        "name": "Request",
        "namespace": "slm.stop"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "slm.stop"
      },
      "since": "7.6.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "POST"
          ],
          "path": "/_slm/stop"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Removes stale data from repository.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/clean-up-snapshot-repo-api.html",
      "name": "snapshot.cleanup_repository",
      "request": {
        "name": "Request",
        "namespace": "snapshot.cleanup_repository"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "snapshot.cleanup_repository"
      },
      "since": "7.4.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "POST"
          ],
          "path": "/_snapshot/{repository}/_cleanup"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Clones indices from one snapshot into another snapshot in the same repository.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/modules-snapshots.html",
      "name": "snapshot.clone",
      "request": {
        "name": "Request",
        "namespace": "snapshot.clone"
      },
      "requestBodyRequired": true,
      "response": {
        "name": "Response",
        "namespace": "snapshot.clone"
      },
      "since": "7.10.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "PUT"
          ],
          "path": "/_snapshot/{repository}/{snapshot}/_clone/{target_snapshot}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Creates a snapshot in a repository.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/modules-snapshots.html",
      "name": "snapshot.create",
      "request": {
        "name": "Request",
        "namespace": "snapshot.create"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "snapshot.create"
      },
      "since": "0.0.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "PUT",
            "POST"
          ],
          "path": "/_snapshot/{repository}/{snapshot}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Creates a repository.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/modules-snapshots.html",
      "name": "snapshot.create_repository",
      "request": {
        "name": "Request",
        "namespace": "snapshot.create_repository"
      },
      "requestBodyRequired": true,
      "response": {
        "name": "Response",
        "namespace": "snapshot.create_repository"
      },
      "since": "0.0.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "PUT",
            "POST"
          ],
          "path": "/_snapshot/{repository}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Deletes one or more snapshots.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/modules-snapshots.html",
      "name": "snapshot.delete",
      "request": {
        "name": "Request",
        "namespace": "snapshot.delete"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "snapshot.delete"
      },
      "since": "0.0.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "DELETE"
          ],
          "path": "/_snapshot/{repository}/{snapshot}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Deletes a repository.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/modules-snapshots.html",
      "name": "snapshot.delete_repository",
      "request": {
        "name": "Request",
        "namespace": "snapshot.delete_repository"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "snapshot.delete_repository"
      },
      "since": "0.0.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "DELETE"
          ],
          "path": "/_snapshot/{repository}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Returns information about a snapshot.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/modules-snapshots.html",
      "name": "snapshot.get",
      "request": {
        "name": "Request",
        "namespace": "snapshot.get"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "snapshot.get"
      },
      "since": "0.0.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/_snapshot/{repository}/{snapshot}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Returns information about a repository.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/modules-snapshots.html",
      "name": "snapshot.get_repository",
      "request": {
        "name": "Request",
        "namespace": "snapshot.get_repository"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "snapshot.get_repository"
      },
      "since": "0.0.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/_snapshot"
        },
        {
          "methods": [
            "GET"
          ],
          "path": "/_snapshot/{repository}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Analyzes a repository for correctness and performance",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/modules-snapshots.html",
      "name": "snapshot.repository_analyze",
      "request": null,
      "requestBodyRequired": false,
      "response": null,
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "POST"
          ],
          "path": "/_snapshot/{repository}/_analyze"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Restores a snapshot.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/modules-snapshots.html",
      "name": "snapshot.restore",
      "request": {
        "name": "Request",
        "namespace": "snapshot.restore"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "snapshot.restore"
      },
      "since": "0.0.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "POST"
          ],
          "path": "/_snapshot/{repository}/{snapshot}/_restore"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Returns information about the status of a snapshot.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/modules-snapshots.html",
      "name": "snapshot.status",
      "request": {
        "name": "Request",
        "namespace": "snapshot.status"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "snapshot.status"
      },
      "since": "7.8.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/_snapshot/_status"
        },
        {
          "methods": [
            "GET"
          ],
          "path": "/_snapshot/{repository}/_status"
        },
        {
          "methods": [
            "GET"
          ],
          "path": "/_snapshot/{repository}/{snapshot}/_status"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Verifies a repository.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/modules-snapshots.html",
      "name": "snapshot.verify_repository",
      "request": {
        "name": "Request",
        "namespace": "snapshot.verify_repository"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "snapshot.verify_repository"
      },
      "since": "0.0.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "POST"
          ],
          "path": "/_snapshot/{repository}/_verify"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Clears the SQL cursor",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/clear-sql-cursor-api.html",
      "name": "sql.clear_cursor",
      "request": {
        "name": "Request",
        "namespace": "sql.clear_cursor"
      },
      "requestBodyRequired": true,
      "response": {
        "name": "Response",
        "namespace": "sql.clear_cursor"
      },
      "since": "6.3.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "POST"
          ],
          "path": "/_sql/close"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Deletes an async SQL search or a stored synchronous SQL search. If the search is still running, the API cancels it.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/delete-async-sql-search-api.html",
      "name": "sql.delete_async",
      "request": null,
      "requestBodyRequired": false,
      "response": null,
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "DELETE"
          ],
          "path": "/_sql/async/delete/{id}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Returns the current status and available results for an async SQL search or stored synchronous SQL search",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/get-async-sql-search-api.html",
      "name": "sql.get_async",
      "request": null,
      "requestBodyRequired": false,
      "response": null,
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/_sql/async/{id}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Returns the current status of an async SQL search or a stored synchronous SQL search",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/get-async-sql-search-status-api.html",
      "name": "sql.get_async_status",
      "request": null,
      "requestBodyRequired": false,
      "response": null,
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/_sql/async/status/{id}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Executes a SQL request",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/sql-search-api.html",
      "name": "sql.query",
      "request": {
        "name": "Request",
        "namespace": "sql.query"
      },
      "requestBodyRequired": true,
      "response": {
        "name": "Response",
        "namespace": "sql.query"
      },
      "since": "6.3.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "POST",
            "GET"
          ],
          "path": "/_sql"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Translates SQL into Elasticsearch queries",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/sql-translate-api.html",
      "name": "sql.translate",
      "request": {
        "name": "Request",
        "namespace": "sql.translate"
      },
      "requestBodyRequired": true,
      "response": {
        "name": "Response",
        "namespace": "sql.translate"
      },
      "since": "6.3.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "POST",
            "GET"
          ],
          "path": "/_sql/translate"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Retrieves information about the X.509 certificates used to encrypt communications in the cluster.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-ssl.html",
      "name": "ssl.certificates",
      "request": {
        "name": "Request",
        "namespace": "ssl.certificates"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "ssl.certificates"
      },
      "since": "6.2.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/_ssl/certificates"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Cancels a task, if it can be cancelled through an API.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/tasks.html",
      "name": "tasks.cancel",
      "request": {
        "name": "Request",
        "namespace": "tasks.cancel"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "tasks.cancel"
      },
      "since": "2.3.0",
      "stability": "experimental",
      "urls": [
        {
          "methods": [
            "POST"
          ],
          "path": "/_tasks/_cancel"
        },
        {
          "methods": [
            "POST"
          ],
          "path": "/_tasks/{task_id}/_cancel"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Returns information about a task.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/tasks.html",
      "name": "tasks.get",
      "request": {
        "name": "Request",
        "namespace": "tasks.get"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "tasks.get"
      },
      "since": "5.0.0",
      "stability": "experimental",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/_tasks/{task_id}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Returns a list of tasks.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/tasks.html",
      "name": "tasks.list",
      "request": {
        "name": "Request",
        "namespace": "tasks.list"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "tasks.list"
      },
      "since": "2.3.0",
      "stability": "experimental",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/_tasks"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "The terms enum API  can be used to discover terms in the index that begin with the provided string. It is designed for low-latency look-ups used in auto-complete scenarios.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/search-terms-enum.html",
      "name": "terms_enum",
      "request": {
        "name": "Request",
        "namespace": "_global.terms_enum"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "_global.terms_enum"
      },
      "since": "7.14.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET",
            "POST"
          ],
          "path": "/{index}/_terms_enum"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Returns information and statistics about terms in the fields of a particular document.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/docs-termvectors.html",
      "name": "termvectors",
      "request": {
        "name": "Request",
        "namespace": "_global.termvectors"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "_global.termvectors"
      },
      "since": "0.0.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET",
            "POST"
          ],
          "path": "/{index}/_termvectors/{id}"
        },
        {
          "methods": [
            "GET",
            "POST"
          ],
          "path": "/{index}/_termvectors"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/x-ndjson"
      ],
      "description": "Finds the structure of a text file. The text file must contain data that is suitable to be ingested into Elasticsearch.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/find-structure.html",
      "name": "text_structure.find_structure",
      "request": {
        "name": "Request",
        "namespace": "text_structure.find_structure"
      },
      "requestBodyRequired": true,
      "response": {
        "name": "Response",
        "namespace": "text_structure.find_structure"
      },
      "since": "7.13.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "POST"
          ],
          "path": "/_text_structure/find_structure"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Deletes an existing transform.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/delete-transform.html",
      "name": "transform.delete_transform",
      "request": {
        "name": "Request",
        "namespace": "transform.delete_transform"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "transform.delete_transform"
      },
      "since": "7.5.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "DELETE"
          ],
          "path": "/_transform/{transform_id}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Retrieves configuration information for transforms.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/get-transform.html",
      "name": "transform.get_transform",
      "request": {
        "name": "Request",
        "namespace": "transform.get_transform"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "transform.get_transform"
      },
      "since": "7.5.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/_transform/{transform_id}"
        },
        {
          "methods": [
            "GET"
          ],
          "path": "/_transform"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Retrieves usage information for transforms.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/get-transform-stats.html",
      "name": "transform.get_transform_stats",
      "request": {
        "name": "Request",
        "namespace": "transform.get_transform_stats"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "transform.get_transform_stats"
      },
      "since": "7.5.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/_transform/{transform_id}/_stats"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Previews a transform.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/preview-transform.html",
      "name": "transform.preview_transform",
      "request": {
        "name": "Request",
        "namespace": "transform.preview_transform"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "transform.preview_transform"
      },
      "since": "7.2.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET",
            "POST"
          ],
          "path": "/_transform/{transform_id}/_preview"
        },
        {
          "methods": [
            "GET",
            "POST"
          ],
          "path": "/_transform/_preview"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Instantiates a transform.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/put-transform.html",
      "name": "transform.put_transform",
      "request": {
        "name": "Request",
        "namespace": "transform.put_transform"
      },
      "requestBodyRequired": true,
      "response": {
        "name": "Response",
        "namespace": "transform.put_transform"
      },
      "since": "7.2.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "PUT"
          ],
          "path": "/_transform/{transform_id}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Starts one or more transforms.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/start-transform.html",
      "name": "transform.start_transform",
      "request": {
        "name": "Request",
        "namespace": "transform.start_transform"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "transform.start_transform"
      },
      "since": "7.5.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "POST"
          ],
          "path": "/_transform/{transform_id}/_start"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Stops one or more transforms.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/stop-transform.html",
      "name": "transform.stop_transform",
      "request": {
        "name": "Request",
        "namespace": "transform.stop_transform"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "transform.stop_transform"
      },
      "since": "7.5.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "POST"
          ],
          "path": "/_transform/{transform_id}/_stop"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Updates certain properties of a transform.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/update-transform.html",
      "name": "transform.update_transform",
      "request": {
        "name": "Request",
        "namespace": "transform.update_transform"
      },
      "requestBodyRequired": true,
      "response": {
        "name": "Response",
        "namespace": "transform.update_transform"
      },
      "since": "7.2.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "POST"
          ],
          "path": "/_transform/{transform_id}/_update"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Updates a document with a script or partial document.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/docs-update.html",
      "name": "update",
      "request": {
        "name": "Request",
        "namespace": "_global.update"
      },
      "requestBodyRequired": true,
      "response": {
        "name": "Response",
        "namespace": "_global.update"
      },
      "since": "0.0.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "POST"
          ],
          "path": "/{index}/_update/{id}"
        },
        {
          "deprecation": {
            "description": "Specifying types in urls has been deprecated",
            "version": "7.0.0"
          },
          "methods": [
            "POST"
          ],
          "path": "/{index}/{type}/{id}/_update"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Performs an update on every document in the index without changing the source,\nfor example to pick up a mapping change.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/docs-update-by-query.html",
      "name": "update_by_query",
      "request": {
        "name": "Request",
        "namespace": "_global.update_by_query"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "_global.update_by_query"
      },
      "since": "2.4.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "POST"
          ],
          "path": "/{index}/_update_by_query"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Changes the number of requests per second for a particular Update By Query operation.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-update-by-query.html",
      "name": "update_by_query_rethrottle",
      "request": {
        "name": "Request",
        "namespace": "_global.update_by_query_rethrottle"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "_global.update_by_query_rethrottle"
      },
      "since": "6.5.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "POST"
          ],
          "path": "/_update_by_query/{task_id}/_rethrottle"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Acknowledges a watch, manually throttling the execution of the watch's actions.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-ack-watch.html",
      "name": "watcher.ack_watch",
      "request": {
        "name": "Request",
        "namespace": "watcher.ack_watch"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "watcher.ack_watch"
      },
      "since": "0.0.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "PUT",
            "POST"
          ],
          "path": "/_watcher/watch/{watch_id}/_ack"
        },
        {
          "methods": [
            "PUT",
            "POST"
          ],
          "path": "/_watcher/watch/{watch_id}/_ack/{action_id}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Activates a currently inactive watch.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-activate-watch.html",
      "name": "watcher.activate_watch",
      "request": {
        "name": "Request",
        "namespace": "watcher.activate_watch"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "watcher.activate_watch"
      },
      "since": "0.0.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "PUT",
            "POST"
          ],
          "path": "/_watcher/watch/{watch_id}/_activate"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Deactivates a currently active watch.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-deactivate-watch.html",
      "name": "watcher.deactivate_watch",
      "request": {
        "name": "Request",
        "namespace": "watcher.deactivate_watch"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "watcher.deactivate_watch"
      },
      "since": "0.0.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "PUT",
            "POST"
          ],
          "path": "/_watcher/watch/{watch_id}/_deactivate"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Removes a watch from Watcher.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-delete-watch.html",
      "name": "watcher.delete_watch",
      "request": {
        "name": "Request",
        "namespace": "watcher.delete_watch"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "watcher.delete_watch"
      },
      "since": "0.0.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "DELETE"
          ],
          "path": "/_watcher/watch/{id}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Forces the execution of a stored watch.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-execute-watch.html",
      "name": "watcher.execute_watch",
      "request": {
        "name": "Request",
        "namespace": "watcher.execute_watch"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "watcher.execute_watch"
      },
      "since": "0.0.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "PUT",
            "POST"
          ],
          "path": "/_watcher/watch/{id}/_execute"
        },
        {
          "methods": [
            "PUT",
            "POST"
          ],
          "path": "/_watcher/watch/_execute"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Retrieves a watch by its ID.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-get-watch.html",
      "name": "watcher.get_watch",
      "request": {
        "name": "Request",
        "namespace": "watcher.get_watch"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "watcher.get_watch"
      },
      "since": "5.6.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/_watcher/watch/{id}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Creates a new watch, or updates an existing one.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-put-watch.html",
      "name": "watcher.put_watch",
      "request": {
        "name": "Request",
        "namespace": "watcher.put_watch"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "watcher.put_watch"
      },
      "since": "0.0.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "PUT",
            "POST"
          ],
          "path": "/_watcher/watch/{id}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "contentType": [
        "application/json"
      ],
      "description": "Retrieves stored watches.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-query-watches.html",
      "name": "watcher.query_watches",
      "request": {
        "name": "Request",
        "namespace": "watcher.query_watches"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "watcher.query_watches"
      },
      "since": "7.11.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET",
            "POST"
          ],
          "path": "/_watcher/_query/watches"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Starts Watcher if it is not already running.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-start.html",
      "name": "watcher.start",
      "request": {
        "name": "Request",
        "namespace": "watcher.start"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "watcher.start"
      },
      "since": "0.0.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "POST"
          ],
          "path": "/_watcher/_start"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Retrieves the current Watcher metrics.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-stats.html",
      "name": "watcher.stats",
      "request": {
        "name": "Request",
        "namespace": "watcher.stats"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "watcher.stats"
      },
      "since": "5.5.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/_watcher/stats"
        },
        {
          "methods": [
            "GET"
          ],
          "path": "/_watcher/stats/{metric}"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Stops Watcher if it is running.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-stop.html",
      "name": "watcher.stop",
      "request": {
        "name": "Request",
        "namespace": "watcher.stop"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "watcher.stop"
      },
      "since": "0.0.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "POST"
          ],
          "path": "/_watcher/_stop"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Retrieves information about the installed X-Pack features.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/info-api.html",
      "name": "xpack.info",
      "request": {
        "name": "Request",
        "namespace": "xpack.info"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "xpack.info"
      },
      "since": "0.0.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/_xpack"
        }
      ],
      "visibility": "public"
    },
    {
      "accept": [
        "application/json"
      ],
      "description": "Retrieves usage information about the installed X-Pack features.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/usage-api.html",
      "name": "xpack.usage",
      "request": {
        "name": "Request",
        "namespace": "xpack.usage"
      },
      "requestBodyRequired": false,
      "response": {
        "name": "Response",
        "namespace": "xpack.usage"
      },
      "since": "0.0.0",
      "stability": "stable",
      "urls": [
        {
          "methods": [
            "GET"
          ],
          "path": "/_xpack/usage"
        }
      ],
      "visibility": "public"
    }
  ],
  "types": [
    {
      "inherits": {
        "type": {
          "name": "Operation",
          "namespace": "_global.bulk"
        }
      },
      "kind": "interface",
      "name": {
        "name": "CreateOperation",
        "namespace": "_global.bulk"
      },
      "properties": []
    },
    {
      "inherits": {
        "type": {
          "name": "ResponseItemBase",
          "namespace": "_global.bulk"
        }
      },
      "kind": "interface",
      "name": {
        "name": "CreateResponseItem",
        "namespace": "_global.bulk"
      },
      "properties": []
    },
    {
      "inherits": {
        "type": {
          "name": "Operation",
          "namespace": "_global.bulk"
        }
      },
      "kind": "interface",
      "name": {
        "name": "DeleteOperation",
        "namespace": "_global.bulk"
      },
      "properties": []
    },
    {
      "inherits": {
        "type": {
          "name": "ResponseItemBase",
          "namespace": "_global.bulk"
        }
      },
      "kind": "interface",
      "name": {
        "name": "DeleteResponseItem",
        "namespace": "_global.bulk"
      },
      "properties": []
    },
    {
      "inherits": {
        "type": {
          "name": "Operation",
          "namespace": "_global.bulk"
        }
      },
      "kind": "interface",
      "name": {
        "name": "IndexOperation",
        "namespace": "_global.bulk"
      },
      "properties": []
    },
    {
      "inherits": {
        "type": {
          "name": "ResponseItemBase",
          "namespace": "_global.bulk"
        }
      },
      "kind": "interface",
      "name": {
        "name": "IndexResponseItem",
        "namespace": "_global.bulk"
      },
      "properties": []
    },
    {
      "kind": "interface",
      "name": {
        "name": "Operation",
        "namespace": "_global.bulk"
      },
      "properties": [
        {
          "name": "_id",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "_index",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndexName",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "retry_on_conflict",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "routing",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Routing",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "version",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "VersionNumber",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "version_type",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "VersionType",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "OperationContainer",
        "namespace": "_global.bulk"
      },
      "properties": [
        {
          "name": "index",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndexOperation",
              "namespace": "_global.bulk"
            }
          }
        },
        {
          "name": "create",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "CreateOperation",
              "namespace": "_global.bulk"
            }
          }
        },
        {
          "name": "update",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "UpdateOperation",
              "namespace": "_global.bulk"
            }
          }
        },
        {
          "name": "delete",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DeleteOperation",
              "namespace": "_global.bulk"
            }
          }
        }
      ],
      "variants": {
        "kind": "container"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "identifier": "operations",
        "kind": "value",
        "value": {
          "kind": "array_of",
          "value": {
            "items": [
              {
                "kind": "instance_of",
                "type": {
                  "name": "OperationContainer",
                  "namespace": "_global.bulk"
                }
              },
              {
                "kind": "instance_of",
                "type": {
                  "name": "TSource",
                  "namespace": "_global.bulk"
                }
              }
            ],
            "kind": "union_of"
          }
        }
      },
      "description": "Allows to perform multiple index/update/delete operations in a single request.",
      "generics": [
        {
          "name": "TSource",
          "namespace": "_global.bulk"
        }
      ],
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "_global.bulk"
      },
      "path": [
        {
          "description": "Default index for items which don't provide one",
          "name": "index",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndexName",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Default document type for items which don't provide one",
          "name": "type",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Type",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "The pipeline id to preprocess incoming documents with",
          "name": "pipeline",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "If `true` then refresh the affected shards to make this operation visible to search, if `wait_for` then wait for a refresh to make this operation visible to search, if `false` (the default) then do nothing with refreshes.",
          "name": "refresh",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Refresh",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Specific routing value",
          "name": "routing",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Routing",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "True or false to return the _source field or not, or default list of fields to return, can be overridden on each sub-request",
          "name": "_source",
          "required": false,
          "type": {
            "items": [
              {
                "kind": "instance_of",
                "type": {
                  "name": "boolean",
                  "namespace": "internal"
                }
              },
              {
                "kind": "instance_of",
                "type": {
                  "name": "Fields",
                  "namespace": "_types"
                }
              }
            ],
            "kind": "union_of"
          }
        },
        {
          "description": "Default list of fields to exclude from the returned _source field, can be overridden on each sub-request",
          "name": "_source_excludes",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Fields",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Default list of fields to extract and return from the _source field, can be overridden on each sub-request",
          "name": "_source_includes",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Fields",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Explicit operation timeout",
          "name": "timeout",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Default document type for items which don't provide one",
          "name": "type",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Sets the number of shard copies that must be active before proceeding with the bulk operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)",
          "name": "wait_for_active_shards",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "WaitForActiveShards",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Sets require_alias for all incoming documents. Defaults to unset (false)",
          "name": "require_alias",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "errors",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "items",
            "required": true,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "ResponseItemContainer",
                  "namespace": "_global.bulk"
                }
              }
            }
          },
          {
            "name": "took",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "long",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "ingest_took",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "long",
                "namespace": "_types"
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "_global.bulk"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "ResponseItemBase",
        "namespace": "_global.bulk"
      },
      "properties": [
        {
          "name": "_id",
          "required": false,
          "type": {
            "items": [
              {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              },
              {
                "kind": "instance_of",
                "type": {
                  "name": "null",
                  "namespace": "internal"
                }
              }
            ],
            "kind": "union_of"
          }
        },
        {
          "name": "_index",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "status",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "error",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ErrorCause",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "_primary_term",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "result",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "_seq_no",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "SequenceNumber",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "_shards",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ShardStatistics",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "_type",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "_version",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "VersionNumber",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "forced_refresh",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "get",
          "required": false,
          "type": {
            "generics": [
              {
                "key": {
                  "kind": "instance_of",
                  "type": {
                    "name": "string",
                    "namespace": "internal"
                  }
                },
                "kind": "dictionary_of",
                "singleKey": false,
                "value": {
                  "kind": "user_defined_value"
                }
              }
            ],
            "kind": "instance_of",
            "type": {
              "name": "InlineGet",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "ResponseItemContainer",
        "namespace": "_global.bulk"
      },
      "properties": [
        {
          "name": "index",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndexResponseItem",
              "namespace": "_global.bulk"
            }
          }
        },
        {
          "name": "create",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "CreateResponseItem",
              "namespace": "_global.bulk"
            }
          }
        },
        {
          "name": "update",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "UpdateResponseItem",
              "namespace": "_global.bulk"
            }
          }
        },
        {
          "name": "delete",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DeleteResponseItem",
              "namespace": "_global.bulk"
            }
          }
        }
      ],
      "variants": {
        "kind": "container"
      }
    },
    {
      "inherits": {
        "type": {
          "name": "Operation",
          "namespace": "_global.bulk"
        }
      },
      "kind": "interface",
      "name": {
        "name": "UpdateOperation",
        "namespace": "_global.bulk"
      },
      "properties": []
    },
    {
      "inherits": {
        "type": {
          "name": "ResponseItemBase",
          "namespace": "_global.bulk"
        }
      },
      "kind": "interface",
      "name": {
        "name": "UpdateResponseItem",
        "namespace": "_global.bulk"
      },
      "properties": []
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "scroll_id",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Ids",
                "namespace": "_types"
              }
            }
          }
        ]
      },
      "description": "Explicitly clears the search context for a scroll.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "_global.clear_scroll"
      },
      "path": [
        {
          "description": "A comma-separated list of scroll IDs to clear",
          "name": "scroll_id",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Ids",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": []
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "succeeded",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "num_freed",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "integer",
                "namespace": "_types"
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "_global.clear_scroll"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "id",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Id",
                "namespace": "_types"
              }
            }
          }
        ]
      },
      "description": "Close a point in time",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "_global.close_point_in_time"
      },
      "path": [],
      "query": []
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "succeeded",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "num_freed",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "integer",
                "namespace": "_types"
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "_global.close_point_in_time"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "query",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "QueryContainer",
                "namespace": "_types.query_dsl"
              }
            }
          }
        ]
      },
      "description": "Returns number of documents matching a query.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "_global.count"
      },
      "path": [
        {
          "description": "A comma-separated list of indices to restrict the results",
          "name": "index",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Indices",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)",
          "name": "allow_no_indices",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "The analyzer to use for the query string",
          "name": "analyzer",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Specify whether wildcard and prefix queries should be analyzed (default: false)",
          "name": "analyze_wildcard",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "The default operator for query string query (AND or OR)",
          "name": "default_operator",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DefaultOperator",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "The field to use as default where no field prefix is given in the query string",
          "name": "df",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
          "name": "expand_wildcards",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ExpandWildcards",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Whether specified concrete, expanded or aliased indices should be ignored when throttled",
          "name": "ignore_throttled",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed)",
          "name": "ignore_unavailable",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Specify whether format-based query failures (such as providing text to a numeric field) should be ignored",
          "name": "lenient",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Include only documents with a specific `_score` value in the result",
          "name": "min_score",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Specify the node or shard the operation should be performed on (default: random)",
          "name": "preference",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "A comma-separated list of specific routing values",
          "name": "routing",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Routing",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "The maximum count for each shard, upon reaching which the query execution will terminate early",
          "name": "terminate_after",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Query in the Lucene query string syntax",
          "name": "q",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "count",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "long",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "_shards",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "ShardStatistics",
                "namespace": "_types"
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "_global.count"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "identifier": "document",
        "kind": "value",
        "value": {
          "kind": "instance_of",
          "type": {
            "name": "TDocument",
            "namespace": "_global.create"
          }
        }
      },
      "description": "Creates a new document in the index.\n\nReturns a 409 response when a document with a same ID already exists in the index.",
      "generics": [
        {
          "name": "TDocument",
          "namespace": "_global.create"
        }
      ],
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "_global.create"
      },
      "path": [
        {
          "description": "Document ID",
          "name": "id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "The name of the index",
          "name": "index",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndexName",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "The type of the document",
          "name": "type",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Type",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "The pipeline id to preprocess incoming documents with",
          "name": "pipeline",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "If `true` then refresh the affected shards to make this operation visible to search, if `wait_for` then wait for a refresh to make this operation visible to search, if `false` (the default) then do nothing with refreshes.",
          "name": "refresh",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Refresh",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Specific routing value",
          "name": "routing",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Routing",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Explicit operation timeout",
          "name": "timeout",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Explicit version number for concurrency control",
          "name": "version",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "VersionNumber",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Specific version type",
          "name": "version_type",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "VersionType",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Sets the number of shard copies that must be active before proceeding with the index operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)",
          "name": "wait_for_active_shards",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "WaitForActiveShards",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": []
      },
      "inherits": {
        "type": {
          "name": "WriteResponseBase",
          "namespace": "_types"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "_global.create"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Removes a document from the index.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "_global.delete"
      },
      "path": [
        {
          "description": "The document ID",
          "name": "id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "The name of the index",
          "name": "index",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndexName",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "The type of the document",
          "name": "type",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Type",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "only perform the delete operation if the last operation that has changed the document has the specified primary term",
          "name": "if_primary_term",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "only perform the delete operation if the last operation that has changed the document has the specified sequence number",
          "name": "if_seq_no",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "SequenceNumber",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "If `true` then refresh the affected shards to make this operation visible to search, if `wait_for` then wait for a refresh to make this operation visible to search, if `false` (the default) then do nothing with refreshes.",
          "name": "refresh",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Refresh",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Specific routing value",
          "name": "routing",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Routing",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Explicit operation timeout",
          "name": "timeout",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Explicit version number for concurrency control",
          "name": "version",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "VersionNumber",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Specific version type",
          "name": "version_type",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "VersionType",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Sets the number of shard copies that must be active before proceeding with the delete operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)",
          "name": "wait_for_active_shards",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "WaitForActiveShards",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": []
      },
      "inherits": {
        "type": {
          "name": "WriteResponseBase",
          "namespace": "_types"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "_global.delete"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "max_docs",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "long",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "query",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "QueryContainer",
                "namespace": "_types.query_dsl"
              }
            }
          },
          {
            "name": "slice",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "SlicedScroll",
                "namespace": "_types"
              }
            }
          }
        ]
      },
      "description": "Deletes documents matching the provided query.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "_global.delete_by_query"
      },
      "path": [
        {
          "description": "A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices",
          "name": "index",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Indices",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)",
          "name": "allow_no_indices",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "The analyzer to use for the query string",
          "name": "analyzer",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Specify whether wildcard and prefix queries should be analyzed (default: false)",
          "name": "analyze_wildcard",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "What to do when the delete by query hits version conflicts?",
          "name": "conflicts",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Conflicts",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "The default operator for query string query (AND or OR)",
          "name": "default_operator",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DefaultOperator",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "The field to use as default where no field prefix is given in the query string",
          "name": "df",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
          "name": "expand_wildcards",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ExpandWildcards",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Starting offset (default: 0)",
          "name": "from",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed)",
          "name": "ignore_unavailable",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Specify whether format-based query failures (such as providing text to a numeric field) should be ignored",
          "name": "lenient",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Maximum number of documents to process (default: all documents)",
          "name": "max_docs",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Specify the node or shard the operation should be performed on (default: random)",
          "name": "preference",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Should the affected indexes be refreshed?",
          "name": "refresh",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Specify if request cache should be used for this request or not, defaults to index level setting",
          "name": "request_cache",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "The throttle for this request in sub-requests per second. -1 means no throttle.",
          "name": "requests_per_second",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "A comma-separated list of specific routing values",
          "name": "routing",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Routing",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Query in the Lucene query string syntax",
          "name": "q",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Specify how long a consistent view of the index should be maintained for scrolled search",
          "name": "scroll",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Size on the scroll request powering the delete by query",
          "name": "scroll_size",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Explicit timeout for each search request. Defaults to no timeout.",
          "name": "search_timeout",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Search operation type",
          "name": "search_type",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "SearchType",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "size",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "The number of slices this task should be divided into. Defaults to 1, meaning the task isn't sliced into subtasks. Can be set to `auto`.",
          "name": "slices",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "A comma-separated list of <field>:<direction> pairs",
          "name": "sort",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        },
        {
          "description": "True or false to return the _source field or not, or a list of fields to return",
          "name": "_source",
          "required": false,
          "type": {
            "items": [
              {
                "kind": "instance_of",
                "type": {
                  "name": "boolean",
                  "namespace": "internal"
                }
              },
              {
                "kind": "instance_of",
                "type": {
                  "name": "Fields",
                  "namespace": "_types"
                }
              }
            ],
            "kind": "union_of"
          }
        },
        {
          "description": "A list of fields to exclude from the returned _source field",
          "name": "_source_excludes",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Fields",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "A list of fields to extract and return from the _source field",
          "name": "_source_includes",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Fields",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Specific 'tag' of the request for logging and statistical purposes",
          "name": "stats",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        },
        {
          "description": "The maximum number of documents to collect for each shard, upon reaching which the query execution will terminate early.",
          "name": "terminate_after",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Time each individual bulk request should wait for shards that are unavailable.",
          "name": "timeout",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Specify whether to return document version as part of a hit",
          "name": "version",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Sets the number of shard copies that must be active before proceeding with the delete by query operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)",
          "name": "wait_for_active_shards",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "WaitForActiveShards",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Should the request should block until the delete by query is complete.",
          "name": "wait_for_completion",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "batches",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "long",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "deleted",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "long",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "failures",
            "required": false,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "BulkIndexByScrollFailure",
                  "namespace": "_types"
                }
              }
            }
          },
          {
            "name": "noops",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "long",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "requests_per_second",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "float",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "retries",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Retries",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "slice_id",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "integer",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "task",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "TaskId",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "throttled_millis",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "long",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "throttled_until_millis",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "long",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "timed_out",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "took",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "long",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "total",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "long",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "version_conflicts",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "long",
                "namespace": "_types"
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "_global.delete_by_query"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Changes the number of requests per second for a particular Delete By Query operation.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "_global.delete_by_query_rethrottle"
      },
      "path": [
        {
          "description": "The task id to rethrottle",
          "name": "task_id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "The throttle to set on this request in floating sub-requests per second. -1 means set no throttle.",
          "name": "requests_per_second",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": []
      },
      "inherits": {
        "type": {
          "name": "Response",
          "namespace": "tasks.list"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "_global.delete_by_query_rethrottle"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Deletes a script.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "_global.delete_script"
      },
      "path": [
        {
          "description": "Script ID",
          "name": "id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "Specify timeout for connection to master",
          "name": "master_timeout",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Explicit operation timeout",
          "name": "timeout",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": []
      },
      "inherits": {
        "type": {
          "name": "AcknowledgedResponseBase",
          "namespace": "_types"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "_global.delete_script"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Returns information about whether a document exists in an index.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "_global.exists"
      },
      "path": [
        {
          "description": "The document ID",
          "name": "id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "The name of the index",
          "name": "index",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndexName",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "Specify the node or shard the operation should be performed on (default: random)",
          "name": "preference",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Specify whether to perform the operation in realtime or search mode",
          "name": "realtime",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Refresh the shard containing the document before performing the operation",
          "name": "refresh",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Specific routing value",
          "name": "routing",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Routing",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "True or false to return the _source field or not, or a list of fields to return",
          "name": "_source",
          "required": false,
          "type": {
            "items": [
              {
                "kind": "instance_of",
                "type": {
                  "name": "boolean",
                  "namespace": "internal"
                }
              },
              {
                "kind": "instance_of",
                "type": {
                  "name": "Fields",
                  "namespace": "_types"
                }
              }
            ],
            "kind": "union_of"
          }
        },
        {
          "description": "A list of fields to exclude from the returned _source field",
          "name": "_source_excludes",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Fields",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "A list of fields to extract and return from the _source field",
          "name": "_source_includes",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Fields",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "A comma-separated list of stored fields to return in the response",
          "name": "stored_fields",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Fields",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Explicit version number for concurrency control",
          "name": "version",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "VersionNumber",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Specific version type",
          "name": "version_type",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "VersionType",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "no_body"
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "_global.exists"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Returns information about whether a document source exists in an index.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "_global.exists_source"
      },
      "path": [
        {
          "description": "The document ID",
          "name": "id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "The name of the index",
          "name": "index",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndexName",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "The type of the document; deprecated and optional starting with 7.0",
          "name": "type",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Type",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "Specify the node or shard the operation should be performed on (default: random)",
          "name": "preference",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Specify whether to perform the operation in realtime or search mode",
          "name": "realtime",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Refresh the shard containing the document before performing the operation",
          "name": "refresh",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Specific routing value",
          "name": "routing",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Routing",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "True or false to return the _source field or not, or a list of fields to return",
          "name": "_source",
          "required": false,
          "type": {
            "items": [
              {
                "kind": "instance_of",
                "type": {
                  "name": "boolean",
                  "namespace": "internal"
                }
              },
              {
                "kind": "instance_of",
                "type": {
                  "name": "Fields",
                  "namespace": "_types"
                }
              }
            ],
            "kind": "union_of"
          }
        },
        {
          "description": "A list of fields to exclude from the returned _source field",
          "name": "_source_excludes",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Fields",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "A list of fields to extract and return from the _source field",
          "name": "_source_includes",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Fields",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Explicit version number for concurrency control",
          "name": "version",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "VersionNumber",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Specific version type",
          "name": "version_type",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "VersionType",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "no_body"
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "_global.exists_source"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "Explanation",
        "namespace": "_global.explain"
      },
      "properties": [
        {
          "name": "description",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "details",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "ExplanationDetail",
                "namespace": "_global.explain"
              }
            }
          }
        },
        {
          "name": "value",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "float",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "ExplanationDetail",
        "namespace": "_global.explain"
      },
      "properties": [
        {
          "name": "description",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "details",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "ExplanationDetail",
                "namespace": "_global.explain"
              }
            }
          }
        },
        {
          "name": "value",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "float",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "query",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "QueryContainer",
                "namespace": "_types.query_dsl"
              }
            }
          }
        ]
      },
      "description": "Returns information about why a specific matches (or doesn't match) a query.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "_global.explain"
      },
      "path": [
        {
          "description": "The document ID",
          "name": "id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "The name of the index",
          "name": "index",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndexName",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "The analyzer for the query string query",
          "name": "analyzer",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Specify whether wildcards and prefix queries in the query string query should be analyzed (default: false)",
          "name": "analyze_wildcard",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "The default operator for query string query (AND or OR)",
          "name": "default_operator",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DefaultOperator",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "The default field for query string query (default: _all)",
          "name": "df",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Specify whether format-based query failures (such as providing text to a numeric field) should be ignored",
          "name": "lenient",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Specify the node or shard the operation should be performed on (default: random)",
          "name": "preference",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Specific routing value",
          "name": "routing",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Routing",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "True or false to return the _source field or not, or a list of fields to return",
          "name": "_source",
          "required": false,
          "type": {
            "items": [
              {
                "kind": "instance_of",
                "type": {
                  "name": "boolean",
                  "namespace": "internal"
                }
              },
              {
                "kind": "instance_of",
                "type": {
                  "name": "Fields",
                  "namespace": "_types"
                }
              }
            ],
            "kind": "union_of"
          }
        },
        {
          "description": "A list of fields to exclude from the returned _source field",
          "name": "_source_excludes",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Fields",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "A list of fields to extract and return from the _source field",
          "name": "_source_includes",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Fields",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "A comma-separated list of stored fields to return in the response",
          "name": "stored_fields",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Fields",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Query in the Lucene query string syntax",
          "name": "q",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "_index",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "IndexName",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "_type",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Type",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "_id",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Id",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "matched",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "explanation",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "ExplanationDetail",
                "namespace": "_global.explain"
              }
            }
          },
          {
            "name": "get",
            "required": false,
            "type": {
              "generics": [
                {
                  "kind": "instance_of",
                  "type": {
                    "name": "TDocument",
                    "namespace": "_global.explain"
                  }
                }
              ],
              "kind": "instance_of",
              "type": {
                "name": "InlineGet",
                "namespace": "_types"
              }
            }
          }
        ]
      },
      "generics": [
        {
          "name": "TDocument",
          "namespace": "_global.explain"
        }
      ],
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "_global.explain"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "FieldCapability",
        "namespace": "_global.field_caps"
      },
      "properties": [
        {
          "name": "aggregatable",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "indices",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Indices",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "meta",
          "required": false,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              }
            }
          }
        },
        {
          "name": "non_aggregatable_indices",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Indices",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "non_searchable_indices",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Indices",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "searchable",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "metadata_field",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "index_filter",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "QueryContainer",
                "namespace": "_types.query_dsl"
              }
            }
          },
          {
            "name": "runtime_mappings",
            "required": false,
            "since": "7.12.0",
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "RuntimeFields",
                "namespace": "_types.mapping"
              }
            }
          }
        ]
      },
      "description": "Returns the information about the capabilities of fields among multiple indices.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "_global.field_caps"
      },
      "path": [
        {
          "description": "A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices",
          "name": "index",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Indices",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)",
          "name": "allow_no_indices",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
          "name": "expand_wildcards",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ExpandWildcards",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "A comma-separated list of field names",
          "name": "fields",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Fields",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed)",
          "name": "ignore_unavailable",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Indicates whether unmapped fields should be included in the response.",
          "name": "include_unmapped",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "indices",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Indices",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "fields",
            "required": true,
            "type": {
              "key": {
                "kind": "instance_of",
                "type": {
                  "name": "Field",
                  "namespace": "_types"
                }
              },
              "kind": "dictionary_of",
              "singleKey": false,
              "value": {
                "key": {
                  "kind": "instance_of",
                  "type": {
                    "name": "string",
                    "namespace": "internal"
                  }
                },
                "kind": "dictionary_of",
                "singleKey": false,
                "value": {
                  "kind": "instance_of",
                  "type": {
                    "name": "FieldCapability",
                    "namespace": "_global.field_caps"
                  }
                }
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "_global.field_caps"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Returns a document.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "_global.get"
      },
      "path": [
        {
          "description": "Unique identifier of the document.",
          "name": "id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Name of the index that contains the document.",
          "name": "index",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndexName",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "Specifies the node or shard the operation should be performed on. Random by default.",
          "name": "preference",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Boolean) If true, the request is real-time as opposed to near-real-time.",
          "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-get.html#realtime",
          "name": "realtime",
          "required": false,
          "serverDefault": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "If true, Elasticsearch refreshes the affected shards to make this operation visible to search. If false, do nothing with refreshes.",
          "name": "refresh",
          "required": false,
          "serverDefault": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Target the specified primary shard.",
          "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-get.html#get-routing",
          "name": "routing",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Routing",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "True or false to return the _source field or not, or a list of fields to return.",
          "name": "_source",
          "required": false,
          "type": {
            "items": [
              {
                "kind": "instance_of",
                "type": {
                  "name": "boolean",
                  "namespace": "internal"
                }
              },
              {
                "kind": "instance_of",
                "type": {
                  "name": "Fields",
                  "namespace": "_types"
                }
              }
            ],
            "kind": "union_of"
          }
        },
        {
          "description": "A comma-separated list of source fields to exclude in the response.",
          "name": "_source_excludes",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Fields",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "A comma-separated list of source fields to include in the response.",
          "name": "_source_includes",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Fields",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "A comma-separated list of stored fields to return in the response",
          "name": "stored_fields",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Fields",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Explicit version number for concurrency control. The specified version must match the current version of the document for the request to succeed.",
          "name": "version",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "VersionNumber",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Specific version type: internal, external, external_gte.",
          "name": "version_type",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "VersionType",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "_index",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "IndexName",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "fields",
            "required": false,
            "type": {
              "key": {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              },
              "kind": "dictionary_of",
              "singleKey": false,
              "value": {
                "kind": "user_defined_value"
              }
            }
          },
          {
            "name": "found",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "_id",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Id",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "_primary_term",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "long",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "_routing",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "_seq_no",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "SequenceNumber",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "_source",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "TDocument",
                "namespace": "_global.get"
              }
            }
          },
          {
            "deprecation": {
              "description": "",
              "version": "7.0.0"
            },
            "name": "_type",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Type",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "_version",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "VersionNumber",
                "namespace": "_types"
              }
            }
          }
        ]
      },
      "generics": [
        {
          "name": "TDocument",
          "namespace": "_global.get"
        }
      ],
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "_global.get"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Returns a script.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "_global.get_script"
      },
      "path": [
        {
          "description": "Script ID",
          "name": "id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "Specify timeout for connection to master",
          "name": "master_timeout",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "_id",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Id",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "found",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "script",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "StoredScript",
                "namespace": "_types"
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "_global.get_script"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "Context",
        "namespace": "_global.get_script_context"
      },
      "properties": [
        {
          "name": "methods",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "ContextMethod",
                "namespace": "_global.get_script_context"
              }
            }
          }
        },
        {
          "name": "name",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "ContextMethod",
        "namespace": "_global.get_script_context"
      },
      "properties": [
        {
          "name": "name",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "return_type",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "params",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "ContextMethodParam",
                "namespace": "_global.get_script_context"
              }
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "ContextMethodParam",
        "namespace": "_global.get_script_context"
      },
      "properties": [
        {
          "name": "name",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Returns all script contexts.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "_global.get_script_context"
      },
      "path": [],
      "query": []
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "contexts",
            "required": true,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "Context",
                  "namespace": "_global.get_script_context"
                }
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "_global.get_script_context"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "LanguageContext",
        "namespace": "_global.get_script_languages"
      },
      "properties": [
        {
          "name": "contexts",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        },
        {
          "name": "language",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ScriptLanguage",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Returns available script types, languages and contexts",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "_global.get_script_languages"
      },
      "path": [],
      "query": []
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "language_contexts",
            "required": true,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "LanguageContext",
                  "namespace": "_global.get_script_languages"
                }
              }
            }
          },
          {
            "name": "types_allowed",
            "required": true,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "_global.get_script_languages"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "properties",
        "properties": []
      },
      "description": "Returns the source of a document.",
      "inherits": {
        "type": {
          "name": "Request",
          "namespace": "_global.get"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "_global.get_source"
      },
      "path": [],
      "query": []
    },
    {
      "body": {
        "kind": "value",
        "value": {
          "kind": "instance_of",
          "type": {
            "name": "TDocument",
            "namespace": "_global.get_source"
          }
        }
      },
      "generics": [
        {
          "name": "TDocument",
          "namespace": "_global.get_source"
        }
      ],
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "_global.get_source"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "identifier": "document",
        "kind": "value",
        "value": {
          "kind": "instance_of",
          "type": {
            "name": "TDocument",
            "namespace": "_global.index"
          }
        }
      },
      "description": "Creates or updates a document in an index.",
      "generics": [
        {
          "name": "TDocument",
          "namespace": "_global.index"
        }
      ],
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "_global.index"
      },
      "path": [
        {
          "description": "Document ID",
          "name": "id",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "The name of the index",
          "name": "index",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndexName",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "only perform the index operation if the last operation that has changed the document has the specified primary term",
          "name": "if_primary_term",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "only perform the index operation if the last operation that has changed the document has the specified sequence number",
          "name": "if_seq_no",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "SequenceNumber",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Explicit operation type. Defaults to `index` for requests with an explicit document ID, and to `create`for requests without an explicit document ID",
          "name": "op_type",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "OpType",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "The pipeline id to preprocess incoming documents with",
          "name": "pipeline",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "If `true` then refresh the affected shards to make this operation visible to search, if `wait_for` then wait for a refresh to make this operation visible to search, if `false` (the default) then do nothing with refreshes.",
          "name": "refresh",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Refresh",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Specific routing value",
          "name": "routing",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Routing",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Explicit operation timeout",
          "name": "timeout",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Explicit version number for concurrency control",
          "name": "version",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "VersionNumber",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Specific version type",
          "name": "version_type",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "VersionType",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Sets the number of shard copies that must be active before proceeding with the index operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)",
          "name": "wait_for_active_shards",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "WaitForActiveShards",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "When true, requires destination to be an alias. Default is false",
          "name": "require_alias",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": []
      },
      "inherits": {
        "type": {
          "name": "WriteResponseBase",
          "namespace": "_types"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "_global.index"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Returns basic information about the cluster.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "_global.info"
      },
      "path": [],
      "query": []
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "cluster_name",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Name",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "cluster_uuid",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Uuid",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "name",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Name",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "tagline",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "version",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "ElasticsearchVersionInfo",
                "namespace": "_types"
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "_global.info"
      }
    },
    {
      "generics": [
        {
          "name": "TDocument",
          "namespace": "_global.mget"
        }
      ],
      "kind": "interface",
      "name": {
        "name": "Hit",
        "namespace": "_global.mget"
      },
      "properties": [
        {
          "name": "error",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "MainError",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "fields",
          "required": false,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "user_defined_value"
            }
          }
        },
        {
          "name": "found",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "_id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "_index",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndexName",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "_primary_term",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "_routing",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Routing",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "_seq_no",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "SequenceNumber",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "_source",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "TDocument",
              "namespace": "_global.mget"
            }
          }
        },
        {
          "name": "_type",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Type",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "_version",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "VersionNumber",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "type_alias",
      "name": {
        "name": "MultiGetId",
        "namespace": "_global.mget"
      },
      "type": {
        "items": [
          {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        ],
        "kind": "union_of"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "Operation",
        "namespace": "_global.mget"
      },
      "properties": [
        {
          "name": "_id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "MultiGetId",
              "namespace": "_global.mget"
            }
          }
        },
        {
          "name": "_index",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndexName",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "routing",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Routing",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "_source",
          "required": false,
          "type": {
            "items": [
              {
                "kind": "instance_of",
                "type": {
                  "name": "boolean",
                  "namespace": "internal"
                }
              },
              {
                "kind": "instance_of",
                "type": {
                  "name": "Fields",
                  "namespace": "_types"
                }
              },
              {
                "kind": "instance_of",
                "type": {
                  "name": "SourceFilter",
                  "namespace": "_global.search._types"
                }
              }
            ],
            "kind": "union_of"
          }
        },
        {
          "name": "stored_fields",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Fields",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "_type",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Type",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "version",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "VersionNumber",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "version_type",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "VersionType",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "docs",
            "required": false,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "Operation",
                  "namespace": "_global.mget"
                }
              }
            }
          },
          {
            "name": "ids",
            "required": false,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "MultiGetId",
                  "namespace": "_global.mget"
                }
              }
            }
          }
        ]
      },
      "description": "Allows to get multiple documents in one request.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "_global.mget"
      },
      "path": [
        {
          "description": "The name of the index",
          "name": "index",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndexName",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "Specify the node or shard the operation should be performed on (default: random)",
          "name": "preference",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Specify whether to perform the operation in realtime or search mode",
          "name": "realtime",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Refresh the shard containing the document before performing the operation",
          "name": "refresh",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Specific routing value",
          "name": "routing",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Routing",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "True or false to return the _source field or not, or a list of fields to return",
          "name": "_source",
          "required": false,
          "type": {
            "items": [
              {
                "kind": "instance_of",
                "type": {
                  "name": "boolean",
                  "namespace": "internal"
                }
              },
              {
                "kind": "instance_of",
                "type": {
                  "name": "Fields",
                  "namespace": "_types"
                }
              }
            ],
            "kind": "union_of"
          }
        },
        {
          "description": "A list of fields to exclude from the returned _source field",
          "name": "_source_excludes",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Fields",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "A list of fields to extract and return from the _source field",
          "name": "_source_includes",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Fields",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "A comma-separated list of stored fields to return in the response",
          "name": "stored_fields",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Fields",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "docs",
            "required": true,
            "type": {
              "kind": "array_of",
              "value": {
                "generics": [
                  {
                    "kind": "instance_of",
                    "type": {
                      "name": "TDocument",
                      "namespace": "_global.mget"
                    }
                  }
                ],
                "kind": "instance_of",
                "type": {
                  "name": "Hit",
                  "namespace": "_global.mget"
                }
              }
            }
          }
        ]
      },
      "generics": [
        {
          "name": "TDocument",
          "namespace": "_global.mget"
        }
      ],
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "_global.mget"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "Body",
        "namespace": "_global.msearch"
      },
      "properties": [
        {
          "name": "aggregations",
          "required": false,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "AggregationContainer",
                "namespace": "_types.aggregations"
              }
            }
          }
        },
        {
          "name": "aggs",
          "required": false,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "AggregationContainer",
                "namespace": "_types.aggregations"
              }
            }
          }
        },
        {
          "name": "query",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "QueryContainer",
              "namespace": "_types.query_dsl"
            }
          }
        },
        {
          "name": "from",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "size",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "pit",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "PointInTimeReference",
              "namespace": "_global.search._types"
            }
          }
        },
        {
          "name": "track_total_hits",
          "required": false,
          "type": {
            "items": [
              {
                "kind": "instance_of",
                "type": {
                  "name": "boolean",
                  "namespace": "internal"
                }
              },
              {
                "kind": "instance_of",
                "type": {
                  "name": "integer",
                  "namespace": "_types"
                }
              }
            ],
            "kind": "union_of"
          }
        },
        {
          "name": "suggest",
          "required": false,
          "type": {
            "items": [
              {
                "kind": "instance_of",
                "type": {
                  "name": "SuggestContainer",
                  "namespace": "_global.search._types"
                }
              },
              {
                "key": {
                  "kind": "instance_of",
                  "type": {
                    "name": "string",
                    "namespace": "internal"
                  }
                },
                "kind": "dictionary_of",
                "singleKey": false,
                "value": {
                  "kind": "instance_of",
                  "type": {
                    "name": "SuggestContainer",
                    "namespace": "_global.search._types"
                  }
                }
              }
            ],
            "kind": "union_of"
          }
        }
      ]
    },
    {
      "description": "Contains parameters used to limit or change the subsequent search body request.",
      "kind": "interface",
      "name": {
        "name": "Header",
        "namespace": "_global.msearch"
      },
      "properties": [
        {
          "name": "allow_no_indices",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "expand_wildcards",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ExpandWildcards",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "ignore_unavailable",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "index",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Indices",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "preference",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "request_cache",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "routing",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "search_type",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "SearchType",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "identifier": "searches",
        "kind": "value",
        "value": {
          "kind": "array_of",
          "value": {
            "items": [
              {
                "kind": "instance_of",
                "type": {
                  "name": "Header",
                  "namespace": "_global.msearch"
                }
              },
              {
                "kind": "instance_of",
                "type": {
                  "name": "Body",
                  "namespace": "_global.msearch"
                }
              }
            ],
            "kind": "union_of"
          }
        }
      },
      "description": "Allows to execute several search operations in one request.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "_global.msearch"
      },
      "path": [
        {
          "description": "Comma-separated list of data streams, indices, and index aliases to search.",
          "name": "index",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Indices",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "If false, the request returns an error if any wildcard expression, index alias, or _all value targets only missing or closed indices. This behavior applies even if the request targets other open indices. For example, a request targeting foo*,bar* returns an error if an index starts with foo but no index starts with bar.",
          "name": "allow_no_indices",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "If true, network roundtrips between the coordinating node and remote clusters are minimized for cross-cluster search requests.",
          "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-cross-cluster-search.html#ccs-network-delays",
          "name": "ccs_minimize_roundtrips",
          "required": false,
          "serverDefault": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Type of index that wildcard expressions can match. If the request can target data streams, this argument determines whether wildcard expressions match hidden data streams.",
          "name": "expand_wildcards",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ExpandWildcards",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "If true, concrete, expanded or aliased indices are ignored when frozen.",
          "name": "ignore_throttled",
          "required": false,
          "serverDefault": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "If true, missing or closed indices are not included in the response.",
          "name": "ignore_unavailable",
          "required": false,
          "serverDefault": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Maximum number of concurrent searches the multi search API can execute.",
          "name": "max_concurrent_searches",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Maximum number of concurrent shard requests that each sub-search request executes per node.",
          "name": "max_concurrent_shard_requests",
          "required": false,
          "serverDefault": 5,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Defines a threshold that enforces a pre-filter roundtrip to prefilter search shards based on query rewriting if the number of shards the search request expands to exceeds the threshold. This filter roundtrip can limit the number of shards significantly if for instance a shard can not match any documents based on its rewrite method i.e., if date filters are mandatory to match but the shard bounds and the query are disjoint.",
          "name": "pre_filter_shard_size",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Indicates whether global term and document frequencies should be used when scoring returned documents.",
          "name": "search_type",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "SearchType",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "If true, hits.total are returned as an integer in the response. Defaults to false, which returns an object.",
          "name": "rest_total_hits_as_int",
          "required": false,
          "serverDefault": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Specifies whether aggregation and suggester names should be prefixed by their respective types in the response.",
          "name": "typed_keys",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "took",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "long",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "responses",
            "required": true,
            "type": {
              "kind": "array_of",
              "value": {
                "items": [
                  {
                    "generics": [
                      {
                        "kind": "instance_of",
                        "type": {
                          "name": "TDocument",
                          "namespace": "_global.msearch"
                        }
                      }
                    ],
                    "kind": "instance_of",
                    "type": {
                      "name": "SearchResult",
                      "namespace": "_global.msearch"
                    }
                  },
                  {
                    "kind": "instance_of",
                    "type": {
                      "name": "ErrorResponseBase",
                      "namespace": "_types"
                    }
                  }
                ],
                "kind": "union_of"
              }
            }
          }
        ]
      },
      "generics": [
        {
          "name": "TDocument",
          "namespace": "_global.msearch"
        }
      ],
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "_global.msearch"
      }
    },
    {
      "generics": [
        {
          "name": "TDocument",
          "namespace": "_global.msearch"
        }
      ],
      "inherits": {
        "generics": [
          {
            "kind": "instance_of",
            "type": {
              "name": "TDocument",
              "namespace": "_global.msearch"
            }
          }
        ],
        "type": {
          "name": "Response",
          "namespace": "_global.search"
        }
      },
      "kind": "interface",
      "name": {
        "name": "SearchResult",
        "namespace": "_global.msearch"
      },
      "properties": [
        {
          "name": "status",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "identifier": "search_templates",
        "kind": "value",
        "value": {
          "kind": "array_of",
          "value": {
            "kind": "instance_of",
            "type": {
              "name": "TemplateItem",
              "namespace": "_global.msearch_template"
            }
          }
        }
      },
      "description": "Allows to execute several search template operations in one request.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "_global.msearch_template"
      },
      "path": [
        {
          "description": "A comma-separated list of index names to use as default",
          "name": "index",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Indices",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "Indicates whether network round-trips should be minimized as part of cross-cluster search requests execution",
          "name": "ccs_minimize_roundtrips",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Controls the maximum number of concurrent searches the multi search api will execute",
          "name": "max_concurrent_searches",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Search operation type",
          "name": "search_type",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "SearchType",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Indicates whether hits.total should be rendered as an integer or an object in the rest search response",
          "name": "rest_total_hits_as_int",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Specify whether aggregation and suggester names should be prefixed by their respective types in the response",
          "name": "typed_keys",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "responses",
            "required": true,
            "type": {
              "kind": "array_of",
              "value": {
                "items": [
                  {
                    "generics": [
                      {
                        "kind": "instance_of",
                        "type": {
                          "name": "TDocument",
                          "namespace": "_global.msearch_template"
                        }
                      }
                    ],
                    "kind": "instance_of",
                    "type": {
                      "name": "Response",
                      "namespace": "_global.search"
                    }
                  },
                  {
                    "kind": "instance_of",
                    "type": {
                      "name": "ErrorResponseBase",
                      "namespace": "_types"
                    }
                  }
                ],
                "kind": "union_of"
              }
            }
          },
          {
            "name": "took",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "long",
                "namespace": "_types"
              }
            }
          }
        ]
      },
      "generics": [
        {
          "name": "TDocument",
          "namespace": "_global.msearch_template"
        }
      ],
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "_global.msearch_template"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "TemplateItem",
        "namespace": "_global.msearch_template"
      },
      "properties": [
        {
          "name": "id",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "index",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Indices",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "params",
          "required": false,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "user_defined_value"
            }
          }
        },
        {
          "name": "source",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "Operation",
        "namespace": "_global.mtermvectors"
      },
      "properties": [
        {
          "name": "_id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "_index",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndexName",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "doc",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "object",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "fields",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Fields",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "field_statistics",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "filter",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Filter",
              "namespace": "_global.termvectors"
            }
          }
        },
        {
          "name": "offsets",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "payloads",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "positions",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "routing",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Routing",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "term_statistics",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "version",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "VersionNumber",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "version_type",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "VersionType",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "docs",
            "required": false,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "Operation",
                  "namespace": "_global.mtermvectors"
                }
              }
            }
          },
          {
            "name": "ids",
            "required": false,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "Id",
                  "namespace": "_types"
                }
              }
            }
          }
        ]
      },
      "description": "Returns multiple termvectors in one request.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "_global.mtermvectors"
      },
      "path": [
        {
          "description": "The index in which the document resides.",
          "name": "index",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndexName",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "A comma-separated list of documents ids. You must define ids as parameter or set \"ids\" or \"docs\" in the request body",
          "name": "ids",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "Id",
                "namespace": "_types"
              }
            }
          }
        },
        {
          "description": "A comma-separated list of fields to return. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".",
          "name": "fields",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Fields",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Specifies if document count, sum of document frequencies and sum of total term frequencies should be returned. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".",
          "name": "field_statistics",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Specifies if term offsets should be returned. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".",
          "name": "offsets",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Specifies if term payloads should be returned. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".",
          "name": "payloads",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Specifies if term positions should be returned. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".",
          "name": "positions",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Specify the node or shard the operation should be performed on (default: random) .Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".",
          "name": "preference",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Specifies if requests are real-time as opposed to near-real-time (default: true).",
          "name": "realtime",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Specific routing value. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".",
          "name": "routing",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Routing",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Specifies if total term frequency and document frequency should be returned. Applies to all returned documents unless otherwise specified in body \"params\" or \"docs\".",
          "name": "term_statistics",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Explicit version number for concurrency control",
          "name": "version",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "VersionNumber",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Specific version type",
          "name": "version_type",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "VersionType",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "docs",
            "required": true,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "TermVectorsResult",
                  "namespace": "_global.mtermvectors"
                }
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "_global.mtermvectors"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "TermVectorsResult",
        "namespace": "_global.mtermvectors"
      },
      "properties": [
        {
          "name": "_id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "_index",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndexName",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "_version",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "VersionNumber",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "took",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "found",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "term_vectors",
          "required": false,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "Field",
                "namespace": "_types"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "TermVector",
                "namespace": "_global.termvectors"
              }
            }
          }
        },
        {
          "name": "error",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ErrorCause",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Open a point in time that can be used in subsequent searches",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "_global.open_point_in_time"
      },
      "path": [
        {
          "description": "A comma-separated list of index names to open point in time; use `_all` or empty string to perform the operation on all indices",
          "name": "index",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Indices",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "Specific the time to live for the point in time",
          "name": "keep_alive",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "id",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Id",
                "namespace": "_types"
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "_global.open_point_in_time"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Returns whether the cluster is running.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "_global.ping"
      },
      "path": [],
      "query": []
    },
    {
      "body": {
        "kind": "no_body"
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "_global.ping"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "script",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "StoredScript",
                "namespace": "_types"
              }
            }
          }
        ]
      },
      "description": "Creates or updates a script.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "_global.put_script"
      },
      "path": [
        {
          "description": "Script ID",
          "name": "id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Script context",
          "name": "context",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "Specify timeout for connection to master",
          "name": "master_timeout",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Explicit operation timeout",
          "name": "timeout",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": []
      },
      "inherits": {
        "type": {
          "name": "AcknowledgedResponseBase",
          "namespace": "_types"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "_global.put_script"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "DocumentRating",
        "namespace": "_global.rank_eval"
      },
      "properties": [
        {
          "description": "The document ID.",
          "name": "_id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "The document’s index. For data streams, this should be the document’s backing index.",
          "name": "_index",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndexName",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "The document’s relevance with regard to this search request.",
          "name": "rating",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "RankEvalHit",
        "namespace": "_global.rank_eval"
      },
      "properties": [
        {
          "name": "_id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "_index",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndexName",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "_type",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Type",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "_score",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "RankEvalHitItem",
        "namespace": "_global.rank_eval"
      },
      "properties": [
        {
          "name": "hit",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "RankEvalHit",
              "namespace": "_global.rank_eval"
            }
          }
        },
        {
          "name": "rating",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "RankEvalMetric",
        "namespace": "_global.rank_eval"
      },
      "properties": [
        {
          "name": "precision",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "RankEvalMetricPrecision",
              "namespace": "_global.rank_eval"
            }
          }
        },
        {
          "name": "recall",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "RankEvalMetricRecall",
              "namespace": "_global.rank_eval"
            }
          }
        },
        {
          "name": "mean_reciprocal_rank",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "RankEvalMetricMeanReciprocalRank",
              "namespace": "_global.rank_eval"
            }
          }
        },
        {
          "name": "dcg",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "RankEvalMetricDiscountedCumulativeGain",
              "namespace": "_global.rank_eval"
            }
          }
        },
        {
          "name": "expected_reciprocal_rank",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "RankEvalMetricExpectedReciprocalRank",
              "namespace": "_global.rank_eval"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "RankEvalMetricBase",
        "namespace": "_global.rank_eval"
      },
      "properties": [
        {
          "description": "Sets the maximum number of documents retrieved per query. This value will act in place of the usual size parameter in the query.",
          "name": "k",
          "required": false,
          "serverDefault": 10,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "RankEvalMetricDetail",
        "namespace": "_global.rank_eval"
      },
      "properties": [
        {
          "description": "The metric_score in the details section shows the contribution of this query to the global quality metric score",
          "name": "metric_score",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "The unrated_docs section contains an _index and _id entry for each document in the search result for this query that didn’t have a ratings value. This can be used to ask the user to supply ratings for these documents",
          "name": "unrated_docs",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "UnratedDocument",
                "namespace": "_global.rank_eval"
              }
            }
          }
        },
        {
          "description": "The hits section shows a grouping of the search results with their supplied ratings",
          "name": "hits",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "RankEvalHitItem",
                "namespace": "_global.rank_eval"
              }
            }
          }
        },
        {
          "description": "The metric_details give additional information about the calculated quality metric (e.g. how many of the retrieved documents were relevant). The content varies for each metric but allows for better interpretation of the results",
          "name": "metric_details",
          "required": true,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "key": {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              },
              "kind": "dictionary_of",
              "singleKey": false,
              "value": {
                "kind": "user_defined_value"
              }
            }
          }
        }
      ]
    },
    {
      "description": "Discounted cumulative gain (DCG)",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/search-rank-eval.html#_discounted_cumulative_gain_dcg",
      "inherits": {
        "type": {
          "name": "RankEvalMetricBase",
          "namespace": "_global.rank_eval"
        }
      },
      "kind": "interface",
      "name": {
        "name": "RankEvalMetricDiscountedCumulativeGain",
        "namespace": "_global.rank_eval"
      },
      "properties": [
        {
          "description": "If set to true, this metric will calculate the Normalized DCG.",
          "docUrl": "https://en.wikipedia.org/wiki/Discounted_cumulative_gain#Normalized_DCG",
          "name": "normalize",
          "required": false,
          "serverDefault": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "description": "Expected Reciprocal Rank (ERR)",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/search-rank-eval.html#_expected_reciprocal_rank_err",
      "inherits": {
        "type": {
          "name": "RankEvalMetricBase",
          "namespace": "_global.rank_eval"
        }
      },
      "kind": "interface",
      "name": {
        "name": "RankEvalMetricExpectedReciprocalRank",
        "namespace": "_global.rank_eval"
      },
      "properties": [
        {
          "description": "The highest relevance grade used in the user-supplied relevance judgments.",
          "name": "maximum_relevance",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "description": "Mean Reciprocal Rank",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/search-rank-eval.html#_mean_reciprocal_rank",
      "inherits": {
        "type": {
          "name": "RankEvalMetricRatingTreshold",
          "namespace": "_global.rank_eval"
        }
      },
      "kind": "interface",
      "name": {
        "name": "RankEvalMetricMeanReciprocalRank",
        "namespace": "_global.rank_eval"
      },
      "properties": []
    },
    {
      "description": "Precision at K (P@k)",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/search-rank-eval.html#k-precision",
      "inherits": {
        "type": {
          "name": "RankEvalMetricRatingTreshold",
          "namespace": "_global.rank_eval"
        }
      },
      "kind": "interface",
      "name": {
        "name": "RankEvalMetricPrecision",
        "namespace": "_global.rank_eval"
      },
      "properties": [
        {
          "description": "Controls how unlabeled documents in the search results are counted. If set to true, unlabeled documents are ignored and neither count as relevant or irrelevant. Set to false (the default), they are treated as irrelevant.",
          "name": "ignore_unlabeled",
          "required": false,
          "serverDefault": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "RankEvalMetricBase",
          "namespace": "_global.rank_eval"
        }
      },
      "kind": "interface",
      "name": {
        "name": "RankEvalMetricRatingTreshold",
        "namespace": "_global.rank_eval"
      },
      "properties": [
        {
          "description": "Sets the rating threshold above which documents are considered to be \"relevant\".",
          "name": "relevant_rating_threshold",
          "required": false,
          "serverDefault": 1,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "description": "Recall at K (R@k)",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/search-rank-eval.html#k-recall",
      "inherits": {
        "type": {
          "name": "RankEvalMetricRatingTreshold",
          "namespace": "_global.rank_eval"
        }
      },
      "kind": "interface",
      "name": {
        "name": "RankEvalMetricRecall",
        "namespace": "_global.rank_eval"
      },
      "properties": []
    },
    {
      "kind": "interface",
      "name": {
        "name": "RankEvalQuery",
        "namespace": "_global.rank_eval"
      },
      "properties": [
        {
          "name": "query",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "QueryContainer",
              "namespace": "_types.query_dsl"
            }
          }
        },
        {
          "name": "size",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "RankEvalRequestItem",
        "namespace": "_global.rank_eval"
      },
      "properties": [
        {
          "description": "The search request’s ID, used to group result details later.",
          "name": "id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "The query being evaluated.",
          "name": "request",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "RankEvalQuery",
              "namespace": "_global.rank_eval"
            }
          }
        },
        {
          "description": "List of document ratings",
          "name": "ratings",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "DocumentRating",
                "namespace": "_global.rank_eval"
              }
            }
          }
        },
        {
          "description": "The search template Id",
          "name": "template_id",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "The search template parameters.",
          "name": "params",
          "required": false,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "user_defined_value"
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "properties",
        "properties": [
          {
            "description": "A set of typical search requests, together with their provided ratings.",
            "name": "requests",
            "required": true,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "RankEvalRequestItem",
                  "namespace": "_global.rank_eval"
                }
              }
            }
          },
          {
            "description": "Definition of the evaluation metric to calculate.",
            "name": "metric",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "RankEvalMetric",
                "namespace": "_global.rank_eval"
              }
            }
          }
        ]
      },
      "description": "Enables you to evaluate the quality of ranked search results over a set of typical search queries.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "_global.rank_eval"
      },
      "path": [
        {
          "description": "Comma-separated list of data streams, indices, and index aliases used to limit the request. Wildcard (`*`) expressions are supported.\nTo target all data streams and indices in a cluster, omit this parameter or use `_all` or `*`.",
          "name": "index",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Indices",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "If `false`, the request returns an error if any wildcard expression, index alias, or `_all` value targets only missing or closed indices. This behavior applies even if the request targets other open indices. For example, a request targeting `foo*,bar*` returns an error if an index starts with `foo` but no index starts with `bar`.",
          "name": "allow_no_indices",
          "required": false,
          "serverDefault": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
          "name": "expand_wildcards",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ExpandWildcards",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "If `true`, missing or closed indices are not included in the response.",
          "name": "ignore_unavailable",
          "required": false,
          "serverDefault": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Search operation type",
          "name": "search_type",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "description": "The overall evaluation quality calculated by the defined metric",
            "name": "metric_score",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "double",
                "namespace": "_types"
              }
            }
          },
          {
            "description": "The details section contains one entry for every query in the original requests section, keyed by the search request id",
            "name": "details",
            "required": true,
            "type": {
              "key": {
                "kind": "instance_of",
                "type": {
                  "name": "Id",
                  "namespace": "_types"
                }
              },
              "kind": "dictionary_of",
              "singleKey": false,
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "RankEvalMetricDetail",
                  "namespace": "_global.rank_eval"
                }
              }
            }
          },
          {
            "name": "failures",
            "required": true,
            "type": {
              "key": {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              },
              "kind": "dictionary_of",
              "singleKey": false,
              "value": {
                "kind": "user_defined_value"
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "_global.rank_eval"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "UnratedDocument",
        "namespace": "_global.rank_eval"
      },
      "properties": [
        {
          "name": "_id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "_index",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndexName",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "Destination",
        "namespace": "_global.reindex"
      },
      "properties": [
        {
          "name": "index",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndexName",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "op_type",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "OpType",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "pipeline",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "routing",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Routing",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "version_type",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "VersionType",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "RemoteSource",
        "namespace": "_global.reindex"
      },
      "properties": [
        {
          "name": "connect_timeout",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "host",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Host",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "username",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Username",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "password",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Password",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "socket_timeout",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "conflicts",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Conflicts",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "dest",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Destination",
                "namespace": "_global.reindex"
              }
            }
          },
          {
            "name": "max_docs",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "long",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "script",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Script",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "size",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "long",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "source",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Source",
                "namespace": "_global.reindex"
              }
            }
          }
        ]
      },
      "description": "Allows to copy documents from one index to another, optionally filtering the source\ndocuments by a query, changing the destination index settings, or fetching the\ndocuments from a remote cluster.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "_global.reindex"
      },
      "path": [],
      "query": [
        {
          "description": "Should the affected indexes be refreshed?",
          "name": "refresh",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "The throttle to set on this request in sub-requests per second. -1 means no throttle.",
          "name": "requests_per_second",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Control how long to keep the search context alive",
          "name": "scroll",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "The number of slices this task should be divided into. Defaults to 1, meaning the task isn't sliced into subtasks. Can be set to `auto`.",
          "name": "slices",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Time each individual bulk request should wait for shards that are unavailable.",
          "name": "timeout",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Sets the number of shard copies that must be active before proceeding with the reindex operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)",
          "name": "wait_for_active_shards",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "WaitForActiveShards",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Should the request should block until the reindex is complete.",
          "name": "wait_for_completion",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "require_alias",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "batches",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "long",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "created",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "long",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "deleted",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "long",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "failures",
            "required": false,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "BulkIndexByScrollFailure",
                  "namespace": "_types"
                }
              }
            }
          },
          {
            "name": "noops",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "long",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "retries",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Retries",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "requests_per_second",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "long",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "slice_id",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "integer",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "task",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "TaskId",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "throttled_millis",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "EpochMillis",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "throttled_until_millis",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "EpochMillis",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "timed_out",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "took",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Time",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "total",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "long",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "updated",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "long",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "version_conflicts",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "long",
                "namespace": "_types"
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "_global.reindex"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "Source",
        "namespace": "_global.reindex"
      },
      "properties": [
        {
          "name": "index",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Indices",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "query",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "QueryContainer",
              "namespace": "_types.query_dsl"
            }
          }
        },
        {
          "name": "remote",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "RemoteSource",
              "namespace": "_global.reindex"
            }
          }
        },
        {
          "name": "size",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "slice",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "SlicedScroll",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "sort",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Sort",
              "namespace": "_global.search._types"
            }
          }
        },
        {
          "identifier": "source_fields",
          "name": "_source",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Fields",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "BaseNode",
          "namespace": "_spec_utils"
        }
      },
      "kind": "interface",
      "name": {
        "name": "ReindexNode",
        "namespace": "_global.reindex_rethrottle"
      },
      "properties": [
        {
          "name": "tasks",
          "required": true,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "TaskId",
                "namespace": "_types"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "ReindexTask",
                "namespace": "_global.reindex_rethrottle"
              }
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "ReindexStatus",
        "namespace": "_global.reindex_rethrottle"
      },
      "properties": [
        {
          "name": "batches",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "created",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "deleted",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "noops",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "requests_per_second",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "float",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "retries",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Retries",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "throttled_millis",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "throttled_until_millis",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "total",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "updated",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "version_conflicts",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "ReindexTask",
        "namespace": "_global.reindex_rethrottle"
      },
      "properties": [
        {
          "name": "action",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "cancellable",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "description",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "node",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "running_time_in_nanos",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "start_time_in_millis",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "status",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ReindexStatus",
              "namespace": "_global.reindex_rethrottle"
            }
          }
        },
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "headers",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "HttpHeaders",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Changes the number of requests per second for a particular Reindex operation.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "_global.reindex_rethrottle"
      },
      "path": [
        {
          "description": "The task id to rethrottle",
          "name": "task_id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "The throttle to set on this request in floating sub-requests per second. -1 means set no throttle.",
          "name": "requests_per_second",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "nodes",
            "required": true,
            "type": {
              "key": {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              },
              "kind": "dictionary_of",
              "singleKey": false,
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "ReindexNode",
                  "namespace": "_global.reindex_rethrottle"
                }
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "_global.reindex_rethrottle"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "file",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "params",
            "required": false,
            "type": {
              "key": {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              },
              "kind": "dictionary_of",
              "singleKey": false,
              "value": {
                "kind": "user_defined_value"
              }
            }
          },
          {
            "name": "source",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        ]
      },
      "description": "Allows to use the Mustache language to pre-render a search definition.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "_global.render_search_template"
      },
      "path": [
        {
          "description": "The id of the stored search template",
          "name": "id",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": []
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "template_output",
            "required": true,
            "type": {
              "key": {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              },
              "kind": "dictionary_of",
              "singleKey": false,
              "value": {
                "kind": "user_defined_value"
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "_global.render_search_template"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "PainlessContextSetup",
        "namespace": "_global.scripts_painless_execute"
      },
      "properties": [
        {
          "name": "document",
          "required": true,
          "type": {
            "kind": "user_defined_value"
          }
        },
        {
          "name": "index",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndexName",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "query",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "QueryContainer",
              "namespace": "_types.query_dsl"
            }
          }
        }
      ]
    },
    {
      "description": "If a painless script fails to execute this is returned on the serialized exception",
      "kind": "interface",
      "name": {
        "name": "PainlessExecutionPosition",
        "namespace": "_global.scripts_painless_execute"
      },
      "properties": [
        {
          "name": "offset",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "start",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "end",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "context",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "context_setup",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "PainlessContextSetup",
                "namespace": "_global.scripts_painless_execute"
              }
            }
          },
          {
            "name": "script",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "InlineScript",
                "namespace": "_types"
              }
            }
          }
        ]
      },
      "description": "Allows an arbitrary script to be executed and a result to be returned",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "_global.scripts_painless_execute"
      },
      "path": [],
      "query": []
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "result",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "TResult",
                "namespace": "_global.scripts_painless_execute"
              }
            }
          }
        ]
      },
      "generics": [
        {
          "name": "TResult",
          "namespace": "_global.scripts_painless_execute"
        }
      ],
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "_global.scripts_painless_execute"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "properties",
        "properties": [
          {
            "description": "Period to retain the search context for scrolling.",
            "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/paginate-search-results.html#scroll-search-results",
            "name": "scroll",
            "required": false,
            "serverDefault": "1d",
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Time",
                "namespace": "_types"
              }
            }
          },
          {
            "description": "Scroll ID of the search.",
            "name": "scroll_id",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "ScrollId",
                "namespace": "_types"
              }
            }
          }
        ]
      },
      "description": "Allows to retrieve a large numbers of results from a single search request.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "_global.scroll"
      },
      "path": [
        {
          "deprecation": {
            "description": "",
            "version": "7.0.0"
          },
          "description": "The scroll ID",
          "name": "scroll_id",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "Period to retain the search context for scrolling.",
          "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/paginate-search-results.html#scroll-search-results",
          "name": "scroll",
          "required": false,
          "serverDefault": "1d",
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "deprecation": {
            "description": "",
            "version": "7.0.0"
          },
          "description": "The scroll ID for scrolled search",
          "name": "scroll_id",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ScrollId",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "If true, the API response’s hit.total property is returned as an integer. If false, the API response’s hit.total property is returned as an object.",
          "name": "rest_total_hits_as_int",
          "required": false,
          "serverDefault": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": []
      },
      "generics": [
        {
          "name": "TDocument",
          "namespace": "_global.scroll"
        }
      ],
      "inherits": {
        "generics": [
          {
            "kind": "instance_of",
            "type": {
              "name": "TDocument",
              "namespace": "_global.scroll"
            }
          }
        ],
        "type": {
          "name": "Response",
          "namespace": "_global.search"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "_global.scroll"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "aggs",
            "required": false,
            "type": {
              "key": {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              },
              "kind": "dictionary_of",
              "singleKey": false,
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "AggregationContainer",
                  "namespace": "_types.aggregations"
                }
              }
            }
          },
          {
            "name": "aggregations",
            "required": false,
            "type": {
              "key": {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              },
              "kind": "dictionary_of",
              "singleKey": false,
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "AggregationContainer",
                  "namespace": "_types.aggregations"
                }
              }
            }
          },
          {
            "name": "collapse",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "FieldCollapse",
                "namespace": "_global.search._types"
              }
            }
          },
          {
            "description": "If true, returns detailed information about score computation as part of a hit.",
            "name": "explain",
            "required": false,
            "serverDefault": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          },
          {
            "description": "Starting document offset. By default, you cannot page through more than 10,000\nhits using the from and size parameters. To page through more hits, use the\nsearch_after parameter.",
            "name": "from",
            "required": false,
            "serverDefault": 0,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "integer",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "highlight",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Highlight",
                "namespace": "_global.search._types"
              }
            }
          },
          {
            "description": "Number of hits matching the query to count accurately. If true, the exact\nnumber of hits is returned at the cost of some performance. If false, the\nresponse does not include the total number of hits matching the query.\nDefaults to 10,000 hits.",
            "name": "track_total_hits",
            "required": false,
            "type": {
              "items": [
                {
                  "kind": "instance_of",
                  "type": {
                    "name": "boolean",
                    "namespace": "internal"
                  }
                },
                {
                  "kind": "instance_of",
                  "type": {
                    "name": "integer",
                    "namespace": "_types"
                  }
                }
              ],
              "kind": "union_of"
            }
          },
          {
            "description": "Boosts the _score of documents from specified indices.",
            "name": "indices_boost",
            "required": false,
            "type": {
              "kind": "array_of",
              "value": {
                "key": {
                  "kind": "instance_of",
                  "type": {
                    "name": "IndexName",
                    "namespace": "_types"
                  }
                },
                "kind": "dictionary_of",
                "singleKey": false,
                "value": {
                  "kind": "instance_of",
                  "type": {
                    "name": "double",
                    "namespace": "_types"
                  }
                }
              }
            }
          },
          {
            "description": "Array of wildcard (*) patterns. The request returns doc values for field\nnames matching these patterns in the hits.fields property of the response.",
            "name": "docvalue_fields",
            "required": false,
            "type": {
              "items": [
                {
                  "kind": "instance_of",
                  "type": {
                    "name": "DocValueField",
                    "namespace": "_global.search._types"
                  }
                },
                {
                  "kind": "array_of",
                  "value": {
                    "items": [
                      {
                        "kind": "instance_of",
                        "type": {
                          "name": "Field",
                          "namespace": "_types"
                        }
                      },
                      {
                        "kind": "instance_of",
                        "type": {
                          "name": "DocValueField",
                          "namespace": "_global.search._types"
                        }
                      }
                    ],
                    "kind": "union_of"
                  }
                }
              ],
              "kind": "union_of"
            }
          },
          {
            "description": "Minimum _score for matching documents. Documents with a lower _score are\nnot included in the search results.",
            "name": "min_score",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "double",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "post_filter",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "QueryContainer",
                "namespace": "_types.query_dsl"
              }
            }
          },
          {
            "name": "profile",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          },
          {
            "description": "Defines the search definition using the Query DSL.",
            "name": "query",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "QueryContainer",
                "namespace": "_types.query_dsl"
              }
            }
          },
          {
            "name": "rescore",
            "required": false,
            "type": {
              "items": [
                {
                  "kind": "instance_of",
                  "type": {
                    "name": "Rescore",
                    "namespace": "_global.search._types"
                  }
                },
                {
                  "kind": "array_of",
                  "value": {
                    "kind": "instance_of",
                    "type": {
                      "name": "Rescore",
                      "namespace": "_global.search._types"
                    }
                  }
                }
              ],
              "kind": "union_of"
            }
          },
          {
            "description": "Retrieve a script evaluation (based on different fields) for each hit.",
            "name": "script_fields",
            "required": false,
            "type": {
              "key": {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              },
              "kind": "dictionary_of",
              "singleKey": false,
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "ScriptField",
                  "namespace": "_types"
                }
              }
            }
          },
          {
            "name": "search_after",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "SortResults",
                "namespace": "_global.search._types"
              }
            }
          },
          {
            "description": "The number of hits to return. By default, you cannot page through more\nthan 10,000 hits using the from and size parameters. To page through more\nhits, use the search_after parameter.",
            "name": "size",
            "required": false,
            "serverDefault": 10,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "integer",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "slice",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "SlicedScroll",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Sort",
                "namespace": "_global.search._types"
              }
            }
          },
          {
            "description": "Indicates which source fields are returned for matching documents. These\nfields are returned in the hits._source property of the search response.",
            "name": "_source",
            "required": false,
            "type": {
              "items": [
                {
                  "kind": "instance_of",
                  "type": {
                    "name": "boolean",
                    "namespace": "internal"
                  }
                },
                {
                  "kind": "instance_of",
                  "type": {
                    "name": "Fields",
                    "namespace": "_types"
                  }
                },
                {
                  "kind": "instance_of",
                  "type": {
                    "name": "SourceFilter",
                    "namespace": "_global.search._types"
                  }
                }
              ],
              "kind": "union_of"
            }
          },
          {
            "description": "Array of wildcard (*) patterns. The request returns values for field names\nmatching these patterns in the hits.fields property of the response.",
            "name": "fields",
            "required": false,
            "type": {
              "kind": "array_of",
              "value": {
                "items": [
                  {
                    "kind": "instance_of",
                    "type": {
                      "name": "Field",
                      "namespace": "_types"
                    }
                  },
                  {
                    "kind": "instance_of",
                    "type": {
                      "name": "DateField",
                      "namespace": "_types"
                    }
                  }
                ],
                "kind": "union_of"
              }
            }
          },
          {
            "name": "suggest",
            "required": false,
            "type": {
              "items": [
                {
                  "kind": "instance_of",
                  "type": {
                    "name": "SuggestContainer",
                    "namespace": "_global.search._types"
                  }
                },
                {
                  "key": {
                    "kind": "instance_of",
                    "type": {
                      "name": "string",
                      "namespace": "internal"
                    }
                  },
                  "kind": "dictionary_of",
                  "singleKey": false,
                  "value": {
                    "kind": "instance_of",
                    "type": {
                      "name": "SuggestContainer",
                      "namespace": "_global.search._types"
                    }
                  }
                }
              ],
              "kind": "union_of"
            }
          },
          {
            "description": "Maximum number of documents to collect for each shard. If a query reaches this\nlimit, Elasticsearch terminates the query early. Elasticsearch collects documents\nbefore sorting. Defaults to 0, which does not terminate query execution early.",
            "name": "terminate_after",
            "required": false,
            "serverDefault": 0,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "long",
                "namespace": "_types"
              }
            }
          },
          {
            "description": "Specifies the period of time to wait for a response from each shard. If no response\nis received before the timeout expires, the request fails and returns an error.\nDefaults to no timeout.",
            "name": "timeout",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          },
          {
            "description": "If true, calculate and return document scores, even if the scores are not used for sorting.",
            "name": "track_scores",
            "required": false,
            "serverDefault": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          },
          {
            "description": "If true, returns document version as part of a hit.",
            "name": "version",
            "required": false,
            "serverDefault": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          },
          {
            "description": "If true, returns sequence number and primary term of the last modification\nof each hit. See Optimistic concurrency control.",
            "name": "seq_no_primary_term",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          },
          {
            "description": "List of stored fields to return as part of a hit. If no fields are specified,\nno stored fields are included in the response. If this field is specified, the _source\nparameter defaults to false. You can pass _source: true to return both source fields\nand stored fields in the search response.",
            "name": "stored_fields",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Fields",
                "namespace": "_types"
              }
            }
          },
          {
            "description": "Limits the search to a point in time (PIT). If you provide a PIT, you\ncannot specify an <index> in the request path.",
            "name": "pit",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "PointInTimeReference",
                "namespace": "_global.search._types"
              }
            }
          },
          {
            "description": "Defines one or more runtime fields in the search request. These fields take\nprecedence over mapped fields with the same name.",
            "name": "runtime_mappings",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "RuntimeFields",
                "namespace": "_types.mapping"
              }
            }
          },
          {
            "description": "Stats groups to associate with the search. Each group maintains a statistics\naggregation for its associated searches. You can retrieve these stats using\nthe indices stats API.",
            "name": "stats",
            "required": false,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              }
            }
          }
        ]
      },
      "description": "Returns results matching a query.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "_global.search"
      },
      "path": [
        {
          "description": "A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices",
          "name": "index",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Indices",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)",
          "name": "allow_no_indices",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Indicate if an error should be returned if there is a partial search failure or timeout",
          "name": "allow_partial_search_results",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "The analyzer to use for the query string",
          "name": "analyzer",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Specify whether wildcard and prefix queries should be analyzed (default: false)",
          "name": "analyze_wildcard",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "The number of shard results that should be reduced at once on the coordinating node. This value should be used as a protection mechanism to reduce the memory overhead per search request if the potential number of shards in the request can be large.",
          "name": "batched_reduce_size",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Indicates whether network round-trips should be minimized as part of cross-cluster search requests execution",
          "name": "ccs_minimize_roundtrips",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "The default operator for query string query (AND or OR)",
          "name": "default_operator",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DefaultOperator",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "The field to use as default where no field prefix is given in the query string",
          "name": "df",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "A comma-separated list of fields to return as the docvalue representation of a field for each hit",
          "name": "docvalue_fields",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Fields",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
          "name": "expand_wildcards",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ExpandWildcards",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Specify whether to return detailed information about score computation as part of a hit",
          "name": "explain",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Whether specified concrete, expanded or aliased indices should be ignored when throttled",
          "name": "ignore_throttled",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed)",
          "name": "ignore_unavailable",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Specify whether format-based query failures (such as providing text to a numeric field) should be ignored",
          "name": "lenient",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "The number of concurrent shard requests per node this search executes concurrently. This value should be used to limit the impact of the search on the cluster in order to limit the number of concurrent shard requests",
          "name": "max_concurrent_shard_requests",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "The minimum compatible version that all shards involved in search should have for this request to be successful",
          "name": "min_compatible_shard_node",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "VersionString",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Specify the node or shard the operation should be performed on (default: random)",
          "name": "preference",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "A threshold that enforces a pre-filter roundtrip to prefilter search shards based on query rewriting if the number of shards the search request expands to exceeds the threshold. This filter roundtrip can limit the number of shards significantly if for instance a shard can not match any documents based on its rewrite method ie. if date filters are mandatory to match but the shard bounds and the query are disjoint.",
          "name": "pre_filter_shard_size",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Specify if request cache should be used for this request or not, defaults to index level setting",
          "name": "request_cache",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "A comma-separated list of specific routing values",
          "name": "routing",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Routing",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Specify how long a consistent view of the index should be maintained for scrolled search",
          "name": "scroll",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Search operation type",
          "name": "search_type",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "SearchType",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Specific 'tag' of the request for logging and statistical purposes",
          "name": "stats",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        },
        {
          "description": "A comma-separated list of stored fields to return as part of a hit",
          "name": "stored_fields",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Fields",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Specifies which field to use for suggestions.",
          "name": "suggest_field",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Specify suggest mode",
          "name": "suggest_mode",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "SuggestMode",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "How many suggestions to return in response",
          "name": "suggest_size",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "The source text for which the suggestions should be returned.",
          "name": "suggest_text",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "The maximum number of documents to collect for each shard, upon reaching which the query execution will terminate early.",
          "name": "terminate_after",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Explicit operation timeout",
          "name": "timeout",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Indicate if the number of documents that match the query should be tracked. A number can also be specified, to accurately track the total hit count up to the number.",
          "name": "track_total_hits",
          "required": false,
          "type": {
            "items": [
              {
                "kind": "instance_of",
                "type": {
                  "name": "boolean",
                  "namespace": "internal"
                }
              },
              {
                "kind": "instance_of",
                "type": {
                  "name": "integer",
                  "namespace": "_types"
                }
              }
            ],
            "kind": "union_of"
          }
        },
        {
          "description": "Whether to calculate and return scores even if they are not used for sorting",
          "name": "track_scores",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Specify whether aggregation and suggester names should be prefixed by their respective types in the response",
          "name": "typed_keys",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Indicates whether hits.total should be rendered as an integer or an object in the rest search response",
          "name": "rest_total_hits_as_int",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Specify whether to return document version as part of a hit",
          "name": "version",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "True or false to return the _source field or not, or a list of fields to return",
          "name": "_source",
          "required": false,
          "type": {
            "items": [
              {
                "kind": "instance_of",
                "type": {
                  "name": "boolean",
                  "namespace": "internal"
                }
              },
              {
                "kind": "instance_of",
                "type": {
                  "name": "Fields",
                  "namespace": "_types"
                }
              }
            ],
            "kind": "union_of"
          }
        },
        {
          "description": "A list of fields to exclude from the returned _source field",
          "name": "_source_excludes",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Fields",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "A list of fields to extract and return from the _source field",
          "name": "_source_includes",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Fields",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Specify whether to return sequence number and primary term of the last modification of each hit",
          "name": "seq_no_primary_term",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Query in the Lucene query string syntax",
          "name": "q",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Number of hits to return (default: 10)",
          "name": "size",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Starting offset (default: 0)",
          "name": "from",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "A comma-separated list of <field>:<direction> pairs",
          "name": "sort",
          "required": false,
          "type": {
            "items": [
              {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              },
              {
                "kind": "array_of",
                "value": {
                  "kind": "instance_of",
                  "type": {
                    "name": "string",
                    "namespace": "internal"
                  }
                }
              }
            ],
            "kind": "union_of"
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "took",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "long",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "timed_out",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "_shards",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "ShardStatistics",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "hits",
            "required": true,
            "type": {
              "generics": [
                {
                  "kind": "instance_of",
                  "type": {
                    "name": "TDocument",
                    "namespace": "_global.search"
                  }
                }
              ],
              "kind": "instance_of",
              "type": {
                "name": "HitsMetadata",
                "namespace": "_global.search._types"
              }
            }
          },
          {
            "name": "aggregations",
            "required": false,
            "type": {
              "key": {
                "kind": "instance_of",
                "type": {
                  "name": "AggregateName",
                  "namespace": "_types"
                }
              },
              "kind": "dictionary_of",
              "singleKey": false,
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "Aggregate",
                  "namespace": "_types.aggregations"
                }
              }
            }
          },
          {
            "name": "_clusters",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "ClusterStatistics",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "documents",
            "required": false,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "TDocument",
                  "namespace": "_global.search"
                }
              }
            }
          },
          {
            "name": "fields",
            "required": false,
            "type": {
              "key": {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              },
              "kind": "dictionary_of",
              "singleKey": false,
              "value": {
                "kind": "user_defined_value"
              }
            }
          },
          {
            "name": "max_score",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "double",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "num_reduce_phases",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "long",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "profile",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Profile",
                "namespace": "_global.search._types"
              }
            }
          },
          {
            "name": "pit_id",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Id",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "_scroll_id",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "ScrollId",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "suggest",
            "required": false,
            "type": {
              "key": {
                "kind": "instance_of",
                "type": {
                  "name": "SuggestionName",
                  "namespace": "_types"
                }
              },
              "kind": "dictionary_of",
              "singleKey": false,
              "value": {
                "kind": "array_of",
                "value": {
                  "generics": [
                    {
                      "kind": "instance_of",
                      "type": {
                        "name": "TDocument",
                        "namespace": "_global.search"
                      }
                    }
                  ],
                  "kind": "instance_of",
                  "type": {
                    "name": "Suggest",
                    "namespace": "_global.search._types"
                  }
                }
              }
            }
          },
          {
            "name": "terminated_early",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          }
        ]
      },
      "generics": [
        {
          "name": "TDocument",
          "namespace": "_global.search"
        }
      ],
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "_global.search"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "AggregationBreakdown",
        "namespace": "_global.search._types"
      },
      "properties": [
        {
          "name": "build_aggregation",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "build_aggregation_count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "build_leaf_collector",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "build_leaf_collector_count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "collect",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "collect_count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "initialize",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "initialize_count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "post_collection",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "post_collection_count",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "reduce",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "reduce_count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "AggregationProfile",
        "namespace": "_global.search._types"
      },
      "properties": [
        {
          "name": "breakdown",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "AggregationBreakdown",
              "namespace": "_global.search._types"
            }
          }
        },
        {
          "name": "description",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "time_in_nanos",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "debug",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "AggregationProfileDebug",
              "namespace": "_global.search._types"
            }
          }
        },
        {
          "name": "children",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "AggregationProfileDebug",
                "namespace": "_global.search._types"
              }
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "AggregationProfileDebug",
        "namespace": "_global.search._types"
      },
      "properties": []
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "chars"
        },
        {
          "name": "sentence"
        },
        {
          "name": "word"
        }
      ],
      "name": {
        "name": "BoundaryScanner",
        "namespace": "_global.search._types"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "Collector",
        "namespace": "_global.search._types"
      },
      "properties": [
        {
          "name": "name",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "reason",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "time_in_nanos",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "children",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "Collector",
                "namespace": "_global.search._types"
              }
            }
          }
        }
      ]
    },
    {
      "generics": [
        {
          "name": "TDocument",
          "namespace": "_global.search._types"
        }
      ],
      "kind": "interface",
      "name": {
        "name": "CompletionSuggestOption",
        "namespace": "_global.search._types"
      },
      "properties": [
        {
          "name": "collate_match",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "contexts",
          "required": false,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "Context",
                  "namespace": "_global.search._types"
                }
              }
            }
          }
        },
        {
          "name": "fields",
          "required": false,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "user_defined_value"
            }
          }
        },
        {
          "name": "_id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "_index",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndexName",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "_type",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Type",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "_routing",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Routing",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "_score",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "_source",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "TDocument",
              "namespace": "_global.search._types"
            }
          }
        },
        {
          "name": "text",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "SuggesterBase",
          "namespace": "_global.search._types"
        }
      },
      "kind": "interface",
      "name": {
        "name": "CompletionSuggester",
        "namespace": "_global.search._types"
      },
      "properties": [
        {
          "name": "contexts",
          "required": false,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "items": [
                {
                  "kind": "instance_of",
                  "type": {
                    "name": "string",
                    "namespace": "internal"
                  }
                },
                {
                  "kind": "array_of",
                  "value": {
                    "kind": "instance_of",
                    "type": {
                      "name": "string",
                      "namespace": "internal"
                    }
                  }
                },
                {
                  "kind": "instance_of",
                  "type": {
                    "name": "GeoLocation",
                    "namespace": "_types.query_dsl"
                  }
                },
                {
                  "kind": "array_of",
                  "value": {
                    "kind": "instance_of",
                    "type": {
                      "name": "SuggestContextQuery",
                      "namespace": "_global.search._types"
                    }
                  }
                }
              ],
              "kind": "union_of"
            }
          }
        },
        {
          "name": "fuzzy",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "SuggestFuzziness",
              "namespace": "_global.search._types"
            }
          }
        },
        {
          "name": "prefix",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "regex",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "skip_duplicates",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "description": "Text that we want similar documents for or a lookup to a document's field for the text.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-mlt-query.html#_document_input_parameters",
      "kind": "type_alias",
      "name": {
        "name": "Context",
        "namespace": "_global.search._types"
      },
      "type": {
        "items": [
          {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "GeoLocation",
              "namespace": "_types.query_dsl"
            }
          }
        ],
        "kind": "union_of"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "DirectGenerator",
        "namespace": "_global.search._types"
      },
      "properties": [
        {
          "name": "field",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "max_edits",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "max_inspections",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "float",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "max_term_freq",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "float",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "min_doc_freq",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "float",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "min_word_length",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "post_filter",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "pre_filter",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "prefix_length",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "size",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "suggest_mode",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "SuggestMode",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "DocValueField",
        "namespace": "_global.search._types"
      },
      "properties": [
        {
          "name": "field",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "format",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "FieldAndFormat",
        "namespace": "_global.search._types"
      },
      "properties": [
        {
          "name": "field",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "format",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "include_unmapped",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ],
      "shortcutProperty": "field"
    },
    {
      "kind": "interface",
      "name": {
        "name": "FieldCollapse",
        "namespace": "_global.search._types"
      },
      "properties": [
        {
          "name": "field",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "inner_hits",
          "required": false,
          "type": {
            "items": [
              {
                "kind": "instance_of",
                "type": {
                  "name": "InnerHits",
                  "namespace": "_global.search._types"
                }
              },
              {
                "kind": "array_of",
                "value": {
                  "kind": "instance_of",
                  "type": {
                    "name": "InnerHits",
                    "namespace": "_global.search._types"
                  }
                }
              }
            ],
            "kind": "union_of"
          }
        },
        {
          "name": "max_concurrent_group_searches",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "FieldSort",
        "namespace": "_global.search._types"
      },
      "properties": [
        {
          "name": "missing",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Missing",
              "namespace": "_types.aggregations"
            }
          }
        },
        {
          "name": "mode",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "SortMode",
              "namespace": "_global.search._types"
            }
          }
        },
        {
          "name": "nested",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "NestedSortValue",
              "namespace": "_global.search._types"
            }
          }
        },
        {
          "name": "order",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "SortOrder",
              "namespace": "_global.search._types"
            }
          }
        },
        {
          "name": "unmapped_type",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "FieldType",
              "namespace": "_types.mapping"
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "AdditionalProperties"
      ],
      "behaviors": [
        {
          "generics": [
            {
              "kind": "instance_of",
              "type": {
                "name": "Field",
                "namespace": "_types"
              }
            },
            {
              "items": [
                {
                  "kind": "instance_of",
                  "type": {
                    "name": "GeoLocation",
                    "namespace": "_types.query_dsl"
                  }
                },
                {
                  "kind": "array_of",
                  "value": {
                    "kind": "instance_of",
                    "type": {
                      "name": "GeoLocation",
                      "namespace": "_types.query_dsl"
                    }
                  }
                }
              ],
              "kind": "union_of"
            }
          ],
          "type": {
            "name": "AdditionalProperties",
            "namespace": "_spec_utils"
          }
        }
      ],
      "kind": "interface",
      "name": {
        "name": "GeoDistanceSort",
        "namespace": "_global.search._types"
      },
      "properties": [
        {
          "name": "mode",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "SortMode",
              "namespace": "_global.search._types"
            }
          }
        },
        {
          "name": "distance_type",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "GeoDistanceType",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "order",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "SortOrder",
              "namespace": "_global.search._types"
            }
          }
        },
        {
          "name": "unit",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DistanceUnit",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "Highlight",
        "namespace": "_global.search._types"
      },
      "properties": [
        {
          "name": "fields",
          "required": true,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "Field",
                "namespace": "_types"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "HighlightField",
                "namespace": "_global.search._types"
              }
            }
          }
        },
        {
          "name": "type",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "HighlighterType",
              "namespace": "_global.search._types"
            }
          }
        },
        {
          "name": "boundary_chars",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "boundary_max_scan",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "boundary_scanner",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "BoundaryScanner",
              "namespace": "_global.search._types"
            }
          }
        },
        {
          "name": "boundary_scanner_locale",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "encoder",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "HighlighterEncoder",
              "namespace": "_global.search._types"
            }
          }
        },
        {
          "name": "fragmenter",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "HighlighterFragmenter",
              "namespace": "_global.search._types"
            }
          }
        },
        {
          "name": "fragment_offset",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "fragment_size",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "max_fragment_length",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "no_match_size",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "number_of_fragments",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "order",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "HighlighterOrder",
              "namespace": "_global.search._types"
            }
          }
        },
        {
          "name": "post_tags",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        },
        {
          "name": "pre_tags",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        },
        {
          "name": "require_field_match",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "tags_schema",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "HighlighterTagsSchema",
              "namespace": "_global.search._types"
            }
          }
        },
        {
          "name": "highlight_query",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "QueryContainer",
              "namespace": "_types.query_dsl"
            }
          }
        },
        {
          "name": "max_analyzed_offset",
          "required": false,
          "type": {
            "items": [
              {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              },
              {
                "kind": "instance_of",
                "type": {
                  "name": "integer",
                  "namespace": "_types"
                }
              }
            ],
            "kind": "union_of"
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "HighlightField",
        "namespace": "_global.search._types"
      },
      "properties": [
        {
          "name": "boundary_chars",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "boundary_max_scan",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "boundary_scanner",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "BoundaryScanner",
              "namespace": "_global.search._types"
            }
          }
        },
        {
          "name": "boundary_scanner_locale",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "field",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "force_source",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "fragmenter",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "HighlighterFragmenter",
              "namespace": "_global.search._types"
            }
          }
        },
        {
          "name": "fragment_offset",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "fragment_size",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "highlight_query",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "QueryContainer",
              "namespace": "_types.query_dsl"
            }
          }
        },
        {
          "name": "matched_fields",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Fields",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "max_fragment_length",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "no_match_size",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "number_of_fragments",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "order",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "HighlighterOrder",
              "namespace": "_global.search._types"
            }
          }
        },
        {
          "name": "phrase_limit",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "post_tags",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        },
        {
          "name": "pre_tags",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        },
        {
          "name": "require_field_match",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "tags_schema",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "HighlighterTagsSchema",
              "namespace": "_global.search._types"
            }
          }
        },
        {
          "name": "type",
          "required": false,
          "type": {
            "items": [
              {
                "kind": "instance_of",
                "type": {
                  "name": "HighlighterType",
                  "namespace": "_global.search._types"
                }
              },
              {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              }
            ],
            "kind": "union_of"
          }
        }
      ]
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "default"
        },
        {
          "name": "html"
        }
      ],
      "name": {
        "name": "HighlighterEncoder",
        "namespace": "_global.search._types"
      }
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "simple"
        },
        {
          "name": "span"
        }
      ],
      "name": {
        "name": "HighlighterFragmenter",
        "namespace": "_global.search._types"
      }
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "score"
        }
      ],
      "name": {
        "name": "HighlighterOrder",
        "namespace": "_global.search._types"
      }
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "styled"
        }
      ],
      "name": {
        "name": "HighlighterTagsSchema",
        "namespace": "_global.search._types"
      }
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "plain"
        },
        {
          "name": "fvh"
        },
        {
          "name": "unified"
        }
      ],
      "name": {
        "name": "HighlighterType",
        "namespace": "_global.search._types"
      }
    },
    {
      "generics": [
        {
          "name": "TDocument",
          "namespace": "_global.search._types"
        }
      ],
      "kind": "interface",
      "name": {
        "name": "Hit",
        "namespace": "_global.search._types"
      },
      "properties": [
        {
          "name": "_index",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndexName",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "_id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "_score",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "_type",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Type",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "_explanation",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Explanation",
              "namespace": "_global.explain"
            }
          }
        },
        {
          "name": "fields",
          "required": false,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "user_defined_value"
            }
          }
        },
        {
          "name": "highlight",
          "required": false,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              }
            }
          }
        },
        {
          "name": "inner_hits",
          "required": false,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "InnerHitsResult",
                "namespace": "_global.search._types"
              }
            }
          }
        },
        {
          "name": "matched_queries",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        },
        {
          "name": "_nested",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "NestedIdentity",
              "namespace": "_global.search._types"
            }
          }
        },
        {
          "name": "_ignored",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        },
        {
          "name": "_shard",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "_node",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "_routing",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "_source",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "TDocument",
              "namespace": "_global.search._types"
            }
          }
        },
        {
          "name": "_seq_no",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "SequenceNumber",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "_primary_term",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "_version",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "VersionNumber",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "sort",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "SortResults",
              "namespace": "_global.search._types"
            }
          }
        }
      ]
    },
    {
      "generics": [
        {
          "name": "T",
          "namespace": "_global.search._types"
        }
      ],
      "kind": "interface",
      "name": {
        "name": "HitsMetadata",
        "namespace": "_global.search._types"
      },
      "properties": [
        {
          "name": "total",
          "required": true,
          "type": {
            "items": [
              {
                "kind": "instance_of",
                "type": {
                  "name": "TotalHits",
                  "namespace": "_global.search._types"
                }
              },
              {
                "kind": "instance_of",
                "type": {
                  "name": "long",
                  "namespace": "_types"
                }
              }
            ],
            "kind": "union_of"
          }
        },
        {
          "name": "hits",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "generics": [
                {
                  "kind": "instance_of",
                  "type": {
                    "name": "T",
                    "namespace": "_global.search._types"
                  }
                }
              ],
              "kind": "instance_of",
              "type": {
                "name": "Hit",
                "namespace": "_global.search._types"
              }
            }
          }
        },
        {
          "name": "max_score",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "InnerHits",
        "namespace": "_global.search._types"
      },
      "properties": [
        {
          "name": "name",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "size",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "from",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "collapse",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "FieldCollapse",
              "namespace": "_global.search._types"
            }
          }
        },
        {
          "name": "docvalue_fields",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "FieldAndFormat",
                "namespace": "_global.search._types"
              }
            }
          }
        },
        {
          "name": "explain",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "highlight",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Highlight",
              "namespace": "_global.search._types"
            }
          }
        },
        {
          "name": "ignore_unmapped",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "script_fields",
          "required": false,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "Field",
                "namespace": "_types"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "ScriptField",
                "namespace": "_types"
              }
            }
          }
        },
        {
          "name": "seq_no_primary_term",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "fields",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Fields",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "sort",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Sort",
              "namespace": "_global.search._types"
            }
          }
        },
        {
          "name": "_source",
          "required": false,
          "type": {
            "items": [
              {
                "kind": "instance_of",
                "type": {
                  "name": "boolean",
                  "namespace": "internal"
                }
              },
              {
                "kind": "instance_of",
                "type": {
                  "name": "SourceFilter",
                  "namespace": "_global.search._types"
                }
              }
            ],
            "kind": "union_of"
          }
        },
        {
          "name": "stored_field",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Fields",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "track_scores",
          "required": false,
          "serverDefault": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "version",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "InnerHitsMetadata",
        "namespace": "_global.search._types"
      },
      "properties": [
        {
          "name": "total",
          "required": true,
          "type": {
            "items": [
              {
                "kind": "instance_of",
                "type": {
                  "name": "TotalHits",
                  "namespace": "_global.search._types"
                }
              },
              {
                "kind": "instance_of",
                "type": {
                  "name": "long",
                  "namespace": "_types"
                }
              }
            ],
            "kind": "union_of"
          }
        },
        {
          "name": "hits",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "generics": [
                {
                  "key": {
                    "kind": "instance_of",
                    "type": {
                      "name": "string",
                      "namespace": "internal"
                    }
                  },
                  "kind": "dictionary_of",
                  "singleKey": false,
                  "value": {
                    "kind": "user_defined_value"
                  }
                }
              ],
              "kind": "instance_of",
              "type": {
                "name": "Hit",
                "namespace": "_global.search._types"
              }
            }
          }
        },
        {
          "name": "max_score",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "InnerHitsResult",
        "namespace": "_global.search._types"
      },
      "properties": [
        {
          "name": "hits",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "InnerHitsMetadata",
              "namespace": "_global.search._types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "LaplaceSmoothingModel",
        "namespace": "_global.search._types"
      },
      "properties": [
        {
          "name": "alpha",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "LinearInterpolationSmoothingModel",
        "namespace": "_global.search._types"
      },
      "properties": [
        {
          "name": "bigram_lambda",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "trigram_lambda",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "unigram_lambda",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "NestedIdentity",
        "namespace": "_global.search._types"
      },
      "properties": [
        {
          "name": "field",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "offset",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "_nested",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "NestedIdentity",
              "namespace": "_global.search._types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "NestedSortValue",
        "namespace": "_global.search._types"
      },
      "properties": [
        {
          "name": "filter",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "QueryContainer",
              "namespace": "_types.query_dsl"
            }
          }
        },
        {
          "name": "max_children",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "path",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "PhraseSuggestCollate",
        "namespace": "_global.search._types"
      },
      "properties": [
        {
          "name": "params",
          "required": false,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "user_defined_value"
            }
          }
        },
        {
          "name": "prune",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "query",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "PhraseSuggestCollateQuery",
              "namespace": "_global.search._types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "PhraseSuggestCollateQuery",
        "namespace": "_global.search._types"
      },
      "properties": [
        {
          "name": "id",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "source",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "PhraseSuggestHighlight",
        "namespace": "_global.search._types"
      },
      "properties": [
        {
          "name": "post_tag",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "pre_tag",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "PhraseSuggestOption",
        "namespace": "_global.search._types"
      },
      "properties": [
        {
          "name": "text",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "highlighted",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "score",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "SuggesterBase",
          "namespace": "_global.search._types"
        }
      },
      "kind": "interface",
      "name": {
        "name": "PhraseSuggester",
        "namespace": "_global.search._types"
      },
      "properties": [
        {
          "name": "collate",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "PhraseSuggestCollate",
              "namespace": "_global.search._types"
            }
          }
        },
        {
          "name": "confidence",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "direct_generator",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "DirectGenerator",
                "namespace": "_global.search._types"
              }
            }
          }
        },
        {
          "name": "force_unigrams",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "gram_size",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "highlight",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "PhraseSuggestHighlight",
              "namespace": "_global.search._types"
            }
          }
        },
        {
          "name": "max_errors",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "real_word_error_likelihood",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "separator",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "shard_size",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "smoothing",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "SmoothingModelContainer",
              "namespace": "_global.search._types"
            }
          }
        },
        {
          "name": "text",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "token_limit",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "PointInTimeReference",
        "namespace": "_global.search._types"
      },
      "properties": [
        {
          "name": "id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "keep_alive",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "Profile",
        "namespace": "_global.search._types"
      },
      "properties": [
        {
          "name": "shards",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "ShardProfile",
                "namespace": "_global.search._types"
              }
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "QueryBreakdown",
        "namespace": "_global.search._types"
      },
      "properties": [
        {
          "name": "advance",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "advance_count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "build_scorer",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "build_scorer_count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "create_weight",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "create_weight_count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "match",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "match_count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "shallow_advance",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "shallow_advance_count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "next_doc",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "next_doc_count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "score",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "score_count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "compute_max_score",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "compute_max_score_count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "set_min_competitive_score",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "set_min_competitive_score_count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "QueryProfile",
        "namespace": "_global.search._types"
      },
      "properties": [
        {
          "name": "breakdown",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "QueryBreakdown",
              "namespace": "_global.search._types"
            }
          }
        },
        {
          "name": "description",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "time_in_nanos",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "children",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "QueryProfile",
                "namespace": "_global.search._types"
              }
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "Rescore",
        "namespace": "_global.search._types"
      },
      "properties": [
        {
          "name": "query",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "RescoreQuery",
              "namespace": "_global.search._types"
            }
          }
        },
        {
          "name": "window_size",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "RescoreQuery",
        "namespace": "_global.search._types"
      },
      "properties": [
        {
          "identifier": "Query",
          "name": "rescore_query",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "QueryContainer",
              "namespace": "_types.query_dsl"
            }
          }
        },
        {
          "name": "query_weight",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "rescore_query_weight",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "score_mode",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ScoreMode",
              "namespace": "_global.search._types"
            }
          }
        }
      ]
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "avg"
        },
        {
          "name": "max"
        },
        {
          "name": "min"
        },
        {
          "name": "multiply"
        },
        {
          "name": "total"
        }
      ],
      "name": {
        "name": "ScoreMode",
        "namespace": "_global.search._types"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "ScoreSort",
        "namespace": "_global.search._types"
      },
      "properties": [
        {
          "name": "mode",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "SortMode",
              "namespace": "_global.search._types"
            }
          }
        },
        {
          "name": "order",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "SortOrder",
              "namespace": "_global.search._types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "ScriptSort",
        "namespace": "_global.search._types"
      },
      "properties": [
        {
          "name": "order",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "SortOrder",
              "namespace": "_global.search._types"
            }
          }
        },
        {
          "name": "script",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Script",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "type",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "SearchProfile",
        "namespace": "_global.search._types"
      },
      "properties": [
        {
          "name": "collector",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "Collector",
                "namespace": "_global.search._types"
              }
            }
          }
        },
        {
          "name": "query",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "QueryProfile",
                "namespace": "_global.search._types"
              }
            }
          }
        },
        {
          "name": "rewrite_time",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "ShardProfile",
        "namespace": "_global.search._types"
      },
      "properties": [
        {
          "name": "aggregations",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "AggregationProfile",
                "namespace": "_global.search._types"
              }
            }
          }
        },
        {
          "name": "id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "searches",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "SearchProfile",
                "namespace": "_global.search._types"
              }
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "SmoothingModelContainer",
        "namespace": "_global.search._types"
      },
      "properties": [
        {
          "name": "laplace",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "LaplaceSmoothingModel",
              "namespace": "_global.search._types"
            }
          }
        },
        {
          "name": "linear_interpolation",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "LinearInterpolationSmoothingModel",
              "namespace": "_global.search._types"
            }
          }
        },
        {
          "name": "stupid_backoff",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "StupidBackoffSmoothingModel",
              "namespace": "_global.search._types"
            }
          }
        }
      ],
      "variants": {
        "kind": "container"
      }
    },
    {
      "kind": "type_alias",
      "name": {
        "name": "Sort",
        "namespace": "_global.search._types"
      },
      "type": {
        "items": [
          {
            "kind": "instance_of",
            "type": {
              "name": "SortCombinations",
              "namespace": "_global.search._types"
            }
          },
          {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "SortCombinations",
                "namespace": "_global.search._types"
              }
            }
          }
        ],
        "kind": "union_of"
      }
    },
    {
      "kind": "type_alias",
      "name": {
        "name": "SortCombinations",
        "namespace": "_global.search._types"
      },
      "type": {
        "items": [
          {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "SortContainer",
              "namespace": "_global.search._types"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "SortOrder",
              "namespace": "_global.search._types"
            }
          }
        ],
        "kind": "union_of"
      }
    },
    {
      "attachedBehaviors": [
        "AdditionalProperties"
      ],
      "behaviors": [
        {
          "generics": [
            {
              "kind": "instance_of",
              "type": {
                "name": "Field",
                "namespace": "_types"
              }
            },
            {
              "items": [
                {
                  "kind": "instance_of",
                  "type": {
                    "name": "FieldSort",
                    "namespace": "_global.search._types"
                  }
                },
                {
                  "kind": "instance_of",
                  "type": {
                    "name": "SortOrder",
                    "namespace": "_global.search._types"
                  }
                }
              ],
              "kind": "union_of"
            }
          ],
          "type": {
            "name": "AdditionalProperties",
            "namespace": "_spec_utils"
          }
        }
      ],
      "kind": "interface",
      "name": {
        "name": "SortContainer",
        "namespace": "_global.search._types"
      },
      "properties": [
        {
          "name": "_score",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ScoreSort",
              "namespace": "_global.search._types"
            }
          }
        },
        {
          "name": "_doc",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ScoreSort",
              "namespace": "_global.search._types"
            }
          }
        },
        {
          "name": "_geo_distance",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "GeoDistanceSort",
              "namespace": "_global.search._types"
            }
          }
        },
        {
          "name": "_script",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ScriptSort",
              "namespace": "_global.search._types"
            }
          }
        }
      ]
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "min"
        },
        {
          "name": "max"
        },
        {
          "name": "sum"
        },
        {
          "name": "avg"
        },
        {
          "name": "median"
        }
      ],
      "name": {
        "name": "SortMode",
        "namespace": "_global.search._types"
      }
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "asc"
        },
        {
          "name": "desc"
        },
        {
          "identifier": "Document",
          "name": "_doc"
        }
      ],
      "name": {
        "name": "SortOrder",
        "namespace": "_global.search._types"
      }
    },
    {
      "kind": "type_alias",
      "name": {
        "name": "SortResults",
        "namespace": "_global.search._types"
      },
      "type": {
        "kind": "array_of",
        "value": {
          "items": [
            {
              "kind": "instance_of",
              "type": {
                "name": "long",
                "namespace": "_types"
              }
            },
            {
              "kind": "instance_of",
              "type": {
                "name": "double",
                "namespace": "_types"
              }
            },
            {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            {
              "kind": "instance_of",
              "type": {
                "name": "null",
                "namespace": "internal"
              }
            }
          ],
          "kind": "union_of"
        }
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "SourceFilter",
        "namespace": "_global.search._types"
      },
      "properties": [
        {
          "name": "excludes",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Fields",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "includes",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Fields",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "exclude",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Fields",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "include",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Fields",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "internal"
        },
        {
          "name": "damerau_levenshtein"
        },
        {
          "name": "levenshtein"
        },
        {
          "name": "jaro_winkler"
        },
        {
          "name": "ngram"
        }
      ],
      "name": {
        "name": "StringDistance",
        "namespace": "_global.search._types"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "StupidBackoffSmoothingModel",
        "namespace": "_global.search._types"
      },
      "properties": [
        {
          "name": "discount",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "generics": [
        {
          "name": "T",
          "namespace": "_global.search._types"
        }
      ],
      "kind": "interface",
      "name": {
        "name": "Suggest",
        "namespace": "_global.search._types"
      },
      "properties": [
        {
          "name": "length",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "offset",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "options",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "generics": [
                {
                  "kind": "instance_of",
                  "type": {
                    "name": "T",
                    "namespace": "_global.search._types"
                  }
                }
              ],
              "kind": "instance_of",
              "type": {
                "name": "SuggestOption",
                "namespace": "_global.search._types"
              }
            }
          }
        },
        {
          "name": "text",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "SuggestContainer",
        "namespace": "_global.search._types"
      },
      "properties": [
        {
          "name": "completion",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "CompletionSuggester",
              "namespace": "_global.search._types"
            }
          }
        },
        {
          "name": "phrase",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "PhraseSuggester",
              "namespace": "_global.search._types"
            }
          }
        },
        {
          "name": "prefix",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "regex",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "term",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "TermSuggester",
              "namespace": "_global.search._types"
            }
          }
        },
        {
          "name": "text",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ],
      "variants": {
        "kind": "container"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "SuggestContextQuery",
        "namespace": "_global.search._types"
      },
      "properties": [
        {
          "name": "boost",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "context",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Context",
              "namespace": "_global.search._types"
            }
          }
        },
        {
          "name": "neighbours",
          "required": false,
          "type": {
            "items": [
              {
                "kind": "array_of",
                "value": {
                  "kind": "instance_of",
                  "type": {
                    "name": "Distance",
                    "namespace": "_types"
                  }
                }
              },
              {
                "kind": "array_of",
                "value": {
                  "kind": "instance_of",
                  "type": {
                    "name": "integer",
                    "namespace": "_types"
                  }
                }
              }
            ],
            "kind": "union_of"
          }
        },
        {
          "name": "precision",
          "required": false,
          "type": {
            "items": [
              {
                "kind": "instance_of",
                "type": {
                  "name": "Distance",
                  "namespace": "_types"
                }
              },
              {
                "kind": "instance_of",
                "type": {
                  "name": "integer",
                  "namespace": "_types"
                }
              }
            ],
            "kind": "union_of"
          }
        },
        {
          "name": "prefix",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "SuggestFuzziness",
        "namespace": "_global.search._types"
      },
      "properties": [
        {
          "name": "fuzziness",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Fuzziness",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "min_length",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "prefix_length",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "transpositions",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "unicode_aware",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "generics": [
        {
          "name": "TDocument",
          "namespace": "_global.search._types"
        }
      ],
      "kind": "type_alias",
      "name": {
        "name": "SuggestOption",
        "namespace": "_global.search._types"
      },
      "type": {
        "items": [
          {
            "generics": [
              {
                "kind": "instance_of",
                "type": {
                  "name": "TDocument",
                  "namespace": "_global.search._types"
                }
              }
            ],
            "kind": "instance_of",
            "type": {
              "name": "CompletionSuggestOption",
              "namespace": "_global.search._types"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "PhraseSuggestOption",
              "namespace": "_global.search._types"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "TermSuggestOption",
              "namespace": "_global.search._types"
            }
          }
        ],
        "kind": "union_of"
      }
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "score"
        },
        {
          "name": "frequency"
        }
      ],
      "name": {
        "name": "SuggestSort",
        "namespace": "_global.search._types"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "SuggesterBase",
        "namespace": "_global.search._types"
      },
      "properties": [
        {
          "name": "field",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "analyzer",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "size",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "TermSuggestOption",
        "namespace": "_global.search._types"
      },
      "properties": [
        {
          "name": "text",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "freq",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "score",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "SuggesterBase",
          "namespace": "_global.search._types"
        }
      },
      "kind": "interface",
      "name": {
        "name": "TermSuggester",
        "namespace": "_global.search._types"
      },
      "properties": [
        {
          "name": "lowercase_terms",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "max_edits",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "max_inspections",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "max_term_freq",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "float",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "min_doc_freq",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "float",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "min_word_length",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "prefix_length",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "shard_size",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "sort",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "SuggestSort",
              "namespace": "_global.search._types"
            }
          }
        },
        {
          "name": "string_distance",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "StringDistance",
              "namespace": "_global.search._types"
            }
          }
        },
        {
          "name": "suggest_mode",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "SuggestMode",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "text",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "TotalHits",
        "namespace": "_global.search._types"
      },
      "properties": [
        {
          "name": "relation",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "TotalHitsRelation",
              "namespace": "_global.search._types"
            }
          }
        },
        {
          "name": "value",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "enum",
      "members": [
        {
          "description": "Accurate",
          "name": "eq"
        },
        {
          "description": "Lower bound, including returned events or sequences",
          "name": "gte"
        }
      ],
      "name": {
        "name": "TotalHitsRelation",
        "namespace": "_global.search._types"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "properties",
        "properties": [
          {
            "description": "Sub-aggregations for the geotile_grid.\n\nSupports the following aggregation types:\n- avg\n- cardinality\n- max\n- min\n- sum",
            "name": "aggs",
            "required": false,
            "type": {
              "key": {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              },
              "kind": "dictionary_of",
              "singleKey": false,
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "AggregationContainer",
                  "namespace": "_types.aggregations"
                }
              }
            }
          },
          {
            "description": "If false, the meta layer’s feature is the bounding box of the tile.\nIf true, the meta layer’s feature is a bounding box resulting from a\ngeo_bounds aggregation. The aggregation runs on <field> values that intersect\nthe <zoom>/<x>/<y> tile with wrap_longitude set to false. The resulting\nbounding box may be larger than the vector tile.",
            "name": "exact_bounds",
            "required": false,
            "serverDefault": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          },
          {
            "description": "Size, in pixels, of a side of the tile. Vector tiles are square with equal sides.",
            "name": "extent",
            "required": false,
            "serverDefault": 4096,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "integer",
                "namespace": "_types"
              }
            }
          },
          {
            "description": "Fields to return in the `hits` layer. Supports wildcards (`*`).\nThis parameter does not support fields with array values. Fields with array\nvalues may return inconsistent results.",
            "name": "fields",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Fields",
                "namespace": "_types"
              }
            }
          },
          {
            "description": "Additional zoom levels available through the aggs layer. For example, if <zoom> is 7\nand grid_precision is 8, you can zoom in up to level 15. Accepts 0-8. If 0, results\ndon’t include the aggs layer.",
            "name": "grid_precision",
            "required": false,
            "serverDefault": 8,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "integer",
                "namespace": "_types"
              }
            }
          },
          {
            "description": "Determines the geometry type for features in the aggs layer. In the aggs layer,\neach feature represents a geotile_grid cell. If 'grid' each feature is a Polygon\nof the cells bounding box. If 'point' each feature is a Point that is the centroid\nof the cell.",
            "name": "grid_type",
            "required": false,
            "serverDefault": "grid",
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "GridType",
                "namespace": "_global.search_mvt._types"
              }
            }
          },
          {
            "description": "Query DSL used to filter documents for the search.",
            "name": "query",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "QueryContainer",
                "namespace": "_types.query_dsl"
              }
            }
          },
          {
            "description": "Defines one or more runtime fields in the search request. These fields take\nprecedence over mapped fields with the same name.",
            "name": "runtime_mappings",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "RuntimeFields",
                "namespace": "_types.mapping"
              }
            }
          },
          {
            "description": "Maximum number of features to return in the hits layer. Accepts 0-10000.\nIf 0, results don’t include the hits layer.",
            "name": "size",
            "required": false,
            "serverDefault": 10000,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "integer",
                "namespace": "_types"
              }
            }
          },
          {
            "description": "Sorts features in the hits layer. By default, the API calculates a bounding\nbox for each feature. It sorts features based on this box’s diagonal length,\nfrom longest to shortest.",
            "name": "sort",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Sort",
                "namespace": "_global.search._types"
              }
            }
          }
        ]
      },
      "description": "Searches a vector tile for geospatial values. Returns results as a binary Mapbox vector tile.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "_global.search_mvt"
      },
      "path": [
        {
          "description": "Comma-separated list of data streams, indices, or aliases to search",
          "name": "index",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Indices",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Field containing geospatial data to return",
          "name": "field",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Zoom level for the vector tile to search",
          "name": "zoom",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ZoomLevel",
              "namespace": "_global.search_mvt._types"
            }
          }
        },
        {
          "description": "X coordinate for the vector tile to search",
          "name": "x",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Coordinate",
              "namespace": "_global.search_mvt._types"
            }
          }
        },
        {
          "description": "Y coordinate for the vector tile to search",
          "name": "y",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Coordinate",
              "namespace": "_global.search_mvt._types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "If false, the meta layer’s feature is the bounding box of the tile.\nIf true, the meta layer’s feature is a bounding box resulting from a\ngeo_bounds aggregation. The aggregation runs on <field> values that intersect\nthe <zoom>/<x>/<y> tile with wrap_longitude set to false. The resulting\nbounding box may be larger than the vector tile.",
          "name": "exact_bounds",
          "required": false,
          "serverDefault": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Size, in pixels, of a side of the tile. Vector tiles are square with equal sides.",
          "name": "extent",
          "required": false,
          "serverDefault": 4096,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Additional zoom levels available through the aggs layer. For example, if <zoom> is 7\nand grid_precision is 8, you can zoom in up to level 15. Accepts 0-8. If 0, results\ndon’t include the aggs layer.",
          "name": "grid_precision",
          "required": false,
          "serverDefault": 8,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Determines the geometry type for features in the aggs layer. In the aggs layer,\neach feature represents a geotile_grid cell. If 'grid' each feature is a Polygon\nof the cells bounding box. If 'point' each feature is a Point that is the centroid\nof the cell.",
          "name": "grid_type",
          "required": false,
          "serverDefault": "grid",
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "GridType",
              "namespace": "_global.search_mvt._types"
            }
          }
        },
        {
          "description": "Maximum number of features to return in the hits layer. Accepts 0-10000.\nIf 0, results don’t include the hits layer.",
          "name": "size",
          "required": false,
          "serverDefault": 10000,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "value",
        "value": {
          "kind": "instance_of",
          "type": {
            "name": "MapboxVectorTiles",
            "namespace": "_types"
          }
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "_global.search_mvt"
      }
    },
    {
      "kind": "type_alias",
      "name": {
        "name": "Coordinate",
        "namespace": "_global.search_mvt._types"
      },
      "type": {
        "kind": "instance_of",
        "type": {
          "name": "integer",
          "namespace": "_types"
        }
      }
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "grid"
        },
        {
          "name": "point"
        }
      ],
      "name": {
        "name": "GridType",
        "namespace": "_global.search_mvt._types"
      }
    },
    {
      "kind": "type_alias",
      "name": {
        "name": "ZoomLevel",
        "namespace": "_global.search_mvt._types"
      },
      "type": {
        "kind": "instance_of",
        "type": {
          "name": "integer",
          "namespace": "_types"
        }
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Returns information about the indices and shards that a search request would be executed against.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "_global.search_shards"
      },
      "path": [
        {
          "description": "A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices",
          "name": "index",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Indices",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)",
          "name": "allow_no_indices",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
          "name": "expand_wildcards",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ExpandWildcards",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed)",
          "name": "ignore_unavailable",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Return local information, do not retrieve the state from master node (default: false)",
          "name": "local",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Specify the node or shard the operation should be performed on (default: random)",
          "name": "preference",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Specific routing value",
          "name": "routing",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Routing",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "nodes",
            "required": true,
            "type": {
              "key": {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              },
              "kind": "dictionary_of",
              "singleKey": false,
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "NodeAttributes",
                  "namespace": "_types"
                }
              }
            }
          },
          {
            "name": "shards",
            "required": true,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "array_of",
                "value": {
                  "kind": "instance_of",
                  "type": {
                    "name": "NodeShard",
                    "namespace": "_types"
                  }
                }
              }
            }
          },
          {
            "name": "indices",
            "required": true,
            "type": {
              "key": {
                "kind": "instance_of",
                "type": {
                  "name": "IndexName",
                  "namespace": "_types"
                }
              },
              "kind": "dictionary_of",
              "singleKey": false,
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "ShardStoreIndex",
                  "namespace": "_global.search_shards"
                }
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "_global.search_shards"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "ShardStoreIndex",
        "namespace": "_global.search_shards"
      },
      "properties": [
        {
          "name": "aliases",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "Name",
                "namespace": "_types"
              }
            }
          }
        },
        {
          "name": "filter",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "QueryContainer",
              "namespace": "_types.query_dsl"
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "explain",
            "required": false,
            "serverDefault": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          },
          {
            "description": "ID of the search template to use. If no source is specified,\nthis parameter is required.",
            "name": "id",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Id",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "params",
            "required": false,
            "type": {
              "key": {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              },
              "kind": "dictionary_of",
              "singleKey": false,
              "value": {
                "kind": "user_defined_value"
              }
            }
          },
          {
            "name": "profile",
            "required": false,
            "serverDefault": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          },
          {
            "description": "An inline search template. Supports the same parameters as the search API's\nrequest body. Also supports Mustache variables. If no id is specified, this\nparameter is required.",
            "name": "source",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        ]
      },
      "description": "Allows to use the Mustache language to pre-render a search definition.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "_global.search_template"
      },
      "path": [
        {
          "description": "Comma-separated list of data streams, indices,\nand aliases to search. Supports wildcards (*).",
          "name": "index",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Indices",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)",
          "name": "allow_no_indices",
          "required": false,
          "serverDefault": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Indicates whether network round-trips should be minimized as part of cross-cluster search requests execution",
          "name": "ccs_minimize_roundtrips",
          "required": false,
          "serverDefault": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
          "name": "expand_wildcards",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ExpandWildcards",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Specify whether to return detailed information about score computation as part of a hit",
          "name": "explain",
          "required": false,
          "serverDefault": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Whether specified concrete, expanded or aliased indices should be ignored when throttled",
          "name": "ignore_throttled",
          "required": false,
          "serverDefault": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed)",
          "name": "ignore_unavailable",
          "required": false,
          "serverDefault": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Specify the node or shard the operation should be performed on (default: random)",
          "name": "preference",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Specify whether to profile the query execution",
          "name": "profile",
          "required": false,
          "serverDefault": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Custom value used to route operations to a specific shard.",
          "name": "routing",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Routing",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Specifies how long a consistent view of the index\nshould be maintained for scrolled search.",
          "name": "scroll",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "The type of the search operation.",
          "name": "search_type",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "SearchType",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "If true, hits.total are rendered as an integer in the response.",
          "name": "rest_total_hits_as_int",
          "required": false,
          "serverDefault": false,
          "since": "7.0.0",
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Specify whether aggregation and suggester names should be prefixed by their respective types in the response",
          "name": "typed_keys",
          "required": false,
          "serverDefault": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "_shards",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "ShardStatistics",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "timed_out",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "took",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "integer",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "hits",
            "required": true,
            "type": {
              "generics": [
                {
                  "kind": "instance_of",
                  "type": {
                    "name": "TDocument",
                    "namespace": "_global.search_template"
                  }
                }
              ],
              "kind": "instance_of",
              "type": {
                "name": "HitsMetadata",
                "namespace": "_global.search._types"
              }
            }
          }
        ]
      },
      "generics": [
        {
          "name": "TDocument",
          "namespace": "_global.search_template"
        }
      ],
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "_global.search_template"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "properties",
        "properties": [
          {
            "description": "The string to match at the start of indexed terms. If not provided, all terms in the field are considered.",
            "name": "field",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Field",
                "namespace": "_types"
              }
            }
          },
          {
            "description": "How many matching terms to return.",
            "name": "size",
            "required": false,
            "serverDefault": 10,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "integer",
                "namespace": "_types"
              }
            }
          },
          {
            "description": "The maximum length of time to spend collecting results. Defaults to \"1s\" (one second). If the timeout is exceeded the complete flag set to false in the response and the results may be partial or empty.",
            "name": "timeout",
            "required": false,
            "serverDefault": "1s",
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Time",
                "namespace": "_types"
              }
            }
          },
          {
            "description": "When true the provided search string is matched against index terms without case sensitivity.",
            "name": "case_insensitive",
            "required": false,
            "serverDefault": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          },
          {
            "description": "Allows to filter an index shard if the provided query rewrites to match_none.",
            "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl.html",
            "name": "index_filter",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "QueryContainer",
                "namespace": "_types.query_dsl"
              }
            }
          },
          {
            "description": "The string after which terms in the index should be returned. Allows for a form of pagination if the last result from one request is passed as the search_after parameter for a subsequent request.",
            "name": "string",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "search_after",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        ]
      },
      "description": "The terms enum API  can be used to discover terms in the index that begin with the provided string. It is designed for low-latency look-ups used in auto-complete scenarios.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "_global.terms_enum"
      },
      "path": [
        {
          "description": "Comma-separated list of data streams, indices, and index aliases to search. Wildcard (*) expressions are supported.",
          "name": "index",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndexName",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": []
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "_shards",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "ShardStatistics",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "terms",
            "required": true,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              }
            }
          },
          {
            "name": "complete",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "_global.terms_enum"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "FieldStatistics",
        "namespace": "_global.termvectors"
      },
      "properties": [
        {
          "name": "doc_count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "sum_doc_freq",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "sum_ttf",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "Filter",
        "namespace": "_global.termvectors"
      },
      "properties": [
        {
          "name": "max_doc_freq",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "max_num_terms",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "max_term_freq",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "max_word_length",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "min_doc_freq",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "min_term_freq",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "min_word_length",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "doc",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "TDocument",
                "namespace": "_global.termvectors"
              }
            }
          },
          {
            "name": "filter",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Filter",
                "namespace": "_global.termvectors"
              }
            }
          },
          {
            "name": "per_field_analyzer",
            "required": false,
            "type": {
              "key": {
                "kind": "instance_of",
                "type": {
                  "name": "Field",
                  "namespace": "_types"
                }
              },
              "kind": "dictionary_of",
              "singleKey": false,
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              }
            }
          }
        ]
      },
      "description": "Returns information and statistics about terms in the fields of a particular document.",
      "generics": [
        {
          "name": "TDocument",
          "namespace": "_global.termvectors"
        }
      ],
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "_global.termvectors"
      },
      "path": [
        {
          "description": "The index in which the document resides.",
          "name": "index",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndexName",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "The id of the document, when not specified a doc param should be supplied.",
          "name": "id",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "A comma-separated list of fields to return.",
          "name": "fields",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Fields",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Specifies if document count, sum of document frequencies and sum of total term frequencies should be returned.",
          "name": "field_statistics",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Specifies if term offsets should be returned.",
          "name": "offsets",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Specifies if term payloads should be returned.",
          "name": "payloads",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Specifies if term positions should be returned.",
          "name": "positions",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Specify the node or shard the operation should be performed on (default: random).",
          "name": "preference",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Specifies if request is real-time as opposed to near-real-time (default: true).",
          "name": "realtime",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Specific routing value.",
          "name": "routing",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Routing",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Specifies if total term frequency and document frequency should be returned.",
          "name": "term_statistics",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Explicit version number for concurrency control",
          "name": "version",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "VersionNumber",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Specific version type",
          "name": "version_type",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "VersionType",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "found",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "_id",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Id",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "_index",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "IndexName",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "term_vectors",
            "required": false,
            "type": {
              "key": {
                "kind": "instance_of",
                "type": {
                  "name": "Field",
                  "namespace": "_types"
                }
              },
              "kind": "dictionary_of",
              "singleKey": false,
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "TermVector",
                  "namespace": "_global.termvectors"
                }
              }
            }
          },
          {
            "name": "took",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "long",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "_type",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Type",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "_version",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "VersionNumber",
                "namespace": "_types"
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "_global.termvectors"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "Term",
        "namespace": "_global.termvectors"
      },
      "properties": [
        {
          "name": "doc_freq",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "score",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "term_freq",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "tokens",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "Token",
                "namespace": "_global.termvectors"
              }
            }
          }
        },
        {
          "name": "ttf",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "TermVector",
        "namespace": "_global.termvectors"
      },
      "properties": [
        {
          "name": "field_statistics",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "FieldStatistics",
              "namespace": "_global.termvectors"
            }
          }
        },
        {
          "name": "terms",
          "required": true,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "Term",
                "namespace": "_global.termvectors"
              }
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "Token",
        "namespace": "_global.termvectors"
      },
      "properties": [
        {
          "name": "end_offset",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "payload",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "position",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "start_offset",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "properties",
        "properties": [
          {
            "description": "Set to false to disable setting 'result' in the response\nto 'noop' if no change to the document occurred.",
            "name": "detect_noop",
            "required": false,
            "serverDefault": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          },
          {
            "description": "A partial update to an existing document.",
            "name": "doc",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "TPartialDocument",
                "namespace": "_global.update"
              }
            }
          },
          {
            "description": "Set to true to use the contents of 'doc' as the value of 'upsert'",
            "name": "doc_as_upsert",
            "required": false,
            "serverDefault": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          },
          {
            "description": "Script to execute to update the document.",
            "name": "script",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Script",
                "namespace": "_types"
              }
            }
          },
          {
            "description": "Set to true to execute the script whether or not the document exists.",
            "name": "scripted_upsert",
            "required": false,
            "serverDefault": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          },
          {
            "description": "Set to false to disable source retrieval. You can also specify a comma-separated\nlist of the fields you want to retrieve.",
            "name": "_source",
            "required": false,
            "serverDefault": "true",
            "type": {
              "items": [
                {
                  "kind": "instance_of",
                  "type": {
                    "name": "boolean",
                    "namespace": "internal"
                  }
                },
                {
                  "kind": "instance_of",
                  "type": {
                    "name": "SourceFilter",
                    "namespace": "_global.search._types"
                  }
                }
              ],
              "kind": "union_of"
            }
          },
          {
            "description": "If the document does not already exist, the contents of 'upsert' are inserted as a\nnew document. If the document exists, the 'script' is executed.",
            "name": "upsert",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "TDocument",
                "namespace": "_global.update"
              }
            }
          }
        ]
      },
      "description": "Updates a document with a script or partial document.",
      "generics": [
        {
          "name": "TDocument",
          "namespace": "_global.update"
        },
        {
          "name": "TPartialDocument",
          "namespace": "_global.update"
        }
      ],
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "_global.update"
      },
      "path": [
        {
          "description": "Document ID",
          "name": "id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "The name of the index",
          "name": "index",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndexName",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "The type of the document",
          "name": "type",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Type",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "Only perform the operation if the document has this primary term.",
          "name": "if_primary_term",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Only perform the operation if the document has this sequence number.",
          "name": "if_seq_no",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "SequenceNumber",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "The script language.",
          "name": "lang",
          "required": false,
          "serverDefault": "painless",
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "If 'true', Elasticsearch refreshes the affected shards to make this operation\nvisible to search, if 'wait_for' then wait for a refresh to make this operation\nvisible to search, if 'false' do nothing with refreshes.",
          "name": "refresh",
          "required": false,
          "serverDefault": "false",
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Refresh",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "If true, the destination must be an index alias.",
          "name": "require_alias",
          "required": false,
          "serverDefault": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Specify how many times should the operation be retried when a conflict occurs.",
          "name": "retry_on_conflict",
          "required": false,
          "serverDefault": 0,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Custom value used to route operations to a specific shard.",
          "name": "routing",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Routing",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Period to wait for dynamic mapping updates and active shards.\nThis guarantees Elasticsearch waits for at least the timeout before failing.\nThe actual wait time could be longer, particularly when multiple waits occur.",
          "name": "timeout",
          "required": false,
          "serverDefault": "1m",
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "The number of shard copies that must be active before proceeding with the operations.\nSet to 'all' or any positive integer up to the total number of shards in the index\n(number_of_replicas+1). Defaults to 1 meaning the primary shard.",
          "name": "wait_for_active_shards",
          "required": false,
          "serverDefault": "1",
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "WaitForActiveShards",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Set to false to disable source retrieval. You can also specify a comma-separated\nlist of the fields you want to retrieve.",
          "name": "_source",
          "required": false,
          "serverDefault": "true",
          "type": {
            "items": [
              {
                "kind": "instance_of",
                "type": {
                  "name": "boolean",
                  "namespace": "internal"
                }
              },
              {
                "kind": "instance_of",
                "type": {
                  "name": "Fields",
                  "namespace": "_types"
                }
              }
            ],
            "kind": "union_of"
          }
        },
        {
          "description": "Specify the source fields you want to exclude.",
          "name": "_source_excludes",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Fields",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Specify the source fields you want to retrieve.",
          "name": "_source_includes",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Fields",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "get",
            "required": false,
            "type": {
              "generics": [
                {
                  "kind": "instance_of",
                  "type": {
                    "name": "TDocument",
                    "namespace": "_global.update"
                  }
                }
              ],
              "kind": "instance_of",
              "type": {
                "name": "InlineGet",
                "namespace": "_types"
              }
            }
          }
        ]
      },
      "generics": [
        {
          "name": "TDocument",
          "namespace": "_global.update"
        }
      ],
      "inherits": {
        "type": {
          "name": "WriteResponseBase",
          "namespace": "_types"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "_global.update"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "max_docs",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "long",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "query",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "QueryContainer",
                "namespace": "_types.query_dsl"
              }
            }
          },
          {
            "name": "script",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Script",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "slice",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "SlicedScroll",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "conflicts",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Conflicts",
                "namespace": "_types"
              }
            }
          }
        ]
      },
      "description": "Performs an update on every document in the index without changing the source,\nfor example to pick up a mapping change.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "_global.update_by_query"
      },
      "path": [
        {
          "description": "A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices",
          "name": "index",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Indices",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)",
          "name": "allow_no_indices",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "The analyzer to use for the query string",
          "name": "analyzer",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Specify whether wildcard and prefix queries should be analyzed (default: false)",
          "name": "analyze_wildcard",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "What to do when the update by query hits version conflicts?",
          "name": "conflicts",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Conflicts",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "The default operator for query string query (AND or OR)",
          "name": "default_operator",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DefaultOperator",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "The field to use as default where no field prefix is given in the query string",
          "name": "df",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
          "name": "expand_wildcards",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ExpandWildcards",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Starting offset (default: 0)",
          "name": "from",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed)",
          "name": "ignore_unavailable",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Specify whether format-based query failures (such as providing text to a numeric field) should be ignored",
          "name": "lenient",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Ingest pipeline to set on index requests made by this action. (default: none)",
          "name": "pipeline",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Specify the node or shard the operation should be performed on (default: random)",
          "name": "preference",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Should the affected indexes be refreshed?",
          "name": "refresh",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Specify if request cache should be used for this request or not, defaults to index level setting",
          "name": "request_cache",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "The throttle to set on this request in sub-requests per second. -1 means no throttle.",
          "name": "requests_per_second",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "A comma-separated list of specific routing values",
          "name": "routing",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Routing",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Specify how long a consistent view of the index should be maintained for scrolled search",
          "name": "scroll",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Size on the scroll request powering the update by query",
          "name": "scroll_size",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Explicit timeout for each search request. Defaults to no timeout.",
          "name": "search_timeout",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Search operation type",
          "name": "search_type",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "SearchType",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "size",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "The number of slices this task should be divided into. Defaults to 1, meaning the task isn't sliced into subtasks. Can be set to `auto`.",
          "name": "slices",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "A comma-separated list of <field>:<direction> pairs",
          "name": "sort",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        },
        {
          "description": "True or false to return the _source field or not, or a list of fields to return",
          "name": "_source",
          "required": false,
          "type": {
            "items": [
              {
                "kind": "instance_of",
                "type": {
                  "name": "boolean",
                  "namespace": "internal"
                }
              },
              {
                "kind": "instance_of",
                "type": {
                  "name": "Fields",
                  "namespace": "_types"
                }
              }
            ],
            "kind": "union_of"
          }
        },
        {
          "description": "A list of fields to exclude from the returned _source field",
          "name": "_source_excludes",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Fields",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "A list of fields to extract and return from the _source field",
          "name": "_source_includes",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Fields",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Specific 'tag' of the request for logging and statistical purposes",
          "name": "stats",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        },
        {
          "description": "The maximum number of documents to collect for each shard, upon reaching which the query execution will terminate early.",
          "name": "terminate_after",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Time each individual bulk request should wait for shards that are unavailable.",
          "name": "timeout",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Specify whether to return document version as part of a hit",
          "name": "version",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Should the document increment the version number (internal) on hit or not (reindex)",
          "name": "version_type",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Sets the number of shard copies that must be active before proceeding with the update by query operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)",
          "name": "wait_for_active_shards",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "WaitForActiveShards",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Should the request should block until the update by query operation is complete.",
          "name": "wait_for_completion",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "batches",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "long",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "failures",
            "required": false,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "BulkIndexByScrollFailure",
                  "namespace": "_types"
                }
              }
            }
          },
          {
            "name": "noops",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "long",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "deleted",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "long",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "requests_per_second",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "float",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "retries",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Retries",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "task",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "TaskId",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "timed_out",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "took",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "long",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "total",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "long",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "updated",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "long",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "version_conflicts",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "long",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "throttled_millis",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "ulong",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "throttled_until_millis",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "ulong",
                "namespace": "_types"
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "_global.update_by_query"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Changes the number of requests per second for a particular Update By Query operation.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "_global.update_by_query_rethrottle"
      },
      "path": [
        {
          "description": "The task id to rethrottle",
          "name": "task_id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "The throttle to set on this request in floating sub-requests per second. -1 means set no throttle.",
          "name": "requests_per_second",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "nodes",
            "required": true,
            "type": {
              "key": {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              },
              "kind": "dictionary_of",
              "singleKey": false,
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "UpdateByQueryRethrottleNode",
                  "namespace": "_global.update_by_query_rethrottle"
                }
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "_global.update_by_query_rethrottle"
      }
    },
    {
      "inherits": {
        "type": {
          "name": "BaseNode",
          "namespace": "_spec_utils"
        }
      },
      "kind": "interface",
      "name": {
        "name": "UpdateByQueryRethrottleNode",
        "namespace": "_global.update_by_query_rethrottle"
      },
      "properties": [
        {
          "name": "tasks",
          "required": true,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "TaskId",
                "namespace": "_types"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "Info",
                "namespace": "tasks._types"
              }
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "BaseNode",
        "namespace": "_spec_utils"
      },
      "properties": [
        {
          "name": "attributes",
          "required": true,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        },
        {
          "name": "host",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Host",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "ip",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Ip",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "name",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "roles",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "NodeRoles",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "transport_address",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "TransportAddress",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "AcknowledgedResponseBase",
        "namespace": "_types"
      },
      "properties": [
        {
          "description": "For a successful response, this value is always true. On failure, an exception is returned instead.",
          "name": "acknowledged",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "description": "The aggregation name as returned from the server. Depending whether typed_keys is specified this could come back\nin the form of `name#type` instead of simply `name`",
      "kind": "type_alias",
      "name": {
        "name": "AggregateName",
        "namespace": "_types"
      },
      "type": {
        "kind": "instance_of",
        "type": {
          "name": "string",
          "namespace": "internal"
        }
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "BulkIndexByScrollFailure",
        "namespace": "_types"
      },
      "properties": [
        {
          "name": "cause",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "MainError",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "index",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndexName",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "status",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "BulkStats",
        "namespace": "_types"
      },
      "properties": [
        {
          "name": "total_operations",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "total_time",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "total_time_in_millis",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "total_size",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ByteSize",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "total_size_in_bytes",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "avg_time",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "avg_time_in_millis",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "avg_size",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ByteSize",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "avg_size_in_bytes",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/common-options.html#byte-units",
      "kind": "type_alias",
      "name": {
        "name": "ByteSize",
        "namespace": "_types"
      },
      "type": {
        "items": [
          {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        ],
        "kind": "union_of"
      }
    },
    {
      "kind": "enum",
      "members": [
        {
          "identifier": "bytes",
          "name": "b"
        },
        {
          "identifier": "kilo_bytes",
          "name": "kb"
        },
        {
          "identifier": "mega_bytes",
          "name": "mb"
        },
        {
          "identifier": "giga_bytes",
          "name": "gb"
        },
        {
          "identifier": "tera_bytes",
          "name": "tb"
        },
        {
          "identifier": "peta_bytes",
          "name": "pb"
        }
      ],
      "name": {
        "name": "Bytes",
        "namespace": "_types"
      }
    },
    {
      "kind": "type_alias",
      "name": {
        "name": "CategoryId",
        "namespace": "_types"
      },
      "type": {
        "kind": "instance_of",
        "type": {
          "name": "string",
          "namespace": "internal"
        }
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "ChainTransform",
        "namespace": "_types"
      },
      "properties": [
        {
          "name": "transforms",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "TransformContainer",
                "namespace": "_types"
              }
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "ClusterStatistics",
        "namespace": "_types"
      },
      "properties": [
        {
          "name": "skipped",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "successful",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "total",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "CompletionStats",
        "namespace": "_types"
      },
      "properties": [
        {
          "name": "size_in_bytes",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "size",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ByteSize",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "fields",
          "required": false,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "Field",
                "namespace": "_types"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "FieldSizeUsage",
                "namespace": "_types"
              }
            }
          }
        }
      ]
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "abort"
        },
        {
          "name": "proceed"
        }
      ],
      "name": {
        "name": "Conflicts",
        "namespace": "_types"
      }
    },
    {
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-create-data-stream.html#indices-create-data-stream-api-path-params",
      "kind": "type_alias",
      "name": {
        "name": "DataStreamName",
        "namespace": "_types"
      },
      "type": {
        "kind": "instance_of",
        "type": {
          "name": "string",
          "namespace": "internal"
        }
      }
    },
    {
      "kind": "type_alias",
      "name": {
        "name": "DataStreamNames",
        "namespace": "_types"
      },
      "type": {
        "items": [
          {
            "kind": "instance_of",
            "type": {
              "name": "DataStreamName",
              "namespace": "_types"
            }
          },
          {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "DataStreamName",
                "namespace": "_types"
              }
            }
          }
        ],
        "kind": "union_of"
      }
    },
    {
      "description": "A reference to a date field with formatting instructions on how to return the date",
      "kind": "interface",
      "name": {
        "name": "DateField",
        "namespace": "_types"
      },
      "properties": [
        {
          "name": "field",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "format",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "include_unmapped",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/7.x/mapping-date-format.html",
      "kind": "type_alias",
      "name": {
        "name": "DateFormat",
        "namespace": "_types"
      },
      "type": {
        "kind": "instance_of",
        "type": {
          "name": "string",
          "namespace": "internal"
        }
      }
    },
    {
      "kind": "type_alias",
      "name": {
        "name": "DateMath",
        "namespace": "_types"
      },
      "type": {
        "kind": "instance_of",
        "type": {
          "name": "string",
          "namespace": "internal"
        }
      }
    },
    {
      "kind": "type_alias",
      "name": {
        "name": "DateMathTime",
        "namespace": "_types"
      },
      "type": {
        "kind": "instance_of",
        "type": {
          "name": "string",
          "namespace": "internal"
        }
      }
    },
    {
      "kind": "type_alias",
      "name": {
        "name": "DateString",
        "namespace": "_types"
      },
      "type": {
        "kind": "instance_of",
        "type": {
          "name": "string",
          "namespace": "internal"
        }
      }
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "AND"
        },
        {
          "name": "OR"
        }
      ],
      "name": {
        "name": "DefaultOperator",
        "namespace": "_types"
      }
    },
    {
      "generics": [
        {
          "name": "TKey",
          "namespace": "_types"
        },
        {
          "name": "TValue",
          "namespace": "_types"
        }
      ],
      "kind": "interface",
      "name": {
        "name": "DictionaryResponseBase",
        "namespace": "_types"
      },
      "properties": []
    },
    {
      "kind": "type_alias",
      "name": {
        "name": "Distance",
        "namespace": "_types"
      },
      "type": {
        "kind": "instance_of",
        "type": {
          "name": "string",
          "namespace": "internal"
        }
      }
    },
    {
      "kind": "enum",
      "members": [
        {
          "identifier": "inches",
          "name": "in"
        },
        {
          "identifier": "feet",
          "name": "ft"
        },
        {
          "identifier": "yards",
          "name": "yd"
        },
        {
          "identifier": "miles",
          "name": "mi"
        },
        {
          "identifier": "nautic_miles",
          "name": "nmi"
        },
        {
          "identifier": "kilometers",
          "name": "km"
        },
        {
          "identifier": "meters",
          "name": "m"
        },
        {
          "identifier": "centimeters",
          "name": "cm"
        },
        {
          "identifier": "millimeters",
          "name": "mm"
        }
      ],
      "name": {
        "name": "DistanceUnit",
        "namespace": "_types"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "DocStats",
        "namespace": "_types"
      },
      "properties": [
        {
          "name": "count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "deleted",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "ElasticsearchVersionInfo",
        "namespace": "_types"
      },
      "properties": [
        {
          "name": "build_date",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DateString",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "build_flavor",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "build_hash",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "build_snapshot",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "build_type",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "lucene_version",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "VersionString",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "minimum_index_compatibility_version",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "VersionString",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "minimum_wire_compatibility_version",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "VersionString",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "number",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "description": "For empty Class assignments",
      "kind": "interface",
      "name": {
        "name": "EmptyObject",
        "namespace": "_types"
      },
      "properties": []
    },
    {
      "kind": "type_alias",
      "name": {
        "name": "EpochMillis",
        "namespace": "_types"
      },
      "type": {
        "items": [
          {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        ],
        "kind": "union_of"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "ErrorCause",
        "namespace": "_types"
      },
      "properties": [
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "reason",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "caused_by",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ErrorCause",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "shard",
          "required": false,
          "type": {
            "items": [
              {
                "kind": "instance_of",
                "type": {
                  "name": "integer",
                  "namespace": "_types"
                }
              },
              {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              }
            ],
            "kind": "union_of"
          }
        },
        {
          "name": "stack_trace",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "root_cause",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "ErrorCause",
                "namespace": "_types"
              }
            }
          }
        },
        {
          "name": "bytes_limit",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "bytes_wanted",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "column",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "col",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "failed_shards",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "ShardFailure",
                "namespace": "_types"
              }
            }
          }
        },
        {
          "name": "grouped",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "index",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndexName",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "index_uuid",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Uuid",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "language",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "licensed_expired_feature",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "line",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "max_buckets",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "phase",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "property_name",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "processor_type",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "resource.id"
          ],
          "description": "resource id",
          "name": "resource_id",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Ids",
              "namespace": "_types"
            }
          }
        },
        {
          "aliases": [
            "resource.type"
          ],
          "description": "resource type",
          "name": "resource_type",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "script",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "script_stack",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        },
        {
          "name": "header",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "HttpHeaders",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "lang",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "position",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "PainlessExecutionPosition",
              "namespace": "_global.scripts_painless_execute"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "ErrorResponseBase",
        "namespace": "_types"
      },
      "properties": [
        {
          "name": "error",
          "required": true,
          "type": {
            "items": [
              {
                "kind": "instance_of",
                "type": {
                  "name": "MainError",
                  "namespace": "_types"
                }
              },
              {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              }
            ],
            "kind": "union_of"
          }
        },
        {
          "name": "status",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "enum",
      "members": [
        {
          "description": "Match any data stream or index, including hidden ones.",
          "name": "all"
        },
        {
          "description": "Match open, non-hidden indices. Also matches any non-hidden data stream.",
          "name": "open"
        },
        {
          "description": "Match closed, non-hidden indices. Also matches any non-hidden data stream. Data streams cannot be closed.",
          "name": "closed"
        },
        {
          "description": "Match hidden data streams and hidden indices. Must be combined with open, closed, or both.",
          "name": "hidden"
        },
        {
          "description": "Wildcard expressions are not accepted.",
          "name": "none"
        }
      ],
      "name": {
        "name": "ExpandWildcardOptions",
        "namespace": "_types"
      }
    },
    {
      "kind": "type_alias",
      "name": {
        "name": "ExpandWildcards",
        "namespace": "_types"
      },
      "type": {
        "items": [
          {
            "kind": "instance_of",
            "type": {
              "name": "ExpandWildcardOptions",
              "namespace": "_types"
            }
          },
          {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "ExpandWildcardOptions",
                "namespace": "_types"
              }
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        ],
        "kind": "union_of"
      }
    },
    {
      "description": "Path to field or array of paths. Some API's support wildcards in the path to select multiple fields.",
      "kind": "type_alias",
      "name": {
        "name": "Field",
        "namespace": "_types"
      },
      "type": {
        "kind": "instance_of",
        "type": {
          "name": "string",
          "namespace": "internal"
        }
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "FieldMemoryUsage",
        "namespace": "_types"
      },
      "properties": [
        {
          "name": "memory_size",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ByteSize",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "memory_size_in_bytes",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "FieldSizeUsage",
        "namespace": "_types"
      },
      "properties": [
        {
          "name": "size",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ByteSize",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "size_in_bytes",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "FielddataStats",
        "namespace": "_types"
      },
      "properties": [
        {
          "name": "evictions",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "memory_size",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ByteSize",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "memory_size_in_bytes",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "fields",
          "required": false,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "Field",
                "namespace": "_types"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "FieldMemoryUsage",
                "namespace": "_types"
              }
            }
          }
        }
      ]
    },
    {
      "kind": "type_alias",
      "name": {
        "name": "Fields",
        "namespace": "_types"
      },
      "type": {
        "items": [
          {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          },
          {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "Field",
                "namespace": "_types"
              }
            }
          }
        ],
        "kind": "union_of"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "FlushStats",
        "namespace": "_types"
      },
      "properties": [
        {
          "name": "periodic",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "total",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "total_time",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "total_time_in_millis",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "type_alias",
      "name": {
        "name": "Fuzziness",
        "namespace": "_types"
      },
      "type": {
        "items": [
          {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        ],
        "kind": "union_of"
      }
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "arc"
        },
        {
          "name": "plane"
        }
      ],
      "name": {
        "name": "GeoDistanceType",
        "namespace": "_types"
      }
    },
    {
      "kind": "type_alias",
      "name": {
        "name": "GeoHashPrecision",
        "namespace": "_types"
      },
      "type": {
        "kind": "instance_of",
        "type": {
          "name": "number",
          "namespace": "internal"
        }
      }
    },
    {
      "description": "A GeoJson shape, that can also use Elasticsearch's `envelope` extension.",
      "kind": "type_alias",
      "name": {
        "name": "GeoShape",
        "namespace": "_types"
      },
      "type": {
        "kind": "user_defined_value"
      }
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "intersects"
        },
        {
          "name": "disjoint"
        },
        {
          "name": "within"
        },
        {
          "name": "contains"
        }
      ],
      "name": {
        "name": "GeoShapeRelation",
        "namespace": "_types"
      }
    },
    {
      "kind": "type_alias",
      "name": {
        "name": "GeoTilePrecision",
        "namespace": "_types"
      },
      "type": {
        "kind": "instance_of",
        "type": {
          "name": "number",
          "namespace": "internal"
        }
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "GetStats",
        "namespace": "_types"
      },
      "properties": [
        {
          "name": "current",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "exists_time",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "exists_time_in_millis",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "exists_total",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "missing_time",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "missing_time_in_millis",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "missing_total",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "time",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "time_in_millis",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "total",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "nodes"
        },
        {
          "name": "parents"
        },
        {
          "name": "none"
        }
      ],
      "name": {
        "name": "GroupBy",
        "namespace": "_types"
      }
    },
    {
      "kind": "enum",
      "members": [
        {
          "description": "All shards are assigned.",
          "name": "green"
        },
        {
          "description": "All primary shards are assigned, but one or more replica shards are unassigned. If a node in the cluster fails, some data could be unavailable until that node is repaired.",
          "name": "yellow"
        },
        {
          "description": "One or more primary shards are unassigned, so some data is unavailable. This can occur briefly during cluster startup as primary shards are assigned.",
          "name": "red"
        }
      ],
      "name": {
        "name": "Health",
        "namespace": "_types"
      }
    },
    {
      "kind": "type_alias",
      "name": {
        "name": "Host",
        "namespace": "_types"
      },
      "type": {
        "kind": "instance_of",
        "type": {
          "name": "string",
          "namespace": "internal"
        }
      }
    },
    {
      "kind": "type_alias",
      "name": {
        "name": "HttpHeaders",
        "namespace": "_types"
      },
      "type": {
        "key": {
          "kind": "instance_of",
          "type": {
            "name": "string",
            "namespace": "internal"
          }
        },
        "kind": "dictionary_of",
        "singleKey": false,
        "value": {
          "items": [
            {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              }
            }
          ],
          "kind": "union_of"
        }
      }
    },
    {
      "kind": "type_alias",
      "name": {
        "name": "Id",
        "namespace": "_types"
      },
      "type": {
        "kind": "instance_of",
        "type": {
          "name": "string",
          "namespace": "internal"
        }
      }
    },
    {
      "kind": "type_alias",
      "name": {
        "name": "Ids",
        "namespace": "_types"
      },
      "type": {
        "items": [
          {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          },
          {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "Id",
                "namespace": "_types"
              }
            }
          }
        ],
        "kind": "union_of"
      }
    },
    {
      "kind": "type_alias",
      "name": {
        "name": "IndexAlias",
        "namespace": "_types"
      },
      "type": {
        "kind": "instance_of",
        "type": {
          "name": "string",
          "namespace": "internal"
        }
      }
    },
    {
      "kind": "type_alias",
      "name": {
        "name": "IndexName",
        "namespace": "_types"
      },
      "type": {
        "kind": "instance_of",
        "type": {
          "name": "string",
          "namespace": "internal"
        }
      }
    },
    {
      "kind": "type_alias",
      "name": {
        "name": "IndexPattern",
        "namespace": "_types"
      },
      "type": {
        "kind": "instance_of",
        "type": {
          "name": "string",
          "namespace": "internal"
        }
      }
    },
    {
      "kind": "type_alias",
      "name": {
        "name": "IndexPatterns",
        "namespace": "_types"
      },
      "type": {
        "kind": "array_of",
        "value": {
          "kind": "instance_of",
          "type": {
            "name": "IndexPattern",
            "namespace": "_types"
          }
        }
      }
    },
    {
      "inherits": {
        "type": {
          "name": "ScriptBase",
          "namespace": "_types"
        }
      },
      "kind": "interface",
      "name": {
        "name": "IndexedScript",
        "namespace": "_types"
      },
      "properties": [
        {
          "name": "id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "IndexingStats",
        "namespace": "_types"
      },
      "properties": [
        {
          "name": "index_current",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "delete_current",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "delete_time",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "delete_time_in_millis",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "delete_total",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "is_throttled",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "noop_update_total",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "throttle_time",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "throttle_time_in_millis",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "index_time",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "index_time_in_millis",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "index_total",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "index_failed",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "types",
          "required": false,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "IndexingStats",
                "namespace": "_types"
              }
            }
          }
        }
      ]
    },
    {
      "kind": "type_alias",
      "name": {
        "name": "Indices",
        "namespace": "_types"
      },
      "type": {
        "items": [
          {
            "kind": "instance_of",
            "type": {
              "name": "IndexName",
              "namespace": "_types"
            }
          },
          {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "IndexName",
                "namespace": "_types"
              }
            }
          }
        ],
        "kind": "union_of"
      }
    },
    {
      "inherits": {
        "type": {
          "name": "AcknowledgedResponseBase",
          "namespace": "_types"
        }
      },
      "kind": "interface",
      "name": {
        "name": "IndicesResponseBase",
        "namespace": "_types"
      },
      "properties": [
        {
          "name": "_shards",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ShardStatistics",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "generics": [
        {
          "name": "TDocument",
          "namespace": "_types"
        }
      ],
      "kind": "interface",
      "name": {
        "name": "InlineGet",
        "namespace": "_types"
      },
      "properties": [
        {
          "name": "fields",
          "required": false,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "user_defined_value"
            }
          }
        },
        {
          "name": "found",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "_seq_no",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "SequenceNumber",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "_primary_term",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "_routing",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Routing",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "_source",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "TDocument",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "ScriptBase",
          "namespace": "_types"
        }
      },
      "kind": "interface",
      "name": {
        "name": "InlineScript",
        "namespace": "_types"
      },
      "properties": [
        {
          "name": "source",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "type_alias",
      "name": {
        "name": "Ip",
        "namespace": "_types"
      },
      "type": {
        "kind": "instance_of",
        "type": {
          "name": "string",
          "namespace": "internal"
        }
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "LatLon",
        "namespace": "_types"
      },
      "properties": [
        {
          "name": "lat",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "lon",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "cluster"
        },
        {
          "name": "indices"
        },
        {
          "name": "shards"
        }
      ],
      "name": {
        "name": "Level",
        "namespace": "_types"
      }
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "RUNNING"
        },
        {
          "name": "STOPPING"
        },
        {
          "name": "STOPPED"
        }
      ],
      "name": {
        "name": "LifecycleOperationMode",
        "namespace": "_types"
      }
    },
    {
      "inherits": {
        "type": {
          "name": "ErrorCause",
          "namespace": "_types"
        }
      },
      "kind": "interface",
      "name": {
        "name": "MainError",
        "namespace": "_types"
      },
      "properties": [
        {
          "name": "headers",
          "required": false,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        }
      ]
    },
    {
      "kind": "type_alias",
      "name": {
        "name": "MapboxVectorTiles",
        "namespace": "_types"
      },
      "type": {
        "kind": "instance_of",
        "type": {
          "name": "binary",
          "namespace": "internal"
        }
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "MergesStats",
        "namespace": "_types"
      },
      "properties": [
        {
          "name": "current",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "current_docs",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "current_size",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "current_size_in_bytes",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "total",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "total_auto_throttle",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "total_auto_throttle_in_bytes",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "total_docs",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "total_size",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "total_size_in_bytes",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "total_stopped_time",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "total_stopped_time_in_millis",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "total_throttled_time",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "total_throttled_time_in_millis",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "total_time",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "total_time_in_millis",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "type_alias",
      "name": {
        "name": "Metadata",
        "namespace": "_types"
      },
      "type": {
        "key": {
          "kind": "instance_of",
          "type": {
            "name": "string",
            "namespace": "internal"
          }
        },
        "kind": "dictionary_of",
        "singleKey": false,
        "value": {
          "kind": "user_defined_value"
        }
      }
    },
    {
      "kind": "type_alias",
      "name": {
        "name": "Metrics",
        "namespace": "_types"
      },
      "type": {
        "items": [
          {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          },
          {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        ],
        "kind": "union_of"
      }
    },
    {
      "description": "The minimum number of terms that should match as integer, percentage or range",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-minimum-should-match.html",
      "kind": "type_alias",
      "name": {
        "name": "MinimumShouldMatch",
        "namespace": "_types"
      },
      "type": {
        "items": [
          {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        ],
        "kind": "union_of"
      }
    },
    {
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-multi-term-rewrite.html",
      "kind": "type_alias",
      "name": {
        "name": "MultiTermQueryRewrite",
        "namespace": "_types"
      },
      "type": {
        "kind": "instance_of",
        "type": {
          "name": "string",
          "namespace": "internal"
        }
      }
    },
    {
      "kind": "type_alias",
      "name": {
        "name": "Name",
        "namespace": "_types"
      },
      "type": {
        "kind": "instance_of",
        "type": {
          "name": "string",
          "namespace": "internal"
        }
      }
    },
    {
      "kind": "type_alias",
      "name": {
        "name": "Names",
        "namespace": "_types"
      },
      "type": {
        "items": [
          {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          },
          {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "Name",
                "namespace": "_types"
              }
            }
          }
        ],
        "kind": "union_of"
      }
    },
    {
      "kind": "type_alias",
      "name": {
        "name": "Namespace",
        "namespace": "_types"
      },
      "type": {
        "kind": "instance_of",
        "type": {
          "name": "string",
          "namespace": "internal"
        }
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "NodeAttributes",
        "namespace": "_types"
      },
      "properties": [
        {
          "description": "Lists node attributes.",
          "name": "attributes",
          "required": true,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        },
        {
          "description": "The ephemeral ID of the node.",
          "name": "ephemeral_id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "The unique identifier of the node.",
          "name": "id",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "The unique identifier of the node.",
          "name": "name",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "NodeName",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "The host and port where transport HTTP connections are accepted.",
          "name": "transport_address",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "TransportAddress",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "roles",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "NodeRoles",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "type_alias",
      "name": {
        "name": "NodeId",
        "namespace": "_types"
      },
      "type": {
        "kind": "instance_of",
        "type": {
          "name": "string",
          "namespace": "internal"
        }
      }
    },
    {
      "kind": "type_alias",
      "name": {
        "name": "NodeIds",
        "namespace": "_types"
      },
      "type": {
        "items": [
          {
            "kind": "instance_of",
            "type": {
              "name": "NodeId",
              "namespace": "_types"
            }
          },
          {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "NodeId",
                "namespace": "_types"
              }
            }
          }
        ],
        "kind": "union_of"
      }
    },
    {
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-node.html#modules-node",
      "kind": "type_alias",
      "name": {
        "name": "NodeName",
        "namespace": "_types"
      },
      "type": {
        "kind": "instance_of",
        "type": {
          "name": "string",
          "namespace": "internal"
        }
      }
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "master"
        },
        {
          "name": "data"
        },
        {
          "name": "data_cold"
        },
        {
          "name": "data_content"
        },
        {
          "name": "data_frozen"
        },
        {
          "name": "data_hot"
        },
        {
          "name": "data_warm"
        },
        {
          "name": "client"
        },
        {
          "name": "ingest"
        },
        {
          "name": "ml"
        },
        {
          "name": "voting_only"
        },
        {
          "name": "transform"
        },
        {
          "name": "remote_cluster_client"
        },
        {
          "name": "coordinating_only"
        }
      ],
      "name": {
        "name": "NodeRole",
        "namespace": "_types"
      }
    },
    {
      "description": "* @doc_url https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-node.html#node-roles",
      "kind": "type_alias",
      "name": {
        "name": "NodeRoles",
        "namespace": "_types"
      },
      "type": {
        "kind": "array_of",
        "value": {
          "kind": "instance_of",
          "type": {
            "name": "NodeRole",
            "namespace": "_types"
          }
        }
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "NodeShard",
        "namespace": "_types"
      },
      "properties": [
        {
          "name": "state",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ShardRoutingState",
              "namespace": "indices.stats"
            }
          }
        },
        {
          "name": "primary",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "node",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "NodeName",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "shard",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "index",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndexName",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "allocation_id",
          "required": false,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "Id",
                "namespace": "_types"
              }
            }
          }
        },
        {
          "name": "recovery_source",
          "required": false,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "Id",
                "namespace": "_types"
              }
            }
          }
        },
        {
          "name": "unassigned_info",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "UnassignedInformation",
              "namespace": "cluster.allocation_explain"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "NodeStatistics",
        "namespace": "_types"
      },
      "properties": [
        {
          "name": "failures",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "ErrorCause",
                "namespace": "_types"
              }
            }
          }
        },
        {
          "description": "Total number of nodes selected by the request.",
          "name": "total",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Number of nodes that responded successfully to the request.",
          "name": "successful",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Number of nodes that rejected the request or failed to respond. If this value is not 0, a reason for the rejection or failure is included in the response.",
          "name": "failed",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "index"
        },
        {
          "name": "create"
        }
      ],
      "name": {
        "name": "OpType",
        "namespace": "_types"
      }
    },
    {
      "kind": "type_alias",
      "name": {
        "name": "Password",
        "namespace": "_types"
      },
      "type": {
        "kind": "instance_of",
        "type": {
          "name": "string",
          "namespace": "internal"
        }
      }
    },
    {
      "kind": "type_alias",
      "name": {
        "name": "Percentage",
        "namespace": "_types"
      },
      "type": {
        "items": [
          {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "float",
              "namespace": "_types"
            }
          }
        ],
        "kind": "union_of"
      }
    },
    {
      "kind": "type_alias",
      "name": {
        "name": "PipelineName",
        "namespace": "_types"
      },
      "type": {
        "kind": "instance_of",
        "type": {
          "name": "string",
          "namespace": "internal"
        }
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "PluginStats",
        "namespace": "_types"
      },
      "properties": [
        {
          "name": "classname",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "description",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "elasticsearch_version",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "VersionString",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "extended_plugins",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        },
        {
          "name": "has_native_controller",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "java_version",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "VersionString",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "name",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "version",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "VersionString",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "licensed",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "type_alias",
      "name": {
        "name": "PropertyName",
        "namespace": "_types"
      },
      "type": {
        "kind": "instance_of",
        "type": {
          "name": "string",
          "namespace": "internal"
        }
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "QueryCacheStats",
        "namespace": "_types"
      },
      "properties": [
        {
          "name": "cache_count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "cache_size",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "evictions",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "hit_count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "memory_size",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ByteSize",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "memory_size_in_bytes",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "miss_count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "total_count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "RecoveryStats",
        "namespace": "_types"
      },
      "properties": [
        {
          "name": "current_as_source",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "current_as_target",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "throttle_time",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "throttle_time_in_millis",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "type_alias",
      "name": {
        "name": "Refresh",
        "namespace": "_types"
      },
      "type": {
        "items": [
          {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "RefreshOptions",
              "namespace": "_types"
            }
          }
        ],
        "kind": "union_of"
      }
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "wait_for"
        }
      ],
      "name": {
        "name": "RefreshOptions",
        "namespace": "_types"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "RefreshStats",
        "namespace": "_types"
      },
      "properties": [
        {
          "name": "external_total",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "external_total_time_in_millis",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "listeners",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "total",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "total_time",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "total_time_in_millis",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "type_alias",
      "name": {
        "name": "RelationName",
        "namespace": "_types"
      },
      "type": {
        "kind": "instance_of",
        "type": {
          "name": "string",
          "namespace": "internal"
        }
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "behaviors": [
        {
          "type": {
            "name": "CommonQueryParameters",
            "namespace": "_spec_utils"
          }
        }
      ],
      "kind": "interface",
      "name": {
        "name": "RequestBase",
        "namespace": "_types"
      },
      "properties": []
    },
    {
      "kind": "interface",
      "name": {
        "name": "RequestCacheStats",
        "namespace": "_types"
      },
      "properties": [
        {
          "name": "evictions",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "hit_count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "memory_size",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "memory_size_in_bytes",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "miss_count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "Error"
        },
        {
          "name": "created"
        },
        {
          "name": "updated"
        },
        {
          "name": "deleted"
        },
        {
          "name": "not_found"
        },
        {
          "identifier": "no_op",
          "name": "noop"
        }
      ],
      "name": {
        "name": "Result",
        "namespace": "_types"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "Retries",
        "namespace": "_types"
      },
      "properties": [
        {
          "name": "bulk",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "search",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "type_alias",
      "name": {
        "name": "Routing",
        "namespace": "_types"
      },
      "type": {
        "kind": "instance_of",
        "type": {
          "name": "string",
          "namespace": "internal"
        }
      }
    },
    {
      "kind": "type_alias",
      "name": {
        "name": "Script",
        "namespace": "_types"
      },
      "type": {
        "items": [
          {
            "kind": "instance_of",
            "type": {
              "name": "InlineScript",
              "namespace": "_types"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "IndexedScript",
              "namespace": "_types"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        ],
        "kind": "union_of"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "ScriptBase",
        "namespace": "_types"
      },
      "properties": [
        {
          "name": "lang",
          "required": false,
          "type": {
            "items": [
              {
                "kind": "instance_of",
                "type": {
                  "name": "ScriptLanguage",
                  "namespace": "_types"
                }
              },
              {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              }
            ],
            "kind": "union_of"
          }
        },
        {
          "name": "params",
          "required": false,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "user_defined_value"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "ScriptField",
        "namespace": "_types"
      },
      "properties": [
        {
          "name": "script",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Script",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "ignore_failure",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "painless"
        },
        {
          "name": "expression"
        },
        {
          "name": "mustache"
        },
        {
          "name": "java"
        }
      ],
      "name": {
        "name": "ScriptLanguage",
        "namespace": "_types"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "ScriptTransform",
        "namespace": "_types"
      },
      "properties": [
        {
          "name": "lang",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "params",
          "required": true,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "user_defined_value"
            }
          }
        }
      ]
    },
    {
      "kind": "type_alias",
      "name": {
        "name": "ScrollId",
        "namespace": "_types"
      },
      "type": {
        "kind": "instance_of",
        "type": {
          "name": "string",
          "namespace": "internal"
        }
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "SearchStats",
        "namespace": "_types"
      },
      "properties": [
        {
          "name": "fetch_current",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "fetch_time_in_millis",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "fetch_total",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "open_contexts",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "query_current",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "query_time_in_millis",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "query_total",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "scroll_current",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "scroll_time_in_millis",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "scroll_total",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "suggest_current",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "suggest_time_in_millis",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "suggest_total",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "groups",
          "required": false,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "SearchStats",
                "namespace": "_types"
              }
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "SearchTransform",
        "namespace": "_types"
      },
      "properties": [
        {
          "name": "request",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "SearchInputRequestDefinition",
              "namespace": "watcher._types"
            }
          }
        },
        {
          "name": "timeout",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "enum",
      "members": [
        {
          "description": "Documents are scored using local term and document frequencies for the shard. This is usually faster but less accurate.",
          "name": "query_then_fetch"
        },
        {
          "description": "Documents are scored using global term and document frequencies across all shards. This is usually slower but more accurate.",
          "name": "dfs_query_then_fetch"
        }
      ],
      "name": {
        "name": "SearchType",
        "namespace": "_types"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "SegmentsStats",
        "namespace": "_types"
      },
      "properties": [
        {
          "name": "count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "doc_values_memory",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ByteSize",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "doc_values_memory_in_bytes",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "file_sizes",
          "required": true,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "ShardFileSizeInfo",
                "namespace": "indices.stats"
              }
            }
          }
        },
        {
          "name": "fixed_bit_set",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ByteSize",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "fixed_bit_set_memory_in_bytes",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "index_writer_memory",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ByteSize",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "index_writer_max_memory_in_bytes",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "index_writer_memory_in_bytes",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "max_unsafe_auto_id_timestamp",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "memory",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ByteSize",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "memory_in_bytes",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "norms_memory",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ByteSize",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "norms_memory_in_bytes",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "points_memory",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ByteSize",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "points_memory_in_bytes",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "stored_memory",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ByteSize",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "stored_fields_memory_in_bytes",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "terms_memory_in_bytes",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "terms_memory",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ByteSize",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "term_vectory_memory",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ByteSize",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "term_vectors_memory_in_bytes",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "version_map_memory",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ByteSize",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "version_map_memory_in_bytes",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "type_alias",
      "name": {
        "name": "SequenceNumber",
        "namespace": "_types"
      },
      "type": {
        "kind": "instance_of",
        "type": {
          "name": "integer",
          "namespace": "_types"
        }
      }
    },
    {
      "kind": "type_alias",
      "name": {
        "name": "Service",
        "namespace": "_types"
      },
      "type": {
        "kind": "instance_of",
        "type": {
          "name": "string",
          "namespace": "internal"
        }
      }
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "intersects"
        },
        {
          "name": "disjoint"
        },
        {
          "name": "within"
        }
      ],
      "name": {
        "name": "ShapeRelation",
        "namespace": "_types"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "ShardFailure",
        "namespace": "_types"
      },
      "properties": [
        {
          "name": "index",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndexName",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "node",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "reason",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ErrorCause",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "shard",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "status",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "ShardStatistics",
        "namespace": "_types"
      },
      "properties": [
        {
          "name": "failed",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "uint",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "successful",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "uint",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "total",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "uint",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "failures",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "ShardFailure",
                "namespace": "_types"
              }
            }
          }
        },
        {
          "name": "skipped",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "uint",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "ShardsOperationResponseBase",
        "namespace": "_types"
      },
      "properties": [
        {
          "name": "_shards",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ShardStatistics",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "Raw"
        },
        {
          "name": "k"
        },
        {
          "name": "m"
        },
        {
          "name": "g"
        },
        {
          "name": "t"
        },
        {
          "name": "p"
        }
      ],
      "name": {
        "name": "Size",
        "namespace": "_types"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "SlicedScroll",
        "namespace": "_types"
      },
      "properties": [
        {
          "name": "field",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "max",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "StoreStats",
        "namespace": "_types"
      },
      "properties": [
        {
          "name": "size",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ByteSize",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "size_in_bytes",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "reserved",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ByteSize",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "reserved_in_bytes",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "total_data_set_size",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ByteSize",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "total_data_set_size_in_bytes",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "StoredScript",
        "namespace": "_types"
      },
      "properties": [
        {
          "name": "lang",
          "required": false,
          "type": {
            "items": [
              {
                "kind": "instance_of",
                "type": {
                  "name": "ScriptLanguage",
                  "namespace": "_types"
                }
              },
              {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              }
            ],
            "kind": "union_of"
          }
        },
        {
          "name": "source",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "missing"
        },
        {
          "name": "popular"
        },
        {
          "name": "always"
        }
      ],
      "name": {
        "name": "SuggestMode",
        "namespace": "_types"
      }
    },
    {
      "description": "The suggestion name as returned from the server. Depending whether typed_keys is specified this could come back\nin the form of `name#type` instead of simply `name`",
      "kind": "type_alias",
      "name": {
        "name": "SuggestionName",
        "namespace": "_types"
      },
      "type": {
        "kind": "instance_of",
        "type": {
          "name": "string",
          "namespace": "internal"
        }
      }
    },
    {
      "kind": "type_alias",
      "name": {
        "name": "TaskId",
        "namespace": "_types"
      },
      "type": {
        "items": [
          {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        ],
        "kind": "union_of"
      }
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "cpu"
        },
        {
          "name": "wait"
        },
        {
          "name": "block"
        }
      ],
      "name": {
        "name": "ThreadType",
        "namespace": "_types"
      }
    },
    {
      "description": "Whenever durations need to be specified, e.g. for a timeout parameter, the duration must specify the unit, like 2d for 2 days.",
      "docUrl": "https://github.com/elastic/elasticsearch/blob/master/libs/core/src/main/java/org/elasticsearch/common/unit/TimeValue.java\nhttps://github.com/elastic/elasticsearch/blob/master/libs/core/src/main/java/org/elasticsearch/common/unit/TimeValue.java\nOnly support 0 and -1 but we have no way to encode these as constants at the moment",
      "kind": "type_alias",
      "name": {
        "name": "Time",
        "namespace": "_types"
      },
      "type": {
        "items": [
          {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        ],
        "kind": "union_of"
      }
    },
    {
      "kind": "type_alias",
      "name": {
        "name": "TimeSpan",
        "namespace": "_types"
      },
      "type": {
        "kind": "instance_of",
        "type": {
          "name": "string",
          "namespace": "internal"
        }
      }
    },
    {
      "kind": "enum",
      "members": [
        {
          "identifier": "nano_seconds",
          "name": "nanos"
        },
        {
          "identifier": "micro_seconds",
          "name": "micros"
        },
        {
          "identifier": "milli_seconds",
          "name": "ms"
        },
        {
          "identifier": "seconds",
          "name": "s"
        },
        {
          "identifier": "minutes",
          "name": "m"
        },
        {
          "identifier": "hours",
          "name": "h"
        },
        {
          "identifier": "days",
          "name": "d"
        }
      ],
      "name": {
        "name": "TimeUnit",
        "namespace": "_types"
      }
    },
    {
      "kind": "type_alias",
      "name": {
        "name": "TimeZone",
        "namespace": "_types"
      },
      "type": {
        "kind": "instance_of",
        "type": {
          "name": "string",
          "namespace": "internal"
        }
      }
    },
    {
      "kind": "type_alias",
      "name": {
        "name": "Timestamp",
        "namespace": "_types"
      },
      "type": {
        "kind": "instance_of",
        "type": {
          "name": "string",
          "namespace": "internal"
        }
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "Transform",
        "namespace": "_types"
      },
      "properties": []
    },
    {
      "kind": "interface",
      "name": {
        "name": "TransformContainer",
        "namespace": "_types"
      },
      "properties": [
        {
          "name": "chain",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ChainTransform",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "script",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ScriptTransform",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "search",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "SearchTransform",
              "namespace": "_types"
            }
          }
        }
      ],
      "variants": {
        "kind": "container"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "TranslogStats",
        "namespace": "_types"
      },
      "properties": [
        {
          "name": "earliest_last_modified_age",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "operations",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "size",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "size_in_bytes",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "uncommitted_operations",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "uncommitted_size",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "uncommitted_size_in_bytes",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "type_alias",
      "name": {
        "name": "TransportAddress",
        "namespace": "_types"
      },
      "type": {
        "kind": "instance_of",
        "type": {
          "name": "string",
          "namespace": "internal"
        }
      }
    },
    {
      "kind": "type_alias",
      "name": {
        "name": "Type",
        "namespace": "_types"
      },
      "type": {
        "kind": "instance_of",
        "type": {
          "name": "string",
          "namespace": "internal"
        }
      }
    },
    {
      "kind": "type_alias",
      "name": {
        "name": "Types",
        "namespace": "_types"
      },
      "type": {
        "items": [
          {
            "kind": "instance_of",
            "type": {
              "name": "Type",
              "namespace": "_types"
            }
          },
          {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "Type",
                "namespace": "_types"
              }
            }
          }
        ],
        "kind": "union_of"
      }
    },
    {
      "kind": "type_alias",
      "name": {
        "name": "Username",
        "namespace": "_types"
      },
      "type": {
        "kind": "instance_of",
        "type": {
          "name": "string",
          "namespace": "internal"
        }
      }
    },
    {
      "kind": "type_alias",
      "name": {
        "name": "Uuid",
        "namespace": "_types"
      },
      "type": {
        "kind": "instance_of",
        "type": {
          "name": "string",
          "namespace": "internal"
        }
      }
    },
    {
      "kind": "type_alias",
      "name": {
        "name": "VersionNumber",
        "namespace": "_types"
      },
      "type": {
        "kind": "instance_of",
        "type": {
          "name": "long",
          "namespace": "_types"
        }
      }
    },
    {
      "kind": "type_alias",
      "name": {
        "name": "VersionString",
        "namespace": "_types"
      },
      "type": {
        "kind": "instance_of",
        "type": {
          "name": "string",
          "namespace": "internal"
        }
      }
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "internal"
        },
        {
          "name": "external"
        },
        {
          "name": "external_gte"
        },
        {
          "name": "force"
        }
      ],
      "name": {
        "name": "VersionType",
        "namespace": "_types"
      }
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "all"
        }
      ],
      "name": {
        "name": "WaitForActiveShardOptions",
        "namespace": "_types"
      }
    },
    {
      "kind": "type_alias",
      "name": {
        "name": "WaitForActiveShards",
        "namespace": "_types"
      },
      "type": {
        "items": [
          {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "WaitForActiveShardOptions",
              "namespace": "_types"
            }
          }
        ],
        "kind": "union_of"
      }
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "immediate"
        },
        {
          "name": "urgent"
        },
        {
          "name": "high"
        },
        {
          "name": "normal"
        },
        {
          "name": "low"
        },
        {
          "name": "languid"
        }
      ],
      "name": {
        "name": "WaitForEvents",
        "namespace": "_types"
      }
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "green"
        },
        {
          "name": "yellow"
        },
        {
          "name": "red"
        }
      ],
      "name": {
        "name": "WaitForStatus",
        "namespace": "_types"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "WarmerStats",
        "namespace": "_types"
      },
      "properties": [
        {
          "name": "current",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "total",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "total_time",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "total_time_in_millis",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "WriteResponseBase",
        "namespace": "_types"
      },
      "properties": [
        {
          "name": "_id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "_index",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndexName",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "_primary_term",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "result",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Result",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "_seq_no",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "SequenceNumber",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "_shards",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ShardStatistics",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "_type",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Type",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "_version",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "VersionNumber",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "forced_refresh",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "type_alias",
      "name": {
        "name": "double",
        "namespace": "_types"
      },
      "type": {
        "kind": "instance_of",
        "type": {
          "name": "number",
          "namespace": "internal"
        }
      }
    },
    {
      "kind": "type_alias",
      "name": {
        "name": "float",
        "namespace": "_types"
      },
      "type": {
        "kind": "instance_of",
        "type": {
          "name": "number",
          "namespace": "internal"
        }
      }
    },
    {
      "kind": "type_alias",
      "name": {
        "name": "integer",
        "namespace": "_types"
      },
      "type": {
        "kind": "instance_of",
        "type": {
          "name": "number",
          "namespace": "internal"
        }
      }
    },
    {
      "kind": "type_alias",
      "name": {
        "name": "long",
        "namespace": "_types"
      },
      "type": {
        "kind": "instance_of",
        "type": {
          "name": "number",
          "namespace": "internal"
        }
      }
    },
    {
      "kind": "type_alias",
      "name": {
        "name": "uint",
        "namespace": "_types"
      },
      "type": {
        "kind": "instance_of",
        "type": {
          "name": "number",
          "namespace": "internal"
        }
      }
    },
    {
      "kind": "type_alias",
      "name": {
        "name": "ulong",
        "namespace": "_types"
      },
      "type": {
        "kind": "instance_of",
        "type": {
          "name": "number",
          "namespace": "internal"
        }
      }
    },
    {
      "inherits": {
        "type": {
          "name": "BucketAggregationBase",
          "namespace": "_types.aggregations"
        }
      },
      "kind": "interface",
      "name": {
        "name": "AdjacencyMatrixAggregation",
        "namespace": "_types.aggregations"
      },
      "properties": [
        {
          "name": "filters",
          "required": false,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "QueryContainer",
                "namespace": "_types.query_dsl"
              }
            }
          }
        }
      ]
    },
    {
      "kind": "type_alias",
      "name": {
        "name": "Aggregate",
        "namespace": "_types.aggregations"
      },
      "type": {
        "items": [
          {
            "kind": "instance_of",
            "type": {
              "name": "SingleBucketAggregate",
              "namespace": "_types.aggregations"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "AutoDateHistogramAggregate",
              "namespace": "_types.aggregations"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "FiltersAggregate",
              "namespace": "_types.aggregations"
            }
          },
          {
            "generics": [
              {
                "kind": "user_defined_value"
              }
            ],
            "kind": "instance_of",
            "type": {
              "name": "SignificantTermsAggregate",
              "namespace": "_types.aggregations"
            }
          },
          {
            "generics": [
              {
                "kind": "user_defined_value"
              }
            ],
            "kind": "instance_of",
            "type": {
              "name": "TermsAggregate",
              "namespace": "_types.aggregations"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "BucketAggregate",
              "namespace": "_types.aggregations"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "CompositeBucketAggregate",
              "namespace": "_types.aggregations"
            }
          },
          {
            "generics": [
              {
                "kind": "instance_of",
                "type": {
                  "name": "Bucket",
                  "namespace": "_types.aggregations"
                }
              }
            ],
            "kind": "instance_of",
            "type": {
              "name": "MultiBucketAggregate",
              "namespace": "_types.aggregations"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "MatrixStatsAggregate",
              "namespace": "_types.aggregations"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "KeyedValueAggregate",
              "namespace": "_types.aggregations"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "MetricAggregate",
              "namespace": "_types.aggregations"
            }
          }
        ],
        "kind": "union_of"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "AggregateBase",
        "namespace": "_types.aggregations"
      },
      "properties": [
        {
          "name": "meta",
          "required": false,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "user_defined_value"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "Aggregation",
        "namespace": "_types.aggregations"
      },
      "properties": [
        {
          "name": "meta",
          "required": false,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "user_defined_value"
            }
          }
        },
        {
          "name": "name",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "AggregationContainer",
        "namespace": "_types.aggregations"
      },
      "properties": [
        {
          "containerProperty": true,
          "name": "aggs",
          "required": false,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "AggregationContainer",
                "namespace": "_types.aggregations"
              }
            }
          }
        },
        {
          "containerProperty": true,
          "name": "meta",
          "required": false,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "user_defined_value"
            }
          }
        },
        {
          "name": "adjacency_matrix",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "AdjacencyMatrixAggregation",
              "namespace": "_types.aggregations"
            }
          }
        },
        {
          "name": "aggregations",
          "required": false,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "AggregationContainer",
                "namespace": "_types.aggregations"
              }
            }
          }
        },
        {
          "name": "auto_date_histogram",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "AutoDateHistogramAggregation",
              "namespace": "_types.aggregations"
            }
          }
        },
        {
          "name": "avg",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "AverageAggregation",
              "namespace": "_types.aggregations"
            }
          }
        },
        {
          "name": "avg_bucket",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "AverageBucketAggregation",
              "namespace": "_types.aggregations"
            }
          }
        },
        {
          "name": "boxplot",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "BoxplotAggregation",
              "namespace": "_types.aggregations"
            }
          }
        },
        {
          "name": "bucket_script",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "BucketScriptAggregation",
              "namespace": "_types.aggregations"
            }
          }
        },
        {
          "name": "bucket_selector",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "BucketSelectorAggregation",
              "namespace": "_types.aggregations"
            }
          }
        },
        {
          "name": "bucket_sort",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "BucketSortAggregation",
              "namespace": "_types.aggregations"
            }
          }
        },
        {
          "name": "cardinality",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "CardinalityAggregation",
              "namespace": "_types.aggregations"
            }
          }
        },
        {
          "name": "children",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ChildrenAggregation",
              "namespace": "_types.aggregations"
            }
          }
        },
        {
          "name": "composite",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "CompositeAggregation",
              "namespace": "_types.aggregations"
            }
          }
        },
        {
          "name": "cumulative_cardinality",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "CumulativeCardinalityAggregation",
              "namespace": "_types.aggregations"
            }
          }
        },
        {
          "name": "cumulative_sum",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "CumulativeSumAggregation",
              "namespace": "_types.aggregations"
            }
          }
        },
        {
          "name": "date_histogram",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DateHistogramAggregation",
              "namespace": "_types.aggregations"
            }
          }
        },
        {
          "name": "date_range",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DateRangeAggregation",
              "namespace": "_types.aggregations"
            }
          }
        },
        {
          "name": "derivative",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DerivativeAggregation",
              "namespace": "_types.aggregations"
            }
          }
        },
        {
          "name": "diversified_sampler",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DiversifiedSamplerAggregation",
              "namespace": "_types.aggregations"
            }
          }
        },
        {
          "name": "extended_stats",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ExtendedStatsAggregation",
              "namespace": "_types.aggregations"
            }
          }
        },
        {
          "name": "extended_stats_bucket",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ExtendedStatsBucketAggregation",
              "namespace": "_types.aggregations"
            }
          }
        },
        {
          "name": "filter",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "QueryContainer",
              "namespace": "_types.query_dsl"
            }
          }
        },
        {
          "name": "filters",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "FiltersAggregation",
              "namespace": "_types.aggregations"
            }
          }
        },
        {
          "name": "geo_bounds",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "GeoBoundsAggregation",
              "namespace": "_types.aggregations"
            }
          }
        },
        {
          "name": "geo_centroid",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "GeoCentroidAggregation",
              "namespace": "_types.aggregations"
            }
          }
        },
        {
          "name": "geo_distance",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "GeoDistanceAggregation",
              "namespace": "_types.aggregations"
            }
          }
        },
        {
          "name": "geohash_grid",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "GeoHashGridAggregation",
              "namespace": "_types.aggregations"
            }
          }
        },
        {
          "name": "geo_line",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "GeoLineAggregation",
              "namespace": "_types.aggregations"
            }
          }
        },
        {
          "name": "geotile_grid",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "GeoTileGridAggregation",
              "namespace": "_types.aggregations"
            }
          }
        },
        {
          "name": "global",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "GlobalAggregation",
              "namespace": "_types.aggregations"
            }
          }
        },
        {
          "name": "histogram",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "HistogramAggregation",
              "namespace": "_types.aggregations"
            }
          }
        },
        {
          "name": "ip_range",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IpRangeAggregation",
              "namespace": "_types.aggregations"
            }
          }
        },
        {
          "name": "inference",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "InferenceAggregation",
              "namespace": "_types.aggregations"
            }
          }
        },
        {
          "name": "line",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "GeoLineAggregation",
              "namespace": "_types.aggregations"
            }
          }
        },
        {
          "name": "matrix_stats",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "MatrixStatsAggregation",
              "namespace": "_types.aggregations"
            }
          }
        },
        {
          "name": "max",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "MaxAggregation",
              "namespace": "_types.aggregations"
            }
          }
        },
        {
          "name": "max_bucket",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "MaxBucketAggregation",
              "namespace": "_types.aggregations"
            }
          }
        },
        {
          "name": "median_absolute_deviation",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "MedianAbsoluteDeviationAggregation",
              "namespace": "_types.aggregations"
            }
          }
        },
        {
          "name": "min",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "MinAggregation",
              "namespace": "_types.aggregations"
            }
          }
        },
        {
          "name": "min_bucket",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "MinBucketAggregation",
              "namespace": "_types.aggregations"
            }
          }
        },
        {
          "name": "missing",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "MissingAggregation",
              "namespace": "_types.aggregations"
            }
          }
        },
        {
          "name": "moving_avg",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "MovingAverageAggregation",
              "namespace": "_types.aggregations"
            }
          }
        },
        {
          "name": "moving_percentiles",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "MovingPercentilesAggregation",
              "namespace": "_types.aggregations"
            }
          }
        },
        {
          "name": "moving_fn",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "MovingFunctionAggregation",
              "namespace": "_types.aggregations"
            }
          }
        },
        {
          "name": "multi_terms",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "MultiTermsAggregation",
              "namespace": "_types.aggregations"
            }
          }
        },
        {
          "name": "nested",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "NestedAggregation",
              "namespace": "_types.aggregations"
            }
          }
        },
        {
          "name": "normalize",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "NormalizeAggregation",
              "namespace": "_types.aggregations"
            }
          }
        },
        {
          "name": "parent",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ParentAggregation",
              "namespace": "_types.aggregations"
            }
          }
        },
        {
          "name": "percentile_ranks",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "PercentileRanksAggregation",
              "namespace": "_types.aggregations"
            }
          }
        },
        {
          "name": "percentiles",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "PercentilesAggregation",
              "namespace": "_types.aggregations"
            }
          }
        },
        {
          "name": "percentiles_bucket",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "PercentilesBucketAggregation",
              "namespace": "_types.aggregations"
            }
          }
        },
        {
          "name": "range",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "RangeAggregation",
              "namespace": "_types.aggregations"
            }
          }
        },
        {
          "name": "rare_terms",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "RareTermsAggregation",
              "namespace": "_types.aggregations"
            }
          }
        },
        {
          "name": "rate",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "RateAggregation",
              "namespace": "_types.aggregations"
            }
          }
        },
        {
          "name": "reverse_nested",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ReverseNestedAggregation",
              "namespace": "_types.aggregations"
            }
          }
        },
        {
          "name": "sampler",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "SamplerAggregation",
              "namespace": "_types.aggregations"
            }
          }
        },
        {
          "name": "scripted_metric",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ScriptedMetricAggregation",
              "namespace": "_types.aggregations"
            }
          }
        },
        {
          "name": "serial_diff",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "SerialDifferencingAggregation",
              "namespace": "_types.aggregations"
            }
          }
        },
        {
          "name": "significant_terms",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "SignificantTermsAggregation",
              "namespace": "_types.aggregations"
            }
          }
        },
        {
          "name": "significant_text",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "SignificantTextAggregation",
              "namespace": "_types.aggregations"
            }
          }
        },
        {
          "name": "stats",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "StatsAggregation",
              "namespace": "_types.aggregations"
            }
          }
        },
        {
          "name": "stats_bucket",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "StatsBucketAggregation",
              "namespace": "_types.aggregations"
            }
          }
        },
        {
          "name": "string_stats",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "StringStatsAggregation",
              "namespace": "_types.aggregations"
            }
          }
        },
        {
          "name": "sum",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "SumAggregation",
              "namespace": "_types.aggregations"
            }
          }
        },
        {
          "name": "sum_bucket",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "SumBucketAggregation",
              "namespace": "_types.aggregations"
            }
          }
        },
        {
          "name": "terms",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "TermsAggregation",
              "namespace": "_types.aggregations"
            }
          }
        },
        {
          "name": "top_hits",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "TopHitsAggregation",
              "namespace": "_types.aggregations"
            }
          }
        },
        {
          "name": "t_test",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "TTestAggregation",
              "namespace": "_types.aggregations"
            }
          }
        },
        {
          "name": "top_metrics",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "TopMetricsAggregation",
              "namespace": "_types.aggregations"
            }
          }
        },
        {
          "name": "value_count",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ValueCountAggregation",
              "namespace": "_types.aggregations"
            }
          }
        },
        {
          "name": "weighted_avg",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "WeightedAverageAggregation",
              "namespace": "_types.aggregations"
            }
          }
        },
        {
          "name": "variable_width_histogram",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "VariableWidthHistogramAggregation",
              "namespace": "_types.aggregations"
            }
          }
        }
      ],
      "variants": {
        "kind": "container"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "AggregationRange",
        "namespace": "_types.aggregations"
      },
      "properties": [
        {
          "name": "from",
          "required": false,
          "type": {
            "items": [
              {
                "kind": "instance_of",
                "type": {
                  "name": "double",
                  "namespace": "_types"
                }
              },
              {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              }
            ],
            "kind": "union_of"
          }
        },
        {
          "name": "key",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "to",
          "required": false,
          "type": {
            "items": [
              {
                "kind": "instance_of",
                "type": {
                  "name": "double",
                  "namespace": "_types"
                }
              },
              {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              }
            ],
            "kind": "union_of"
          }
        }
      ]
    },
    {
      "inherits": {
        "generics": [
          {
            "generics": [
              {
                "kind": "instance_of",
                "type": {
                  "name": "long",
                  "namespace": "_types"
                }
              }
            ],
            "kind": "instance_of",
            "type": {
              "name": "KeyedBucket",
              "namespace": "_types.aggregations"
            }
          }
        ],
        "type": {
          "name": "MultiBucketAggregate",
          "namespace": "_types.aggregations"
        }
      },
      "kind": "interface",
      "name": {
        "name": "AutoDateHistogramAggregate",
        "namespace": "_types.aggregations"
      },
      "properties": [
        {
          "name": "interval",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DateMathTime",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "BucketAggregationBase",
          "namespace": "_types.aggregations"
        }
      },
      "kind": "interface",
      "name": {
        "name": "AutoDateHistogramAggregation",
        "namespace": "_types.aggregations"
      },
      "properties": [
        {
          "name": "buckets",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "field",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "format",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "minimum_interval",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "MinimumInterval",
              "namespace": "_types.aggregations"
            }
          }
        },
        {
          "name": "missing",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DateString",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "offset",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "params",
          "required": false,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "user_defined_value"
            }
          }
        },
        {
          "name": "script",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Script",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "time_zone",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "FormatMetricAggregationBase",
          "namespace": "_types.aggregations"
        }
      },
      "kind": "interface",
      "name": {
        "name": "AverageAggregation",
        "namespace": "_types.aggregations"
      },
      "properties": []
    },
    {
      "inherits": {
        "type": {
          "name": "PipelineAggregationBase",
          "namespace": "_types.aggregations"
        }
      },
      "kind": "interface",
      "name": {
        "name": "AverageBucketAggregation",
        "namespace": "_types.aggregations"
      },
      "properties": []
    },
    {
      "inherits": {
        "type": {
          "name": "AggregateBase",
          "namespace": "_types.aggregations"
        }
      },
      "kind": "interface",
      "name": {
        "name": "BoxPlotAggregate",
        "namespace": "_types.aggregations"
      },
      "properties": [
        {
          "name": "min",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "max",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "q1",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "q2",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "q3",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "MetricAggregationBase",
          "namespace": "_types.aggregations"
        }
      },
      "kind": "interface",
      "name": {
        "name": "BoxplotAggregation",
        "namespace": "_types.aggregations"
      },
      "properties": [
        {
          "name": "compression",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "type_alias",
      "name": {
        "name": "Bucket",
        "namespace": "_types.aggregations"
      },
      "type": {
        "items": [
          {
            "kind": "instance_of",
            "type": {
              "name": "CompositeBucket",
              "namespace": "_types.aggregations"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "DateHistogramBucket",
              "namespace": "_types.aggregations"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "FiltersBucketItem",
              "namespace": "_types.aggregations"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "IpRangeBucket",
              "namespace": "_types.aggregations"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "RangeBucket",
              "namespace": "_types.aggregations"
            }
          },
          {
            "generics": [
              {
                "kind": "user_defined_value"
              }
            ],
            "kind": "instance_of",
            "type": {
              "name": "RareTermsBucket",
              "namespace": "_types.aggregations"
            }
          },
          {
            "generics": [
              {
                "kind": "user_defined_value"
              }
            ],
            "kind": "instance_of",
            "type": {
              "name": "SignificantTermsBucket",
              "namespace": "_types.aggregations"
            }
          },
          {
            "generics": [
              {
                "kind": "user_defined_value"
              }
            ],
            "kind": "instance_of",
            "type": {
              "name": "KeyedBucket",
              "namespace": "_types.aggregations"
            }
          }
        ],
        "kind": "union_of"
      }
    },
    {
      "inherits": {
        "type": {
          "name": "AggregateBase",
          "namespace": "_types.aggregations"
        }
      },
      "kind": "interface",
      "name": {
        "name": "BucketAggregate",
        "namespace": "_types.aggregations"
      },
      "properties": [
        {
          "name": "after_key",
          "required": true,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "user_defined_value"
            }
          }
        },
        {
          "name": "bg_count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "doc_count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "doc_count_error_upper_bound",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "sum_other_doc_count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "interval",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DateMathTime",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "items",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Bucket",
              "namespace": "_types.aggregations"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "Aggregation",
          "namespace": "_types.aggregations"
        }
      },
      "kind": "interface",
      "name": {
        "name": "BucketAggregationBase",
        "namespace": "_types.aggregations"
      },
      "properties": [
        {
          "name": "aggregations",
          "required": false,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "AggregationContainer",
                "namespace": "_types.aggregations"
              }
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "PipelineAggregationBase",
          "namespace": "_types.aggregations"
        }
      },
      "kind": "interface",
      "name": {
        "name": "BucketScriptAggregation",
        "namespace": "_types.aggregations"
      },
      "properties": [
        {
          "name": "script",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Script",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "PipelineAggregationBase",
          "namespace": "_types.aggregations"
        }
      },
      "kind": "interface",
      "name": {
        "name": "BucketSelectorAggregation",
        "namespace": "_types.aggregations"
      },
      "properties": [
        {
          "name": "script",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Script",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "Aggregation",
          "namespace": "_types.aggregations"
        }
      },
      "kind": "interface",
      "name": {
        "name": "BucketSortAggregation",
        "namespace": "_types.aggregations"
      },
      "properties": [
        {
          "name": "from",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "gap_policy",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "GapPolicy",
              "namespace": "_types.aggregations"
            }
          }
        },
        {
          "name": "size",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "sort",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Sort",
              "namespace": "_global.search._types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "BucketsPath",
        "namespace": "_types.aggregations"
      },
      "properties": []
    },
    {
      "inherits": {
        "type": {
          "name": "MetricAggregationBase",
          "namespace": "_types.aggregations"
        }
      },
      "kind": "interface",
      "name": {
        "name": "CardinalityAggregation",
        "namespace": "_types.aggregations"
      },
      "properties": [
        {
          "name": "precision_threshold",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "rehash",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "ChiSquareHeuristic",
        "namespace": "_types.aggregations"
      },
      "properties": [
        {
          "name": "background_is_superset",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "include_negatives",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "BucketAggregationBase",
          "namespace": "_types.aggregations"
        }
      },
      "kind": "interface",
      "name": {
        "name": "ChildrenAggregation",
        "namespace": "_types.aggregations"
      },
      "properties": [
        {
          "name": "type",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "RelationName",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "ClassificationInferenceOptions",
        "namespace": "_types.aggregations"
      },
      "properties": [
        {
          "description": "Specifies the number of top class predictions to return. Defaults to 0.",
          "name": "num_top_classes",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Specifies the maximum number of feature importance values per document. By default, it is zero and no feature importance calculation occurs.",
          "docUrl": "https://www.elastic.co/guide/en/machine-learning/7.12/ml-feature-importance.html",
          "name": "num_top_feature_importance_values",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Specifies the type of the predicted field to write. Acceptable values are: string, number, boolean. When boolean is provided 1.0 is transformed to true and 0.0 to false.",
          "name": "prediction_field_type",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "The field that is added to incoming documents to contain the inference prediction. Defaults to predicted_value.",
          "name": "results_field",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Specifies the field to which the top classes are written. Defaults to top_classes.",
          "name": "top_classes_results_field",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "BucketAggregationBase",
          "namespace": "_types.aggregations"
        }
      },
      "kind": "interface",
      "name": {
        "name": "CompositeAggregation",
        "namespace": "_types.aggregations"
      },
      "properties": [
        {
          "name": "after",
          "required": false,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "items": [
                {
                  "kind": "instance_of",
                  "type": {
                    "name": "string",
                    "namespace": "internal"
                  }
                },
                {
                  "kind": "instance_of",
                  "type": {
                    "name": "float",
                    "namespace": "_types"
                  }
                },
                {
                  "kind": "instance_of",
                  "type": {
                    "name": "null",
                    "namespace": "internal"
                  }
                }
              ],
              "kind": "union_of"
            }
          }
        },
        {
          "name": "size",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "sources",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "key": {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              },
              "kind": "dictionary_of",
              "singleKey": false,
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "CompositeAggregationSource",
                  "namespace": "_types.aggregations"
                }
              }
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "CompositeAggregationSource",
        "namespace": "_types.aggregations"
      },
      "properties": [
        {
          "name": "terms",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "TermsAggregation",
              "namespace": "_types.aggregations"
            }
          }
        },
        {
          "name": "histogram",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "HistogramAggregation",
              "namespace": "_types.aggregations"
            }
          }
        },
        {
          "name": "date_histogram",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DateHistogramAggregation",
              "namespace": "_types.aggregations"
            }
          }
        },
        {
          "name": "geotile_grid",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "GeoTileGridAggregation",
              "namespace": "_types.aggregations"
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "AdditionalProperties"
      ],
      "behaviors": [
        {
          "generics": [
            {
              "kind": "instance_of",
              "type": {
                "name": "AggregateName",
                "namespace": "_types"
              }
            },
            {
              "kind": "instance_of",
              "type": {
                "name": "Aggregate",
                "namespace": "_types.aggregations"
              }
            }
          ],
          "type": {
            "name": "AdditionalProperties",
            "namespace": "_spec_utils"
          }
        }
      ],
      "kind": "interface",
      "name": {
        "name": "CompositeBucket",
        "namespace": "_types.aggregations"
      },
      "properties": []
    },
    {
      "inherits": {
        "generics": [
          {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "user_defined_value"
            }
          }
        ],
        "type": {
          "name": "MultiBucketAggregate",
          "namespace": "_types.aggregations"
        }
      },
      "kind": "interface",
      "name": {
        "name": "CompositeBucketAggregate",
        "namespace": "_types.aggregations"
      },
      "properties": [
        {
          "name": "after_key",
          "required": true,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "user_defined_value"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "PipelineAggregationBase",
          "namespace": "_types.aggregations"
        }
      },
      "kind": "interface",
      "name": {
        "name": "CumulativeCardinalityAggregation",
        "namespace": "_types.aggregations"
      },
      "properties": []
    },
    {
      "inherits": {
        "type": {
          "name": "PipelineAggregationBase",
          "namespace": "_types.aggregations"
        }
      },
      "kind": "interface",
      "name": {
        "name": "CumulativeSumAggregation",
        "namespace": "_types.aggregations"
      },
      "properties": []
    },
    {
      "inherits": {
        "type": {
          "name": "BucketAggregationBase",
          "namespace": "_types.aggregations"
        }
      },
      "kind": "interface",
      "name": {
        "name": "DateHistogramAggregation",
        "namespace": "_types.aggregations"
      },
      "properties": [
        {
          "name": "calendar_interval",
          "required": false,
          "type": {
            "items": [
              {
                "kind": "instance_of",
                "type": {
                  "name": "DateInterval",
                  "namespace": "_types.aggregations"
                }
              },
              {
                "kind": "instance_of",
                "type": {
                  "name": "Time",
                  "namespace": "_types"
                }
              }
            ],
            "kind": "union_of"
          }
        },
        {
          "name": "extended_bounds",
          "required": false,
          "type": {
            "generics": [
              {
                "items": [
                  {
                    "kind": "instance_of",
                    "type": {
                      "name": "DateMath",
                      "namespace": "_types"
                    }
                  },
                  {
                    "kind": "instance_of",
                    "type": {
                      "name": "long",
                      "namespace": "_types"
                    }
                  }
                ],
                "kind": "union_of"
              }
            ],
            "kind": "instance_of",
            "type": {
              "name": "ExtendedBounds",
              "namespace": "_types.aggregations"
            }
          }
        },
        {
          "name": "hard_bounds",
          "required": false,
          "type": {
            "generics": [
              {
                "items": [
                  {
                    "kind": "instance_of",
                    "type": {
                      "name": "DateMath",
                      "namespace": "_types"
                    }
                  },
                  {
                    "kind": "instance_of",
                    "type": {
                      "name": "long",
                      "namespace": "_types"
                    }
                  }
                ],
                "kind": "union_of"
              }
            ],
            "kind": "instance_of",
            "type": {
              "name": "ExtendedBounds",
              "namespace": "_types.aggregations"
            }
          }
        },
        {
          "name": "field",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "fixed_interval",
          "required": false,
          "type": {
            "items": [
              {
                "kind": "instance_of",
                "type": {
                  "name": "DateInterval",
                  "namespace": "_types.aggregations"
                }
              },
              {
                "kind": "instance_of",
                "type": {
                  "name": "Time",
                  "namespace": "_types"
                }
              }
            ],
            "kind": "union_of"
          }
        },
        {
          "name": "format",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "interval",
          "required": false,
          "type": {
            "items": [
              {
                "kind": "instance_of",
                "type": {
                  "name": "DateInterval",
                  "namespace": "_types.aggregations"
                }
              },
              {
                "kind": "instance_of",
                "type": {
                  "name": "Time",
                  "namespace": "_types"
                }
              }
            ],
            "kind": "union_of"
          }
        },
        {
          "name": "min_doc_count",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "missing",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DateString",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "offset",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "order",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "HistogramOrder",
              "namespace": "_types.aggregations"
            }
          }
        },
        {
          "name": "params",
          "required": false,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "user_defined_value"
            }
          }
        },
        {
          "name": "script",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Script",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "time_zone",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "keyed",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "AdditionalProperties"
      ],
      "behaviors": [
        {
          "generics": [
            {
              "kind": "instance_of",
              "type": {
                "name": "AggregateName",
                "namespace": "_types"
              }
            },
            {
              "kind": "instance_of",
              "type": {
                "name": "Aggregate",
                "namespace": "_types.aggregations"
              }
            }
          ],
          "type": {
            "name": "AdditionalProperties",
            "namespace": "_spec_utils"
          }
        }
      ],
      "kind": "interface",
      "name": {
        "name": "DateHistogramBucket",
        "namespace": "_types.aggregations"
      },
      "properties": []
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "second"
        },
        {
          "name": "minute"
        },
        {
          "name": "hour"
        },
        {
          "name": "day"
        },
        {
          "name": "week"
        },
        {
          "name": "month"
        },
        {
          "name": "quarter"
        },
        {
          "name": "year"
        }
      ],
      "name": {
        "name": "DateInterval",
        "namespace": "_types.aggregations"
      }
    },
    {
      "inherits": {
        "type": {
          "name": "BucketAggregationBase",
          "namespace": "_types.aggregations"
        }
      },
      "kind": "interface",
      "name": {
        "name": "DateRangeAggregation",
        "namespace": "_types.aggregations"
      },
      "properties": [
        {
          "name": "field",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "format",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "missing",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Missing",
              "namespace": "_types.aggregations"
            }
          }
        },
        {
          "name": "ranges",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "DateRangeExpression",
                "namespace": "_types.aggregations"
              }
            }
          }
        },
        {
          "name": "time_zone",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "keyed",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "DateRangeExpression",
        "namespace": "_types.aggregations"
      },
      "properties": [
        {
          "name": "from",
          "required": false,
          "type": {
            "items": [
              {
                "kind": "instance_of",
                "type": {
                  "name": "DateMath",
                  "namespace": "_types"
                }
              },
              {
                "kind": "instance_of",
                "type": {
                  "name": "float",
                  "namespace": "_types"
                }
              }
            ],
            "kind": "union_of"
          }
        },
        {
          "name": "from_as_string",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "to_as_string",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "key",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "to",
          "required": false,
          "type": {
            "items": [
              {
                "kind": "instance_of",
                "type": {
                  "name": "DateMath",
                  "namespace": "_types"
                }
              },
              {
                "kind": "instance_of",
                "type": {
                  "name": "float",
                  "namespace": "_types"
                }
              }
            ],
            "kind": "union_of"
          }
        },
        {
          "name": "doc_count",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "PipelineAggregationBase",
          "namespace": "_types.aggregations"
        }
      },
      "kind": "interface",
      "name": {
        "name": "DerivativeAggregation",
        "namespace": "_types.aggregations"
      },
      "properties": []
    },
    {
      "inherits": {
        "type": {
          "name": "BucketAggregationBase",
          "namespace": "_types.aggregations"
        }
      },
      "kind": "interface",
      "name": {
        "name": "DiversifiedSamplerAggregation",
        "namespace": "_types.aggregations"
      },
      "properties": [
        {
          "name": "execution_hint",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "SamplerAggregationExecutionHint",
              "namespace": "_types.aggregations"
            }
          }
        },
        {
          "name": "max_docs_per_value",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "script",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Script",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "shard_size",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "field",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "EwmaModelSettings",
        "namespace": "_types.aggregations"
      },
      "properties": [
        {
          "name": "alpha",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "float",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "generics": [
        {
          "name": "T",
          "namespace": "_types.aggregations"
        }
      ],
      "kind": "interface",
      "name": {
        "name": "ExtendedBounds",
        "namespace": "_types.aggregations"
      },
      "properties": [
        {
          "name": "max",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "T",
              "namespace": "_types.aggregations"
            }
          }
        },
        {
          "name": "min",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "T",
              "namespace": "_types.aggregations"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "StatsAggregate",
          "namespace": "_types.aggregations"
        }
      },
      "kind": "interface",
      "name": {
        "name": "ExtendedStatsAggregate",
        "namespace": "_types.aggregations"
      },
      "properties": [
        {
          "name": "std_deviation_bounds",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "StandardDeviationBounds",
              "namespace": "_types.aggregations"
            }
          }
        },
        {
          "name": "sum_of_squares",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "variance",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "variance_population",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "variance_sampling",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "std_deviation",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "std_deviation_population",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "std_deviation_sampling",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "FormatMetricAggregationBase",
          "namespace": "_types.aggregations"
        }
      },
      "kind": "interface",
      "name": {
        "name": "ExtendedStatsAggregation",
        "namespace": "_types.aggregations"
      },
      "properties": [
        {
          "name": "sigma",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "PipelineAggregationBase",
          "namespace": "_types.aggregations"
        }
      },
      "kind": "interface",
      "name": {
        "name": "ExtendedStatsBucketAggregation",
        "namespace": "_types.aggregations"
      },
      "properties": [
        {
          "name": "sigma",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "AggregateBase",
          "namespace": "_types.aggregations"
        }
      },
      "kind": "interface",
      "name": {
        "name": "FiltersAggregate",
        "namespace": "_types.aggregations"
      },
      "properties": [
        {
          "name": "buckets",
          "required": true,
          "type": {
            "items": [
              {
                "kind": "array_of",
                "value": {
                  "kind": "instance_of",
                  "type": {
                    "name": "FiltersBucketItem",
                    "namespace": "_types.aggregations"
                  }
                }
              },
              {
                "key": {
                  "kind": "instance_of",
                  "type": {
                    "name": "string",
                    "namespace": "internal"
                  }
                },
                "kind": "dictionary_of",
                "singleKey": false,
                "value": {
                  "kind": "instance_of",
                  "type": {
                    "name": "FiltersBucketItem",
                    "namespace": "_types.aggregations"
                  }
                }
              }
            ],
            "kind": "union_of"
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "BucketAggregationBase",
          "namespace": "_types.aggregations"
        }
      },
      "kind": "interface",
      "name": {
        "name": "FiltersAggregation",
        "namespace": "_types.aggregations"
      },
      "properties": [
        {
          "name": "filters",
          "required": false,
          "type": {
            "items": [
              {
                "key": {
                  "kind": "instance_of",
                  "type": {
                    "name": "string",
                    "namespace": "internal"
                  }
                },
                "kind": "dictionary_of",
                "singleKey": false,
                "value": {
                  "kind": "instance_of",
                  "type": {
                    "name": "QueryContainer",
                    "namespace": "_types.query_dsl"
                  }
                }
              },
              {
                "kind": "array_of",
                "value": {
                  "kind": "instance_of",
                  "type": {
                    "name": "QueryContainer",
                    "namespace": "_types.query_dsl"
                  }
                }
              }
            ],
            "kind": "union_of"
          }
        },
        {
          "name": "other_bucket",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "other_bucket_key",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "keyed",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "AdditionalProperties"
      ],
      "behaviors": [
        {
          "generics": [
            {
              "kind": "instance_of",
              "type": {
                "name": "AggregateName",
                "namespace": "_types"
              }
            },
            {
              "kind": "instance_of",
              "type": {
                "name": "Aggregate",
                "namespace": "_types.aggregations"
              }
            }
          ],
          "type": {
            "name": "AdditionalProperties",
            "namespace": "_spec_utils"
          }
        }
      ],
      "kind": "interface",
      "name": {
        "name": "FiltersBucketItem",
        "namespace": "_types.aggregations"
      },
      "properties": [
        {
          "name": "doc_count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "MetricAggregationBase",
          "namespace": "_types.aggregations"
        }
      },
      "kind": "interface",
      "name": {
        "name": "FormatMetricAggregationBase",
        "namespace": "_types.aggregations"
      },
      "properties": [
        {
          "name": "format",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "MetricAggregationBase",
          "namespace": "_types.aggregations"
        }
      },
      "kind": "interface",
      "name": {
        "name": "FormattableMetricAggregation",
        "namespace": "_types.aggregations"
      },
      "properties": [
        {
          "name": "format",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "skip"
        },
        {
          "name": "insert_zeros"
        }
      ],
      "name": {
        "name": "GapPolicy",
        "namespace": "_types.aggregations"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "GeoBounds",
        "namespace": "_types.aggregations"
      },
      "properties": [
        {
          "name": "bottom_right",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "LatLon",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "top_left",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "LatLon",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "AggregateBase",
          "namespace": "_types.aggregations"
        }
      },
      "kind": "interface",
      "name": {
        "name": "GeoBoundsAggregate",
        "namespace": "_types.aggregations"
      },
      "properties": [
        {
          "name": "bounds",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "GeoBounds",
              "namespace": "_types.aggregations"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "MetricAggregationBase",
          "namespace": "_types.aggregations"
        }
      },
      "kind": "interface",
      "name": {
        "name": "GeoBoundsAggregation",
        "namespace": "_types.aggregations"
      },
      "properties": [
        {
          "name": "wrap_longitude",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "AggregateBase",
          "namespace": "_types.aggregations"
        }
      },
      "kind": "interface",
      "name": {
        "name": "GeoCentroidAggregate",
        "namespace": "_types.aggregations"
      },
      "properties": [
        {
          "name": "count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "location",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "GeoLocation",
              "namespace": "_types.query_dsl"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "MetricAggregationBase",
          "namespace": "_types.aggregations"
        }
      },
      "kind": "interface",
      "name": {
        "name": "GeoCentroidAggregation",
        "namespace": "_types.aggregations"
      },
      "properties": [
        {
          "name": "count",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "location",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "GeoLocation",
              "namespace": "_types.query_dsl"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "BucketAggregationBase",
          "namespace": "_types.aggregations"
        }
      },
      "kind": "interface",
      "name": {
        "name": "GeoDistanceAggregation",
        "namespace": "_types.aggregations"
      },
      "properties": [
        {
          "name": "distance_type",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "GeoDistanceType",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "field",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "origin",
          "required": false,
          "type": {
            "items": [
              {
                "kind": "instance_of",
                "type": {
                  "name": "GeoLocation",
                  "namespace": "_types.query_dsl"
                }
              },
              {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              }
            ],
            "kind": "union_of"
          }
        },
        {
          "name": "ranges",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "AggregationRange",
                "namespace": "_types.aggregations"
              }
            }
          }
        },
        {
          "name": "unit",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DistanceUnit",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "BucketAggregationBase",
          "namespace": "_types.aggregations"
        }
      },
      "kind": "interface",
      "name": {
        "name": "GeoHashGridAggregation",
        "namespace": "_types.aggregations"
      },
      "properties": [
        {
          "name": "bounds",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "BoundingBox",
              "namespace": "_types.query_dsl"
            }
          }
        },
        {
          "name": "field",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "precision",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "GeoHashPrecision",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "shard_size",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "size",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "AggregateBase",
          "namespace": "_types.aggregations"
        }
      },
      "kind": "interface",
      "name": {
        "name": "GeoLineAggregate",
        "namespace": "_types.aggregations"
      },
      "properties": [
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "geometry",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "LineStringGeoShape",
              "namespace": "_types.aggregations"
            }
          }
        },
        {
          "name": "properties",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "GeoLineProperties",
              "namespace": "_types.aggregations"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "GeoLineAggregation",
        "namespace": "_types.aggregations"
      },
      "properties": [
        {
          "name": "point",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "GeoLinePoint",
              "namespace": "_types.aggregations"
            }
          }
        },
        {
          "name": "sort",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "GeoLineSort",
              "namespace": "_types.aggregations"
            }
          }
        },
        {
          "name": "include_sort",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "sort_order",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "SortOrder",
              "namespace": "_global.search._types"
            }
          }
        },
        {
          "name": "size",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "GeoLinePoint",
        "namespace": "_types.aggregations"
      },
      "properties": [
        {
          "name": "field",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "GeoLineProperties",
        "namespace": "_types.aggregations"
      },
      "properties": [
        {
          "name": "complete",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "sort_values",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "double",
                "namespace": "_types"
              }
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "GeoLineSort",
        "namespace": "_types.aggregations"
      },
      "properties": [
        {
          "name": "field",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "BucketAggregationBase",
          "namespace": "_types.aggregations"
        }
      },
      "kind": "interface",
      "name": {
        "name": "GeoTileGridAggregation",
        "namespace": "_types.aggregations"
      },
      "properties": [
        {
          "name": "field",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "precision",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "GeoTilePrecision",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "shard_size",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "size",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "bounds",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "GeoBounds",
              "namespace": "_types.aggregations"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "BucketAggregationBase",
          "namespace": "_types.aggregations"
        }
      },
      "kind": "interface",
      "name": {
        "name": "GlobalAggregation",
        "namespace": "_types.aggregations"
      },
      "properties": []
    },
    {
      "kind": "interface",
      "name": {
        "name": "GoogleNormalizedDistanceHeuristic",
        "namespace": "_types.aggregations"
      },
      "properties": [
        {
          "name": "background_is_superset",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "HdrMethod",
        "namespace": "_types.aggregations"
      },
      "properties": [
        {
          "name": "number_of_significant_value_digits",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "HdrPercentileItem",
        "namespace": "_types.aggregations"
      },
      "properties": [
        {
          "name": "key",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "value",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "AggregateBase",
          "namespace": "_types.aggregations"
        }
      },
      "kind": "interface",
      "name": {
        "name": "HdrPercentilesAggregate",
        "namespace": "_types.aggregations"
      },
      "properties": [
        {
          "name": "values",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "HdrPercentileItem",
                "namespace": "_types.aggregations"
              }
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "BucketAggregationBase",
          "namespace": "_types.aggregations"
        }
      },
      "kind": "interface",
      "name": {
        "name": "HistogramAggregation",
        "namespace": "_types.aggregations"
      },
      "properties": [
        {
          "name": "extended_bounds",
          "required": false,
          "type": {
            "generics": [
              {
                "kind": "instance_of",
                "type": {
                  "name": "double",
                  "namespace": "_types"
                }
              }
            ],
            "kind": "instance_of",
            "type": {
              "name": "ExtendedBounds",
              "namespace": "_types.aggregations"
            }
          }
        },
        {
          "name": "hard_bounds",
          "required": false,
          "type": {
            "generics": [
              {
                "kind": "instance_of",
                "type": {
                  "name": "double",
                  "namespace": "_types"
                }
              }
            ],
            "kind": "instance_of",
            "type": {
              "name": "ExtendedBounds",
              "namespace": "_types.aggregations"
            }
          }
        },
        {
          "name": "field",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "interval",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "min_doc_count",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "missing",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "offset",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "order",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "HistogramOrder",
              "namespace": "_types.aggregations"
            }
          }
        },
        {
          "name": "script",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Script",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "format",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "keyed",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "HistogramOrder",
        "namespace": "_types.aggregations"
      },
      "properties": [
        {
          "name": "_count",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "SortOrder",
              "namespace": "_global.search._types"
            }
          }
        },
        {
          "name": "_key",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "SortOrder",
              "namespace": "_global.search._types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "HoltLinearModelSettings",
        "namespace": "_types.aggregations"
      },
      "properties": [
        {
          "name": "alpha",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "float",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "beta",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "float",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "HoltWintersModelSettings",
        "namespace": "_types.aggregations"
      },
      "properties": [
        {
          "name": "alpha",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "float",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "beta",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "float",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "gamma",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "float",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "pad",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "period",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "type",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "HoltWintersType",
              "namespace": "_types.aggregations"
            }
          }
        }
      ]
    },
    {
      "kind": "enum",
      "members": [
        {
          "identifier": "Additive",
          "name": "add"
        },
        {
          "identifier": "Multiplicative",
          "name": "mult"
        }
      ],
      "name": {
        "name": "HoltWintersType",
        "namespace": "_types.aggregations"
      }
    },
    {
      "inherits": {
        "type": {
          "name": "PipelineAggregationBase",
          "namespace": "_types.aggregations"
        }
      },
      "kind": "interface",
      "name": {
        "name": "InferenceAggregation",
        "namespace": "_types.aggregations"
      },
      "properties": [
        {
          "name": "model_id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "inference_config",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "InferenceConfigContainer",
              "namespace": "_types.aggregations"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "InferenceConfigContainer",
        "namespace": "_types.aggregations"
      },
      "properties": [
        {
          "description": "Regression configuration for inference.",
          "name": "regression",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "RegressionInferenceOptions",
              "namespace": "_types.aggregations"
            }
          }
        },
        {
          "description": "Classification configuration for inference.",
          "name": "classification",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ClassificationInferenceOptions",
              "namespace": "_types.aggregations"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "BucketAggregationBase",
          "namespace": "_types.aggregations"
        }
      },
      "kind": "interface",
      "name": {
        "name": "IpRangeAggregation",
        "namespace": "_types.aggregations"
      },
      "properties": [
        {
          "name": "field",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "ranges",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "IpRangeAggregationRange",
                "namespace": "_types.aggregations"
              }
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "IpRangeAggregationRange",
        "namespace": "_types.aggregations"
      },
      "properties": [
        {
          "name": "from",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "mask",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "to",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "AdditionalProperties"
      ],
      "behaviors": [
        {
          "generics": [
            {
              "kind": "instance_of",
              "type": {
                "name": "AggregateName",
                "namespace": "_types"
              }
            },
            {
              "kind": "instance_of",
              "type": {
                "name": "Aggregate",
                "namespace": "_types.aggregations"
              }
            }
          ],
          "type": {
            "name": "AdditionalProperties",
            "namespace": "_spec_utils"
          }
        }
      ],
      "kind": "interface",
      "name": {
        "name": "IpRangeBucket",
        "namespace": "_types.aggregations"
      },
      "properties": []
    },
    {
      "attachedBehaviors": [
        "AdditionalProperties"
      ],
      "behaviors": [
        {
          "generics": [
            {
              "kind": "instance_of",
              "type": {
                "name": "AggregateName",
                "namespace": "_types"
              }
            },
            {
              "kind": "instance_of",
              "type": {
                "name": "Aggregate",
                "namespace": "_types.aggregations"
              }
            }
          ],
          "type": {
            "name": "AdditionalProperties",
            "namespace": "_spec_utils"
          }
        }
      ],
      "generics": [
        {
          "name": "TKey",
          "namespace": "_types.aggregations"
        }
      ],
      "kind": "interface",
      "name": {
        "name": "KeyedBucket",
        "namespace": "_types.aggregations"
      },
      "properties": [
        {
          "name": "doc_count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "key",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "TKey",
              "namespace": "_types.aggregations"
            }
          }
        },
        {
          "name": "key_as_string",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "ValueAggregate",
          "namespace": "_types.aggregations"
        }
      },
      "kind": "interface",
      "name": {
        "name": "KeyedValueAggregate",
        "namespace": "_types.aggregations"
      },
      "properties": [
        {
          "name": "keys",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "LineStringGeoShape",
        "namespace": "_types.aggregations"
      },
      "properties": [
        {
          "name": "coordinates",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "GeoCoordinate",
                "namespace": "_types.query_dsl"
              }
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "Aggregation",
          "namespace": "_types.aggregations"
        }
      },
      "kind": "interface",
      "name": {
        "name": "MatrixAggregation",
        "namespace": "_types.aggregations"
      },
      "properties": [
        {
          "name": "fields",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Fields",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "missing",
          "required": false,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "Field",
                "namespace": "_types"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "double",
                "namespace": "_types"
              }
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "AggregateBase",
          "namespace": "_types.aggregations"
        }
      },
      "kind": "interface",
      "name": {
        "name": "MatrixStatsAggregate",
        "namespace": "_types.aggregations"
      },
      "properties": [
        {
          "name": "correlation",
          "required": true,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "double",
                "namespace": "_types"
              }
            }
          }
        },
        {
          "name": "covariance",
          "required": true,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "double",
                "namespace": "_types"
              }
            }
          }
        },
        {
          "name": "count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "kurtosis",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "mean",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "skewness",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "variance",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "name",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "MatrixAggregation",
          "namespace": "_types.aggregations"
        }
      },
      "kind": "interface",
      "name": {
        "name": "MatrixStatsAggregation",
        "namespace": "_types.aggregations"
      },
      "properties": [
        {
          "name": "mode",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "MatrixStatsMode",
              "namespace": "_types.aggregations"
            }
          }
        }
      ]
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "avg"
        },
        {
          "name": "min"
        },
        {
          "name": "max"
        },
        {
          "name": "sum"
        },
        {
          "name": "median"
        }
      ],
      "name": {
        "name": "MatrixStatsMode",
        "namespace": "_types.aggregations"
      }
    },
    {
      "inherits": {
        "type": {
          "name": "FormatMetricAggregationBase",
          "namespace": "_types.aggregations"
        }
      },
      "kind": "interface",
      "name": {
        "name": "MaxAggregation",
        "namespace": "_types.aggregations"
      },
      "properties": []
    },
    {
      "inherits": {
        "type": {
          "name": "PipelineAggregationBase",
          "namespace": "_types.aggregations"
        }
      },
      "kind": "interface",
      "name": {
        "name": "MaxBucketAggregation",
        "namespace": "_types.aggregations"
      },
      "properties": []
    },
    {
      "inherits": {
        "type": {
          "name": "FormatMetricAggregationBase",
          "namespace": "_types.aggregations"
        }
      },
      "kind": "interface",
      "name": {
        "name": "MedianAbsoluteDeviationAggregation",
        "namespace": "_types.aggregations"
      },
      "properties": [
        {
          "name": "compression",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "type_alias",
      "name": {
        "name": "MetricAggregate",
        "namespace": "_types.aggregations"
      },
      "type": {
        "items": [
          {
            "kind": "instance_of",
            "type": {
              "name": "ValueAggregate",
              "namespace": "_types.aggregations"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "BoxPlotAggregate",
              "namespace": "_types.aggregations"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "GeoBoundsAggregate",
              "namespace": "_types.aggregations"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "GeoCentroidAggregate",
              "namespace": "_types.aggregations"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "GeoLineAggregate",
              "namespace": "_types.aggregations"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "PercentilesAggregate",
              "namespace": "_types.aggregations"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "ScriptedMetricAggregate",
              "namespace": "_types.aggregations"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "StatsAggregate",
              "namespace": "_types.aggregations"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "StringStatsAggregate",
              "namespace": "_types.aggregations"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "TopHitsAggregate",
              "namespace": "_types.aggregations"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "TopMetricsAggregate",
              "namespace": "_types.aggregations"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "ExtendedStatsAggregate",
              "namespace": "_types.aggregations"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "TDigestPercentilesAggregate",
              "namespace": "_types.aggregations"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "HdrPercentilesAggregate",
              "namespace": "_types.aggregations"
            }
          }
        ],
        "kind": "union_of"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "MetricAggregationBase",
        "namespace": "_types.aggregations"
      },
      "properties": [
        {
          "name": "field",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "missing",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Missing",
              "namespace": "_types.aggregations"
            }
          }
        },
        {
          "name": "script",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Script",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "FormatMetricAggregationBase",
          "namespace": "_types.aggregations"
        }
      },
      "kind": "interface",
      "name": {
        "name": "MinAggregation",
        "namespace": "_types.aggregations"
      },
      "properties": []
    },
    {
      "inherits": {
        "type": {
          "name": "PipelineAggregationBase",
          "namespace": "_types.aggregations"
        }
      },
      "kind": "interface",
      "name": {
        "name": "MinBucketAggregation",
        "namespace": "_types.aggregations"
      },
      "properties": []
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "second"
        },
        {
          "name": "minute"
        },
        {
          "name": "hour"
        },
        {
          "name": "day"
        },
        {
          "name": "month"
        },
        {
          "name": "year"
        }
      ],
      "name": {
        "name": "MinimumInterval",
        "namespace": "_types.aggregations"
      }
    },
    {
      "kind": "type_alias",
      "name": {
        "name": "Missing",
        "namespace": "_types.aggregations"
      },
      "type": {
        "items": [
          {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        ],
        "kind": "union_of"
      }
    },
    {
      "inherits": {
        "type": {
          "name": "BucketAggregationBase",
          "namespace": "_types.aggregations"
        }
      },
      "kind": "interface",
      "name": {
        "name": "MissingAggregation",
        "namespace": "_types.aggregations"
      },
      "properties": [
        {
          "name": "field",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "missing",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Missing",
              "namespace": "_types.aggregations"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "PipelineAggregationBase",
          "namespace": "_types.aggregations"
        }
      },
      "kind": "interface",
      "name": {
        "name": "MovingAverageAggregation",
        "namespace": "_types.aggregations"
      },
      "properties": [
        {
          "name": "minimize",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "model",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "MovingAverageModel",
              "namespace": "_types.aggregations"
            }
          }
        },
        {
          "name": "settings",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "MovingAverageSettings",
              "namespace": "_types.aggregations"
            }
          }
        },
        {
          "name": "predict",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "window",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "linear"
        },
        {
          "name": "simple"
        },
        {
          "name": "ewma"
        },
        {
          "name": "holt"
        },
        {
          "name": "holt_winters"
        }
      ],
      "name": {
        "name": "MovingAverageModel",
        "namespace": "_types.aggregations"
      }
    },
    {
      "kind": "type_alias",
      "name": {
        "name": "MovingAverageSettings",
        "namespace": "_types.aggregations"
      },
      "type": {
        "items": [
          {
            "kind": "instance_of",
            "type": {
              "name": "EwmaModelSettings",
              "namespace": "_types.aggregations"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "HoltLinearModelSettings",
              "namespace": "_types.aggregations"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "HoltWintersModelSettings",
              "namespace": "_types.aggregations"
            }
          }
        ],
        "kind": "union_of"
      }
    },
    {
      "inherits": {
        "type": {
          "name": "PipelineAggregationBase",
          "namespace": "_types.aggregations"
        }
      },
      "kind": "interface",
      "name": {
        "name": "MovingFunctionAggregation",
        "namespace": "_types.aggregations"
      },
      "properties": [
        {
          "name": "script",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "shift",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "window",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "PipelineAggregationBase",
          "namespace": "_types.aggregations"
        }
      },
      "kind": "interface",
      "name": {
        "name": "MovingPercentilesAggregation",
        "namespace": "_types.aggregations"
      },
      "properties": [
        {
          "name": "window",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "shift",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "keyed",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "generics": [
        {
          "name": "TBucket",
          "namespace": "_types.aggregations"
        }
      ],
      "inherits": {
        "type": {
          "name": "AggregateBase",
          "namespace": "_types.aggregations"
        }
      },
      "kind": "interface",
      "name": {
        "name": "MultiBucketAggregate",
        "namespace": "_types.aggregations"
      },
      "properties": [
        {
          "name": "buckets",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "TBucket",
                "namespace": "_types.aggregations"
              }
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "MultiTermLookup",
        "namespace": "_types.aggregations"
      },
      "properties": [
        {
          "name": "field",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "BucketAggregationBase",
          "namespace": "_types.aggregations"
        }
      },
      "kind": "interface",
      "name": {
        "name": "MultiTermsAggregation",
        "namespace": "_types.aggregations"
      },
      "properties": [
        {
          "name": "terms",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "MultiTermLookup",
                "namespace": "_types.aggregations"
              }
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "MutualInformationHeuristic",
        "namespace": "_types.aggregations"
      },
      "properties": [
        {
          "name": "background_is_superset",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "include_negatives",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "BucketAggregationBase",
          "namespace": "_types.aggregations"
        }
      },
      "kind": "interface",
      "name": {
        "name": "NestedAggregation",
        "namespace": "_types.aggregations"
      },
      "properties": [
        {
          "name": "path",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "PipelineAggregationBase",
          "namespace": "_types.aggregations"
        }
      },
      "kind": "interface",
      "name": {
        "name": "NormalizeAggregation",
        "namespace": "_types.aggregations"
      },
      "properties": [
        {
          "name": "method",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "NormalizeMethod",
              "namespace": "_types.aggregations"
            }
          }
        }
      ]
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "rescale_0_1"
        },
        {
          "name": "rescale_0_100"
        },
        {
          "name": "percent_of_sum"
        },
        {
          "name": "mean"
        },
        {
          "identifier": "z_score",
          "name": "z-score"
        },
        {
          "name": "softmax"
        }
      ],
      "name": {
        "name": "NormalizeMethod",
        "namespace": "_types.aggregations"
      }
    },
    {
      "inherits": {
        "type": {
          "name": "BucketAggregationBase",
          "namespace": "_types.aggregations"
        }
      },
      "kind": "interface",
      "name": {
        "name": "ParentAggregation",
        "namespace": "_types.aggregations"
      },
      "properties": [
        {
          "name": "type",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "RelationName",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "PercentageScoreHeuristic",
        "namespace": "_types.aggregations"
      },
      "properties": []
    },
    {
      "kind": "interface",
      "name": {
        "name": "PercentileItem",
        "namespace": "_types.aggregations"
      },
      "properties": [
        {
          "name": "percentile",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "value",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "FormatMetricAggregationBase",
          "namespace": "_types.aggregations"
        }
      },
      "kind": "interface",
      "name": {
        "name": "PercentileRanksAggregation",
        "namespace": "_types.aggregations"
      },
      "properties": [
        {
          "name": "keyed",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "values",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "double",
                "namespace": "_types"
              }
            }
          }
        },
        {
          "name": "hdr",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "HdrMethod",
              "namespace": "_types.aggregations"
            }
          }
        },
        {
          "name": "tdigest",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "TDigest",
              "namespace": "_types.aggregations"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "AggregateBase",
          "namespace": "_types.aggregations"
        }
      },
      "kind": "interface",
      "name": {
        "name": "PercentilesAggregate",
        "namespace": "_types.aggregations"
      },
      "properties": [
        {
          "name": "items",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "PercentileItem",
                "namespace": "_types.aggregations"
              }
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "FormatMetricAggregationBase",
          "namespace": "_types.aggregations"
        }
      },
      "kind": "interface",
      "name": {
        "name": "PercentilesAggregation",
        "namespace": "_types.aggregations"
      },
      "properties": [
        {
          "name": "keyed",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "percents",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "double",
                "namespace": "_types"
              }
            }
          }
        },
        {
          "name": "hdr",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "HdrMethod",
              "namespace": "_types.aggregations"
            }
          }
        },
        {
          "name": "tdigest",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "TDigest",
              "namespace": "_types.aggregations"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "PipelineAggregationBase",
          "namespace": "_types.aggregations"
        }
      },
      "kind": "interface",
      "name": {
        "name": "PercentilesBucketAggregation",
        "namespace": "_types.aggregations"
      },
      "properties": [
        {
          "name": "percents",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "double",
                "namespace": "_types"
              }
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "Aggregation",
          "namespace": "_types.aggregations"
        }
      },
      "kind": "interface",
      "name": {
        "name": "PipelineAggregationBase",
        "namespace": "_types.aggregations"
      },
      "properties": [
        {
          "name": "buckets_path",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "BucketsPath",
              "namespace": "_types.aggregations"
            }
          }
        },
        {
          "name": "format",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "gap_policy",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "GapPolicy",
              "namespace": "_types.aggregations"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "BucketAggregationBase",
          "namespace": "_types.aggregations"
        }
      },
      "kind": "interface",
      "name": {
        "name": "RangeAggregation",
        "namespace": "_types.aggregations"
      },
      "properties": [
        {
          "name": "field",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "ranges",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "AggregationRange",
                "namespace": "_types.aggregations"
              }
            }
          }
        },
        {
          "name": "script",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Script",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "keyed",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "AdditionalProperties"
      ],
      "behaviors": [
        {
          "generics": [
            {
              "kind": "instance_of",
              "type": {
                "name": "AggregateName",
                "namespace": "_types"
              }
            },
            {
              "kind": "instance_of",
              "type": {
                "name": "Aggregate",
                "namespace": "_types.aggregations"
              }
            }
          ],
          "type": {
            "name": "AdditionalProperties",
            "namespace": "_spec_utils"
          }
        }
      ],
      "kind": "interface",
      "name": {
        "name": "RangeBucket",
        "namespace": "_types.aggregations"
      },
      "properties": []
    },
    {
      "inherits": {
        "type": {
          "name": "BucketAggregationBase",
          "namespace": "_types.aggregations"
        }
      },
      "kind": "interface",
      "name": {
        "name": "RareTermsAggregation",
        "namespace": "_types.aggregations"
      },
      "properties": [
        {
          "name": "exclude",
          "required": false,
          "type": {
            "items": [
              {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              },
              {
                "kind": "array_of",
                "value": {
                  "kind": "instance_of",
                  "type": {
                    "name": "string",
                    "namespace": "internal"
                  }
                }
              }
            ],
            "kind": "union_of"
          }
        },
        {
          "name": "field",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "include",
          "required": false,
          "type": {
            "items": [
              {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              },
              {
                "kind": "array_of",
                "value": {
                  "kind": "instance_of",
                  "type": {
                    "name": "string",
                    "namespace": "internal"
                  }
                }
              },
              {
                "kind": "instance_of",
                "type": {
                  "name": "TermsInclude",
                  "namespace": "_types.aggregations"
                }
              }
            ],
            "kind": "union_of"
          }
        },
        {
          "name": "max_doc_count",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "missing",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Missing",
              "namespace": "_types.aggregations"
            }
          }
        },
        {
          "name": "precision",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "value_type",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "AdditionalProperties"
      ],
      "behaviors": [
        {
          "generics": [
            {
              "kind": "instance_of",
              "type": {
                "name": "AggregateName",
                "namespace": "_types"
              }
            },
            {
              "kind": "instance_of",
              "type": {
                "name": "Aggregate",
                "namespace": "_types.aggregations"
              }
            }
          ],
          "type": {
            "name": "AdditionalProperties",
            "namespace": "_spec_utils"
          }
        }
      ],
      "generics": [
        {
          "name": "TKey",
          "namespace": "_types.aggregations"
        }
      ],
      "kind": "interface",
      "name": {
        "name": "RareTermsBucket",
        "namespace": "_types.aggregations"
      },
      "properties": []
    },
    {
      "inherits": {
        "type": {
          "name": "FormatMetricAggregationBase",
          "namespace": "_types.aggregations"
        }
      },
      "kind": "interface",
      "name": {
        "name": "RateAggregation",
        "namespace": "_types.aggregations"
      },
      "properties": [
        {
          "name": "unit",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DateInterval",
              "namespace": "_types.aggregations"
            }
          }
        },
        {
          "name": "mode",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "RateMode",
              "namespace": "_types.aggregations"
            }
          }
        }
      ]
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "sum"
        },
        {
          "name": "value_count"
        }
      ],
      "name": {
        "name": "RateMode",
        "namespace": "_types.aggregations"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "RegressionInferenceOptions",
        "namespace": "_types.aggregations"
      },
      "properties": [
        {
          "description": "The field that is added to incoming documents to contain the inference prediction. Defaults to predicted_value.",
          "name": "results_field",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Specifies the maximum number of feature importance values per document. By default, it is zero and no feature importance calculation occurs.",
          "docUrl": "https://www.elastic.co/guide/en/machine-learning/7.12/ml-feature-importance.html",
          "name": "num_top_feature_importance_values",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "BucketAggregationBase",
          "namespace": "_types.aggregations"
        }
      },
      "kind": "interface",
      "name": {
        "name": "ReverseNestedAggregation",
        "namespace": "_types.aggregations"
      },
      "properties": [
        {
          "name": "path",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "BucketAggregationBase",
          "namespace": "_types.aggregations"
        }
      },
      "kind": "interface",
      "name": {
        "name": "SamplerAggregation",
        "namespace": "_types.aggregations"
      },
      "properties": [
        {
          "name": "shard_size",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "map"
        },
        {
          "name": "global_ordinals"
        },
        {
          "name": "bytes_hash"
        }
      ],
      "name": {
        "name": "SamplerAggregationExecutionHint",
        "namespace": "_types.aggregations"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "ScriptedHeuristic",
        "namespace": "_types.aggregations"
      },
      "properties": [
        {
          "name": "script",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Script",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "AggregateBase",
          "namespace": "_types.aggregations"
        }
      },
      "kind": "interface",
      "name": {
        "name": "ScriptedMetricAggregate",
        "namespace": "_types.aggregations"
      },
      "properties": [
        {
          "name": "value",
          "required": true,
          "type": {
            "kind": "user_defined_value"
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "MetricAggregationBase",
          "namespace": "_types.aggregations"
        }
      },
      "kind": "interface",
      "name": {
        "name": "ScriptedMetricAggregation",
        "namespace": "_types.aggregations"
      },
      "properties": [
        {
          "name": "combine_script",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Script",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "init_script",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Script",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "map_script",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Script",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "params",
          "required": false,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "user_defined_value"
            }
          }
        },
        {
          "name": "reduce_script",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Script",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "PipelineAggregationBase",
          "namespace": "_types.aggregations"
        }
      },
      "kind": "interface",
      "name": {
        "name": "SerialDifferencingAggregation",
        "namespace": "_types.aggregations"
      },
      "properties": [
        {
          "name": "lag",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "generics": [
        {
          "name": "TKey",
          "namespace": "_types.aggregations"
        }
      ],
      "inherits": {
        "generics": [
          {
            "kind": "instance_of",
            "type": {
              "name": "TKey",
              "namespace": "_types.aggregations"
            }
          }
        ],
        "type": {
          "name": "MultiBucketAggregate",
          "namespace": "_types.aggregations"
        }
      },
      "kind": "interface",
      "name": {
        "name": "SignificantTermsAggregate",
        "namespace": "_types.aggregations"
      },
      "properties": [
        {
          "name": "bg_count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "doc_count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "BucketAggregationBase",
          "namespace": "_types.aggregations"
        }
      },
      "kind": "interface",
      "name": {
        "name": "SignificantTermsAggregation",
        "namespace": "_types.aggregations"
      },
      "properties": [
        {
          "name": "background_filter",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "QueryContainer",
              "namespace": "_types.query_dsl"
            }
          }
        },
        {
          "name": "chi_square",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ChiSquareHeuristic",
              "namespace": "_types.aggregations"
            }
          }
        },
        {
          "name": "exclude",
          "required": false,
          "type": {
            "items": [
              {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              },
              {
                "kind": "array_of",
                "value": {
                  "kind": "instance_of",
                  "type": {
                    "name": "string",
                    "namespace": "internal"
                  }
                }
              }
            ],
            "kind": "union_of"
          }
        },
        {
          "name": "execution_hint",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "TermsAggregationExecutionHint",
              "namespace": "_types.aggregations"
            }
          }
        },
        {
          "name": "field",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "gnd",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "GoogleNormalizedDistanceHeuristic",
              "namespace": "_types.aggregations"
            }
          }
        },
        {
          "name": "include",
          "required": false,
          "type": {
            "items": [
              {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              },
              {
                "kind": "array_of",
                "value": {
                  "kind": "instance_of",
                  "type": {
                    "name": "string",
                    "namespace": "internal"
                  }
                }
              }
            ],
            "kind": "union_of"
          }
        },
        {
          "name": "min_doc_count",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "mutual_information",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "MutualInformationHeuristic",
              "namespace": "_types.aggregations"
            }
          }
        },
        {
          "name": "percentage",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "PercentageScoreHeuristic",
              "namespace": "_types.aggregations"
            }
          }
        },
        {
          "name": "script_heuristic",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ScriptedHeuristic",
              "namespace": "_types.aggregations"
            }
          }
        },
        {
          "name": "shard_min_doc_count",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "shard_size",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "size",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "AdditionalProperties"
      ],
      "behaviors": [
        {
          "generics": [
            {
              "kind": "instance_of",
              "type": {
                "name": "AggregateName",
                "namespace": "_types"
              }
            },
            {
              "kind": "instance_of",
              "type": {
                "name": "Aggregate",
                "namespace": "_types.aggregations"
              }
            }
          ],
          "type": {
            "name": "AdditionalProperties",
            "namespace": "_spec_utils"
          }
        }
      ],
      "generics": [
        {
          "name": "TKey",
          "namespace": "_types.aggregations"
        }
      ],
      "kind": "interface",
      "name": {
        "name": "SignificantTermsBucket",
        "namespace": "_types.aggregations"
      },
      "properties": []
    },
    {
      "inherits": {
        "type": {
          "name": "BucketAggregationBase",
          "namespace": "_types.aggregations"
        }
      },
      "kind": "interface",
      "name": {
        "name": "SignificantTextAggregation",
        "namespace": "_types.aggregations"
      },
      "properties": [
        {
          "name": "background_filter",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "QueryContainer",
              "namespace": "_types.query_dsl"
            }
          }
        },
        {
          "name": "chi_square",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ChiSquareHeuristic",
              "namespace": "_types.aggregations"
            }
          }
        },
        {
          "name": "exclude",
          "required": false,
          "type": {
            "items": [
              {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              },
              {
                "kind": "array_of",
                "value": {
                  "kind": "instance_of",
                  "type": {
                    "name": "string",
                    "namespace": "internal"
                  }
                }
              }
            ],
            "kind": "union_of"
          }
        },
        {
          "name": "execution_hint",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "TermsAggregationExecutionHint",
              "namespace": "_types.aggregations"
            }
          }
        },
        {
          "name": "field",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "filter_duplicate_text",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "gnd",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "GoogleNormalizedDistanceHeuristic",
              "namespace": "_types.aggregations"
            }
          }
        },
        {
          "name": "include",
          "required": false,
          "type": {
            "items": [
              {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              },
              {
                "kind": "array_of",
                "value": {
                  "kind": "instance_of",
                  "type": {
                    "name": "string",
                    "namespace": "internal"
                  }
                }
              }
            ],
            "kind": "union_of"
          }
        },
        {
          "name": "min_doc_count",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "mutual_information",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "MutualInformationHeuristic",
              "namespace": "_types.aggregations"
            }
          }
        },
        {
          "name": "percentage",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "PercentageScoreHeuristic",
              "namespace": "_types.aggregations"
            }
          }
        },
        {
          "name": "script_heuristic",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ScriptedHeuristic",
              "namespace": "_types.aggregations"
            }
          }
        },
        {
          "name": "shard_min_doc_count",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "shard_size",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "size",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "source_fields",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Fields",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "AdditionalProperties"
      ],
      "behaviors": [
        {
          "generics": [
            {
              "kind": "instance_of",
              "type": {
                "name": "AggregateName",
                "namespace": "_types"
              }
            },
            {
              "kind": "instance_of",
              "type": {
                "name": "Aggregate",
                "namespace": "_types.aggregations"
              }
            }
          ],
          "type": {
            "name": "AdditionalProperties",
            "namespace": "_spec_utils"
          }
        }
      ],
      "inherits": {
        "type": {
          "name": "AggregateBase",
          "namespace": "_types.aggregations"
        }
      },
      "kind": "interface",
      "name": {
        "name": "SingleBucketAggregate",
        "namespace": "_types.aggregations"
      },
      "properties": [
        {
          "name": "doc_count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "StandardDeviationBounds",
        "namespace": "_types.aggregations"
      },
      "properties": [
        {
          "name": "lower",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "upper",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "lower_population",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "upper_population",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "lower_sampling",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "upper_sampling",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "AggregateBase",
          "namespace": "_types.aggregations"
        }
      },
      "kind": "interface",
      "name": {
        "name": "StatsAggregate",
        "namespace": "_types.aggregations"
      },
      "properties": [
        {
          "name": "count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "sum",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "avg",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "max",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "min",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "FormatMetricAggregationBase",
          "namespace": "_types.aggregations"
        }
      },
      "kind": "interface",
      "name": {
        "name": "StatsAggregation",
        "namespace": "_types.aggregations"
      },
      "properties": []
    },
    {
      "inherits": {
        "type": {
          "name": "PipelineAggregationBase",
          "namespace": "_types.aggregations"
        }
      },
      "kind": "interface",
      "name": {
        "name": "StatsBucketAggregation",
        "namespace": "_types.aggregations"
      },
      "properties": []
    },
    {
      "inherits": {
        "type": {
          "name": "AggregateBase",
          "namespace": "_types.aggregations"
        }
      },
      "kind": "interface",
      "name": {
        "name": "StringStatsAggregate",
        "namespace": "_types.aggregations"
      },
      "properties": [
        {
          "name": "count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "min_length",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "max_length",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "avg_length",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "entropy",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "distribution",
          "required": false,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "double",
                "namespace": "_types"
              }
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "MetricAggregationBase",
          "namespace": "_types.aggregations"
        }
      },
      "kind": "interface",
      "name": {
        "name": "StringStatsAggregation",
        "namespace": "_types.aggregations"
      },
      "properties": [
        {
          "name": "show_distribution",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "FormatMetricAggregationBase",
          "namespace": "_types.aggregations"
        }
      },
      "kind": "interface",
      "name": {
        "name": "SumAggregation",
        "namespace": "_types.aggregations"
      },
      "properties": []
    },
    {
      "inherits": {
        "type": {
          "name": "PipelineAggregationBase",
          "namespace": "_types.aggregations"
        }
      },
      "kind": "interface",
      "name": {
        "name": "SumBucketAggregation",
        "namespace": "_types.aggregations"
      },
      "properties": []
    },
    {
      "kind": "interface",
      "name": {
        "name": "TDigest",
        "namespace": "_types.aggregations"
      },
      "properties": [
        {
          "name": "compression",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "AggregateBase",
          "namespace": "_types.aggregations"
        }
      },
      "kind": "interface",
      "name": {
        "name": "TDigestPercentilesAggregate",
        "namespace": "_types.aggregations"
      },
      "properties": [
        {
          "name": "values",
          "required": true,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "double",
                "namespace": "_types"
              }
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "Aggregation",
          "namespace": "_types.aggregations"
        }
      },
      "kind": "interface",
      "name": {
        "name": "TTestAggregation",
        "namespace": "_types.aggregations"
      },
      "properties": [
        {
          "name": "a",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "TestPopulation",
              "namespace": "_types.aggregations"
            }
          }
        },
        {
          "name": "b",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "TestPopulation",
              "namespace": "_types.aggregations"
            }
          }
        },
        {
          "name": "type",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "TTestType",
              "namespace": "_types.aggregations"
            }
          }
        }
      ]
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "paired"
        },
        {
          "name": "homoscedastic"
        },
        {
          "name": "heteroscedastic"
        }
      ],
      "name": {
        "name": "TTestType",
        "namespace": "_types.aggregations"
      }
    },
    {
      "generics": [
        {
          "name": "TKey",
          "namespace": "_types.aggregations"
        }
      ],
      "inherits": {
        "generics": [
          {
            "kind": "instance_of",
            "type": {
              "name": "TKey",
              "namespace": "_types.aggregations"
            }
          }
        ],
        "type": {
          "name": "MultiBucketAggregate",
          "namespace": "_types.aggregations"
        }
      },
      "kind": "interface",
      "name": {
        "name": "TermsAggregate",
        "namespace": "_types.aggregations"
      },
      "properties": [
        {
          "name": "doc_count_error_upper_bound",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "sum_other_doc_count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "BucketAggregationBase",
          "namespace": "_types.aggregations"
        }
      },
      "kind": "interface",
      "name": {
        "name": "TermsAggregation",
        "namespace": "_types.aggregations"
      },
      "properties": [
        {
          "name": "collect_mode",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "TermsAggregationCollectMode",
              "namespace": "_types.aggregations"
            }
          }
        },
        {
          "name": "exclude",
          "required": false,
          "type": {
            "items": [
              {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              },
              {
                "kind": "array_of",
                "value": {
                  "kind": "instance_of",
                  "type": {
                    "name": "string",
                    "namespace": "internal"
                  }
                }
              }
            ],
            "kind": "union_of"
          }
        },
        {
          "name": "execution_hint",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "TermsAggregationExecutionHint",
              "namespace": "_types.aggregations"
            }
          }
        },
        {
          "name": "field",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "include",
          "required": false,
          "type": {
            "items": [
              {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              },
              {
                "kind": "array_of",
                "value": {
                  "kind": "instance_of",
                  "type": {
                    "name": "string",
                    "namespace": "internal"
                  }
                }
              },
              {
                "kind": "instance_of",
                "type": {
                  "name": "TermsInclude",
                  "namespace": "_types.aggregations"
                }
              }
            ],
            "kind": "union_of"
          }
        },
        {
          "name": "min_doc_count",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "missing",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Missing",
              "namespace": "_types.aggregations"
            }
          }
        },
        {
          "name": "missing_bucket",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "value_type",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "order",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "TermsAggregationOrder",
              "namespace": "_types.aggregations"
            }
          }
        },
        {
          "name": "script",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Script",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "shard_size",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "show_term_doc_count_error",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "size",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "depth_first"
        },
        {
          "name": "breadth_first"
        }
      ],
      "name": {
        "name": "TermsAggregationCollectMode",
        "namespace": "_types.aggregations"
      }
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "map"
        },
        {
          "name": "global_ordinals"
        },
        {
          "name": "global_ordinals_hash"
        },
        {
          "name": "global_ordinals_low_cardinality"
        }
      ],
      "name": {
        "name": "TermsAggregationExecutionHint",
        "namespace": "_types.aggregations"
      }
    },
    {
      "kind": "type_alias",
      "name": {
        "name": "TermsAggregationOrder",
        "namespace": "_types.aggregations"
      },
      "type": {
        "items": [
          {
            "kind": "instance_of",
            "type": {
              "name": "SortOrder",
              "namespace": "_global.search._types"
            }
          },
          {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "SortOrder",
                "namespace": "_global.search._types"
              }
            }
          },
          {
            "kind": "array_of",
            "value": {
              "key": {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              },
              "kind": "dictionary_of",
              "singleKey": false,
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "SortOrder",
                  "namespace": "_global.search._types"
                }
              }
            }
          }
        ],
        "kind": "union_of"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "TermsInclude",
        "namespace": "_types.aggregations"
      },
      "properties": [
        {
          "name": "num_partitions",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "partition",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "TestPopulation",
        "namespace": "_types.aggregations"
      },
      "properties": [
        {
          "name": "field",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "script",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Script",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "filter",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "QueryContainer",
              "namespace": "_types.query_dsl"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "AggregateBase",
          "namespace": "_types.aggregations"
        }
      },
      "kind": "interface",
      "name": {
        "name": "TopHitsAggregate",
        "namespace": "_types.aggregations"
      },
      "properties": [
        {
          "name": "hits",
          "required": true,
          "type": {
            "generics": [
              {
                "key": {
                  "kind": "instance_of",
                  "type": {
                    "name": "string",
                    "namespace": "internal"
                  }
                },
                "kind": "dictionary_of",
                "singleKey": false,
                "value": {
                  "kind": "user_defined_value"
                }
              }
            ],
            "kind": "instance_of",
            "type": {
              "name": "HitsMetadata",
              "namespace": "_global.search._types"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "MetricAggregationBase",
          "namespace": "_types.aggregations"
        }
      },
      "kind": "interface",
      "name": {
        "name": "TopHitsAggregation",
        "namespace": "_types.aggregations"
      },
      "properties": [
        {
          "name": "docvalue_fields",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Fields",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "explain",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "from",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "highlight",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Highlight",
              "namespace": "_global.search._types"
            }
          }
        },
        {
          "name": "script_fields",
          "required": false,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "ScriptField",
                "namespace": "_types"
              }
            }
          }
        },
        {
          "name": "size",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "sort",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Sort",
              "namespace": "_global.search._types"
            }
          }
        },
        {
          "name": "_source",
          "required": false,
          "type": {
            "items": [
              {
                "kind": "instance_of",
                "type": {
                  "name": "boolean",
                  "namespace": "internal"
                }
              },
              {
                "kind": "instance_of",
                "type": {
                  "name": "SourceFilter",
                  "namespace": "_global.search._types"
                }
              },
              {
                "kind": "instance_of",
                "type": {
                  "name": "Fields",
                  "namespace": "_types"
                }
              }
            ],
            "kind": "union_of"
          }
        },
        {
          "name": "stored_fields",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Fields",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "track_scores",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "version",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "seq_no_primary_term",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "TopMetrics",
        "namespace": "_types.aggregations"
      },
      "properties": [
        {
          "name": "sort",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "items": [
                {
                  "kind": "instance_of",
                  "type": {
                    "name": "long",
                    "namespace": "_types"
                  }
                },
                {
                  "kind": "instance_of",
                  "type": {
                    "name": "double",
                    "namespace": "_types"
                  }
                },
                {
                  "kind": "instance_of",
                  "type": {
                    "name": "string",
                    "namespace": "internal"
                  }
                }
              ],
              "kind": "union_of"
            }
          }
        },
        {
          "name": "metrics",
          "required": true,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "items": [
                {
                  "kind": "instance_of",
                  "type": {
                    "name": "long",
                    "namespace": "_types"
                  }
                },
                {
                  "kind": "instance_of",
                  "type": {
                    "name": "double",
                    "namespace": "_types"
                  }
                },
                {
                  "kind": "instance_of",
                  "type": {
                    "name": "string",
                    "namespace": "internal"
                  }
                }
              ],
              "kind": "union_of"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "AggregateBase",
          "namespace": "_types.aggregations"
        }
      },
      "kind": "interface",
      "name": {
        "name": "TopMetricsAggregate",
        "namespace": "_types.aggregations"
      },
      "properties": [
        {
          "name": "top",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "TopMetrics",
                "namespace": "_types.aggregations"
              }
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "MetricAggregationBase",
          "namespace": "_types.aggregations"
        }
      },
      "kind": "interface",
      "name": {
        "name": "TopMetricsAggregation",
        "namespace": "_types.aggregations"
      },
      "properties": [
        {
          "name": "metrics",
          "required": false,
          "type": {
            "items": [
              {
                "kind": "instance_of",
                "type": {
                  "name": "TopMetricsValue",
                  "namespace": "_types.aggregations"
                }
              },
              {
                "kind": "array_of",
                "value": {
                  "kind": "instance_of",
                  "type": {
                    "name": "TopMetricsValue",
                    "namespace": "_types.aggregations"
                  }
                }
              }
            ],
            "kind": "union_of"
          }
        },
        {
          "name": "size",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "sort",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Sort",
              "namespace": "_global.search._types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "TopMetricsValue",
        "namespace": "_types.aggregations"
      },
      "properties": [
        {
          "name": "field",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "AggregateBase",
          "namespace": "_types.aggregations"
        }
      },
      "kind": "interface",
      "name": {
        "name": "ValueAggregate",
        "namespace": "_types.aggregations"
      },
      "properties": [
        {
          "name": "value",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "value_as_string",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "FormattableMetricAggregation",
          "namespace": "_types.aggregations"
        }
      },
      "kind": "interface",
      "name": {
        "name": "ValueCountAggregation",
        "namespace": "_types.aggregations"
      },
      "properties": []
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "string"
        },
        {
          "name": "long"
        },
        {
          "name": "double"
        },
        {
          "name": "number"
        },
        {
          "name": "date"
        },
        {
          "name": "date_nanos"
        },
        {
          "name": "ip"
        },
        {
          "name": "numeric"
        },
        {
          "name": "geo_point"
        },
        {
          "name": "boolean"
        }
      ],
      "name": {
        "name": "ValueType",
        "namespace": "_types.aggregations"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "VariableWidthHistogramAggregation",
        "namespace": "_types.aggregations"
      },
      "properties": [
        {
          "name": "field",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "buckets",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "shard_size",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "initial_buffer",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "Aggregation",
          "namespace": "_types.aggregations"
        }
      },
      "kind": "interface",
      "name": {
        "name": "WeightedAverageAggregation",
        "namespace": "_types.aggregations"
      },
      "properties": [
        {
          "name": "format",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "value",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "WeightedAverageValue",
              "namespace": "_types.aggregations"
            }
          }
        },
        {
          "name": "value_type",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ValueType",
              "namespace": "_types.aggregations"
            }
          }
        },
        {
          "name": "weight",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "WeightedAverageValue",
              "namespace": "_types.aggregations"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "WeightedAverageValue",
        "namespace": "_types.aggregations"
      },
      "properties": [
        {
          "name": "field",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "missing",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "script",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Script",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "type_alias",
      "name": {
        "name": "Analyzer",
        "namespace": "_types.analysis"
      },
      "type": {
        "items": [
          {
            "kind": "instance_of",
            "type": {
              "name": "CustomAnalyzer",
              "namespace": "_types.analysis"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "FingerprintAnalyzer",
              "namespace": "_types.analysis"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "KeywordAnalyzer",
              "namespace": "_types.analysis"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "LanguageAnalyzer",
              "namespace": "_types.analysis"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "NoriAnalyzer",
              "namespace": "_types.analysis"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "PatternAnalyzer",
              "namespace": "_types.analysis"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "SimpleAnalyzer",
              "namespace": "_types.analysis"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "StandardAnalyzer",
              "namespace": "_types.analysis"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "StopAnalyzer",
              "namespace": "_types.analysis"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "WhitespaceAnalyzer",
              "namespace": "_types.analysis"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "IcuAnalyzer",
              "namespace": "_types.analysis"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "KuromojiAnalyzer",
              "namespace": "_types.analysis"
            }
          }
        ],
        "kind": "union_of"
      },
      "variants": {
        "kind": "internal_tag",
        "tag": "type"
      }
    },
    {
      "inherits": {
        "type": {
          "name": "TokenFilterBase",
          "namespace": "_types.analysis"
        }
      },
      "kind": "interface",
      "name": {
        "name": "AsciiFoldingTokenFilter",
        "namespace": "_types.analysis"
      },
      "properties": [
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "literal_value",
            "value": "asciifolding"
          }
        },
        {
          "name": "preserve_original",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "type_alias",
      "name": {
        "name": "CharFilter",
        "namespace": "_types.analysis"
      },
      "type": {
        "items": [
          {
            "kind": "instance_of",
            "type": {
              "name": "HtmlStripCharFilter",
              "namespace": "_types.analysis"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "MappingCharFilter",
              "namespace": "_types.analysis"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "PatternReplaceTokenFilter",
              "namespace": "_types.analysis"
            }
          }
        ],
        "kind": "union_of"
      },
      "variants": {
        "kind": "internal_tag",
        "tag": "type"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "CharFilterBase",
        "namespace": "_types.analysis"
      },
      "properties": [
        {
          "name": "version",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "VersionString",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "TokenizerBase",
          "namespace": "_types.analysis"
        }
      },
      "kind": "interface",
      "name": {
        "name": "CharGroupTokenizer",
        "namespace": "_types.analysis"
      },
      "properties": [
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "literal_value",
            "value": "char_group"
          }
        },
        {
          "name": "tokenize_on_chars",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "TokenFilterBase",
          "namespace": "_types.analysis"
        }
      },
      "kind": "interface",
      "name": {
        "name": "CommonGramsTokenFilter",
        "namespace": "_types.analysis"
      },
      "properties": [
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "literal_value",
            "value": "common_grams"
          }
        },
        {
          "name": "common_words",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        },
        {
          "name": "common_words_path",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "ignore_case",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "query_mode",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "TokenFilterBase",
          "namespace": "_types.analysis"
        }
      },
      "kind": "interface",
      "name": {
        "name": "CompoundWordTokenFilterBase",
        "namespace": "_types.analysis"
      },
      "properties": [
        {
          "name": "hyphenation_patterns_path",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "max_subword_size",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "min_subword_size",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "min_word_size",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "only_longest_match",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "word_list",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        },
        {
          "name": "word_list_path",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "TokenFilterBase",
          "namespace": "_types.analysis"
        }
      },
      "kind": "interface",
      "name": {
        "name": "ConditionTokenFilter",
        "namespace": "_types.analysis"
      },
      "properties": [
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "literal_value",
            "value": "condition"
          }
        },
        {
          "name": "filter",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        },
        {
          "name": "script",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Script",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "CustomAnalyzer",
        "namespace": "_types.analysis"
      },
      "properties": [
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "literal_value",
            "value": "custom"
          }
        },
        {
          "name": "char_filter",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        },
        {
          "name": "filter",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        },
        {
          "name": "position_increment_gap",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "position_offset_gap",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "tokenizer",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "CustomNormalizer",
        "namespace": "_types.analysis"
      },
      "properties": [
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "literal_value",
            "value": "custom"
          }
        },
        {
          "name": "char_filter",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        },
        {
          "name": "filter",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        }
      ]
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "int"
        },
        {
          "name": "float"
        },
        {
          "name": "identity"
        }
      ],
      "name": {
        "name": "DelimitedPayloadEncoding",
        "namespace": "_types.analysis"
      }
    },
    {
      "inherits": {
        "type": {
          "name": "TokenFilterBase",
          "namespace": "_types.analysis"
        }
      },
      "kind": "interface",
      "name": {
        "name": "DelimitedPayloadTokenFilter",
        "namespace": "_types.analysis"
      },
      "properties": [
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "literal_value",
            "value": "delimited_payload"
          }
        },
        {
          "name": "delimiter",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "encoding",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DelimitedPayloadEncoding",
              "namespace": "_types.analysis"
            }
          }
        }
      ]
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "front"
        },
        {
          "name": "back"
        }
      ],
      "name": {
        "name": "EdgeNGramSide",
        "namespace": "_types.analysis"
      }
    },
    {
      "inherits": {
        "type": {
          "name": "TokenFilterBase",
          "namespace": "_types.analysis"
        }
      },
      "kind": "interface",
      "name": {
        "name": "EdgeNGramTokenFilter",
        "namespace": "_types.analysis"
      },
      "properties": [
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "literal_value",
            "value": "edge_ngram"
          }
        },
        {
          "name": "max_gram",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "min_gram",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "side",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "EdgeNGramSide",
              "namespace": "_types.analysis"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "TokenizerBase",
          "namespace": "_types.analysis"
        }
      },
      "kind": "interface",
      "name": {
        "name": "EdgeNGramTokenizer",
        "namespace": "_types.analysis"
      },
      "properties": [
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "literal_value",
            "value": "edge_ngram"
          }
        },
        {
          "name": "custom_token_chars",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "max_gram",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "min_gram",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "token_chars",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "TokenChar",
                "namespace": "_types.analysis"
              }
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "TokenFilterBase",
          "namespace": "_types.analysis"
        }
      },
      "kind": "interface",
      "name": {
        "name": "ElisionTokenFilter",
        "namespace": "_types.analysis"
      },
      "properties": [
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "literal_value",
            "value": "elision"
          }
        },
        {
          "name": "articles",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        },
        {
          "name": "articles_case",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "FingerprintAnalyzer",
        "namespace": "_types.analysis"
      },
      "properties": [
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "literal_value",
            "value": "fingerprint"
          }
        },
        {
          "name": "version",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "VersionString",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "max_output_size",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "preserve_original",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "separator",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "stopwords",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "StopWords",
              "namespace": "_types.analysis"
            }
          }
        },
        {
          "name": "stopwords_path",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "TokenFilterBase",
          "namespace": "_types.analysis"
        }
      },
      "kind": "interface",
      "name": {
        "name": "FingerprintTokenFilter",
        "namespace": "_types.analysis"
      },
      "properties": [
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "literal_value",
            "value": "fingerprint"
          }
        },
        {
          "name": "max_output_size",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "separator",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "CharFilterBase",
          "namespace": "_types.analysis"
        }
      },
      "kind": "interface",
      "name": {
        "name": "HtmlStripCharFilter",
        "namespace": "_types.analysis"
      },
      "properties": [
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "literal_value",
            "value": "html_strip"
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "TokenFilterBase",
          "namespace": "_types.analysis"
        }
      },
      "kind": "interface",
      "name": {
        "name": "HunspellTokenFilter",
        "namespace": "_types.analysis"
      },
      "properties": [
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "literal_value",
            "value": "hunspell"
          }
        },
        {
          "name": "dedup",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "dictionary",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "locale",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "longest_only",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "CompoundWordTokenFilterBase",
          "namespace": "_types.analysis"
        }
      },
      "kind": "interface",
      "name": {
        "name": "HyphenationDecompounderTokenFilter",
        "namespace": "_types.analysis"
      },
      "properties": [
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "literal_value",
            "value": "hyphenation_decompounder"
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "IcuAnalyzer",
        "namespace": "_types.analysis"
      },
      "properties": [
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "literal_value",
            "value": "icu_analyzer"
          }
        },
        {
          "name": "method",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IcuNormalizationType",
              "namespace": "_types.analysis"
            }
          }
        },
        {
          "name": "mode",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IcuNormalizationMode",
              "namespace": "_types.analysis"
            }
          }
        }
      ]
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "decompose"
        },
        {
          "name": "compose"
        }
      ],
      "name": {
        "name": "IcuNormalizationMode",
        "namespace": "_types.analysis"
      }
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "nfc"
        },
        {
          "name": "nfkc"
        },
        {
          "name": "nfkc_cf"
        }
      ],
      "name": {
        "name": "IcuNormalizationType",
        "namespace": "_types.analysis"
      }
    },
    {
      "inherits": {
        "type": {
          "name": "TokenFilterBase",
          "namespace": "_types.analysis"
        }
      },
      "kind": "interface",
      "name": {
        "name": "KStemTokenFilter",
        "namespace": "_types.analysis"
      },
      "properties": [
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "literal_value",
            "value": "kstem"
          }
        }
      ]
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "include"
        },
        {
          "name": "exclude"
        }
      ],
      "name": {
        "name": "KeepTypesMode",
        "namespace": "_types.analysis"
      }
    },
    {
      "inherits": {
        "type": {
          "name": "TokenFilterBase",
          "namespace": "_types.analysis"
        }
      },
      "kind": "interface",
      "name": {
        "name": "KeepTypesTokenFilter",
        "namespace": "_types.analysis"
      },
      "properties": [
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "literal_value",
            "value": "keep_types"
          }
        },
        {
          "name": "mode",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "KeepTypesMode",
              "namespace": "_types.analysis"
            }
          }
        },
        {
          "name": "types",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "TokenFilterBase",
          "namespace": "_types.analysis"
        }
      },
      "kind": "interface",
      "name": {
        "name": "KeepWordsTokenFilter",
        "namespace": "_types.analysis"
      },
      "properties": [
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "literal_value",
            "value": "keep"
          }
        },
        {
          "name": "keep_words",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        },
        {
          "name": "keep_words_case",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "keep_words_path",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "KeywordAnalyzer",
        "namespace": "_types.analysis"
      },
      "properties": [
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "literal_value",
            "value": "keyword"
          }
        },
        {
          "name": "version",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "VersionString",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "TokenFilterBase",
          "namespace": "_types.analysis"
        }
      },
      "kind": "interface",
      "name": {
        "name": "KeywordMarkerTokenFilter",
        "namespace": "_types.analysis"
      },
      "properties": [
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "literal_value",
            "value": "keyword_marker"
          }
        },
        {
          "name": "ignore_case",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "keywords",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        },
        {
          "name": "keywords_path",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "keywords_pattern",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "TokenizerBase",
          "namespace": "_types.analysis"
        }
      },
      "kind": "interface",
      "name": {
        "name": "KeywordTokenizer",
        "namespace": "_types.analysis"
      },
      "properties": [
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "literal_value",
            "value": "keyword"
          }
        },
        {
          "name": "buffer_size",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "KuromojiAnalyzer",
        "namespace": "_types.analysis"
      },
      "properties": [
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "literal_value",
            "value": "kuromoji"
          }
        },
        {
          "name": "mode",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "KuromojiTokenizationMode",
              "namespace": "_types.analysis"
            }
          }
        },
        {
          "name": "user_dictionary",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "TokenFilterBase",
          "namespace": "_types.analysis"
        }
      },
      "kind": "interface",
      "name": {
        "name": "KuromojiPartOfSpeechTokenFilter",
        "namespace": "_types.analysis"
      },
      "properties": [
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "literal_value",
            "value": "kuromoji_part_of_speech"
          }
        },
        {
          "name": "stoptags",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "TokenFilterBase",
          "namespace": "_types.analysis"
        }
      },
      "kind": "interface",
      "name": {
        "name": "KuromojiReadingFormTokenFilter",
        "namespace": "_types.analysis"
      },
      "properties": [
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "literal_value",
            "value": "kuromoji_readingform"
          }
        },
        {
          "name": "use_romaji",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "TokenFilterBase",
          "namespace": "_types.analysis"
        }
      },
      "kind": "interface",
      "name": {
        "name": "KuromojiStemmerTokenFilter",
        "namespace": "_types.analysis"
      },
      "properties": [
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "literal_value",
            "value": "kuromoji_stemmer"
          }
        },
        {
          "name": "minimum_length",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "normal"
        },
        {
          "name": "search"
        },
        {
          "name": "extended"
        }
      ],
      "name": {
        "name": "KuromojiTokenizationMode",
        "namespace": "_types.analysis"
      }
    },
    {
      "inherits": {
        "type": {
          "name": "TokenizerBase",
          "namespace": "_types.analysis"
        }
      },
      "kind": "interface",
      "name": {
        "name": "KuromojiTokenizer",
        "namespace": "_types.analysis"
      },
      "properties": [
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "literal_value",
            "value": "kuromoji_tokenizer"
          }
        },
        {
          "name": "discard_punctuation",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "mode",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "KuromojiTokenizationMode",
              "namespace": "_types.analysis"
            }
          }
        },
        {
          "name": "nbest_cost",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "nbest_examples",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "user_dictionary",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "user_dictionary_rules",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        }
      ]
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "Arabic"
        },
        {
          "name": "Armenian"
        },
        {
          "name": "Basque"
        },
        {
          "name": "Brazilian"
        },
        {
          "name": "Bulgarian"
        },
        {
          "name": "Catalan"
        },
        {
          "name": "Chinese"
        },
        {
          "name": "Cjk"
        },
        {
          "name": "Czech"
        },
        {
          "name": "Danish"
        },
        {
          "name": "Dutch"
        },
        {
          "name": "English"
        },
        {
          "name": "Estonian"
        },
        {
          "name": "Finnish"
        },
        {
          "name": "French"
        },
        {
          "name": "Galician"
        },
        {
          "name": "German"
        },
        {
          "name": "Greek"
        },
        {
          "name": "Hindi"
        },
        {
          "name": "Hungarian"
        },
        {
          "name": "Indonesian"
        },
        {
          "name": "Irish"
        },
        {
          "name": "Italian"
        },
        {
          "name": "Latvian"
        },
        {
          "name": "Norwegian"
        },
        {
          "name": "Persian"
        },
        {
          "name": "Portuguese"
        },
        {
          "name": "Romanian"
        },
        {
          "name": "Russian"
        },
        {
          "name": "Sorani"
        },
        {
          "name": "Spanish"
        },
        {
          "name": "Swedish"
        },
        {
          "name": "Turkish"
        },
        {
          "name": "Thai"
        }
      ],
      "name": {
        "name": "Language",
        "namespace": "_types.analysis"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "LanguageAnalyzer",
        "namespace": "_types.analysis"
      },
      "properties": [
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "literal_value",
            "value": "language"
          }
        },
        {
          "name": "version",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "VersionString",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "language",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Language",
              "namespace": "_types.analysis"
            }
          }
        },
        {
          "name": "stem_exclusion",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        },
        {
          "name": "stopwords",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "StopWords",
              "namespace": "_types.analysis"
            }
          }
        },
        {
          "name": "stopwords_path",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "TokenFilterBase",
          "namespace": "_types.analysis"
        }
      },
      "kind": "interface",
      "name": {
        "name": "LengthTokenFilter",
        "namespace": "_types.analysis"
      },
      "properties": [
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "literal_value",
            "value": "length"
          }
        },
        {
          "name": "max",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "min",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "TokenizerBase",
          "namespace": "_types.analysis"
        }
      },
      "kind": "interface",
      "name": {
        "name": "LetterTokenizer",
        "namespace": "_types.analysis"
      },
      "properties": [
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "literal_value",
            "value": "letter"
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "TokenFilterBase",
          "namespace": "_types.analysis"
        }
      },
      "kind": "interface",
      "name": {
        "name": "LimitTokenCountTokenFilter",
        "namespace": "_types.analysis"
      },
      "properties": [
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "literal_value",
            "value": "limit"
          }
        },
        {
          "name": "consume_all_tokens",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "max_token_count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "TokenFilterBase",
          "namespace": "_types.analysis"
        }
      },
      "kind": "interface",
      "name": {
        "name": "LowercaseTokenFilter",
        "namespace": "_types.analysis"
      },
      "properties": [
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "literal_value",
            "value": "lowercase"
          }
        },
        {
          "name": "language",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "TokenizerBase",
          "namespace": "_types.analysis"
        }
      },
      "kind": "interface",
      "name": {
        "name": "LowercaseTokenizer",
        "namespace": "_types.analysis"
      },
      "properties": [
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "literal_value",
            "value": "lowercase"
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "CharFilterBase",
          "namespace": "_types.analysis"
        }
      },
      "kind": "interface",
      "name": {
        "name": "MappingCharFilter",
        "namespace": "_types.analysis"
      },
      "properties": [
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "literal_value",
            "value": "mapping"
          }
        },
        {
          "name": "mappings",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        },
        {
          "name": "mappings_path",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "TokenFilterBase",
          "namespace": "_types.analysis"
        }
      },
      "kind": "interface",
      "name": {
        "name": "MultiplexerTokenFilter",
        "namespace": "_types.analysis"
      },
      "properties": [
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "literal_value",
            "value": "multiplexer"
          }
        },
        {
          "name": "filters",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        },
        {
          "name": "preserve_original",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "TokenFilterBase",
          "namespace": "_types.analysis"
        }
      },
      "kind": "interface",
      "name": {
        "name": "NGramTokenFilter",
        "namespace": "_types.analysis"
      },
      "properties": [
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "literal_value",
            "value": "ngram"
          }
        },
        {
          "name": "max_gram",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "min_gram",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "TokenizerBase",
          "namespace": "_types.analysis"
        }
      },
      "kind": "interface",
      "name": {
        "name": "NGramTokenizer",
        "namespace": "_types.analysis"
      },
      "properties": [
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "literal_value",
            "value": "ngram"
          }
        },
        {
          "name": "custom_token_chars",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "max_gram",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "min_gram",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "token_chars",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "TokenChar",
                "namespace": "_types.analysis"
              }
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "NoriAnalyzer",
        "namespace": "_types.analysis"
      },
      "properties": [
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "literal_value",
            "value": "nori"
          }
        },
        {
          "name": "version",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "VersionString",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "decompound_mode",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "NoriDecompoundMode",
              "namespace": "_types.analysis"
            }
          }
        },
        {
          "name": "stoptags",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        },
        {
          "name": "user_dictionary",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "discard"
        },
        {
          "name": "none"
        },
        {
          "name": "mixed"
        }
      ],
      "name": {
        "name": "NoriDecompoundMode",
        "namespace": "_types.analysis"
      }
    },
    {
      "inherits": {
        "type": {
          "name": "TokenFilterBase",
          "namespace": "_types.analysis"
        }
      },
      "kind": "interface",
      "name": {
        "name": "NoriPartOfSpeechTokenFilter",
        "namespace": "_types.analysis"
      },
      "properties": [
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "literal_value",
            "value": "nori_part_of_speech"
          }
        },
        {
          "name": "stoptags",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "TokenizerBase",
          "namespace": "_types.analysis"
        }
      },
      "kind": "interface",
      "name": {
        "name": "NoriTokenizer",
        "namespace": "_types.analysis"
      },
      "properties": [
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "literal_value",
            "value": "nori_tokenizer"
          }
        },
        {
          "name": "decompound_mode",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "NoriDecompoundMode",
              "namespace": "_types.analysis"
            }
          }
        },
        {
          "name": "discard_punctuation",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "user_dictionary",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "user_dictionary_rules",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "TokenizerBase",
          "namespace": "_types.analysis"
        }
      },
      "kind": "interface",
      "name": {
        "name": "PathHierarchyTokenizer",
        "namespace": "_types.analysis"
      },
      "properties": [
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "literal_value",
            "value": "path_hierarchy"
          }
        },
        {
          "name": "buffer_size",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "delimiter",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "replacement",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "reverse",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "skip",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "PatternAnalyzer",
        "namespace": "_types.analysis"
      },
      "properties": [
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "literal_value",
            "value": "pattern"
          }
        },
        {
          "name": "version",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "VersionString",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "flags",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "lowercase",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "pattern",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "stopwords",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "StopWords",
              "namespace": "_types.analysis"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "TokenFilterBase",
          "namespace": "_types.analysis"
        }
      },
      "kind": "interface",
      "name": {
        "name": "PatternCaptureTokenFilter",
        "namespace": "_types.analysis"
      },
      "properties": [
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "literal_value",
            "value": "pattern_capture"
          }
        },
        {
          "name": "patterns",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        },
        {
          "name": "preserve_original",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "TokenFilterBase",
          "namespace": "_types.analysis"
        }
      },
      "kind": "interface",
      "name": {
        "name": "PatternReplaceTokenFilter",
        "namespace": "_types.analysis"
      },
      "properties": [
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "literal_value",
            "value": "pattern_replace"
          }
        },
        {
          "name": "flags",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "pattern",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "replacement",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "TokenFilterBase",
          "namespace": "_types.analysis"
        }
      },
      "kind": "interface",
      "name": {
        "name": "PorterStemTokenFilter",
        "namespace": "_types.analysis"
      },
      "properties": [
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "literal_value",
            "value": "porter_stem"
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "TokenFilterBase",
          "namespace": "_types.analysis"
        }
      },
      "kind": "interface",
      "name": {
        "name": "PredicateTokenFilter",
        "namespace": "_types.analysis"
      },
      "properties": [
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "literal_value",
            "value": "predicate_token_filter"
          }
        },
        {
          "name": "script",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Script",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "TokenFilterBase",
          "namespace": "_types.analysis"
        }
      },
      "kind": "interface",
      "name": {
        "name": "RemoveDuplicatesTokenFilter",
        "namespace": "_types.analysis"
      },
      "properties": [
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "literal_value",
            "value": "remove_duplicates"
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "TokenFilterBase",
          "namespace": "_types.analysis"
        }
      },
      "kind": "interface",
      "name": {
        "name": "ReverseTokenFilter",
        "namespace": "_types.analysis"
      },
      "properties": [
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "literal_value",
            "value": "reverse"
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "TokenFilterBase",
          "namespace": "_types.analysis"
        }
      },
      "kind": "interface",
      "name": {
        "name": "ShingleTokenFilter",
        "namespace": "_types.analysis"
      },
      "properties": [
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "literal_value",
            "value": "shingle"
          }
        },
        {
          "name": "filler_token",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "max_shingle_size",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "min_shingle_size",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "output_unigrams",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "output_unigrams_if_no_shingles",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "token_separator",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "SimpleAnalyzer",
        "namespace": "_types.analysis"
      },
      "properties": [
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "literal_value",
            "value": "simple"
          }
        },
        {
          "name": "version",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "VersionString",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "Armenian"
        },
        {
          "name": "Basque"
        },
        {
          "name": "Catalan"
        },
        {
          "name": "Danish"
        },
        {
          "name": "Dutch"
        },
        {
          "name": "English"
        },
        {
          "name": "Finnish"
        },
        {
          "name": "French"
        },
        {
          "name": "German"
        },
        {
          "name": "German2"
        },
        {
          "name": "Hungarian"
        },
        {
          "name": "Italian"
        },
        {
          "name": "Kp"
        },
        {
          "name": "Lovins"
        },
        {
          "name": "Norwegian"
        },
        {
          "name": "Porter"
        },
        {
          "name": "Portuguese"
        },
        {
          "name": "Romanian"
        },
        {
          "name": "Russian"
        },
        {
          "name": "Spanish"
        },
        {
          "name": "Swedish"
        },
        {
          "name": "Turkish"
        }
      ],
      "name": {
        "name": "SnowballLanguage",
        "namespace": "_types.analysis"
      }
    },
    {
      "inherits": {
        "type": {
          "name": "TokenFilterBase",
          "namespace": "_types.analysis"
        }
      },
      "kind": "interface",
      "name": {
        "name": "SnowballTokenFilter",
        "namespace": "_types.analysis"
      },
      "properties": [
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "literal_value",
            "value": "snowball"
          }
        },
        {
          "name": "language",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "SnowballLanguage",
              "namespace": "_types.analysis"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "StandardAnalyzer",
        "namespace": "_types.analysis"
      },
      "properties": [
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "literal_value",
            "value": "standard"
          }
        },
        {
          "name": "max_token_length",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "stopwords",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "StopWords",
              "namespace": "_types.analysis"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "TokenizerBase",
          "namespace": "_types.analysis"
        }
      },
      "kind": "interface",
      "name": {
        "name": "StandardTokenizer",
        "namespace": "_types.analysis"
      },
      "properties": [
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "literal_value",
            "value": "standard"
          }
        },
        {
          "name": "max_token_length",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "TokenFilterBase",
          "namespace": "_types.analysis"
        }
      },
      "kind": "interface",
      "name": {
        "name": "StemmerOverrideTokenFilter",
        "namespace": "_types.analysis"
      },
      "properties": [
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "literal_value",
            "value": "stemmer_override"
          }
        },
        {
          "name": "rules",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        },
        {
          "name": "rules_path",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "TokenFilterBase",
          "namespace": "_types.analysis"
        }
      },
      "kind": "interface",
      "name": {
        "name": "StemmerTokenFilter",
        "namespace": "_types.analysis"
      },
      "properties": [
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "literal_value",
            "value": "stemmer"
          }
        },
        {
          "name": "language",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "StopAnalyzer",
        "namespace": "_types.analysis"
      },
      "properties": [
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "literal_value",
            "value": "stop"
          }
        },
        {
          "name": "version",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "VersionString",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "stopwords",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "StopWords",
              "namespace": "_types.analysis"
            }
          }
        },
        {
          "name": "stopwords_path",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "TokenFilterBase",
          "namespace": "_types.analysis"
        }
      },
      "kind": "interface",
      "name": {
        "name": "StopTokenFilter",
        "namespace": "_types.analysis"
      },
      "properties": [
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "literal_value",
            "value": "stop"
          }
        },
        {
          "name": "ignore_case",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "remove_trailing",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "stopwords",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "StopWords",
              "namespace": "_types.analysis"
            }
          }
        },
        {
          "name": "stopwords_path",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "description": "Language value, such as _arabic_ or _thai_. Defaults to _english_.\nEach language value corresponds to a predefined list of stop words in Lucene. See Stop words by language for supported language values and their stop words.\nAlso accepts an array of stop words.",
      "kind": "type_alias",
      "name": {
        "name": "StopWords",
        "namespace": "_types.analysis"
      },
      "type": {
        "items": [
          {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          },
          {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        ],
        "kind": "union_of"
      }
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "solr"
        },
        {
          "name": "wordnet"
        }
      ],
      "name": {
        "name": "SynonymFormat",
        "namespace": "_types.analysis"
      }
    },
    {
      "inherits": {
        "type": {
          "name": "TokenFilterBase",
          "namespace": "_types.analysis"
        }
      },
      "kind": "interface",
      "name": {
        "name": "SynonymGraphTokenFilter",
        "namespace": "_types.analysis"
      },
      "properties": [
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "literal_value",
            "value": "synonym_graph"
          }
        },
        {
          "name": "expand",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "format",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "SynonymFormat",
              "namespace": "_types.analysis"
            }
          }
        },
        {
          "name": "lenient",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "synonyms",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        },
        {
          "name": "synonyms_path",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "tokenizer",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "updateable",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "TokenFilterBase",
          "namespace": "_types.analysis"
        }
      },
      "kind": "interface",
      "name": {
        "name": "SynonymTokenFilter",
        "namespace": "_types.analysis"
      },
      "properties": [
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "literal_value",
            "value": "synonym"
          }
        },
        {
          "name": "expand",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "format",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "SynonymFormat",
              "namespace": "_types.analysis"
            }
          }
        },
        {
          "name": "lenient",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "synonyms",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        },
        {
          "name": "synonyms_path",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "tokenizer",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "updateable",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "letter"
        },
        {
          "name": "digit"
        },
        {
          "name": "whitespace"
        },
        {
          "name": "punctuation"
        },
        {
          "name": "symbol"
        },
        {
          "name": "custom"
        }
      ],
      "name": {
        "name": "TokenChar",
        "namespace": "_types.analysis"
      }
    },
    {
      "kind": "type_alias",
      "name": {
        "name": "TokenFilter",
        "namespace": "_types.analysis"
      },
      "type": {
        "items": [
          {
            "kind": "instance_of",
            "type": {
              "name": "AsciiFoldingTokenFilter",
              "namespace": "_types.analysis"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "CommonGramsTokenFilter",
              "namespace": "_types.analysis"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "ConditionTokenFilter",
              "namespace": "_types.analysis"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "DelimitedPayloadTokenFilter",
              "namespace": "_types.analysis"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "EdgeNGramTokenFilter",
              "namespace": "_types.analysis"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "ElisionTokenFilter",
              "namespace": "_types.analysis"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "FingerprintTokenFilter",
              "namespace": "_types.analysis"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "HunspellTokenFilter",
              "namespace": "_types.analysis"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "HyphenationDecompounderTokenFilter",
              "namespace": "_types.analysis"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "KeepTypesTokenFilter",
              "namespace": "_types.analysis"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "KeepWordsTokenFilter",
              "namespace": "_types.analysis"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "KeywordMarkerTokenFilter",
              "namespace": "_types.analysis"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "KStemTokenFilter",
              "namespace": "_types.analysis"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "LengthTokenFilter",
              "namespace": "_types.analysis"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "LimitTokenCountTokenFilter",
              "namespace": "_types.analysis"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "LowercaseTokenFilter",
              "namespace": "_types.analysis"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "MultiplexerTokenFilter",
              "namespace": "_types.analysis"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "NGramTokenFilter",
              "namespace": "_types.analysis"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "NoriPartOfSpeechTokenFilter",
              "namespace": "_types.analysis"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "PatternCaptureTokenFilter",
              "namespace": "_types.analysis"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "PatternReplaceTokenFilter",
              "namespace": "_types.analysis"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "PorterStemTokenFilter",
              "namespace": "_types.analysis"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "PredicateTokenFilter",
              "namespace": "_types.analysis"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "RemoveDuplicatesTokenFilter",
              "namespace": "_types.analysis"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "ReverseTokenFilter",
              "namespace": "_types.analysis"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "ShingleTokenFilter",
              "namespace": "_types.analysis"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "SnowballTokenFilter",
              "namespace": "_types.analysis"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "StemmerOverrideTokenFilter",
              "namespace": "_types.analysis"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "StemmerTokenFilter",
              "namespace": "_types.analysis"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "StopTokenFilter",
              "namespace": "_types.analysis"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "SynonymGraphTokenFilter",
              "namespace": "_types.analysis"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "SynonymTokenFilter",
              "namespace": "_types.analysis"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "TrimTokenFilter",
              "namespace": "_types.analysis"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "TruncateTokenFilter",
              "namespace": "_types.analysis"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "UniqueTokenFilter",
              "namespace": "_types.analysis"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "UppercaseTokenFilter",
              "namespace": "_types.analysis"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "WordDelimiterGraphTokenFilter",
              "namespace": "_types.analysis"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "WordDelimiterTokenFilter",
              "namespace": "_types.analysis"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "KuromojiStemmerTokenFilter",
              "namespace": "_types.analysis"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "KuromojiReadingFormTokenFilter",
              "namespace": "_types.analysis"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "KuromojiPartOfSpeechTokenFilter",
              "namespace": "_types.analysis"
            }
          }
        ],
        "kind": "union_of"
      },
      "variants": {
        "kind": "internal_tag",
        "tag": "type"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "TokenFilterBase",
        "namespace": "_types.analysis"
      },
      "properties": [
        {
          "name": "version",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "VersionString",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "type_alias",
      "name": {
        "name": "Tokenizer",
        "namespace": "_types.analysis"
      },
      "type": {
        "items": [
          {
            "kind": "instance_of",
            "type": {
              "name": "CharGroupTokenizer",
              "namespace": "_types.analysis"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "EdgeNGramTokenizer",
              "namespace": "_types.analysis"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "KeywordTokenizer",
              "namespace": "_types.analysis"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "LetterTokenizer",
              "namespace": "_types.analysis"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "LowercaseTokenizer",
              "namespace": "_types.analysis"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "NGramTokenizer",
              "namespace": "_types.analysis"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "NoriTokenizer",
              "namespace": "_types.analysis"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "PathHierarchyTokenizer",
              "namespace": "_types.analysis"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "StandardTokenizer",
              "namespace": "_types.analysis"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "UaxEmailUrlTokenizer",
              "namespace": "_types.analysis"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "WhitespaceTokenizer",
              "namespace": "_types.analysis"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "KuromojiTokenizer",
              "namespace": "_types.analysis"
            }
          }
        ],
        "kind": "union_of"
      },
      "variants": {
        "kind": "internal_tag",
        "tag": "type"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "TokenizerBase",
        "namespace": "_types.analysis"
      },
      "properties": [
        {
          "name": "version",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "VersionString",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "TokenFilterBase",
          "namespace": "_types.analysis"
        }
      },
      "kind": "interface",
      "name": {
        "name": "TrimTokenFilter",
        "namespace": "_types.analysis"
      },
      "properties": [
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "literal_value",
            "value": "trim"
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "TokenFilterBase",
          "namespace": "_types.analysis"
        }
      },
      "kind": "interface",
      "name": {
        "name": "TruncateTokenFilter",
        "namespace": "_types.analysis"
      },
      "properties": [
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "literal_value",
            "value": "truncate"
          }
        },
        {
          "name": "length",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "TokenizerBase",
          "namespace": "_types.analysis"
        }
      },
      "kind": "interface",
      "name": {
        "name": "UaxEmailUrlTokenizer",
        "namespace": "_types.analysis"
      },
      "properties": [
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "literal_value",
            "value": "uax_url_email"
          }
        },
        {
          "name": "max_token_length",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "TokenFilterBase",
          "namespace": "_types.analysis"
        }
      },
      "kind": "interface",
      "name": {
        "name": "UniqueTokenFilter",
        "namespace": "_types.analysis"
      },
      "properties": [
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "literal_value",
            "value": "unique"
          }
        },
        {
          "name": "only_on_same_position",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "TokenFilterBase",
          "namespace": "_types.analysis"
        }
      },
      "kind": "interface",
      "name": {
        "name": "UppercaseTokenFilter",
        "namespace": "_types.analysis"
      },
      "properties": [
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "literal_value",
            "value": "uppercase"
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "WhitespaceAnalyzer",
        "namespace": "_types.analysis"
      },
      "properties": [
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "literal_value",
            "value": "whitespace"
          }
        },
        {
          "name": "version",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "VersionString",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "TokenizerBase",
          "namespace": "_types.analysis"
        }
      },
      "kind": "interface",
      "name": {
        "name": "WhitespaceTokenizer",
        "namespace": "_types.analysis"
      },
      "properties": [
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "literal_value",
            "value": "whitespace"
          }
        },
        {
          "name": "max_token_length",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "TokenFilterBase",
          "namespace": "_types.analysis"
        }
      },
      "kind": "interface",
      "name": {
        "name": "WordDelimiterGraphTokenFilter",
        "namespace": "_types.analysis"
      },
      "properties": [
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "literal_value",
            "value": "word_delimiter_graph"
          }
        },
        {
          "name": "adjust_offsets",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "catenate_all",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "catenate_numbers",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "catenate_words",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "generate_number_parts",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "generate_word_parts",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "preserve_original",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "protected_words",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        },
        {
          "name": "protected_words_path",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "split_on_case_change",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "split_on_numerics",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "stem_english_possessive",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "type_table",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        },
        {
          "name": "type_table_path",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "TokenFilterBase",
          "namespace": "_types.analysis"
        }
      },
      "kind": "interface",
      "name": {
        "name": "WordDelimiterTokenFilter",
        "namespace": "_types.analysis"
      },
      "properties": [
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "literal_value",
            "value": "word_delimiter"
          }
        },
        {
          "name": "catenate_all",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "catenate_numbers",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "catenate_words",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "generate_number_parts",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "generate_word_parts",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "preserve_original",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "protected_words",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        },
        {
          "name": "protected_words_path",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "split_on_case_change",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "split_on_numerics",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "stem_english_possessive",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "type_table",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        },
        {
          "name": "type_table_path",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "PropertyBase",
          "namespace": "_types.mapping"
        }
      },
      "kind": "interface",
      "name": {
        "name": "AggregateMetricDoubleProperty",
        "namespace": "_types.mapping"
      },
      "properties": [
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "literal_value",
            "value": "aggregate_metric_double"
          }
        },
        {
          "name": "default_metric",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "metrics",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "AllField",
        "namespace": "_types.mapping"
      },
      "properties": [
        {
          "name": "analyzer",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "enabled",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "omit_norms",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "search_analyzer",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "similarity",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "store",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "store_term_vector_offsets",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "store_term_vector_payloads",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "store_term_vector_positions",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "store_term_vectors",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "DocValuesPropertyBase",
          "namespace": "_types.mapping"
        }
      },
      "kind": "interface",
      "name": {
        "name": "BinaryProperty",
        "namespace": "_types.mapping"
      },
      "properties": [
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "literal_value",
            "value": "binary"
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "DocValuesPropertyBase",
          "namespace": "_types.mapping"
        }
      },
      "kind": "interface",
      "name": {
        "name": "BooleanProperty",
        "namespace": "_types.mapping"
      },
      "properties": [
        {
          "name": "boost",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "fielddata",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "NumericFielddata",
              "namespace": "indices._types"
            }
          }
        },
        {
          "name": "index",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "null_value",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "literal_value",
            "value": "boolean"
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "DocValuesPropertyBase",
          "namespace": "_types.mapping"
        }
      },
      "kind": "interface",
      "name": {
        "name": "CompletionProperty",
        "namespace": "_types.mapping"
      },
      "properties": [
        {
          "name": "analyzer",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "contexts",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "SuggestContext",
                "namespace": "_types.mapping"
              }
            }
          }
        },
        {
          "name": "max_input_length",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "preserve_position_increments",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "preserve_separators",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "search_analyzer",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "literal_value",
            "value": "completion"
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "PropertyBase",
          "namespace": "_types.mapping"
        }
      },
      "kind": "interface",
      "name": {
        "name": "ConstantKeywordProperty",
        "namespace": "_types.mapping"
      },
      "properties": [
        {
          "name": "value",
          "required": false,
          "type": {
            "kind": "user_defined_value"
          }
        },
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "literal_value",
            "value": "constant_keyword"
          }
        }
      ]
    },
    {
      "kind": "type_alias",
      "name": {
        "name": "CoreProperty",
        "namespace": "_types.mapping"
      },
      "type": {
        "items": [
          {
            "kind": "instance_of",
            "type": {
              "name": "ObjectProperty",
              "namespace": "_types.mapping"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "NestedProperty",
              "namespace": "_types.mapping"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "SearchAsYouTypeProperty",
              "namespace": "_types.mapping"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "TextProperty",
              "namespace": "_types.mapping"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "DocValuesProperty",
              "namespace": "_types.mapping"
            }
          }
        ],
        "kind": "union_of"
      }
    },
    {
      "inherits": {
        "type": {
          "name": "PropertyBase",
          "namespace": "_types.mapping"
        }
      },
      "kind": "interface",
      "name": {
        "name": "CorePropertyBase",
        "namespace": "_types.mapping"
      },
      "properties": [
        {
          "name": "copy_to",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Fields",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "similarity",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "store",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "DocValuesPropertyBase",
          "namespace": "_types.mapping"
        }
      },
      "kind": "interface",
      "name": {
        "name": "DateNanosProperty",
        "namespace": "_types.mapping"
      },
      "properties": [
        {
          "name": "boost",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "format",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "ignore_malformed",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "index",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "null_value",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DateString",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "precision_step",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "literal_value",
            "value": "date_nanos"
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "DocValuesPropertyBase",
          "namespace": "_types.mapping"
        }
      },
      "kind": "interface",
      "name": {
        "name": "DateProperty",
        "namespace": "_types.mapping"
      },
      "properties": [
        {
          "name": "boost",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "fielddata",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "NumericFielddata",
              "namespace": "indices._types"
            }
          }
        },
        {
          "name": "format",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "ignore_malformed",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "index",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "null_value",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DateString",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "precision_step",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "literal_value",
            "value": "date"
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "RangePropertyBase",
          "namespace": "_types.mapping"
        }
      },
      "kind": "interface",
      "name": {
        "name": "DateRangeProperty",
        "namespace": "_types.mapping"
      },
      "properties": [
        {
          "name": "format",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "literal_value",
            "value": "date_range"
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "PropertyBase",
          "namespace": "_types.mapping"
        }
      },
      "kind": "interface",
      "name": {
        "name": "DenseVectorProperty",
        "namespace": "_types.mapping"
      },
      "properties": [
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "literal_value",
            "value": "dense_vector"
          }
        },
        {
          "name": "dims",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "type_alias",
      "name": {
        "name": "DocValuesProperty",
        "namespace": "_types.mapping"
      },
      "type": {
        "items": [
          {
            "kind": "instance_of",
            "type": {
              "name": "BinaryProperty",
              "namespace": "_types.mapping"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "BooleanProperty",
              "namespace": "_types.mapping"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "DateProperty",
              "namespace": "_types.mapping"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "DateNanosProperty",
              "namespace": "_types.mapping"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "KeywordProperty",
              "namespace": "_types.mapping"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "NumberProperty",
              "namespace": "_types.mapping"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "RangeProperty",
              "namespace": "_types.mapping"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "GeoPointProperty",
              "namespace": "_types.mapping"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "GeoShapeProperty",
              "namespace": "_types.mapping"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "CompletionProperty",
              "namespace": "_types.mapping"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "GenericProperty",
              "namespace": "_types.mapping"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "IpProperty",
              "namespace": "_types.mapping"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "Murmur3HashProperty",
              "namespace": "_types.mapping"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "ShapeProperty",
              "namespace": "_types.mapping"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "TokenCountProperty",
              "namespace": "_types.mapping"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "VersionProperty",
              "namespace": "_types.mapping"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "WildcardProperty",
              "namespace": "_types.mapping"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "PointProperty",
              "namespace": "_types.mapping"
            }
          }
        ],
        "kind": "union_of"
      }
    },
    {
      "inherits": {
        "type": {
          "name": "CorePropertyBase",
          "namespace": "_types.mapping"
        }
      },
      "kind": "interface",
      "name": {
        "name": "DocValuesPropertyBase",
        "namespace": "_types.mapping"
      },
      "properties": [
        {
          "name": "doc_values",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "RangePropertyBase",
          "namespace": "_types.mapping"
        }
      },
      "kind": "interface",
      "name": {
        "name": "DoubleRangeProperty",
        "namespace": "_types.mapping"
      },
      "properties": [
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "literal_value",
            "value": "double_range"
          }
        }
      ]
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "strict"
        },
        {
          "name": "runtime"
        },
        {
          "name": "true"
        },
        {
          "name": "false"
        }
      ],
      "name": {
        "name": "DynamicMapping",
        "namespace": "_types.mapping"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "DynamicTemplate",
        "namespace": "_types.mapping"
      },
      "properties": [
        {
          "name": "mapping",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Property",
              "namespace": "_types.mapping"
            }
          }
        },
        {
          "name": "match",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "match_mapping_type",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "match_pattern",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "MatchType",
              "namespace": "_types.mapping"
            }
          }
        },
        {
          "name": "path_match",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "path_unmatch",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "unmatch",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "PropertyBase",
          "namespace": "_types.mapping"
        }
      },
      "kind": "interface",
      "name": {
        "name": "FieldAliasProperty",
        "namespace": "_types.mapping"
      },
      "properties": [
        {
          "name": "path",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "literal_value",
            "value": "alias"
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "FieldMapping",
        "namespace": "_types.mapping"
      },
      "properties": []
    },
    {
      "kind": "interface",
      "name": {
        "name": "FieldNamesField",
        "namespace": "_types.mapping"
      },
      "properties": [
        {
          "name": "enabled",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "none"
        },
        {
          "name": "geo_point"
        },
        {
          "name": "geo_shape"
        },
        {
          "name": "ip"
        },
        {
          "name": "binary"
        },
        {
          "name": "keyword"
        },
        {
          "name": "text"
        },
        {
          "name": "search_as_you_type"
        },
        {
          "name": "date"
        },
        {
          "name": "date_nanos"
        },
        {
          "name": "boolean"
        },
        {
          "name": "completion"
        },
        {
          "name": "nested"
        },
        {
          "name": "object"
        },
        {
          "name": "murmur3"
        },
        {
          "name": "token_count"
        },
        {
          "name": "percolator"
        },
        {
          "name": "integer"
        },
        {
          "name": "long"
        },
        {
          "name": "short"
        },
        {
          "name": "byte"
        },
        {
          "name": "float"
        },
        {
          "name": "half_float"
        },
        {
          "name": "scaled_float"
        },
        {
          "name": "double"
        },
        {
          "name": "integer_range"
        },
        {
          "name": "float_range"
        },
        {
          "name": "long_range"
        },
        {
          "name": "double_range"
        },
        {
          "name": "date_range"
        },
        {
          "name": "ip_range"
        },
        {
          "name": "alias"
        },
        {
          "name": "join"
        },
        {
          "name": "rank_feature"
        },
        {
          "name": "rank_features"
        },
        {
          "name": "flattened"
        },
        {
          "name": "shape"
        },
        {
          "name": "histogram"
        },
        {
          "name": "constant_keyword"
        },
        {
          "name": "aggregate_metric_double"
        },
        {
          "name": "dense_vector"
        }
      ],
      "name": {
        "name": "FieldType",
        "namespace": "_types.mapping"
      }
    },
    {
      "inherits": {
        "type": {
          "name": "PropertyBase",
          "namespace": "_types.mapping"
        }
      },
      "kind": "interface",
      "name": {
        "name": "FlattenedProperty",
        "namespace": "_types.mapping"
      },
      "properties": [
        {
          "name": "boost",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "depth_limit",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "doc_values",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "eager_global_ordinals",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "index",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "index_options",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndexOptions",
              "namespace": "_types.mapping"
            }
          }
        },
        {
          "name": "null_value",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "similarity",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "split_queries_on_whitespace",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "literal_value",
            "value": "flattened"
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "RangePropertyBase",
          "namespace": "_types.mapping"
        }
      },
      "kind": "interface",
      "name": {
        "name": "FloatRangeProperty",
        "namespace": "_types.mapping"
      },
      "properties": [
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "literal_value",
            "value": "float_range"
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "DocValuesPropertyBase",
          "namespace": "_types.mapping"
        }
      },
      "kind": "interface",
      "name": {
        "name": "GenericProperty",
        "namespace": "_types.mapping"
      },
      "properties": [
        {
          "name": "analyzer",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "boost",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "fielddata",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "StringFielddata",
              "namespace": "indices._types"
            }
          }
        },
        {
          "name": "ignore_malformed",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "index",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "index_options",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndexOptions",
              "namespace": "_types.mapping"
            }
          }
        },
        {
          "name": "norms",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "null_value",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "position_increment_gap",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "search_analyzer",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "term_vector",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "TermVectorOption",
              "namespace": "_types.mapping"
            }
          }
        },
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "right"
        },
        {
          "name": "RIGHT"
        },
        {
          "name": "counterclockwise"
        },
        {
          "name": "COUNTERCLOCKWISE"
        },
        {
          "name": "ccw"
        },
        {
          "name": "CCW"
        },
        {
          "name": "left"
        },
        {
          "name": "LEFT"
        },
        {
          "name": "clockwise"
        },
        {
          "name": "CLOCKWISE"
        },
        {
          "name": "cw"
        },
        {
          "name": "CW"
        }
      ],
      "name": {
        "name": "GeoOrientation",
        "namespace": "_types.mapping"
      }
    },
    {
      "inherits": {
        "type": {
          "name": "DocValuesPropertyBase",
          "namespace": "_types.mapping"
        }
      },
      "kind": "interface",
      "name": {
        "name": "GeoPointProperty",
        "namespace": "_types.mapping"
      },
      "properties": [
        {
          "name": "ignore_malformed",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "ignore_z_value",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "null_value",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "GeoLocation",
              "namespace": "_types.query_dsl"
            }
          }
        },
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "literal_value",
            "value": "geo_point"
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "DocValuesPropertyBase",
          "namespace": "_types.mapping"
        }
      },
      "kind": "interface",
      "name": {
        "name": "GeoShapeProperty",
        "namespace": "_types.mapping"
      },
      "properties": [
        {
          "name": "coerce",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "ignore_malformed",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "ignore_z_value",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "orientation",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "GeoOrientation",
              "namespace": "_types.mapping"
            }
          }
        },
        {
          "name": "strategy",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "GeoStrategy",
              "namespace": "_types.mapping"
            }
          }
        },
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "literal_value",
            "value": "geo_shape"
          }
        }
      ]
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "recursive"
        },
        {
          "name": "term"
        }
      ],
      "name": {
        "name": "GeoStrategy",
        "namespace": "_types.mapping"
      }
    },
    {
      "inherits": {
        "type": {
          "name": "PropertyBase",
          "namespace": "_types.mapping"
        }
      },
      "kind": "interface",
      "name": {
        "name": "HistogramProperty",
        "namespace": "_types.mapping"
      },
      "properties": [
        {
          "name": "ignore_malformed",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "literal_value",
            "value": "histogram"
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "IndexField",
        "namespace": "_types.mapping"
      },
      "properties": [
        {
          "name": "enabled",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "docs"
        },
        {
          "name": "freqs"
        },
        {
          "name": "positions"
        },
        {
          "name": "offsets"
        }
      ],
      "name": {
        "name": "IndexOptions",
        "namespace": "_types.mapping"
      }
    },
    {
      "inherits": {
        "type": {
          "name": "RangePropertyBase",
          "namespace": "_types.mapping"
        }
      },
      "kind": "interface",
      "name": {
        "name": "IntegerRangeProperty",
        "namespace": "_types.mapping"
      },
      "properties": [
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "literal_value",
            "value": "integer_range"
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "DocValuesPropertyBase",
          "namespace": "_types.mapping"
        }
      },
      "kind": "interface",
      "name": {
        "name": "IpProperty",
        "namespace": "_types.mapping"
      },
      "properties": [
        {
          "name": "boost",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "index",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "null_value",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "literal_value",
            "value": "ip"
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "RangePropertyBase",
          "namespace": "_types.mapping"
        }
      },
      "kind": "interface",
      "name": {
        "name": "IpRangeProperty",
        "namespace": "_types.mapping"
      },
      "properties": [
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "literal_value",
            "value": "ip_range"
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "PropertyBase",
          "namespace": "_types.mapping"
        }
      },
      "kind": "interface",
      "name": {
        "name": "JoinProperty",
        "namespace": "_types.mapping"
      },
      "properties": [
        {
          "name": "relations",
          "required": false,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "RelationName",
                "namespace": "_types"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "items": [
                {
                  "kind": "instance_of",
                  "type": {
                    "name": "RelationName",
                    "namespace": "_types"
                  }
                },
                {
                  "kind": "array_of",
                  "value": {
                    "kind": "instance_of",
                    "type": {
                      "name": "RelationName",
                      "namespace": "_types"
                    }
                  }
                }
              ],
              "kind": "union_of"
            }
          }
        },
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "literal_value",
            "value": "join"
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "DocValuesPropertyBase",
          "namespace": "_types.mapping"
        }
      },
      "kind": "interface",
      "name": {
        "name": "KeywordProperty",
        "namespace": "_types.mapping"
      },
      "properties": [
        {
          "name": "boost",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "eager_global_ordinals",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "index",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "index_options",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndexOptions",
              "namespace": "_types.mapping"
            }
          }
        },
        {
          "name": "normalizer",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "norms",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "null_value",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "split_queries_on_whitespace",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "literal_value",
            "value": "keyword"
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "RangePropertyBase",
          "namespace": "_types.mapping"
        }
      },
      "kind": "interface",
      "name": {
        "name": "LongRangeProperty",
        "namespace": "_types.mapping"
      },
      "properties": [
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "literal_value",
            "value": "long_range"
          }
        }
      ]
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "simple"
        },
        {
          "name": "regex"
        }
      ],
      "name": {
        "name": "MatchType",
        "namespace": "_types.mapping"
      }
    },
    {
      "inherits": {
        "type": {
          "name": "DocValuesPropertyBase",
          "namespace": "_types.mapping"
        }
      },
      "kind": "interface",
      "name": {
        "name": "Murmur3HashProperty",
        "namespace": "_types.mapping"
      },
      "properties": [
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "literal_value",
            "value": "murmur3"
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "CorePropertyBase",
          "namespace": "_types.mapping"
        }
      },
      "kind": "interface",
      "name": {
        "name": "NestedProperty",
        "namespace": "_types.mapping"
      },
      "properties": [
        {
          "name": "enabled",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "include_in_parent",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "include_in_root",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "literal_value",
            "value": "nested"
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "DocValuesPropertyBase",
          "namespace": "_types.mapping"
        }
      },
      "kind": "interface",
      "name": {
        "name": "NumberProperty",
        "namespace": "_types.mapping"
      },
      "properties": [
        {
          "name": "boost",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "coerce",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "fielddata",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "NumericFielddata",
              "namespace": "indices._types"
            }
          }
        },
        {
          "name": "ignore_malformed",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "index",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "null_value",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "scaling_factor",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "NumberType",
              "namespace": "_types.mapping"
            }
          }
        }
      ]
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "float"
        },
        {
          "name": "half_float"
        },
        {
          "name": "scaled_float"
        },
        {
          "name": "double"
        },
        {
          "name": "integer"
        },
        {
          "name": "long"
        },
        {
          "name": "short"
        },
        {
          "name": "byte"
        },
        {
          "name": "unsigned_long"
        }
      ],
      "name": {
        "name": "NumberType",
        "namespace": "_types.mapping"
      }
    },
    {
      "inherits": {
        "type": {
          "name": "CorePropertyBase",
          "namespace": "_types.mapping"
        }
      },
      "kind": "interface",
      "name": {
        "name": "ObjectProperty",
        "namespace": "_types.mapping"
      },
      "properties": [
        {
          "name": "enabled",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "type",
          "required": false,
          "type": {
            "kind": "literal_value",
            "value": "object"
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "PropertyBase",
          "namespace": "_types.mapping"
        }
      },
      "kind": "interface",
      "name": {
        "name": "PercolatorProperty",
        "namespace": "_types.mapping"
      },
      "properties": [
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "literal_value",
            "value": "percolator"
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "DocValuesPropertyBase",
          "namespace": "_types.mapping"
        }
      },
      "kind": "interface",
      "name": {
        "name": "PointProperty",
        "namespace": "_types.mapping"
      },
      "properties": [
        {
          "name": "ignore_malformed",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "ignore_z_value",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "null_value",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "literal_value",
            "value": "point"
          }
        }
      ]
    },
    {
      "kind": "type_alias",
      "name": {
        "name": "Property",
        "namespace": "_types.mapping"
      },
      "type": {
        "items": [
          {
            "kind": "instance_of",
            "type": {
              "name": "FlattenedProperty",
              "namespace": "_types.mapping"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "JoinProperty",
              "namespace": "_types.mapping"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "PercolatorProperty",
              "namespace": "_types.mapping"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "RankFeatureProperty",
              "namespace": "_types.mapping"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "RankFeaturesProperty",
              "namespace": "_types.mapping"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "ConstantKeywordProperty",
              "namespace": "_types.mapping"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "FieldAliasProperty",
              "namespace": "_types.mapping"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "HistogramProperty",
              "namespace": "_types.mapping"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "DenseVectorProperty",
              "namespace": "_types.mapping"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "AggregateMetricDoubleProperty",
              "namespace": "_types.mapping"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "CoreProperty",
              "namespace": "_types.mapping"
            }
          }
        ],
        "kind": "union_of"
      },
      "variants": {
        "kind": "internal_tag",
        "tag": "type"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "PropertyBase",
        "namespace": "_types.mapping"
      },
      "properties": [
        {
          "name": "local_metadata",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Metadata",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "meta",
          "required": false,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        },
        {
          "name": "name",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "PropertyName",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "properties",
          "required": false,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "PropertyName",
                "namespace": "_types"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "Property",
                "namespace": "_types.mapping"
              }
            }
          }
        },
        {
          "name": "ignore_above",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "dynamic",
          "required": false,
          "type": {
            "items": [
              {
                "kind": "instance_of",
                "type": {
                  "name": "boolean",
                  "namespace": "internal"
                }
              },
              {
                "kind": "instance_of",
                "type": {
                  "name": "DynamicMapping",
                  "namespace": "_types.mapping"
                }
              }
            ],
            "kind": "union_of"
          }
        },
        {
          "name": "fields",
          "required": false,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "PropertyName",
                "namespace": "_types"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "Property",
                "namespace": "_types.mapping"
              }
            }
          }
        }
      ]
    },
    {
      "kind": "type_alias",
      "name": {
        "name": "RangeProperty",
        "namespace": "_types.mapping"
      },
      "type": {
        "items": [
          {
            "kind": "instance_of",
            "type": {
              "name": "LongRangeProperty",
              "namespace": "_types.mapping"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "IpRangeProperty",
              "namespace": "_types.mapping"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "IntegerRangeProperty",
              "namespace": "_types.mapping"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "FloatRangeProperty",
              "namespace": "_types.mapping"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "DoubleRangeProperty",
              "namespace": "_types.mapping"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "DateRangeProperty",
              "namespace": "_types.mapping"
            }
          }
        ],
        "kind": "union_of"
      }
    },
    {
      "inherits": {
        "type": {
          "name": "DocValuesPropertyBase",
          "namespace": "_types.mapping"
        }
      },
      "kind": "interface",
      "name": {
        "name": "RangePropertyBase",
        "namespace": "_types.mapping"
      },
      "properties": [
        {
          "name": "boost",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "coerce",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "index",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "PropertyBase",
          "namespace": "_types.mapping"
        }
      },
      "kind": "interface",
      "name": {
        "name": "RankFeatureProperty",
        "namespace": "_types.mapping"
      },
      "properties": [
        {
          "name": "positive_score_impact",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "literal_value",
            "value": "rank_feature"
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "PropertyBase",
          "namespace": "_types.mapping"
        }
      },
      "kind": "interface",
      "name": {
        "name": "RankFeaturesProperty",
        "namespace": "_types.mapping"
      },
      "properties": [
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "literal_value",
            "value": "rank_features"
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "RoutingField",
        "namespace": "_types.mapping"
      },
      "properties": [
        {
          "name": "required",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "RuntimeField",
        "namespace": "_types.mapping"
      },
      "properties": [
        {
          "name": "format",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "script",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Script",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "RuntimeFieldType",
              "namespace": "_types.mapping"
            }
          }
        }
      ]
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "boolean"
        },
        {
          "name": "date"
        },
        {
          "name": "double"
        },
        {
          "name": "geo_point"
        },
        {
          "name": "ip"
        },
        {
          "name": "keyword"
        },
        {
          "name": "long"
        }
      ],
      "name": {
        "name": "RuntimeFieldType",
        "namespace": "_types.mapping"
      }
    },
    {
      "kind": "type_alias",
      "name": {
        "name": "RuntimeFields",
        "namespace": "_types.mapping"
      },
      "type": {
        "key": {
          "kind": "instance_of",
          "type": {
            "name": "Field",
            "namespace": "_types"
          }
        },
        "kind": "dictionary_of",
        "singleKey": false,
        "value": {
          "kind": "instance_of",
          "type": {
            "name": "RuntimeField",
            "namespace": "_types.mapping"
          }
        }
      }
    },
    {
      "inherits": {
        "type": {
          "name": "CorePropertyBase",
          "namespace": "_types.mapping"
        }
      },
      "kind": "interface",
      "name": {
        "name": "SearchAsYouTypeProperty",
        "namespace": "_types.mapping"
      },
      "properties": [
        {
          "name": "analyzer",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "index",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "index_options",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndexOptions",
              "namespace": "_types.mapping"
            }
          }
        },
        {
          "name": "max_shingle_size",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "norms",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "search_analyzer",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "search_quote_analyzer",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "term_vector",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "TermVectorOption",
              "namespace": "_types.mapping"
            }
          }
        },
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "literal_value",
            "value": "search_as_you_type"
          }
        }
      ]
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "right"
        },
        {
          "name": "counterclockwise"
        },
        {
          "name": "ccw"
        },
        {
          "name": "left"
        },
        {
          "name": "clockwise"
        },
        {
          "name": "cw"
        }
      ],
      "name": {
        "name": "ShapeOrientation",
        "namespace": "_types.mapping"
      }
    },
    {
      "inherits": {
        "type": {
          "name": "DocValuesPropertyBase",
          "namespace": "_types.mapping"
        }
      },
      "kind": "interface",
      "name": {
        "name": "ShapeProperty",
        "namespace": "_types.mapping"
      },
      "properties": [
        {
          "name": "coerce",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "ignore_malformed",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "ignore_z_value",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "orientation",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ShapeOrientation",
              "namespace": "_types.mapping"
            }
          }
        },
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "literal_value",
            "value": "shape"
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "SizeField",
        "namespace": "_types.mapping"
      },
      "properties": [
        {
          "name": "enabled",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "SourceField",
        "namespace": "_types.mapping"
      },
      "properties": [
        {
          "name": "compress",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "compress_threshold",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "enabled",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "excludes",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        },
        {
          "name": "includes",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "SuggestContext",
        "namespace": "_types.mapping"
      },
      "properties": [
        {
          "name": "name",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "path",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "precision",
          "required": false,
          "type": {
            "items": [
              {
                "kind": "instance_of",
                "type": {
                  "name": "integer",
                  "namespace": "_types"
                }
              },
              {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              }
            ],
            "kind": "union_of"
          }
        }
      ]
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "no"
        },
        {
          "name": "yes"
        },
        {
          "name": "with_offsets"
        },
        {
          "name": "with_positions"
        },
        {
          "name": "with_positions_offsets"
        },
        {
          "name": "with_positions_offsets_payloads"
        }
      ],
      "name": {
        "name": "TermVectorOption",
        "namespace": "_types.mapping"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "TextIndexPrefixes",
        "namespace": "_types.mapping"
      },
      "properties": [
        {
          "name": "max_chars",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "min_chars",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "CorePropertyBase",
          "namespace": "_types.mapping"
        }
      },
      "kind": "interface",
      "name": {
        "name": "TextProperty",
        "namespace": "_types.mapping"
      },
      "properties": [
        {
          "name": "analyzer",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "boost",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "eager_global_ordinals",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "fielddata",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "fielddata_frequency_filter",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "FielddataFrequencyFilter",
              "namespace": "indices._types"
            }
          }
        },
        {
          "name": "index",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "index_options",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndexOptions",
              "namespace": "_types.mapping"
            }
          }
        },
        {
          "name": "index_phrases",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "index_prefixes",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "TextIndexPrefixes",
              "namespace": "_types.mapping"
            }
          }
        },
        {
          "name": "norms",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "position_increment_gap",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "search_analyzer",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "search_quote_analyzer",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "term_vector",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "TermVectorOption",
              "namespace": "_types.mapping"
            }
          }
        },
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "literal_value",
            "value": "text"
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "DocValuesPropertyBase",
          "namespace": "_types.mapping"
        }
      },
      "kind": "interface",
      "name": {
        "name": "TokenCountProperty",
        "namespace": "_types.mapping"
      },
      "properties": [
        {
          "name": "analyzer",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "boost",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "index",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "null_value",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "enable_position_increments",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "literal_value",
            "value": "token_count"
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "TypeMapping",
        "namespace": "_types.mapping"
      },
      "properties": [
        {
          "name": "all_field",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "AllField",
              "namespace": "_types.mapping"
            }
          }
        },
        {
          "name": "date_detection",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "dynamic",
          "required": false,
          "type": {
            "items": [
              {
                "kind": "instance_of",
                "type": {
                  "name": "boolean",
                  "namespace": "internal"
                }
              },
              {
                "kind": "instance_of",
                "type": {
                  "name": "DynamicMapping",
                  "namespace": "_types.mapping"
                }
              }
            ],
            "kind": "union_of"
          }
        },
        {
          "name": "dynamic_date_formats",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        },
        {
          "name": "dynamic_templates",
          "required": false,
          "type": {
            "items": [
              {
                "key": {
                  "kind": "instance_of",
                  "type": {
                    "name": "string",
                    "namespace": "internal"
                  }
                },
                "kind": "dictionary_of",
                "singleKey": false,
                "value": {
                  "kind": "instance_of",
                  "type": {
                    "name": "DynamicTemplate",
                    "namespace": "_types.mapping"
                  }
                }
              },
              {
                "kind": "array_of",
                "value": {
                  "key": {
                    "kind": "instance_of",
                    "type": {
                      "name": "string",
                      "namespace": "internal"
                    }
                  },
                  "kind": "dictionary_of",
                  "singleKey": false,
                  "value": {
                    "kind": "instance_of",
                    "type": {
                      "name": "DynamicTemplate",
                      "namespace": "_types.mapping"
                    }
                  }
                }
              }
            ],
            "kind": "union_of"
          }
        },
        {
          "name": "_field_names",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "FieldNamesField",
              "namespace": "_types.mapping"
            }
          }
        },
        {
          "name": "index_field",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndexField",
              "namespace": "_types.mapping"
            }
          }
        },
        {
          "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-meta-field.html",
          "name": "_meta",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Metadata",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "numeric_detection",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "properties",
          "required": false,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "PropertyName",
                "namespace": "_types"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "Property",
                "namespace": "_types.mapping"
              }
            }
          }
        },
        {
          "name": "_routing",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "RoutingField",
              "namespace": "_types.mapping"
            }
          }
        },
        {
          "name": "_size",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "SizeField",
              "namespace": "_types.mapping"
            }
          }
        },
        {
          "name": "_source",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "SourceField",
              "namespace": "_types.mapping"
            }
          }
        },
        {
          "name": "runtime",
          "required": false,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "RuntimeField",
                "namespace": "_types.mapping"
              }
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "DocValuesPropertyBase",
          "namespace": "_types.mapping"
        }
      },
      "kind": "interface",
      "name": {
        "name": "VersionProperty",
        "namespace": "_types.mapping"
      },
      "properties": [
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "literal_value",
            "value": "version"
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "DocValuesPropertyBase",
          "namespace": "_types.mapping"
        }
      },
      "kind": "interface",
      "name": {
        "name": "WildcardProperty",
        "namespace": "_types.mapping"
      },
      "properties": [
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "literal_value",
            "value": "wildcard"
          }
        },
        {
          "name": "null_value",
          "required": false,
          "since": "7.15.0",
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "QueryBase",
          "namespace": "_types.query_dsl"
        }
      },
      "kind": "interface",
      "name": {
        "name": "BoolQuery",
        "namespace": "_types.query_dsl"
      },
      "properties": [
        {
          "name": "filter",
          "required": false,
          "type": {
            "items": [
              {
                "kind": "instance_of",
                "type": {
                  "name": "QueryContainer",
                  "namespace": "_types.query_dsl"
                }
              },
              {
                "kind": "array_of",
                "value": {
                  "kind": "instance_of",
                  "type": {
                    "name": "QueryContainer",
                    "namespace": "_types.query_dsl"
                  }
                }
              }
            ],
            "kind": "union_of"
          }
        },
        {
          "name": "minimum_should_match",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "MinimumShouldMatch",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "must",
          "required": false,
          "type": {
            "items": [
              {
                "kind": "instance_of",
                "type": {
                  "name": "QueryContainer",
                  "namespace": "_types.query_dsl"
                }
              },
              {
                "kind": "array_of",
                "value": {
                  "kind": "instance_of",
                  "type": {
                    "name": "QueryContainer",
                    "namespace": "_types.query_dsl"
                  }
                }
              }
            ],
            "kind": "union_of"
          }
        },
        {
          "name": "must_not",
          "required": false,
          "type": {
            "items": [
              {
                "kind": "instance_of",
                "type": {
                  "name": "QueryContainer",
                  "namespace": "_types.query_dsl"
                }
              },
              {
                "kind": "array_of",
                "value": {
                  "kind": "instance_of",
                  "type": {
                    "name": "QueryContainer",
                    "namespace": "_types.query_dsl"
                  }
                }
              }
            ],
            "kind": "union_of"
          }
        },
        {
          "name": "should",
          "required": false,
          "type": {
            "items": [
              {
                "kind": "instance_of",
                "type": {
                  "name": "QueryContainer",
                  "namespace": "_types.query_dsl"
                }
              },
              {
                "kind": "array_of",
                "value": {
                  "kind": "instance_of",
                  "type": {
                    "name": "QueryContainer",
                    "namespace": "_types.query_dsl"
                  }
                }
              }
            ],
            "kind": "union_of"
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "QueryBase",
          "namespace": "_types.query_dsl"
        }
      },
      "kind": "interface",
      "name": {
        "name": "BoostingQuery",
        "namespace": "_types.query_dsl"
      },
      "properties": [
        {
          "name": "negative_boost",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "negative",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "QueryContainer",
              "namespace": "_types.query_dsl"
            }
          }
        },
        {
          "name": "positive",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "QueryContainer",
              "namespace": "_types.query_dsl"
            }
          }
        }
      ]
    },
    {
      "description": "A geo bounding box. The various coordinates can be mixed. When set, `wkt` takes precedence over all other fields.",
      "kind": "interface",
      "name": {
        "name": "BoundingBox",
        "namespace": "_types.query_dsl"
      },
      "properties": [
        {
          "name": "bottom_right",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "GeoLocation",
              "namespace": "_types.query_dsl"
            }
          }
        },
        {
          "name": "top_left",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "GeoLocation",
              "namespace": "_types.query_dsl"
            }
          }
        },
        {
          "name": "top_right",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "GeoLocation",
              "namespace": "_types.query_dsl"
            }
          }
        },
        {
          "name": "bottom_left",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "GeoLocation",
              "namespace": "_types.query_dsl"
            }
          }
        },
        {
          "name": "top",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "left",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "right",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "bottom",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "wkt",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "none"
        },
        {
          "name": "avg"
        },
        {
          "name": "sum"
        },
        {
          "name": "max"
        },
        {
          "name": "min"
        }
      ],
      "name": {
        "name": "ChildScoreMode",
        "namespace": "_types.query_dsl"
      }
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "or"
        },
        {
          "name": "and"
        }
      ],
      "name": {
        "name": "CombinedFieldsOperator",
        "namespace": "_types.query_dsl"
      }
    },
    {
      "inherits": {
        "type": {
          "name": "QueryBase",
          "namespace": "_types.query_dsl"
        }
      },
      "kind": "interface",
      "name": {
        "name": "CombinedFieldsQuery",
        "namespace": "_types.query_dsl"
      },
      "properties": [
        {
          "name": "fields",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "Field",
                "namespace": "_types"
              }
            }
          }
        },
        {
          "name": "query",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "auto_generate_synonyms_phrase_query",
          "required": false,
          "serverDefault": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "operator",
          "required": false,
          "serverDefault": "or",
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "CombinedFieldsOperator",
              "namespace": "_types.query_dsl"
            }
          }
        },
        {
          "name": "mimimum_should_match",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "MinimumShouldMatch",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "zero_terms_query",
          "required": false,
          "serverDefault": "none",
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "CombinedFieldsZeroTerms",
              "namespace": "_types.query_dsl"
            }
          }
        }
      ]
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "none"
        },
        {
          "name": "all"
        }
      ],
      "name": {
        "name": "CombinedFieldsZeroTerms",
        "namespace": "_types.query_dsl"
      }
    },
    {
      "inherits": {
        "type": {
          "name": "QueryBase",
          "namespace": "_types.query_dsl"
        }
      },
      "kind": "interface",
      "name": {
        "name": "CommonTermsQuery",
        "namespace": "_types.query_dsl"
      },
      "properties": [
        {
          "name": "analyzer",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "cutoff_frequency",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "high_freq_operator",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Operator",
              "namespace": "_types.query_dsl"
            }
          }
        },
        {
          "name": "low_freq_operator",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Operator",
              "namespace": "_types.query_dsl"
            }
          }
        },
        {
          "name": "minimum_should_match",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "MinimumShouldMatch",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "query",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ],
      "shortcutProperty": "query"
    },
    {
      "inherits": {
        "type": {
          "name": "QueryBase",
          "namespace": "_types.query_dsl"
        }
      },
      "kind": "interface",
      "name": {
        "name": "ConstantScoreQuery",
        "namespace": "_types.query_dsl"
      },
      "properties": [
        {
          "name": "filter",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "QueryContainer",
              "namespace": "_types.query_dsl"
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "AdditionalProperty"
      ],
      "behaviors": [
        {
          "generics": [
            {
              "kind": "instance_of",
              "type": {
                "name": "Field",
                "namespace": "_types"
              }
            },
            {
              "generics": [
                {
                  "kind": "instance_of",
                  "type": {
                    "name": "DateMath",
                    "namespace": "_types"
                  }
                },
                {
                  "kind": "instance_of",
                  "type": {
                    "name": "Time",
                    "namespace": "_types"
                  }
                }
              ],
              "kind": "instance_of",
              "type": {
                "name": "DecayPlacement",
                "namespace": "_types.query_dsl"
              }
            }
          ],
          "type": {
            "name": "AdditionalProperty",
            "namespace": "_spec_utils"
          }
        }
      ],
      "inherits": {
        "type": {
          "name": "DecayFunctionBase",
          "namespace": "_types.query_dsl"
        }
      },
      "kind": "interface",
      "name": {
        "name": "DateDecayFunction",
        "namespace": "_types.query_dsl"
      },
      "properties": []
    },
    {
      "inherits": {
        "generics": [
          {
            "kind": "instance_of",
            "type": {
              "name": "DateMath",
              "namespace": "_types"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        ],
        "type": {
          "name": "DistanceFeatureQueryBase",
          "namespace": "_types.query_dsl"
        }
      },
      "kind": "interface",
      "name": {
        "name": "DateDistanceFeatureQuery",
        "namespace": "_types.query_dsl"
      },
      "properties": []
    },
    {
      "inherits": {
        "type": {
          "name": "RangeQueryBase",
          "namespace": "_types.query_dsl"
        }
      },
      "kind": "interface",
      "name": {
        "name": "DateRangeQuery",
        "namespace": "_types.query_dsl"
      },
      "properties": [
        {
          "name": "gt",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DateMath",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "gte",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DateMath",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "lt",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DateMath",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "lte",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DateMath",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "format",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DateFormat",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "time_zone",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "TimeZone",
              "namespace": "_types"
            }
          }
        }
      ],
      "variantName": "date"
    },
    {
      "kind": "type_alias",
      "name": {
        "name": "DecayFunction",
        "namespace": "_types.query_dsl"
      },
      "type": {
        "items": [
          {
            "kind": "instance_of",
            "type": {
              "name": "DateDecayFunction",
              "namespace": "_types.query_dsl"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "NumericDecayFunction",
              "namespace": "_types.query_dsl"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "GeoDecayFunction",
              "namespace": "_types.query_dsl"
            }
          }
        ],
        "kind": "union_of"
      }
    },
    {
      "inherits": {
        "type": {
          "name": "ScoreFunctionBase",
          "namespace": "_types.query_dsl"
        }
      },
      "kind": "interface",
      "name": {
        "name": "DecayFunctionBase",
        "namespace": "_types.query_dsl"
      },
      "properties": [
        {
          "name": "multi_value_mode",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "MultiValueMode",
              "namespace": "_types.query_dsl"
            }
          }
        }
      ]
    },
    {
      "generics": [
        {
          "name": "TOrigin",
          "namespace": "_types.query_dsl"
        },
        {
          "name": "TScale",
          "namespace": "_types.query_dsl"
        }
      ],
      "kind": "interface",
      "name": {
        "name": "DecayPlacement",
        "namespace": "_types.query_dsl"
      },
      "properties": [
        {
          "name": "decay",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "offset",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "TScale",
              "namespace": "_types.query_dsl"
            }
          }
        },
        {
          "name": "scale",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "TScale",
              "namespace": "_types.query_dsl"
            }
          }
        },
        {
          "name": "origin",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "TOrigin",
              "namespace": "_types.query_dsl"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "QueryBase",
          "namespace": "_types.query_dsl"
        }
      },
      "kind": "interface",
      "name": {
        "name": "DisMaxQuery",
        "namespace": "_types.query_dsl"
      },
      "properties": [
        {
          "name": "queries",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "QueryContainer",
                "namespace": "_types.query_dsl"
              }
            }
          }
        },
        {
          "name": "tie_breaker",
          "required": false,
          "serverDefault": 0,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "type_alias",
      "name": {
        "name": "DistanceFeatureQuery",
        "namespace": "_types.query_dsl"
      },
      "type": {
        "items": [
          {
            "kind": "instance_of",
            "type": {
              "name": "GeoDistanceFeatureQuery",
              "namespace": "_types.query_dsl"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "DateDistanceFeatureQuery",
              "namespace": "_types.query_dsl"
            }
          }
        ],
        "kind": "union_of"
      }
    },
    {
      "generics": [
        {
          "name": "TOrigin",
          "namespace": "_types.query_dsl"
        },
        {
          "name": "TDistance",
          "namespace": "_types.query_dsl"
        }
      ],
      "inherits": {
        "type": {
          "name": "QueryBase",
          "namespace": "_types.query_dsl"
        }
      },
      "kind": "interface",
      "name": {
        "name": "DistanceFeatureQueryBase",
        "namespace": "_types.query_dsl"
      },
      "properties": [
        {
          "name": "origin",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "TOrigin",
              "namespace": "_types.query_dsl"
            }
          }
        },
        {
          "name": "pivot",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "TDistance",
              "namespace": "_types.query_dsl"
            }
          }
        },
        {
          "name": "field",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "QueryBase",
          "namespace": "_types.query_dsl"
        }
      },
      "kind": "interface",
      "name": {
        "name": "ExistsQuery",
        "namespace": "_types.query_dsl"
      },
      "properties": [
        {
          "name": "field",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "FieldLookup",
        "namespace": "_types.query_dsl"
      },
      "properties": [
        {
          "name": "id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "index",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndexName",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "path",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "routing",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Routing",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "none"
        },
        {
          "name": "log"
        },
        {
          "name": "log1p"
        },
        {
          "name": "log2p"
        },
        {
          "name": "ln"
        },
        {
          "name": "ln1p"
        },
        {
          "name": "ln2p"
        },
        {
          "name": "square"
        },
        {
          "name": "sqrt"
        },
        {
          "name": "reciprocal"
        }
      ],
      "name": {
        "name": "FieldValueFactorModifier",
        "namespace": "_types.query_dsl"
      }
    },
    {
      "inherits": {
        "type": {
          "name": "ScoreFunctionBase",
          "namespace": "_types.query_dsl"
        }
      },
      "kind": "interface",
      "name": {
        "name": "FieldValueFactorScoreFunction",
        "namespace": "_types.query_dsl"
      },
      "properties": [
        {
          "name": "field",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "factor",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "missing",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "modifier",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "FieldValueFactorModifier",
              "namespace": "_types.query_dsl"
            }
          }
        }
      ]
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "multiply"
        },
        {
          "name": "replace"
        },
        {
          "name": "sum"
        },
        {
          "name": "avg"
        },
        {
          "name": "max"
        },
        {
          "name": "min"
        }
      ],
      "name": {
        "name": "FunctionBoostMode",
        "namespace": "_types.query_dsl"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "FunctionScoreContainer",
        "namespace": "_types.query_dsl"
      },
      "properties": [
        {
          "name": "exp",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DecayFunction",
              "namespace": "_types.query_dsl"
            }
          }
        },
        {
          "name": "gauss",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DecayFunction",
              "namespace": "_types.query_dsl"
            }
          }
        },
        {
          "name": "linear",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DecayFunction",
              "namespace": "_types.query_dsl"
            }
          }
        },
        {
          "name": "field_value_factor",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "FieldValueFactorScoreFunction",
              "namespace": "_types.query_dsl"
            }
          }
        },
        {
          "name": "random_score",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "RandomScoreFunction",
              "namespace": "_types.query_dsl"
            }
          }
        },
        {
          "name": "script_score",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ScriptScoreFunction",
              "namespace": "_types.query_dsl"
            }
          }
        },
        {
          "containerProperty": true,
          "name": "filter",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "QueryContainer",
              "namespace": "_types.query_dsl"
            }
          }
        },
        {
          "containerProperty": true,
          "name": "weight",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        }
      ],
      "variants": {
        "kind": "container"
      }
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "multiply"
        },
        {
          "name": "sum"
        },
        {
          "name": "avg"
        },
        {
          "name": "first"
        },
        {
          "name": "max"
        },
        {
          "name": "min"
        }
      ],
      "name": {
        "name": "FunctionScoreMode",
        "namespace": "_types.query_dsl"
      }
    },
    {
      "inherits": {
        "type": {
          "name": "QueryBase",
          "namespace": "_types.query_dsl"
        }
      },
      "kind": "interface",
      "name": {
        "name": "FunctionScoreQuery",
        "namespace": "_types.query_dsl"
      },
      "properties": [
        {
          "name": "boost_mode",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "FunctionBoostMode",
              "namespace": "_types.query_dsl"
            }
          }
        },
        {
          "name": "functions",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "FunctionScoreContainer",
                "namespace": "_types.query_dsl"
              }
            }
          }
        },
        {
          "name": "max_boost",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "min_score",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "query",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "QueryContainer",
              "namespace": "_types.query_dsl"
            }
          }
        },
        {
          "name": "score_mode",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "FunctionScoreMode",
              "namespace": "_types.query_dsl"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "QueryBase",
          "namespace": "_types.query_dsl"
        }
      },
      "kind": "interface",
      "name": {
        "name": "FuzzyQuery",
        "namespace": "_types.query_dsl"
      },
      "properties": [
        {
          "name": "max_expansions",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "prefix_length",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "rewrite",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "MultiTermQueryRewrite",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "transpositions",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "fuzziness",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Fuzziness",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "value",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ],
      "shortcutProperty": "value"
    },
    {
      "attachedBehaviors": [
        "AdditionalProperty"
      ],
      "behaviors": [
        {
          "generics": [
            {
              "kind": "instance_of",
              "type": {
                "name": "Field",
                "namespace": "_types"
              }
            },
            {
              "kind": "instance_of",
              "type": {
                "name": "BoundingBox",
                "namespace": "_types.query_dsl"
              }
            }
          ],
          "type": {
            "name": "AdditionalProperty",
            "namespace": "_spec_utils"
          }
        }
      ],
      "inherits": {
        "type": {
          "name": "QueryBase",
          "namespace": "_types.query_dsl"
        }
      },
      "kind": "interface",
      "name": {
        "name": "GeoBoundingBoxQuery",
        "namespace": "_types.query_dsl"
      },
      "properties": [
        {
          "deprecation": {
            "description": "",
            "version": "7.14.0"
          },
          "name": "type",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "GeoExecution",
              "namespace": "_types.query_dsl"
            }
          }
        },
        {
          "name": "validation_method",
          "required": false,
          "serverDefault": "'strict'",
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "GeoValidationMethod",
              "namespace": "_types.query_dsl"
            }
          }
        },
        {
          "name": "ignore_unmapped",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "description": "Represents a Latitude/Longitude and optional Z value as a 2 or 3 dimensional point",
      "kind": "type_alias",
      "name": {
        "name": "GeoCoordinate",
        "namespace": "_types.query_dsl"
      },
      "type": {
        "items": [
          {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          },
          {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "double",
                "namespace": "_types"
              }
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "ThreeDimensionalPoint",
              "namespace": "_types.query_dsl"
            }
          }
        ],
        "kind": "union_of"
      }
    },
    {
      "attachedBehaviors": [
        "AdditionalProperty"
      ],
      "behaviors": [
        {
          "generics": [
            {
              "kind": "instance_of",
              "type": {
                "name": "Field",
                "namespace": "_types"
              }
            },
            {
              "generics": [
                {
                  "kind": "instance_of",
                  "type": {
                    "name": "GeoLocation",
                    "namespace": "_types.query_dsl"
                  }
                },
                {
                  "kind": "instance_of",
                  "type": {
                    "name": "Distance",
                    "namespace": "_types"
                  }
                }
              ],
              "kind": "instance_of",
              "type": {
                "name": "DecayPlacement",
                "namespace": "_types.query_dsl"
              }
            }
          ],
          "type": {
            "name": "AdditionalProperty",
            "namespace": "_spec_utils"
          }
        }
      ],
      "inherits": {
        "type": {
          "name": "DecayFunctionBase",
          "namespace": "_types.query_dsl"
        }
      },
      "kind": "interface",
      "name": {
        "name": "GeoDecayFunction",
        "namespace": "_types.query_dsl"
      },
      "properties": []
    },
    {
      "inherits": {
        "generics": [
          {
            "kind": "instance_of",
            "type": {
              "name": "GeoCoordinate",
              "namespace": "_types.query_dsl"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "Distance",
              "namespace": "_types"
            }
          }
        ],
        "type": {
          "name": "DistanceFeatureQueryBase",
          "namespace": "_types.query_dsl"
        }
      },
      "kind": "interface",
      "name": {
        "name": "GeoDistanceFeatureQuery",
        "namespace": "_types.query_dsl"
      },
      "properties": []
    },
    {
      "attachedBehaviors": [
        "AdditionalProperty"
      ],
      "behaviors": [
        {
          "generics": [
            {
              "kind": "instance_of",
              "type": {
                "name": "Field",
                "namespace": "_types"
              }
            },
            {
              "kind": "instance_of",
              "type": {
                "name": "GeoLocation",
                "namespace": "_types.query_dsl"
              }
            }
          ],
          "type": {
            "name": "AdditionalProperty",
            "namespace": "_spec_utils"
          }
        }
      ],
      "inherits": {
        "type": {
          "name": "QueryBase",
          "namespace": "_types.query_dsl"
        }
      },
      "kind": "interface",
      "name": {
        "name": "GeoDistanceQuery",
        "namespace": "_types.query_dsl"
      },
      "properties": [
        {
          "name": "distance",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Distance",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "distance_type",
          "required": false,
          "serverDefault": "'arc'",
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "GeoDistanceType",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "validation_method",
          "required": false,
          "serverDefault": "'strict'",
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "GeoValidationMethod",
              "namespace": "_types.query_dsl"
            }
          }
        }
      ]
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "memory"
        },
        {
          "name": "indexed"
        }
      ],
      "name": {
        "name": "GeoExecution",
        "namespace": "_types.query_dsl"
      }
    },
    {
      "description": "Represents a Latitude/Longitude as a 2 dimensional point",
      "kind": "type_alias",
      "name": {
        "name": "GeoLocation",
        "namespace": "_types.query_dsl"
      },
      "type": {
        "items": [
          {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          },
          {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "double",
                "namespace": "_types"
              }
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "TwoDimensionalPoint",
              "namespace": "_types.query_dsl"
            }
          }
        ],
        "kind": "union_of"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "GeoPolygonPoints",
        "namespace": "_types.query_dsl"
      },
      "properties": [
        {
          "name": "points",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "GeoLocation",
                "namespace": "_types.query_dsl"
              }
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "AdditionalProperty"
      ],
      "behaviors": [
        {
          "generics": [
            {
              "kind": "instance_of",
              "type": {
                "name": "Field",
                "namespace": "_types"
              }
            },
            {
              "kind": "instance_of",
              "type": {
                "name": "GeoPolygonPoints",
                "namespace": "_types.query_dsl"
              }
            }
          ],
          "type": {
            "name": "AdditionalProperty",
            "namespace": "_spec_utils"
          }
        }
      ],
      "deprecation": {
        "description": "Use geo-shape instead.",
        "version": "7.12.0"
      },
      "inherits": {
        "type": {
          "name": "QueryBase",
          "namespace": "_types.query_dsl"
        }
      },
      "kind": "interface",
      "name": {
        "name": "GeoPolygonQuery",
        "namespace": "_types.query_dsl"
      },
      "properties": [
        {
          "name": "validation_method",
          "required": false,
          "serverDefault": "'strict'",
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "GeoValidationMethod",
              "namespace": "_types.query_dsl"
            }
          }
        },
        {
          "name": "ignore_unmapped",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "GeoShapeFieldQuery",
        "namespace": "_types.query_dsl"
      },
      "properties": [
        {
          "name": "shape",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "GeoShape",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "indexed_shape",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "FieldLookup",
              "namespace": "_types.query_dsl"
            }
          }
        },
        {
          "name": "relation",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "GeoShapeRelation",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "AdditionalProperty"
      ],
      "behaviors": [
        {
          "generics": [
            {
              "kind": "instance_of",
              "type": {
                "name": "Field",
                "namespace": "_types"
              }
            },
            {
              "kind": "instance_of",
              "type": {
                "name": "GeoShapeFieldQuery",
                "namespace": "_types.query_dsl"
              }
            }
          ],
          "type": {
            "name": "AdditionalProperty",
            "namespace": "_spec_utils"
          }
        }
      ],
      "inherits": {
        "type": {
          "name": "QueryBase",
          "namespace": "_types.query_dsl"
        }
      },
      "kind": "interface",
      "name": {
        "name": "GeoShapeQuery",
        "namespace": "_types.query_dsl"
      },
      "properties": [
        {
          "name": "ignore_unmapped",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "coerce"
        },
        {
          "name": "ignore_malformed"
        },
        {
          "name": "strict"
        }
      ],
      "name": {
        "name": "GeoValidationMethod",
        "namespace": "_types.query_dsl"
      }
    },
    {
      "inherits": {
        "type": {
          "name": "QueryBase",
          "namespace": "_types.query_dsl"
        }
      },
      "kind": "interface",
      "name": {
        "name": "HasChildQuery",
        "namespace": "_types.query_dsl"
      },
      "properties": [
        {
          "name": "ignore_unmapped",
          "required": false,
          "serverDefault": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "inner_hits",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "InnerHits",
              "namespace": "_global.search._types"
            }
          }
        },
        {
          "name": "max_children",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "min_children",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "query",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "QueryContainer",
              "namespace": "_types.query_dsl"
            }
          }
        },
        {
          "name": "score_mode",
          "required": false,
          "serverDefault": "'none'",
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ChildScoreMode",
              "namespace": "_types.query_dsl"
            }
          }
        },
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "RelationName",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "QueryBase",
          "namespace": "_types.query_dsl"
        }
      },
      "kind": "interface",
      "name": {
        "name": "HasParentQuery",
        "namespace": "_types.query_dsl"
      },
      "properties": [
        {
          "name": "ignore_unmapped",
          "required": false,
          "serverDefault": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "inner_hits",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "InnerHits",
              "namespace": "_global.search._types"
            }
          }
        },
        {
          "name": "parent_type",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "RelationName",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "query",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "QueryContainer",
              "namespace": "_types.query_dsl"
            }
          }
        },
        {
          "name": "score",
          "required": false,
          "serverDefault": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "QueryBase",
          "namespace": "_types.query_dsl"
        }
      },
      "kind": "interface",
      "name": {
        "name": "IdsQuery",
        "namespace": "_types.query_dsl"
      },
      "properties": [
        {
          "name": "values",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Ids",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "IntervalsAllOf",
        "namespace": "_types.query_dsl"
      },
      "properties": [
        {
          "name": "intervals",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "IntervalsContainer",
                "namespace": "_types.query_dsl"
              }
            }
          }
        },
        {
          "name": "max_gaps",
          "required": false,
          "serverDefault": -1,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "ordered",
          "required": false,
          "serverDefault": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "filter",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IntervalsFilter",
              "namespace": "_types.query_dsl"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "IntervalsAnyOf",
        "namespace": "_types.query_dsl"
      },
      "properties": [
        {
          "name": "intervals",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "IntervalsContainer",
                "namespace": "_types.query_dsl"
              }
            }
          }
        },
        {
          "name": "filter",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IntervalsFilter",
              "namespace": "_types.query_dsl"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "IntervalsContainer",
        "namespace": "_types.query_dsl"
      },
      "properties": [
        {
          "name": "all_of",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IntervalsAllOf",
              "namespace": "_types.query_dsl"
            }
          }
        },
        {
          "name": "any_of",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IntervalsAnyOf",
              "namespace": "_types.query_dsl"
            }
          }
        },
        {
          "name": "fuzzy",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IntervalsFuzzy",
              "namespace": "_types.query_dsl"
            }
          }
        },
        {
          "name": "match",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IntervalsMatch",
              "namespace": "_types.query_dsl"
            }
          }
        },
        {
          "name": "prefix",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IntervalsPrefix",
              "namespace": "_types.query_dsl"
            }
          }
        },
        {
          "name": "wildcard",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IntervalsWildcard",
              "namespace": "_types.query_dsl"
            }
          }
        }
      ],
      "variants": {
        "kind": "container"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "IntervalsFilter",
        "namespace": "_types.query_dsl"
      },
      "properties": [
        {
          "name": "after",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IntervalsContainer",
              "namespace": "_types.query_dsl"
            }
          }
        },
        {
          "name": "before",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IntervalsContainer",
              "namespace": "_types.query_dsl"
            }
          }
        },
        {
          "name": "contained_by",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IntervalsContainer",
              "namespace": "_types.query_dsl"
            }
          }
        },
        {
          "name": "containing",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IntervalsContainer",
              "namespace": "_types.query_dsl"
            }
          }
        },
        {
          "name": "not_contained_by",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IntervalsContainer",
              "namespace": "_types.query_dsl"
            }
          }
        },
        {
          "name": "not_containing",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IntervalsContainer",
              "namespace": "_types.query_dsl"
            }
          }
        },
        {
          "name": "not_overlapping",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IntervalsContainer",
              "namespace": "_types.query_dsl"
            }
          }
        },
        {
          "name": "overlapping",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IntervalsContainer",
              "namespace": "_types.query_dsl"
            }
          }
        },
        {
          "name": "script",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Script",
              "namespace": "_types"
            }
          }
        }
      ],
      "variants": {
        "kind": "container"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "IntervalsFuzzy",
        "namespace": "_types.query_dsl"
      },
      "properties": [
        {
          "name": "analyzer",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "fuzziness",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Fuzziness",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "prefix_length",
          "required": false,
          "serverDefault": 0,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "term",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "transpositions",
          "required": false,
          "serverDefault": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "use_field",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "IntervalsMatch",
        "namespace": "_types.query_dsl"
      },
      "properties": [
        {
          "name": "analyzer",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "max_gaps",
          "required": false,
          "serverDefault": -1,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "ordered",
          "required": false,
          "serverDefault": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "query",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "use_field",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "filter",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IntervalsFilter",
              "namespace": "_types.query_dsl"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "IntervalsPrefix",
        "namespace": "_types.query_dsl"
      },
      "properties": [
        {
          "name": "analyzer",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "prefix",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "use_field",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "QueryBase",
          "namespace": "_types.query_dsl"
        }
      },
      "kind": "interface",
      "name": {
        "name": "IntervalsQuery",
        "namespace": "_types.query_dsl"
      },
      "properties": [
        {
          "name": "all_of",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IntervalsAllOf",
              "namespace": "_types.query_dsl"
            }
          }
        },
        {
          "name": "any_of",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IntervalsAnyOf",
              "namespace": "_types.query_dsl"
            }
          }
        },
        {
          "name": "fuzzy",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IntervalsFuzzy",
              "namespace": "_types.query_dsl"
            }
          }
        },
        {
          "name": "match",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IntervalsMatch",
              "namespace": "_types.query_dsl"
            }
          }
        },
        {
          "name": "prefix",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IntervalsPrefix",
              "namespace": "_types.query_dsl"
            }
          }
        },
        {
          "name": "wildcard",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IntervalsWildcard",
              "namespace": "_types.query_dsl"
            }
          }
        }
      ],
      "variants": {
        "kind": "container"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "IntervalsWildcard",
        "namespace": "_types.query_dsl"
      },
      "properties": [
        {
          "name": "analyzer",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "pattern",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "use_field",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "description": "Text that we want similar documents for or a lookup to a document's field for the text.",
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-mlt-query.html#_document_input_parameters",
      "kind": "type_alias",
      "name": {
        "name": "Like",
        "namespace": "_types.query_dsl"
      },
      "type": {
        "items": [
          {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "LikeDocument",
              "namespace": "_types.query_dsl"
            }
          }
        ],
        "kind": "union_of"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "LikeDocument",
        "namespace": "_types.query_dsl"
      },
      "properties": [
        {
          "name": "doc",
          "required": false,
          "type": {
            "kind": "user_defined_value"
          }
        },
        {
          "name": "fields",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "Field",
                "namespace": "_types"
              }
            }
          }
        },
        {
          "name": "_id",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "_type",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Type",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "_index",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndexName",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "per_field_analyzer",
          "required": false,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "Field",
                "namespace": "_types"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        },
        {
          "name": "routing",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Routing",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "version",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "VersionNumber",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "version_type",
          "required": false,
          "serverDefault": "'internal'",
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "VersionType",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "QueryBase",
          "namespace": "_types.query_dsl"
        }
      },
      "kind": "interface",
      "name": {
        "name": "MatchAllQuery",
        "namespace": "_types.query_dsl"
      },
      "properties": []
    },
    {
      "inherits": {
        "type": {
          "name": "QueryBase",
          "namespace": "_types.query_dsl"
        }
      },
      "kind": "interface",
      "name": {
        "name": "MatchBoolPrefixQuery",
        "namespace": "_types.query_dsl"
      },
      "properties": [
        {
          "name": "analyzer",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "fuzziness",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Fuzziness",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "fuzzy_rewrite",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "MultiTermQueryRewrite",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "fuzzy_transpositions",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "max_expansions",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "minimum_should_match",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "MinimumShouldMatch",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "operator",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Operator",
              "namespace": "_types.query_dsl"
            }
          }
        },
        {
          "name": "prefix_length",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "query",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ],
      "shortcutProperty": "query"
    },
    {
      "inherits": {
        "type": {
          "name": "QueryBase",
          "namespace": "_types.query_dsl"
        }
      },
      "kind": "interface",
      "name": {
        "name": "MatchNoneQuery",
        "namespace": "_types.query_dsl"
      },
      "properties": []
    },
    {
      "inherits": {
        "type": {
          "name": "QueryBase",
          "namespace": "_types.query_dsl"
        }
      },
      "kind": "interface",
      "name": {
        "name": "MatchPhrasePrefixQuery",
        "namespace": "_types.query_dsl"
      },
      "properties": [
        {
          "name": "analyzer",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "max_expansions",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "query",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "slop",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "zero_terms_query",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ZeroTermsQuery",
              "namespace": "_types.query_dsl"
            }
          }
        }
      ],
      "shortcutProperty": "query"
    },
    {
      "inherits": {
        "type": {
          "name": "QueryBase",
          "namespace": "_types.query_dsl"
        }
      },
      "kind": "interface",
      "name": {
        "name": "MatchPhraseQuery",
        "namespace": "_types.query_dsl"
      },
      "properties": [
        {
          "name": "analyzer",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "query",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "slop",
          "required": false,
          "serverDefault": 0,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "zero_terms_query",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ZeroTermsQuery",
              "namespace": "_types.query_dsl"
            }
          }
        }
      ],
      "shortcutProperty": "query"
    },
    {
      "inherits": {
        "type": {
          "name": "QueryBase",
          "namespace": "_types.query_dsl"
        }
      },
      "kind": "interface",
      "name": {
        "name": "MatchQuery",
        "namespace": "_types.query_dsl"
      },
      "properties": [
        {
          "name": "analyzer",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "auto_generate_synonyms_phrase_query",
          "required": false,
          "serverDefault": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "deprecation": {
            "description": "",
            "version": "7.3.0"
          },
          "name": "cutoff_frequency",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "fuzziness",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Fuzziness",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "fuzzy_rewrite",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "MultiTermQueryRewrite",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "fuzzy_transpositions",
          "required": false,
          "serverDefault": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "lenient",
          "required": false,
          "serverDefault": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "max_expansions",
          "required": false,
          "serverDefault": 50,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "minimum_should_match",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "MinimumShouldMatch",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "operator",
          "required": false,
          "serverDefault": "'or'",
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Operator",
              "namespace": "_types.query_dsl"
            }
          }
        },
        {
          "name": "prefix_length",
          "required": false,
          "serverDefault": 0,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "query",
          "required": true,
          "type": {
            "items": [
              {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              },
              {
                "kind": "instance_of",
                "type": {
                  "name": "float",
                  "namespace": "_types"
                }
              },
              {
                "kind": "instance_of",
                "type": {
                  "name": "boolean",
                  "namespace": "internal"
                }
              }
            ],
            "kind": "union_of"
          }
        },
        {
          "name": "zero_terms_query",
          "required": false,
          "serverDefault": "'none'",
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ZeroTermsQuery",
              "namespace": "_types.query_dsl"
            }
          }
        }
      ],
      "shortcutProperty": "query"
    },
    {
      "inherits": {
        "type": {
          "name": "QueryBase",
          "namespace": "_types.query_dsl"
        }
      },
      "kind": "interface",
      "name": {
        "name": "MoreLikeThisQuery",
        "namespace": "_types.query_dsl"
      },
      "properties": [
        {
          "name": "analyzer",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "boost_terms",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "fail_on_unsupported_field",
          "required": false,
          "serverDefault": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "fields",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "Field",
                "namespace": "_types"
              }
            }
          }
        },
        {
          "name": "include",
          "required": false,
          "serverDefault": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "like",
          "required": true,
          "type": {
            "items": [
              {
                "kind": "instance_of",
                "type": {
                  "name": "Like",
                  "namespace": "_types.query_dsl"
                }
              },
              {
                "kind": "array_of",
                "value": {
                  "kind": "instance_of",
                  "type": {
                    "name": "Like",
                    "namespace": "_types.query_dsl"
                  }
                }
              }
            ],
            "kind": "union_of"
          }
        },
        {
          "name": "max_doc_freq",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "max_query_terms",
          "required": false,
          "serverDefault": 25,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "max_word_length",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "min_doc_freq",
          "required": false,
          "serverDefault": 5,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "minimum_should_match",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "MinimumShouldMatch",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "min_term_freq",
          "required": false,
          "serverDefault": 2,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "min_word_length",
          "required": false,
          "serverDefault": 0,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "per_field_analyzer",
          "required": false,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "Field",
                "namespace": "_types"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        },
        {
          "name": "routing",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Routing",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "stop_words",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "StopWords",
              "namespace": "_types.analysis"
            }
          }
        },
        {
          "name": "unlike",
          "required": false,
          "type": {
            "items": [
              {
                "kind": "instance_of",
                "type": {
                  "name": "Like",
                  "namespace": "_types.query_dsl"
                }
              },
              {
                "kind": "array_of",
                "value": {
                  "kind": "instance_of",
                  "type": {
                    "name": "Like",
                    "namespace": "_types.query_dsl"
                  }
                }
              }
            ],
            "kind": "union_of"
          }
        },
        {
          "name": "version",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "VersionNumber",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "version_type",
          "required": false,
          "serverDefault": "'internal'",
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "VersionType",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "QueryBase",
          "namespace": "_types.query_dsl"
        }
      },
      "kind": "interface",
      "name": {
        "name": "MultiMatchQuery",
        "namespace": "_types.query_dsl"
      },
      "properties": [
        {
          "name": "analyzer",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "auto_generate_synonyms_phrase_query",
          "required": false,
          "serverDefault": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "deprecation": {
            "description": "",
            "version": "7.3.0"
          },
          "name": "cutoff_frequency",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "fields",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Fields",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "fuzziness",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Fuzziness",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "fuzzy_rewrite",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "MultiTermQueryRewrite",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "fuzzy_transpositions",
          "required": false,
          "serverDefault": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "lenient",
          "required": false,
          "serverDefault": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "max_expansions",
          "required": false,
          "serverDefault": 50,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "minimum_should_match",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "MinimumShouldMatch",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "operator",
          "required": false,
          "serverDefault": "'or'",
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Operator",
              "namespace": "_types.query_dsl"
            }
          }
        },
        {
          "name": "prefix_length",
          "required": false,
          "serverDefault": 0,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "query",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "slop",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "tie_breaker",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "type",
          "required": false,
          "serverDefault": "'best_fields'",
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "TextQueryType",
              "namespace": "_types.query_dsl"
            }
          }
        },
        {
          "name": "zero_terms_query",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ZeroTermsQuery",
              "namespace": "_types.query_dsl"
            }
          }
        }
      ]
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "min"
        },
        {
          "name": "max"
        },
        {
          "name": "avg"
        },
        {
          "name": "sum"
        }
      ],
      "name": {
        "name": "MultiValueMode",
        "namespace": "_types.query_dsl"
      }
    },
    {
      "inherits": {
        "type": {
          "name": "QueryBase",
          "namespace": "_types.query_dsl"
        }
      },
      "kind": "interface",
      "name": {
        "name": "NestedQuery",
        "namespace": "_types.query_dsl"
      },
      "properties": [
        {
          "name": "ignore_unmapped",
          "required": false,
          "serverDefault": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "inner_hits",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "InnerHits",
              "namespace": "_global.search._types"
            }
          }
        },
        {
          "name": "path",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "query",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "QueryContainer",
              "namespace": "_types.query_dsl"
            }
          }
        },
        {
          "name": "score_mode",
          "required": false,
          "serverDefault": "'avg'",
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "NestedScoreMode",
              "namespace": "_types.query_dsl"
            }
          }
        }
      ]
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "avg"
        },
        {
          "name": "sum"
        },
        {
          "name": "min"
        },
        {
          "name": "max"
        },
        {
          "name": "none"
        }
      ],
      "name": {
        "name": "NestedScoreMode",
        "namespace": "_types.query_dsl"
      }
    },
    {
      "inherits": {
        "type": {
          "name": "RangeQueryBase",
          "namespace": "_types.query_dsl"
        }
      },
      "kind": "interface",
      "name": {
        "name": "NumberRangeQuery",
        "namespace": "_types.query_dsl"
      },
      "properties": [
        {
          "name": "gt",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "gte",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "lt",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "lte",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        }
      ],
      "variantName": "number"
    },
    {
      "attachedBehaviors": [
        "AdditionalProperty"
      ],
      "behaviors": [
        {
          "generics": [
            {
              "kind": "instance_of",
              "type": {
                "name": "Field",
                "namespace": "_types"
              }
            },
            {
              "generics": [
                {
                  "kind": "instance_of",
                  "type": {
                    "name": "double",
                    "namespace": "_types"
                  }
                },
                {
                  "kind": "instance_of",
                  "type": {
                    "name": "double",
                    "namespace": "_types"
                  }
                }
              ],
              "kind": "instance_of",
              "type": {
                "name": "DecayPlacement",
                "namespace": "_types.query_dsl"
              }
            }
          ],
          "type": {
            "name": "AdditionalProperty",
            "namespace": "_spec_utils"
          }
        }
      ],
      "inherits": {
        "type": {
          "name": "DecayFunctionBase",
          "namespace": "_types.query_dsl"
        }
      },
      "kind": "interface",
      "name": {
        "name": "NumericDecayFunction",
        "namespace": "_types.query_dsl"
      },
      "properties": []
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "and"
        },
        {
          "name": "or"
        }
      ],
      "name": {
        "name": "Operator",
        "namespace": "_types.query_dsl"
      }
    },
    {
      "inherits": {
        "type": {
          "name": "QueryBase",
          "namespace": "_types.query_dsl"
        }
      },
      "kind": "interface",
      "name": {
        "name": "ParentIdQuery",
        "namespace": "_types.query_dsl"
      },
      "properties": [
        {
          "name": "id",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "ignore_unmapped",
          "required": false,
          "serverDefault": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "type",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "RelationName",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "QueryBase",
          "namespace": "_types.query_dsl"
        }
      },
      "kind": "interface",
      "name": {
        "name": "PercolateQuery",
        "namespace": "_types.query_dsl"
      },
      "properties": [
        {
          "name": "document",
          "required": false,
          "type": {
            "kind": "user_defined_value"
          }
        },
        {
          "name": "documents",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "user_defined_value"
            }
          }
        },
        {
          "name": "field",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "id",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "index",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndexName",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "name",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "preference",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "routing",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Routing",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "version",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "VersionNumber",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "QueryBase",
          "namespace": "_types.query_dsl"
        }
      },
      "kind": "interface",
      "name": {
        "name": "PinnedQuery",
        "namespace": "_types.query_dsl"
      },
      "properties": [
        {
          "name": "ids",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "Id",
                "namespace": "_types"
              }
            }
          }
        },
        {
          "name": "organic",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "QueryContainer",
              "namespace": "_types.query_dsl"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "QueryBase",
          "namespace": "_types.query_dsl"
        }
      },
      "kind": "interface",
      "name": {
        "name": "PrefixQuery",
        "namespace": "_types.query_dsl"
      },
      "properties": [
        {
          "name": "rewrite",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "MultiTermQueryRewrite",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "value",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "case_insensitive",
          "required": false,
          "serverDefault": false,
          "since": "7.10.0",
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ],
      "shortcutProperty": "value"
    },
    {
      "kind": "interface",
      "name": {
        "name": "QueryBase",
        "namespace": "_types.query_dsl"
      },
      "properties": [
        {
          "name": "boost",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "float",
              "namespace": "_types"
            }
          }
        },
        {
          "identifier": "query_name",
          "name": "_name",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "QueryContainer",
        "namespace": "_types.query_dsl"
      },
      "properties": [
        {
          "name": "bool",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "BoolQuery",
              "namespace": "_types.query_dsl"
            }
          }
        },
        {
          "name": "boosting",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "BoostingQuery",
              "namespace": "_types.query_dsl"
            }
          }
        },
        {
          "deprecation": {
            "description": "",
            "version": "7.3.0"
          },
          "name": "common",
          "required": false,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "Field",
                "namespace": "_types"
              }
            },
            "kind": "dictionary_of",
            "singleKey": true,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "CommonTermsQuery",
                "namespace": "_types.query_dsl"
              }
            }
          }
        },
        {
          "name": "combined_fields",
          "required": false,
          "since": "7.13.0",
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "CombinedFieldsQuery",
              "namespace": "_types.query_dsl"
            }
          }
        },
        {
          "name": "constant_score",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ConstantScoreQuery",
              "namespace": "_types.query_dsl"
            }
          }
        },
        {
          "name": "dis_max",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DisMaxQuery",
              "namespace": "_types.query_dsl"
            }
          }
        },
        {
          "name": "distance_feature",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DistanceFeatureQuery",
              "namespace": "_types.query_dsl"
            }
          }
        },
        {
          "name": "exists",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ExistsQuery",
              "namespace": "_types.query_dsl"
            }
          }
        },
        {
          "name": "function_score",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "FunctionScoreQuery",
              "namespace": "_types.query_dsl"
            }
          }
        },
        {
          "name": "fuzzy",
          "required": false,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "Field",
                "namespace": "_types"
              }
            },
            "kind": "dictionary_of",
            "singleKey": true,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "FuzzyQuery",
                "namespace": "_types.query_dsl"
              }
            }
          }
        },
        {
          "name": "geo_bounding_box",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "GeoBoundingBoxQuery",
              "namespace": "_types.query_dsl"
            }
          }
        },
        {
          "name": "geo_distance",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "GeoDistanceQuery",
              "namespace": "_types.query_dsl"
            }
          }
        },
        {
          "name": "geo_polygon",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "GeoPolygonQuery",
              "namespace": "_types.query_dsl"
            }
          }
        },
        {
          "name": "geo_shape",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "GeoShapeQuery",
              "namespace": "_types.query_dsl"
            }
          }
        },
        {
          "name": "has_child",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "HasChildQuery",
              "namespace": "_types.query_dsl"
            }
          }
        },
        {
          "name": "has_parent",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "HasParentQuery",
              "namespace": "_types.query_dsl"
            }
          }
        },
        {
          "name": "ids",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IdsQuery",
              "namespace": "_types.query_dsl"
            }
          }
        },
        {
          "name": "intervals",
          "required": false,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "Field",
                "namespace": "_types"
              }
            },
            "kind": "dictionary_of",
            "singleKey": true,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "IntervalsQuery",
                "namespace": "_types.query_dsl"
              }
            }
          }
        },
        {
          "name": "match",
          "required": false,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "Field",
                "namespace": "_types"
              }
            },
            "kind": "dictionary_of",
            "singleKey": true,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "MatchQuery",
                "namespace": "_types.query_dsl"
              }
            }
          }
        },
        {
          "name": "match_all",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "MatchAllQuery",
              "namespace": "_types.query_dsl"
            }
          }
        },
        {
          "name": "match_bool_prefix",
          "required": false,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "Field",
                "namespace": "_types"
              }
            },
            "kind": "dictionary_of",
            "singleKey": true,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "MatchBoolPrefixQuery",
                "namespace": "_types.query_dsl"
              }
            }
          }
        },
        {
          "name": "match_none",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "MatchNoneQuery",
              "namespace": "_types.query_dsl"
            }
          }
        },
        {
          "name": "match_phrase",
          "required": false,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "Field",
                "namespace": "_types"
              }
            },
            "kind": "dictionary_of",
            "singleKey": true,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "MatchPhraseQuery",
                "namespace": "_types.query_dsl"
              }
            }
          }
        },
        {
          "name": "match_phrase_prefix",
          "required": false,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "Field",
                "namespace": "_types"
              }
            },
            "kind": "dictionary_of",
            "singleKey": true,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "MatchPhrasePrefixQuery",
                "namespace": "_types.query_dsl"
              }
            }
          }
        },
        {
          "name": "more_like_this",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "MoreLikeThisQuery",
              "namespace": "_types.query_dsl"
            }
          }
        },
        {
          "name": "multi_match",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "MultiMatchQuery",
              "namespace": "_types.query_dsl"
            }
          }
        },
        {
          "name": "nested",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "NestedQuery",
              "namespace": "_types.query_dsl"
            }
          }
        },
        {
          "name": "parent_id",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ParentIdQuery",
              "namespace": "_types.query_dsl"
            }
          }
        },
        {
          "name": "percolate",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "PercolateQuery",
              "namespace": "_types.query_dsl"
            }
          }
        },
        {
          "name": "pinned",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "PinnedQuery",
              "namespace": "_types.query_dsl"
            }
          }
        },
        {
          "name": "prefix",
          "required": false,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "Field",
                "namespace": "_types"
              }
            },
            "kind": "dictionary_of",
            "singleKey": true,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "PrefixQuery",
                "namespace": "_types.query_dsl"
              }
            }
          }
        },
        {
          "name": "query_string",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "QueryStringQuery",
              "namespace": "_types.query_dsl"
            }
          }
        },
        {
          "name": "range",
          "required": false,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "Field",
                "namespace": "_types"
              }
            },
            "kind": "dictionary_of",
            "singleKey": true,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "RangeQuery",
                "namespace": "_types.query_dsl"
              }
            }
          }
        },
        {
          "name": "rank_feature",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "RankFeatureQuery",
              "namespace": "_types.query_dsl"
            }
          }
        },
        {
          "name": "regexp",
          "required": false,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "Field",
                "namespace": "_types"
              }
            },
            "kind": "dictionary_of",
            "singleKey": true,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "RegexpQuery",
                "namespace": "_types.query_dsl"
              }
            }
          }
        },
        {
          "name": "script",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ScriptQuery",
              "namespace": "_types.query_dsl"
            }
          }
        },
        {
          "name": "script_score",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ScriptScoreQuery",
              "namespace": "_types.query_dsl"
            }
          }
        },
        {
          "name": "shape",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ShapeQuery",
              "namespace": "_types.query_dsl"
            }
          }
        },
        {
          "name": "simple_query_string",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "SimpleQueryStringQuery",
              "namespace": "_types.query_dsl"
            }
          }
        },
        {
          "name": "span_containing",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "SpanContainingQuery",
              "namespace": "_types.query_dsl"
            }
          }
        },
        {
          "name": "field_masking_span",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "SpanFieldMaskingQuery",
              "namespace": "_types.query_dsl"
            }
          }
        },
        {
          "name": "span_first",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "SpanFirstQuery",
              "namespace": "_types.query_dsl"
            }
          }
        },
        {
          "name": "span_multi",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "SpanMultiTermQuery",
              "namespace": "_types.query_dsl"
            }
          }
        },
        {
          "name": "span_near",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "SpanNearQuery",
              "namespace": "_types.query_dsl"
            }
          }
        },
        {
          "name": "span_not",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "SpanNotQuery",
              "namespace": "_types.query_dsl"
            }
          }
        },
        {
          "name": "span_or",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "SpanOrQuery",
              "namespace": "_types.query_dsl"
            }
          }
        },
        {
          "name": "span_term",
          "required": false,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "Field",
                "namespace": "_types"
              }
            },
            "kind": "dictionary_of",
            "singleKey": true,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "SpanTermQuery",
                "namespace": "_types.query_dsl"
              }
            }
          }
        },
        {
          "name": "span_within",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "SpanWithinQuery",
              "namespace": "_types.query_dsl"
            }
          }
        },
        {
          "name": "term",
          "required": false,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "Field",
                "namespace": "_types"
              }
            },
            "kind": "dictionary_of",
            "singleKey": true,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "TermQuery",
                "namespace": "_types.query_dsl"
              }
            }
          }
        },
        {
          "name": "terms",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "TermsQuery",
              "namespace": "_types.query_dsl"
            }
          }
        },
        {
          "name": "terms_set",
          "required": false,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "Field",
                "namespace": "_types"
              }
            },
            "kind": "dictionary_of",
            "singleKey": true,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "TermsSetQuery",
                "namespace": "_types.query_dsl"
              }
            }
          }
        },
        {
          "name": "wildcard",
          "required": false,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "Field",
                "namespace": "_types"
              }
            },
            "kind": "dictionary_of",
            "singleKey": true,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "WildcardQuery",
                "namespace": "_types.query_dsl"
              }
            }
          }
        },
        {
          "deprecation": {
            "description": "https://www.elastic.co/guide/en/elasticsearch/reference/7.x/removal-of-types.html",
            "version": "7.0.0"
          },
          "name": "type",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "TypeQuery",
              "namespace": "_types.query_dsl"
            }
          }
        }
      ],
      "variants": {
        "kind": "container"
      }
    },
    {
      "inherits": {
        "type": {
          "name": "QueryBase",
          "namespace": "_types.query_dsl"
        }
      },
      "kind": "interface",
      "name": {
        "name": "QueryStringQuery",
        "namespace": "_types.query_dsl"
      },
      "properties": [
        {
          "name": "allow_leading_wildcard",
          "required": false,
          "serverDefault": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "analyzer",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "analyze_wildcard",
          "required": false,
          "serverDefault": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "auto_generate_synonyms_phrase_query",
          "required": false,
          "serverDefault": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "default_field",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "default_operator",
          "required": false,
          "serverDefault": "'or'",
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Operator",
              "namespace": "_types.query_dsl"
            }
          }
        },
        {
          "name": "enable_position_increments",
          "required": false,
          "serverDefault": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "escape",
          "required": false,
          "serverDefault": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "fields",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "Field",
                "namespace": "_types"
              }
            }
          }
        },
        {
          "name": "fuzziness",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Fuzziness",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "fuzzy_max_expansions",
          "required": false,
          "serverDefault": 50,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "fuzzy_prefix_length",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "fuzzy_rewrite",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "MultiTermQueryRewrite",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "fuzzy_transpositions",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "lenient",
          "required": false,
          "serverDefault": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "max_determinized_states",
          "required": false,
          "serverDefault": 10000,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "minimum_should_match",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "MinimumShouldMatch",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "phrase_slop",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "query",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "quote_analyzer",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "quote_field_suffix",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "rewrite",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "MultiTermQueryRewrite",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "tie_breaker",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "time_zone",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "TimeZone",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "type",
          "required": false,
          "serverDefault": "'best_fields'",
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "TextQueryType",
              "namespace": "_types.query_dsl"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "ScoreFunctionBase",
          "namespace": "_types.query_dsl"
        }
      },
      "kind": "interface",
      "name": {
        "name": "RandomScoreFunction",
        "namespace": "_types.query_dsl"
      },
      "properties": [
        {
          "name": "field",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "seed",
          "required": false,
          "type": {
            "items": [
              {
                "kind": "instance_of",
                "type": {
                  "name": "long",
                  "namespace": "_types"
                }
              },
              {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              }
            ],
            "kind": "union_of"
          }
        }
      ]
    },
    {
      "kind": "type_alias",
      "name": {
        "name": "RangeQuery",
        "namespace": "_types.query_dsl"
      },
      "type": {
        "items": [
          {
            "kind": "instance_of",
            "type": {
              "name": "DateRangeQuery",
              "namespace": "_types.query_dsl"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "NumberRangeQuery",
              "namespace": "_types.query_dsl"
            }
          }
        ],
        "kind": "union_of"
      }
    },
    {
      "inherits": {
        "type": {
          "name": "QueryBase",
          "namespace": "_types.query_dsl"
        }
      },
      "kind": "interface",
      "name": {
        "name": "RangeQueryBase",
        "namespace": "_types.query_dsl"
      },
      "properties": [
        {
          "name": "relation",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "RangeRelation",
              "namespace": "_types.query_dsl"
            }
          }
        }
      ]
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "within"
        },
        {
          "name": "contains"
        },
        {
          "name": "intersects"
        }
      ],
      "name": {
        "name": "RangeRelation",
        "namespace": "_types.query_dsl"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "RankFeatureFunction",
        "namespace": "_types.query_dsl"
      },
      "properties": []
    },
    {
      "inherits": {
        "type": {
          "name": "RankFeatureFunction",
          "namespace": "_types.query_dsl"
        }
      },
      "kind": "interface",
      "name": {
        "name": "RankFeatureFunctionLinear",
        "namespace": "_types.query_dsl"
      },
      "properties": []
    },
    {
      "inherits": {
        "type": {
          "name": "RankFeatureFunction",
          "namespace": "_types.query_dsl"
        }
      },
      "kind": "interface",
      "name": {
        "name": "RankFeatureFunctionLogarithm",
        "namespace": "_types.query_dsl"
      },
      "properties": [
        {
          "name": "scaling_factor",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "float",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "RankFeatureFunction",
          "namespace": "_types.query_dsl"
        }
      },
      "kind": "interface",
      "name": {
        "name": "RankFeatureFunctionSaturation",
        "namespace": "_types.query_dsl"
      },
      "properties": [
        {
          "name": "pivot",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "float",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "RankFeatureFunction",
          "namespace": "_types.query_dsl"
        }
      },
      "kind": "interface",
      "name": {
        "name": "RankFeatureFunctionSigmoid",
        "namespace": "_types.query_dsl"
      },
      "properties": [
        {
          "name": "pivot",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "float",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "exponent",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "float",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "QueryBase",
          "namespace": "_types.query_dsl"
        }
      },
      "kind": "interface",
      "name": {
        "name": "RankFeatureQuery",
        "namespace": "_types.query_dsl"
      },
      "properties": [
        {
          "name": "field",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "saturation",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "RankFeatureFunctionSaturation",
              "namespace": "_types.query_dsl"
            }
          }
        },
        {
          "name": "log",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "RankFeatureFunctionLogarithm",
              "namespace": "_types.query_dsl"
            }
          }
        },
        {
          "name": "linear",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "RankFeatureFunctionLinear",
              "namespace": "_types.query_dsl"
            }
          }
        },
        {
          "name": "sigmoid",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "RankFeatureFunctionSigmoid",
              "namespace": "_types.query_dsl"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "QueryBase",
          "namespace": "_types.query_dsl"
        }
      },
      "kind": "interface",
      "name": {
        "name": "RegexpQuery",
        "namespace": "_types.query_dsl"
      },
      "properties": [
        {
          "name": "case_insensitive",
          "required": false,
          "serverDefault": false,
          "since": "7.10.0",
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "flags",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "max_determinized_states",
          "required": false,
          "serverDefault": 10000,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "rewrite",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "MultiTermQueryRewrite",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "value",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ],
      "shortcutProperty": "value"
    },
    {
      "kind": "interface",
      "name": {
        "name": "ScoreFunctionBase",
        "namespace": "_types.query_dsl"
      },
      "properties": [
        {
          "name": "filter",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "QueryContainer",
              "namespace": "_types.query_dsl"
            }
          }
        },
        {
          "name": "weight",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "QueryBase",
          "namespace": "_types.query_dsl"
        }
      },
      "kind": "interface",
      "name": {
        "name": "ScriptQuery",
        "namespace": "_types.query_dsl"
      },
      "properties": [
        {
          "name": "script",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Script",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "ScoreFunctionBase",
          "namespace": "_types.query_dsl"
        }
      },
      "kind": "interface",
      "name": {
        "name": "ScriptScoreFunction",
        "namespace": "_types.query_dsl"
      },
      "properties": [
        {
          "name": "script",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Script",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "QueryBase",
          "namespace": "_types.query_dsl"
        }
      },
      "kind": "interface",
      "name": {
        "name": "ScriptScoreQuery",
        "namespace": "_types.query_dsl"
      },
      "properties": [
        {
          "name": "min_score",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "float",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "query",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "QueryContainer",
              "namespace": "_types.query_dsl"
            }
          }
        },
        {
          "name": "script",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Script",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "ShapeFieldQuery",
        "namespace": "_types.query_dsl"
      },
      "properties": [
        {
          "name": "ignore_unmapped",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "indexed_shape",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "FieldLookup",
              "namespace": "_types.query_dsl"
            }
          }
        },
        {
          "name": "relation",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ShapeRelation",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "shape",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "GeoShape",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "AdditionalProperty"
      ],
      "behaviors": [
        {
          "generics": [
            {
              "kind": "instance_of",
              "type": {
                "name": "Field",
                "namespace": "_types"
              }
            },
            {
              "kind": "instance_of",
              "type": {
                "name": "ShapeFieldQuery",
                "namespace": "_types.query_dsl"
              }
            }
          ],
          "type": {
            "name": "AdditionalProperty",
            "namespace": "_spec_utils"
          }
        }
      ],
      "inherits": {
        "type": {
          "name": "QueryBase",
          "namespace": "_types.query_dsl"
        }
      },
      "kind": "interface",
      "name": {
        "name": "ShapeQuery",
        "namespace": "_types.query_dsl"
      },
      "properties": []
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "NONE"
        },
        {
          "name": "AND"
        },
        {
          "name": "OR"
        },
        {
          "name": "NOT"
        },
        {
          "name": "PREFIX"
        },
        {
          "name": "PHRASE"
        },
        {
          "name": "PRECEDENCE"
        },
        {
          "name": "ESCAPE"
        },
        {
          "name": "WHITESPACE"
        },
        {
          "name": "FUZZY"
        },
        {
          "name": "NEAR"
        },
        {
          "name": "SLOP"
        },
        {
          "name": "ALL"
        }
      ],
      "name": {
        "name": "SimpleQueryStringFlags",
        "namespace": "_types.query_dsl"
      }
    },
    {
      "inherits": {
        "type": {
          "name": "QueryBase",
          "namespace": "_types.query_dsl"
        }
      },
      "kind": "interface",
      "name": {
        "name": "SimpleQueryStringQuery",
        "namespace": "_types.query_dsl"
      },
      "properties": [
        {
          "name": "analyzer",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "analyze_wildcard",
          "required": false,
          "serverDefault": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "auto_generate_synonyms_phrase_query",
          "required": false,
          "serverDefault": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "default_operator",
          "required": false,
          "serverDefault": "'or'",
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Operator",
              "namespace": "_types.query_dsl"
            }
          }
        },
        {
          "name": "fields",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "Field",
                "namespace": "_types"
              }
            }
          }
        },
        {
          "name": "flags",
          "required": false,
          "type": {
            "items": [
              {
                "kind": "instance_of",
                "type": {
                  "name": "SimpleQueryStringFlags",
                  "namespace": "_types.query_dsl"
                }
              },
              {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              }
            ],
            "kind": "union_of"
          }
        },
        {
          "name": "fuzzy_max_expansions",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "fuzzy_prefix_length",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "fuzzy_transpositions",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "lenient",
          "required": false,
          "serverDefault": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "minimum_should_match",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "MinimumShouldMatch",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "query",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "quote_field_suffix",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "QueryBase",
          "namespace": "_types.query_dsl"
        }
      },
      "kind": "interface",
      "name": {
        "name": "SpanContainingQuery",
        "namespace": "_types.query_dsl"
      },
      "properties": [
        {
          "name": "big",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "SpanQuery",
              "namespace": "_types.query_dsl"
            }
          }
        },
        {
          "name": "little",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "SpanQuery",
              "namespace": "_types.query_dsl"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "QueryBase",
          "namespace": "_types.query_dsl"
        }
      },
      "kind": "interface",
      "name": {
        "name": "SpanFieldMaskingQuery",
        "namespace": "_types.query_dsl"
      },
      "properties": [
        {
          "name": "field",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "query",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "SpanQuery",
              "namespace": "_types.query_dsl"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "QueryBase",
          "namespace": "_types.query_dsl"
        }
      },
      "kind": "interface",
      "name": {
        "name": "SpanFirstQuery",
        "namespace": "_types.query_dsl"
      },
      "properties": [
        {
          "name": "end",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "match",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "SpanQuery",
              "namespace": "_types.query_dsl"
            }
          }
        }
      ]
    },
    {
      "description": "Can only be used as a clause in a span_near query.",
      "kind": "type_alias",
      "name": {
        "name": "SpanGapQuery",
        "namespace": "_types.query_dsl"
      },
      "type": {
        "key": {
          "kind": "instance_of",
          "type": {
            "name": "Field",
            "namespace": "_types"
          }
        },
        "kind": "dictionary_of",
        "singleKey": true,
        "value": {
          "kind": "instance_of",
          "type": {
            "name": "integer",
            "namespace": "_types"
          }
        }
      }
    },
    {
      "inherits": {
        "type": {
          "name": "QueryBase",
          "namespace": "_types.query_dsl"
        }
      },
      "kind": "interface",
      "name": {
        "name": "SpanMultiTermQuery",
        "namespace": "_types.query_dsl"
      },
      "properties": [
        {
          "description": "Should be a multi term query (one of wildcard, fuzzy, prefix, range or regexp query)",
          "name": "match",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "QueryContainer",
              "namespace": "_types.query_dsl"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "QueryBase",
          "namespace": "_types.query_dsl"
        }
      },
      "kind": "interface",
      "name": {
        "name": "SpanNearQuery",
        "namespace": "_types.query_dsl"
      },
      "properties": [
        {
          "name": "clauses",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "SpanQuery",
                "namespace": "_types.query_dsl"
              }
            }
          }
        },
        {
          "name": "in_order",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "slop",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "QueryBase",
          "namespace": "_types.query_dsl"
        }
      },
      "kind": "interface",
      "name": {
        "name": "SpanNotQuery",
        "namespace": "_types.query_dsl"
      },
      "properties": [
        {
          "name": "dist",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "exclude",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "SpanQuery",
              "namespace": "_types.query_dsl"
            }
          }
        },
        {
          "name": "include",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "SpanQuery",
              "namespace": "_types.query_dsl"
            }
          }
        },
        {
          "name": "post",
          "required": false,
          "serverDefault": 0,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "pre",
          "required": false,
          "serverDefault": 0,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "QueryBase",
          "namespace": "_types.query_dsl"
        }
      },
      "kind": "interface",
      "name": {
        "name": "SpanOrQuery",
        "namespace": "_types.query_dsl"
      },
      "properties": [
        {
          "name": "clauses",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "SpanQuery",
                "namespace": "_types.query_dsl"
              }
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "SpanQuery",
        "namespace": "_types.query_dsl"
      },
      "properties": [
        {
          "name": "span_containing",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "SpanContainingQuery",
              "namespace": "_types.query_dsl"
            }
          }
        },
        {
          "name": "field_masking_span",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "SpanFieldMaskingQuery",
              "namespace": "_types.query_dsl"
            }
          }
        },
        {
          "name": "span_first",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "SpanFirstQuery",
              "namespace": "_types.query_dsl"
            }
          }
        },
        {
          "name": "span_gap",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "SpanGapQuery",
              "namespace": "_types.query_dsl"
            }
          }
        },
        {
          "name": "span_multi",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "SpanMultiTermQuery",
              "namespace": "_types.query_dsl"
            }
          }
        },
        {
          "name": "span_near",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "SpanNearQuery",
              "namespace": "_types.query_dsl"
            }
          }
        },
        {
          "name": "span_not",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "SpanNotQuery",
              "namespace": "_types.query_dsl"
            }
          }
        },
        {
          "name": "span_or",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "SpanOrQuery",
              "namespace": "_types.query_dsl"
            }
          }
        },
        {
          "name": "span_term",
          "required": false,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "Field",
                "namespace": "_types"
              }
            },
            "kind": "dictionary_of",
            "singleKey": true,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "SpanTermQuery",
                "namespace": "_types.query_dsl"
              }
            }
          }
        },
        {
          "name": "span_within",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "SpanWithinQuery",
              "namespace": "_types.query_dsl"
            }
          }
        }
      ],
      "variants": {
        "kind": "container"
      }
    },
    {
      "inherits": {
        "type": {
          "name": "QueryBase",
          "namespace": "_types.query_dsl"
        }
      },
      "kind": "interface",
      "name": {
        "name": "SpanTermQuery",
        "namespace": "_types.query_dsl"
      },
      "properties": [
        {
          "name": "value",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ],
      "shortcutProperty": "value"
    },
    {
      "inherits": {
        "type": {
          "name": "QueryBase",
          "namespace": "_types.query_dsl"
        }
      },
      "kind": "interface",
      "name": {
        "name": "SpanWithinQuery",
        "namespace": "_types.query_dsl"
      },
      "properties": [
        {
          "name": "big",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "SpanQuery",
              "namespace": "_types.query_dsl"
            }
          }
        },
        {
          "name": "little",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "SpanQuery",
              "namespace": "_types.query_dsl"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "QueryBase",
          "namespace": "_types.query_dsl"
        }
      },
      "kind": "interface",
      "name": {
        "name": "TermQuery",
        "namespace": "_types.query_dsl"
      },
      "properties": [
        {
          "name": "value",
          "required": true,
          "type": {
            "items": [
              {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              },
              {
                "kind": "instance_of",
                "type": {
                  "name": "float",
                  "namespace": "_types"
                }
              },
              {
                "kind": "instance_of",
                "type": {
                  "name": "boolean",
                  "namespace": "internal"
                }
              }
            ],
            "kind": "union_of"
          }
        },
        {
          "name": "case_insensitive",
          "required": false,
          "since": "7.10.0",
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ],
      "shortcutProperty": "value"
    },
    {
      "kind": "interface",
      "name": {
        "name": "TermsLookup",
        "namespace": "_types.query_dsl"
      },
      "properties": [
        {
          "name": "index",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndexName",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "path",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "routing",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Routing",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "AdditionalProperty"
      ],
      "behaviors": [
        {
          "generics": [
            {
              "kind": "instance_of",
              "type": {
                "name": "Field",
                "namespace": "_types"
              }
            },
            {
              "items": [
                {
                  "kind": "array_of",
                  "value": {
                    "kind": "instance_of",
                    "type": {
                      "name": "string",
                      "namespace": "internal"
                    }
                  }
                },
                {
                  "kind": "array_of",
                  "value": {
                    "kind": "instance_of",
                    "type": {
                      "name": "long",
                      "namespace": "_types"
                    }
                  }
                },
                {
                  "kind": "instance_of",
                  "type": {
                    "name": "TermsLookup",
                    "namespace": "_types.query_dsl"
                  }
                }
              ],
              "kind": "union_of"
            }
          ],
          "type": {
            "name": "AdditionalProperty",
            "namespace": "_spec_utils"
          }
        }
      ],
      "inherits": {
        "type": {
          "name": "QueryBase",
          "namespace": "_types.query_dsl"
        }
      },
      "kind": "interface",
      "name": {
        "name": "TermsQuery",
        "namespace": "_types.query_dsl"
      },
      "properties": []
    },
    {
      "kind": "interface",
      "name": {
        "name": "TermsSetFieldQuery",
        "namespace": "_types.query_dsl"
      },
      "properties": [
        {
          "name": "minimum_should_match_field",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "minimum_should_match_script",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Script",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "terms",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "AdditionalProperty"
      ],
      "behaviors": [
        {
          "generics": [
            {
              "kind": "instance_of",
              "type": {
                "name": "Field",
                "namespace": "_types"
              }
            },
            {
              "kind": "instance_of",
              "type": {
                "name": "TermsSetFieldQuery",
                "namespace": "_types.query_dsl"
              }
            }
          ],
          "type": {
            "name": "AdditionalProperty",
            "namespace": "_spec_utils"
          }
        }
      ],
      "inherits": {
        "type": {
          "name": "QueryBase",
          "namespace": "_types.query_dsl"
        }
      },
      "kind": "interface",
      "name": {
        "name": "TermsSetQuery",
        "namespace": "_types.query_dsl"
      },
      "properties": []
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "best_fields"
        },
        {
          "name": "most_fields"
        },
        {
          "name": "cross_fields"
        },
        {
          "name": "phrase"
        },
        {
          "name": "phrase_prefix"
        },
        {
          "name": "bool_prefix"
        }
      ],
      "name": {
        "name": "TextQueryType",
        "namespace": "_types.query_dsl"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "ThreeDimensionalPoint",
        "namespace": "_types.query_dsl"
      },
      "properties": [
        {
          "name": "lat",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "lon",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "z",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "TwoDimensionalPoint",
        "namespace": "_types.query_dsl"
      },
      "properties": [
        {
          "name": "lat",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "lon",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "QueryBase",
          "namespace": "_types.query_dsl"
        }
      },
      "kind": "interface",
      "name": {
        "name": "TypeQuery",
        "namespace": "_types.query_dsl"
      },
      "properties": [
        {
          "name": "value",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "QueryBase",
          "namespace": "_types.query_dsl"
        }
      },
      "kind": "interface",
      "name": {
        "name": "WildcardQuery",
        "namespace": "_types.query_dsl"
      },
      "properties": [
        {
          "name": "case_insensitive",
          "required": false,
          "since": "7.10.0",
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "rewrite",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "MultiTermQueryRewrite",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "value",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ],
      "shortcutProperty": "value"
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "all"
        },
        {
          "name": "none"
        }
      ],
      "name": {
        "name": "ZeroTermsQuery",
        "namespace": "_types.query_dsl"
      }
    },
    {
      "generics": [
        {
          "name": "TDocument",
          "namespace": "async_search._types"
        }
      ],
      "kind": "interface",
      "name": {
        "name": "AsyncSearch",
        "namespace": "async_search._types"
      },
      "properties": [
        {
          "name": "aggregations",
          "required": false,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "Aggregate",
                "namespace": "_types.aggregations"
              }
            }
          }
        },
        {
          "name": "_clusters",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ClusterStatistics",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "fields",
          "required": false,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "user_defined_value"
            }
          }
        },
        {
          "name": "hits",
          "required": true,
          "type": {
            "generics": [
              {
                "kind": "instance_of",
                "type": {
                  "name": "TDocument",
                  "namespace": "async_search._types"
                }
              }
            ],
            "kind": "instance_of",
            "type": {
              "name": "HitsMetadata",
              "namespace": "_global.search._types"
            }
          }
        },
        {
          "name": "max_score",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "num_reduce_phases",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "profile",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Profile",
              "namespace": "_global.search._types"
            }
          }
        },
        {
          "name": "pit_id",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "_scroll_id",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "_shards",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ShardStatistics",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "suggest",
          "required": false,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "SuggestionName",
                "namespace": "_types"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "array_of",
              "value": {
                "generics": [
                  {
                    "kind": "instance_of",
                    "type": {
                      "name": "TDocument",
                      "namespace": "async_search._types"
                    }
                  }
                ],
                "kind": "instance_of",
                "type": {
                  "name": "Suggest",
                  "namespace": "_global.search._types"
                }
              }
            }
          }
        },
        {
          "name": "terminated_early",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "timed_out",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "took",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "generics": [
        {
          "name": "TDocument",
          "namespace": "async_search._types"
        }
      ],
      "inherits": {
        "type": {
          "name": "AsyncSearchResponseBase",
          "namespace": "async_search._types"
        }
      },
      "kind": "interface",
      "name": {
        "name": "AsyncSearchDocumentResponseBase",
        "namespace": "async_search._types"
      },
      "properties": [
        {
          "name": "response",
          "required": true,
          "type": {
            "generics": [
              {
                "kind": "instance_of",
                "type": {
                  "name": "TDocument",
                  "namespace": "async_search._types"
                }
              }
            ],
            "kind": "instance_of",
            "type": {
              "name": "AsyncSearch",
              "namespace": "async_search._types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "AsyncSearchResponseBase",
        "namespace": "async_search._types"
      },
      "properties": [
        {
          "name": "id",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "is_partial",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "is_running",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "expiration_time_in_millis",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "EpochMillis",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "start_time_in_millis",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "EpochMillis",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Deletes an async search by ID. If the search is still running, the search request will be cancelled. Otherwise, the saved search results are deleted.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "async_search.delete"
      },
      "path": [
        {
          "description": "The async search ID",
          "name": "id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": []
    },
    {
      "body": {
        "kind": "properties",
        "properties": []
      },
      "inherits": {
        "type": {
          "name": "AcknowledgedResponseBase",
          "namespace": "_types"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "async_search.delete"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Retrieves the results of a previously submitted async search request given its ID.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "async_search.get"
      },
      "path": [
        {
          "description": "The async search ID",
          "name": "id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "Specify the time interval in which the results (partial or final) for this search will be available",
          "name": "keep_alive",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Specify whether aggregation and suggester names should be prefixed by their respective types in the response",
          "name": "typed_keys",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Specify the time that the request should block waiting for the final response",
          "name": "wait_for_completion_timeout",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": []
      },
      "generics": [
        {
          "name": "TDocument",
          "namespace": "async_search.get"
        }
      ],
      "inherits": {
        "generics": [
          {
            "kind": "instance_of",
            "type": {
              "name": "TDocument",
              "namespace": "async_search.get"
            }
          }
        ],
        "type": {
          "name": "AsyncSearchDocumentResponseBase",
          "namespace": "async_search._types"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "async_search.get"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Retrieves the status of a previously submitted async search request given its ID.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "async_search.status"
      },
      "path": [
        {
          "description": "The async search ID",
          "name": "id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": []
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "_shards",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "ShardStatistics",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "completion_status",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "integer",
                "namespace": "_types"
              }
            }
          }
        ]
      },
      "generics": [
        {
          "name": "TDocument",
          "namespace": "async_search.status"
        }
      ],
      "inherits": {
        "type": {
          "name": "AsyncSearchResponseBase",
          "namespace": "async_search._types"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "async_search.status"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "aggs",
            "required": false,
            "type": {
              "key": {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              },
              "kind": "dictionary_of",
              "singleKey": false,
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "AggregationContainer",
                  "namespace": "_types.aggregations"
                }
              }
            }
          },
          {
            "name": "allow_no_indices",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "allow_partial_search_results",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "analyzer",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "analyze_wildcard",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "collapse",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "FieldCollapse",
                "namespace": "_global.search._types"
              }
            }
          },
          {
            "name": "default_operator",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "DefaultOperator",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "df",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "docvalue_fields",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Fields",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "expand_wildcards",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "ExpandWildcards",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "explain",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "from",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "integer",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "highlight",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Highlight",
                "namespace": "_global.search._types"
              }
            }
          },
          {
            "name": "ignore_throttled",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "ignore_unavailable",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "indices_boost",
            "required": false,
            "type": {
              "kind": "array_of",
              "value": {
                "key": {
                  "kind": "instance_of",
                  "type": {
                    "name": "IndexName",
                    "namespace": "_types"
                  }
                },
                "kind": "dictionary_of",
                "singleKey": false,
                "value": {
                  "kind": "instance_of",
                  "type": {
                    "name": "double",
                    "namespace": "_types"
                  }
                }
              }
            }
          },
          {
            "name": "keep_alive",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Time",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "lenient",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "max_concurrent_shard_requests",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "long",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "min_score",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "double",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "post_filter",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "QueryContainer",
                "namespace": "_types.query_dsl"
              }
            }
          },
          {
            "name": "preference",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "profile",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "pit",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "PointInTimeReference",
                "namespace": "_global.search._types"
              }
            }
          },
          {
            "name": "query",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "QueryContainer",
                "namespace": "_types.query_dsl"
              }
            }
          },
          {
            "name": "request_cache",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "rescore",
            "required": false,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "Rescore",
                  "namespace": "_global.search._types"
                }
              }
            }
          },
          {
            "name": "routing",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Routing",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "script_fields",
            "required": false,
            "type": {
              "key": {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              },
              "kind": "dictionary_of",
              "singleKey": false,
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "ScriptField",
                  "namespace": "_types"
                }
              }
            }
          },
          {
            "name": "search_after",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "SortResults",
                "namespace": "_global.search._types"
              }
            }
          },
          {
            "name": "search_type",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "SearchType",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "sequence_number_primary_term",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "size",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "integer",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Sort",
                "namespace": "_global.search._types"
              }
            }
          },
          {
            "name": "_source",
            "required": false,
            "type": {
              "items": [
                {
                  "kind": "instance_of",
                  "type": {
                    "name": "boolean",
                    "namespace": "internal"
                  }
                },
                {
                  "kind": "instance_of",
                  "type": {
                    "name": "SourceFilter",
                    "namespace": "_global.search._types"
                  }
                }
              ],
              "kind": "union_of"
            }
          },
          {
            "name": "stats",
            "required": false,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              }
            }
          },
          {
            "name": "stored_fields",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Fields",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "suggest",
            "required": false,
            "type": {
              "key": {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              },
              "kind": "dictionary_of",
              "singleKey": false,
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "SuggestContainer",
                  "namespace": "_global.search._types"
                }
              }
            }
          },
          {
            "name": "suggest_field",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Field",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "suggest_mode",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "SuggestMode",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "suggest_size",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "long",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "suggest_text",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "terminate_after",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "long",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "timeout",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "track_scores",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "track_total_hits",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "version",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "fields",
            "required": false,
            "type": {
              "kind": "array_of",
              "value": {
                "items": [
                  {
                    "kind": "instance_of",
                    "type": {
                      "name": "Field",
                      "namespace": "_types"
                    }
                  },
                  {
                    "kind": "instance_of",
                    "type": {
                      "name": "DateField",
                      "namespace": "_types"
                    }
                  }
                ],
                "kind": "union_of"
              }
            }
          },
          {
            "name": "runtime_mappings",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "RuntimeFields",
                "namespace": "_types.mapping"
              }
            }
          }
        ]
      },
      "description": "Executes a search request asynchronously.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "async_search.submit"
      },
      "path": [
        {
          "description": "A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices",
          "name": "index",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Indices",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "The number of shard results that should be reduced at once on the coordinating node. This value should be used as the granularity at which progress results will be made available.",
          "name": "batched_reduce_size",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Specify the time that the request should block waiting for the final response",
          "name": "wait_for_completion_timeout",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Control whether the response should be stored in the cluster if it completed within the provided [wait_for_completion] time (default: false)",
          "name": "keep_on_completion",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Specify whether aggregation and suggester names should be prefixed by their respective types in the response",
          "name": "typed_keys",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": []
      },
      "generics": [
        {
          "name": "TDocument",
          "namespace": "async_search.submit"
        }
      ],
      "inherits": {
        "generics": [
          {
            "kind": "instance_of",
            "type": {
              "name": "TDocument",
              "namespace": "async_search.submit"
            }
          }
        ],
        "type": {
          "name": "AsyncSearchDocumentResponseBase",
          "namespace": "async_search._types"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "async_search.submit"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "AutoscalingPolicy",
        "namespace": "autoscaling._types"
      },
      "properties": [
        {
          "name": "roles",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        },
        {
          "description": "Decider settings",
          "name": "deciders",
          "required": true,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "user_defined_value"
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Deletes an autoscaling policy. Designed for indirect use by ECE/ESS and ECK. Direct use is not supported.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "autoscaling.delete_autoscaling_policy"
      },
      "path": [
        {
          "description": "the name of the autoscaling policy",
          "name": "name",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": []
    },
    {
      "body": {
        "kind": "properties",
        "properties": []
      },
      "inherits": {
        "type": {
          "name": "AcknowledgedResponseBase",
          "namespace": "_types"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "autoscaling.delete_autoscaling_policy"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "AutoscalingCapacity",
        "namespace": "autoscaling.get_autoscaling_capacity"
      },
      "properties": [
        {
          "name": "node",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "AutoscalingResources",
              "namespace": "autoscaling.get_autoscaling_capacity"
            }
          }
        },
        {
          "name": "total",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "AutoscalingResources",
              "namespace": "autoscaling.get_autoscaling_capacity"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "AutoscalingDecider",
        "namespace": "autoscaling.get_autoscaling_capacity"
      },
      "properties": [
        {
          "name": "required_capacity",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "AutoscalingCapacity",
              "namespace": "autoscaling.get_autoscaling_capacity"
            }
          }
        },
        {
          "name": "reason_summary",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "reason_details",
          "required": false,
          "type": {
            "kind": "user_defined_value"
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "AutoscalingDeciders",
        "namespace": "autoscaling.get_autoscaling_capacity"
      },
      "properties": [
        {
          "name": "required_capacity",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "AutoscalingCapacity",
              "namespace": "autoscaling.get_autoscaling_capacity"
            }
          }
        },
        {
          "name": "current_capacity",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "AutoscalingCapacity",
              "namespace": "autoscaling.get_autoscaling_capacity"
            }
          }
        },
        {
          "name": "current_nodes",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "AutoscalingNode",
                "namespace": "autoscaling.get_autoscaling_capacity"
              }
            }
          }
        },
        {
          "name": "deciders",
          "required": true,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "AutoscalingDecider",
                "namespace": "autoscaling.get_autoscaling_capacity"
              }
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "AutoscalingNode",
        "namespace": "autoscaling.get_autoscaling_capacity"
      },
      "properties": [
        {
          "name": "name",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "NodeName",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "AutoscalingResources",
        "namespace": "autoscaling.get_autoscaling_capacity"
      },
      "properties": [
        {
          "name": "storage",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "memory",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Gets the current autoscaling capacity based on the configured autoscaling policy. Designed for indirect use by ECE/ESS and ECK. Direct use is not supported.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "autoscaling.get_autoscaling_capacity"
      },
      "path": [],
      "query": []
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "policies",
            "required": true,
            "type": {
              "key": {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              },
              "kind": "dictionary_of",
              "singleKey": false,
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "AutoscalingDeciders",
                  "namespace": "autoscaling.get_autoscaling_capacity"
                }
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "autoscaling.get_autoscaling_capacity"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Retrieves an autoscaling policy. Designed for indirect use by ECE/ESS and ECK. Direct use is not supported.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "autoscaling.get_autoscaling_policy"
      },
      "path": [
        {
          "description": "the name of the autoscaling policy",
          "name": "name",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": []
    },
    {
      "body": {
        "kind": "value",
        "value": {
          "kind": "instance_of",
          "type": {
            "name": "AutoscalingPolicy",
            "namespace": "autoscaling._types"
          }
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "autoscaling.get_autoscaling_policy"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "identifier": "policy",
        "kind": "value",
        "value": {
          "kind": "instance_of",
          "type": {
            "name": "AutoscalingPolicy",
            "namespace": "autoscaling._types"
          }
        }
      },
      "description": "Creates a new autoscaling policy. Designed for indirect use by ECE/ESS and ECK. Direct use is not supported.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "autoscaling.put_autoscaling_policy"
      },
      "path": [
        {
          "description": "the name of the autoscaling policy",
          "name": "name",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": []
    },
    {
      "body": {
        "kind": "properties",
        "properties": []
      },
      "inherits": {
        "type": {
          "name": "AcknowledgedResponseBase",
          "namespace": "_types"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "autoscaling.put_autoscaling_policy"
      }
    },
    {
      "attachedBehaviors": [
        "CommonCatQueryParameters",
        "CommonQueryParameters"
      ],
      "behaviors": [
        {
          "type": {
            "name": "CommonCatQueryParameters",
            "namespace": "_spec_utils"
          }
        }
      ],
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "interface",
      "name": {
        "name": "CatRequestBase",
        "namespace": "cat._types"
      },
      "properties": []
    },
    {
      "kind": "interface",
      "name": {
        "name": "AliasesRecord",
        "namespace": "cat.aliases"
      },
      "properties": [
        {
          "aliases": [
            "a"
          ],
          "description": "alias name",
          "name": "alias",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "i",
            "idx"
          ],
          "description": "index alias points to",
          "name": "index",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndexName",
              "namespace": "_types"
            }
          }
        },
        {
          "aliases": [
            "f",
            "fi"
          ],
          "description": "filter",
          "name": "filter",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "ri",
            "routingIndex"
          ],
          "description": "index routing",
          "name": "routing.index",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "rs",
            "routingSearch"
          ],
          "description": "search routing",
          "name": "routing.search",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "w",
            "isWriteIndex"
          ],
          "description": "write index",
          "name": "is_write_index",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonCatQueryParameters",
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Shows information about currently configured aliases to indices including filter and routing infos.",
      "inherits": {
        "type": {
          "name": "CatRequestBase",
          "namespace": "cat._types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "cat.aliases"
      },
      "path": [
        {
          "description": "A comma-separated list of alias names to return",
          "name": "name",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Names",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
          "name": "expand_wildcards",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ExpandWildcards",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "value",
        "value": {
          "kind": "array_of",
          "value": {
            "kind": "instance_of",
            "type": {
              "name": "AliasesRecord",
              "namespace": "cat.aliases"
            }
          }
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "cat.aliases"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "AllocationRecord",
        "namespace": "cat.allocation"
      },
      "properties": [
        {
          "aliases": [
            "s"
          ],
          "description": "number of shards on node",
          "name": "shards",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "di",
            "diskIndices"
          ],
          "description": "disk used by ES indices",
          "name": "disk.indices",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ByteSize",
              "namespace": "_types"
            }
          }
        },
        {
          "aliases": [
            "du",
            "diskUsed"
          ],
          "description": "disk used (total, not just ES)",
          "name": "disk.used",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ByteSize",
              "namespace": "_types"
            }
          }
        },
        {
          "aliases": [
            "da",
            "diskAvail"
          ],
          "description": "disk available",
          "name": "disk.avail",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ByteSize",
              "namespace": "_types"
            }
          }
        },
        {
          "aliases": [
            "dt",
            "diskTotal"
          ],
          "description": "total capacity of all volumes",
          "name": "disk.total",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ByteSize",
              "namespace": "_types"
            }
          }
        },
        {
          "aliases": [
            "dp",
            "diskPercent"
          ],
          "description": "percent disk used",
          "name": "disk.percent",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Percentage",
              "namespace": "_types"
            }
          }
        },
        {
          "aliases": [
            "h"
          ],
          "description": "host of node",
          "name": "host",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Host",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "ip of node",
          "name": "ip",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Ip",
              "namespace": "_types"
            }
          }
        },
        {
          "aliases": [
            "n"
          ],
          "description": "name of node",
          "name": "node",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonCatQueryParameters",
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Provides a snapshot of how many shards are allocated to each data node and how much disk space they are using.",
      "inherits": {
        "type": {
          "name": "CatRequestBase",
          "namespace": "cat._types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "cat.allocation"
      },
      "path": [
        {
          "description": "A comma-separated list of node IDs or names to limit the returned information",
          "name": "node_id",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "NodeIds",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "The unit in which to display byte values",
          "name": "bytes",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Bytes",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "value",
        "value": {
          "kind": "array_of",
          "value": {
            "kind": "instance_of",
            "type": {
              "name": "AllocationRecord",
              "namespace": "cat.allocation"
            }
          }
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "cat.allocation"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "CountRecord",
        "namespace": "cat.count"
      },
      "properties": [
        {
          "aliases": [
            "t",
            "time"
          ],
          "description": "seconds since 1969-01-01 00:00:00",
          "name": "epoch",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "EpochMillis",
              "namespace": "_types"
            }
          }
        },
        {
          "aliases": [
            "ts",
            "hms",
            "hhmmss"
          ],
          "description": "time in HH:MM:SS",
          "name": "timestamp",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DateString",
              "namespace": "_types"
            }
          }
        },
        {
          "aliases": [
            "dc",
            "docs.count",
            "docsCount"
          ],
          "description": "the document count",
          "name": "count",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonCatQueryParameters",
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Provides quick access to the document count of the entire cluster, or individual indices.",
      "inherits": {
        "type": {
          "name": "CatRequestBase",
          "namespace": "cat._types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "cat.count"
      },
      "path": [
        {
          "description": "A comma-separated list of index names to limit the returned information",
          "name": "index",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Indices",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": []
    },
    {
      "body": {
        "kind": "value",
        "value": {
          "kind": "array_of",
          "value": {
            "kind": "instance_of",
            "type": {
              "name": "CountRecord",
              "namespace": "cat.count"
            }
          }
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "cat.count"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "FielddataRecord",
        "namespace": "cat.fielddata"
      },
      "properties": [
        {
          "description": "node id",
          "name": "id",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "h"
          ],
          "description": "host name",
          "name": "host",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "ip address",
          "name": "ip",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "n"
          ],
          "description": "node name",
          "name": "node",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "f"
          ],
          "description": "field name",
          "name": "field",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "field data usage",
          "name": "size",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonCatQueryParameters",
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Shows how much heap memory is currently being used by fielddata on every data node in the cluster.",
      "inherits": {
        "type": {
          "name": "CatRequestBase",
          "namespace": "cat._types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "cat.fielddata"
      },
      "path": [
        {
          "description": "A comma-separated list of fields to return the fielddata size",
          "name": "fields",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Fields",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "The unit in which to display byte values",
          "name": "bytes",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Bytes",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "value",
        "value": {
          "kind": "array_of",
          "value": {
            "kind": "instance_of",
            "type": {
              "name": "FielddataRecord",
              "namespace": "cat.fielddata"
            }
          }
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "cat.fielddata"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "HealthRecord",
        "namespace": "cat.health"
      },
      "properties": [
        {
          "aliases": [
            "time"
          ],
          "description": "seconds since 1969-01-01 00:00:00",
          "name": "epoch",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "EpochMillis",
              "namespace": "_types"
            }
          }
        },
        {
          "aliases": [
            "ts",
            "hms",
            "hhmmss"
          ],
          "description": "time in HH:MM:SS",
          "name": "timestamp",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DateString",
              "namespace": "_types"
            }
          }
        },
        {
          "aliases": [
            "cl"
          ],
          "description": "cluster name",
          "name": "cluster",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "st"
          ],
          "description": "health status",
          "name": "status",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "nt",
            "nodeTotal"
          ],
          "description": "total number of nodes",
          "name": "node.total",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "nd",
            "nodeData"
          ],
          "description": "number of nodes that can store data",
          "name": "node.data",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "t",
            "sh",
            "shards.total",
            "shardsTotal"
          ],
          "description": "total number of shards",
          "name": "shards",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "p",
            "shards.primary",
            "shardsPrimary"
          ],
          "description": "number of primary shards",
          "name": "pri",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "r",
            "shards.relocating",
            "shardsRelocating"
          ],
          "description": "number of relocating nodes",
          "name": "relo",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "i",
            "shards.initializing",
            "shardsInitializing"
          ],
          "description": "number of initializing nodes",
          "name": "init",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "u",
            "shards.unassigned",
            "shardsUnassigned"
          ],
          "description": "number of unassigned shards",
          "name": "unassign",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "pt",
            "pendingTasks"
          ],
          "description": "number of pending tasks",
          "name": "pending_tasks",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "mtwt",
            "maxTaskWaitTime"
          ],
          "description": "wait time of longest task pending",
          "name": "max_task_wait_time",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "asp",
            "activeShardsPercent"
          ],
          "description": "active number of shards in percent",
          "name": "active_shards_percent",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonCatQueryParameters",
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Returns a concise representation of the cluster health.",
      "inherits": {
        "type": {
          "name": "CatRequestBase",
          "namespace": "cat._types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "cat.health"
      },
      "path": [],
      "query": [
        {
          "name": "include_timestamp",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Set to false to disable timestamping",
          "name": "ts",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "value",
        "value": {
          "kind": "array_of",
          "value": {
            "kind": "instance_of",
            "type": {
              "name": "HealthRecord",
              "namespace": "cat.health"
            }
          }
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "cat.health"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "HelpRecord",
        "namespace": "cat.help"
      },
      "properties": [
        {
          "name": "endpoint",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonCatQueryParameters",
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Returns help for the Cat APIs.",
      "inherits": {
        "type": {
          "name": "CatRequestBase",
          "namespace": "cat._types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "cat.help"
      },
      "path": [],
      "query": []
    },
    {
      "body": {
        "kind": "value",
        "value": {
          "kind": "array_of",
          "value": {
            "kind": "instance_of",
            "type": {
              "name": "HelpRecord",
              "namespace": "cat.help"
            }
          }
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "cat.help"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "IndicesRecord",
        "namespace": "cat.indices"
      },
      "properties": [
        {
          "aliases": [
            "h"
          ],
          "description": "current health status",
          "name": "health",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "s"
          ],
          "description": "open/close status",
          "name": "status",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "i",
            "idx"
          ],
          "description": "index name",
          "name": "index",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "id"
          ],
          "description": "index uuid",
          "name": "uuid",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "p",
            "shards.primary",
            "shardsPrimary"
          ],
          "description": "number of primary shards",
          "name": "pri",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "r",
            "shards.replica",
            "shardsReplica"
          ],
          "description": "number of replica shards",
          "name": "rep",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "dc",
            "docsCount"
          ],
          "description": "available docs",
          "name": "docs.count",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "dd",
            "docsDeleted"
          ],
          "description": "deleted docs",
          "name": "docs.deleted",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "cd"
          ],
          "description": "index creation date (millisecond value)",
          "name": "creation.date",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "cds"
          ],
          "description": "index creation date (as string)",
          "name": "creation.date.string",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "ss",
            "storeSize"
          ],
          "description": "store size of primaries & replicas",
          "name": "store.size",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "store size of primaries",
          "name": "pri.store.size",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "cs",
            "completionSize"
          ],
          "description": "size of completion",
          "name": "completion.size",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "size of completion",
          "name": "pri.completion.size",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "fm",
            "fielddataMemory"
          ],
          "description": "used fielddata cache",
          "name": "fielddata.memory_size",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "used fielddata cache",
          "name": "pri.fielddata.memory_size",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "fe",
            "fielddataEvictions"
          ],
          "description": "fielddata evictions",
          "name": "fielddata.evictions",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "fielddata evictions",
          "name": "pri.fielddata.evictions",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "qcm",
            "queryCacheMemory"
          ],
          "description": "used query cache",
          "name": "query_cache.memory_size",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "used query cache",
          "name": "pri.query_cache.memory_size",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "qce",
            "queryCacheEvictions"
          ],
          "description": "query cache evictions",
          "name": "query_cache.evictions",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "query cache evictions",
          "name": "pri.query_cache.evictions",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "rcm",
            "requestCacheMemory"
          ],
          "description": "used request cache",
          "name": "request_cache.memory_size",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "used request cache",
          "name": "pri.request_cache.memory_size",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "rce",
            "requestCacheEvictions"
          ],
          "description": "request cache evictions",
          "name": "request_cache.evictions",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "request cache evictions",
          "name": "pri.request_cache.evictions",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "rchc",
            "requestCacheHitCount"
          ],
          "description": "request cache hit count",
          "name": "request_cache.hit_count",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "request cache hit count",
          "name": "pri.request_cache.hit_count",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "rcmc",
            "requestCacheMissCount"
          ],
          "description": "request cache miss count",
          "name": "request_cache.miss_count",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "request cache miss count",
          "name": "pri.request_cache.miss_count",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "ft",
            "flushTotal"
          ],
          "description": "number of flushes",
          "name": "flush.total",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "number of flushes",
          "name": "pri.flush.total",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "ftt",
            "flushTotalTime"
          ],
          "description": "time spent in flush",
          "name": "flush.total_time",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "time spent in flush",
          "name": "pri.flush.total_time",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "gc",
            "getCurrent"
          ],
          "description": "number of current get ops",
          "name": "get.current",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "number of current get ops",
          "name": "pri.get.current",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "gti",
            "getTime"
          ],
          "description": "time spent in get",
          "name": "get.time",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "time spent in get",
          "name": "pri.get.time",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "gto",
            "getTotal"
          ],
          "description": "number of get ops",
          "name": "get.total",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "number of get ops",
          "name": "pri.get.total",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "geti",
            "getExistsTime"
          ],
          "description": "time spent in successful gets",
          "name": "get.exists_time",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "time spent in successful gets",
          "name": "pri.get.exists_time",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "geto",
            "getExistsTotal"
          ],
          "description": "number of successful gets",
          "name": "get.exists_total",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "number of successful gets",
          "name": "pri.get.exists_total",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "gmti",
            "getMissingTime"
          ],
          "description": "time spent in failed gets",
          "name": "get.missing_time",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "time spent in failed gets",
          "name": "pri.get.missing_time",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "gmto",
            "getMissingTotal"
          ],
          "description": "number of failed gets",
          "name": "get.missing_total",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "number of failed gets",
          "name": "pri.get.missing_total",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "idc",
            "indexingDeleteCurrent"
          ],
          "description": "number of current deletions",
          "name": "indexing.delete_current",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "number of current deletions",
          "name": "pri.indexing.delete_current",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "idti",
            "indexingDeleteTime"
          ],
          "description": "time spent in deletions",
          "name": "indexing.delete_time",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "time spent in deletions",
          "name": "pri.indexing.delete_time",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "idto",
            "indexingDeleteTotal"
          ],
          "description": "number of delete ops",
          "name": "indexing.delete_total",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "number of delete ops",
          "name": "pri.indexing.delete_total",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "iic",
            "indexingIndexCurrent"
          ],
          "description": "number of current indexing ops",
          "name": "indexing.index_current",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "number of current indexing ops",
          "name": "pri.indexing.index_current",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "iiti",
            "indexingIndexTime"
          ],
          "description": "time spent in indexing",
          "name": "indexing.index_time",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "time spent in indexing",
          "name": "pri.indexing.index_time",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "iito",
            "indexingIndexTotal"
          ],
          "description": "number of indexing ops",
          "name": "indexing.index_total",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "number of indexing ops",
          "name": "pri.indexing.index_total",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "iif",
            "indexingIndexFailed"
          ],
          "description": "number of failed indexing ops",
          "name": "indexing.index_failed",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "number of failed indexing ops",
          "name": "pri.indexing.index_failed",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "mc",
            "mergesCurrent"
          ],
          "description": "number of current merges",
          "name": "merges.current",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "number of current merges",
          "name": "pri.merges.current",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "mcd",
            "mergesCurrentDocs"
          ],
          "description": "number of current merging docs",
          "name": "merges.current_docs",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "number of current merging docs",
          "name": "pri.merges.current_docs",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "mcs",
            "mergesCurrentSize"
          ],
          "description": "size of current merges",
          "name": "merges.current_size",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "size of current merges",
          "name": "pri.merges.current_size",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "mt",
            "mergesTotal"
          ],
          "description": "number of completed merge ops",
          "name": "merges.total",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "number of completed merge ops",
          "name": "pri.merges.total",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "mtd",
            "mergesTotalDocs"
          ],
          "description": "docs merged",
          "name": "merges.total_docs",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "docs merged",
          "name": "pri.merges.total_docs",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "mts",
            "mergesTotalSize"
          ],
          "description": "size merged",
          "name": "merges.total_size",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "size merged",
          "name": "pri.merges.total_size",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "mtt",
            "mergesTotalTime"
          ],
          "description": "time spent in merges",
          "name": "merges.total_time",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "time spent in merges",
          "name": "pri.merges.total_time",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "rto",
            "refreshTotal"
          ],
          "description": "total refreshes",
          "name": "refresh.total",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "total refreshes",
          "name": "pri.refresh.total",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "rti",
            "refreshTime"
          ],
          "description": "time spent in refreshes",
          "name": "refresh.time",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "time spent in refreshes",
          "name": "pri.refresh.time",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "reto"
          ],
          "description": "total external refreshes",
          "name": "refresh.external_total",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "total external refreshes",
          "name": "pri.refresh.external_total",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "reti"
          ],
          "description": "time spent in external refreshes",
          "name": "refresh.external_time",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "time spent in external refreshes",
          "name": "pri.refresh.external_time",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "rli",
            "refreshListeners"
          ],
          "description": "number of pending refresh listeners",
          "name": "refresh.listeners",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "number of pending refresh listeners",
          "name": "pri.refresh.listeners",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "sfc",
            "searchFetchCurrent"
          ],
          "description": "current fetch phase ops",
          "name": "search.fetch_current",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "current fetch phase ops",
          "name": "pri.search.fetch_current",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "sfti",
            "searchFetchTime"
          ],
          "description": "time spent in fetch phase",
          "name": "search.fetch_time",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "time spent in fetch phase",
          "name": "pri.search.fetch_time",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "sfto",
            "searchFetchTotal"
          ],
          "description": "total fetch ops",
          "name": "search.fetch_total",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "total fetch ops",
          "name": "pri.search.fetch_total",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "so",
            "searchOpenContexts"
          ],
          "description": "open search contexts",
          "name": "search.open_contexts",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "open search contexts",
          "name": "pri.search.open_contexts",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "sqc",
            "searchQueryCurrent"
          ],
          "description": "current query phase ops",
          "name": "search.query_current",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "current query phase ops",
          "name": "pri.search.query_current",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "sqti",
            "searchQueryTime"
          ],
          "description": "time spent in query phase",
          "name": "search.query_time",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "time spent in query phase",
          "name": "pri.search.query_time",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "sqto",
            "searchQueryTotal"
          ],
          "description": "total query phase ops",
          "name": "search.query_total",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "total query phase ops",
          "name": "pri.search.query_total",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "scc",
            "searchScrollCurrent"
          ],
          "description": "open scroll contexts",
          "name": "search.scroll_current",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "open scroll contexts",
          "name": "pri.search.scroll_current",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "scti",
            "searchScrollTime"
          ],
          "description": "time scroll contexts held open",
          "name": "search.scroll_time",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "time scroll contexts held open",
          "name": "pri.search.scroll_time",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "scto",
            "searchScrollTotal"
          ],
          "description": "completed scroll contexts",
          "name": "search.scroll_total",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "completed scroll contexts",
          "name": "pri.search.scroll_total",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "sc",
            "segmentsCount"
          ],
          "description": "number of segments",
          "name": "segments.count",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "number of segments",
          "name": "pri.segments.count",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "sm",
            "segmentsMemory"
          ],
          "description": "memory used by segments",
          "name": "segments.memory",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "memory used by segments",
          "name": "pri.segments.memory",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "siwm",
            "segmentsIndexWriterMemory"
          ],
          "description": "memory used by index writer",
          "name": "segments.index_writer_memory",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "memory used by index writer",
          "name": "pri.segments.index_writer_memory",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "svmm",
            "segmentsVersionMapMemory"
          ],
          "description": "memory used by version map",
          "name": "segments.version_map_memory",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "memory used by version map",
          "name": "pri.segments.version_map_memory",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "sfbm",
            "fixedBitsetMemory"
          ],
          "description": "memory used by fixed bit sets for nested object field types and export type filters for types referred in _parent fields",
          "name": "segments.fixed_bitset_memory",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "memory used by fixed bit sets for nested object field types and export type filters for types referred in _parent fields",
          "name": "pri.segments.fixed_bitset_memory",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "wc",
            "warmerCurrent"
          ],
          "description": "current warmer ops",
          "name": "warmer.current",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "current warmer ops",
          "name": "pri.warmer.current",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "wto",
            "warmerTotal"
          ],
          "description": "total warmer ops",
          "name": "warmer.total",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "total warmer ops",
          "name": "pri.warmer.total",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "wtt",
            "warmerTotalTime"
          ],
          "description": "time spent in warmers",
          "name": "warmer.total_time",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "time spent in warmers",
          "name": "pri.warmer.total_time",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "suc",
            "suggestCurrent"
          ],
          "description": "number of current suggest ops",
          "name": "suggest.current",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "number of current suggest ops",
          "name": "pri.suggest.current",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "suti",
            "suggestTime"
          ],
          "description": "time spend in suggest",
          "name": "suggest.time",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "time spend in suggest",
          "name": "pri.suggest.time",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "suto",
            "suggestTotal"
          ],
          "description": "number of suggest ops",
          "name": "suggest.total",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "number of suggest ops",
          "name": "pri.suggest.total",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "tm",
            "memoryTotal"
          ],
          "description": "total used memory",
          "name": "memory.total",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "total user memory",
          "name": "pri.memory.total",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "sth"
          ],
          "description": "indicates if the index is search throttled",
          "name": "search.throttled",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "bto",
            "bulkTotalOperation"
          ],
          "description": "number of bulk shard ops",
          "name": "bulk.total_operations",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "number of bulk shard ops",
          "name": "pri.bulk.total_operations",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "btti",
            "bulkTotalTime"
          ],
          "description": "time spend in shard bulk",
          "name": "bulk.total_time",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "time spend in shard bulk",
          "name": "pri.bulk.total_time",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "btsi",
            "bulkTotalSizeInBytes"
          ],
          "description": "total size in bytes of shard bulk",
          "name": "bulk.total_size_in_bytes",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "total size in bytes of shard bulk",
          "name": "pri.bulk.total_size_in_bytes",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "bati",
            "bulkAvgTime"
          ],
          "description": "average time spend in shard bulk",
          "name": "bulk.avg_time",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "average time spend in shard bulk",
          "name": "pri.bulk.avg_time",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "basi",
            "bulkAvgSizeInBytes"
          ],
          "description": "average size in bytes of shard bulk",
          "name": "bulk.avg_size_in_bytes",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "average size in bytes of shard bulk",
          "name": "pri.bulk.avg_size_in_bytes",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonCatQueryParameters",
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Returns information about indices: number of primaries and replicas, document counts, disk size, ...",
      "inherits": {
        "type": {
          "name": "CatRequestBase",
          "namespace": "cat._types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "cat.indices"
      },
      "path": [
        {
          "description": "A comma-separated list of index names to limit the returned information",
          "name": "index",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Indices",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "The unit in which to display byte values",
          "name": "bytes",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Bytes",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
          "name": "expand_wildcards",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ExpandWildcards",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "A health status (\"green\", \"yellow\", or \"red\" to filter only indices matching the specified health status",
          "name": "health",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Health",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "If set to true segment stats will include stats for segments that are not currently loaded into memory",
          "name": "include_unloaded_segments",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Set to true to return stats only for primary shards",
          "name": "pri",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "value",
        "value": {
          "kind": "array_of",
          "value": {
            "kind": "instance_of",
            "type": {
              "name": "IndicesRecord",
              "namespace": "cat.indices"
            }
          }
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "cat.indices"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "MasterRecord",
        "namespace": "cat.master"
      },
      "properties": [
        {
          "description": "node id",
          "name": "id",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "h"
          ],
          "description": "host name",
          "name": "host",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "ip address",
          "name": "ip",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "n"
          ],
          "description": "node name",
          "name": "node",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonCatQueryParameters",
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Returns information about the master node.",
      "inherits": {
        "type": {
          "name": "CatRequestBase",
          "namespace": "cat._types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "cat.master"
      },
      "path": [],
      "query": []
    },
    {
      "body": {
        "kind": "value",
        "value": {
          "kind": "array_of",
          "value": {
            "kind": "instance_of",
            "type": {
              "name": "MasterRecord",
              "namespace": "cat.master"
            }
          }
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "cat.master"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "DataFrameAnalyticsRecord",
        "namespace": "cat.ml_data_frame_analytics"
      },
      "properties": [
        {
          "description": "the id",
          "name": "id",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        },
        {
          "aliases": [
            "t"
          ],
          "description": "analysis type",
          "name": "type",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Type",
              "namespace": "_types"
            }
          }
        },
        {
          "aliases": [
            "ct",
            "createTime"
          ],
          "description": "job creation time",
          "name": "create_time",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "v"
          ],
          "description": "the version of Elasticsearch when the analytics was created",
          "name": "version",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "VersionString",
              "namespace": "_types"
            }
          }
        },
        {
          "aliases": [
            "si",
            "sourceIndex"
          ],
          "description": "source index",
          "name": "source_index",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndexName",
              "namespace": "_types"
            }
          }
        },
        {
          "aliases": [
            "di",
            "destIndex"
          ],
          "description": "destination index",
          "name": "dest_index",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndexName",
              "namespace": "_types"
            }
          }
        },
        {
          "aliases": [
            "d"
          ],
          "description": "description",
          "name": "description",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "mml",
            "modelMemoryLimit"
          ],
          "description": "model memory limit",
          "name": "model_memory_limit",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "s"
          ],
          "description": "job state",
          "name": "state",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "fr",
            "failureReason"
          ],
          "description": "failure reason",
          "name": "failure_reason",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "p"
          ],
          "description": "progress",
          "name": "progress",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "ae",
            "assignmentExplanation"
          ],
          "description": "why the job is or is not assigned to a node",
          "name": "assignment_explanation",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "ni",
            "nodeId"
          ],
          "description": "id of the assigned node",
          "name": "node.id",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        },
        {
          "aliases": [
            "nn",
            "nodeName"
          ],
          "description": "name of the assigned node",
          "name": "node.name",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        },
        {
          "aliases": [
            "ne",
            "nodeEphemeralId"
          ],
          "description": "ephemeral id of the assigned node",
          "name": "node.ephemeral_id",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        },
        {
          "aliases": [
            "na",
            "nodeAddress"
          ],
          "description": "network address of the assigned node",
          "name": "node.address",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonCatQueryParameters",
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Gets configuration and usage information about data frame analytics jobs.",
      "inherits": {
        "type": {
          "name": "CatRequestBase",
          "namespace": "cat._types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "cat.ml_data_frame_analytics"
      },
      "path": [
        {
          "description": "The ID of the data frame analytics to fetch",
          "name": "id",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "Whether to ignore if a wildcard expression matches no configs. (This includes `_all` string or when no configs have been specified)",
          "name": "allow_no_match",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "The unit in which to display byte values",
          "name": "bytes",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Bytes",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "value",
        "value": {
          "kind": "array_of",
          "value": {
            "kind": "instance_of",
            "type": {
              "name": "DataFrameAnalyticsRecord",
              "namespace": "cat.ml_data_frame_analytics"
            }
          }
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "cat.ml_data_frame_analytics"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "DatafeedsRecord",
        "namespace": "cat.ml_datafeeds"
      },
      "properties": [
        {
          "description": "the datafeed_id",
          "name": "id",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "s"
          ],
          "description": "the datafeed state",
          "name": "state",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DatafeedState",
              "namespace": "ml._types"
            }
          }
        },
        {
          "aliases": [
            "ae"
          ],
          "description": "why the datafeed is or is not assigned to a node",
          "name": "assignment_explanation",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "bc",
            "bucketsCount"
          ],
          "description": "bucket count",
          "name": "buckets.count",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "sc",
            "searchCount"
          ],
          "description": "number of searches ran by the datafeed",
          "name": "search.count",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "st",
            "searchTime"
          ],
          "description": "the total search time",
          "name": "search.time",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "sba",
            "searchBucketAvg"
          ],
          "description": "the average search time per bucket (millisecond)",
          "name": "search.bucket_avg",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "seah",
            "searchExpAvgHour"
          ],
          "description": "the exponential average search time per hour (millisecond)",
          "name": "search.exp_avg_hour",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "ni",
            "nodeId"
          ],
          "description": "id of the assigned node",
          "name": "node.id",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "nn",
            "nodeName"
          ],
          "description": "name of the assigned node",
          "name": "node.name",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "ne",
            "nodeEphemeralId"
          ],
          "description": "ephemeral id of the assigned node",
          "name": "node.ephemeral_id",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "na",
            "nodeAddress"
          ],
          "description": "network address of the assigned node",
          "name": "node.address",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonCatQueryParameters",
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Gets configuration and usage information about datafeeds.",
      "inherits": {
        "type": {
          "name": "CatRequestBase",
          "namespace": "cat._types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "cat.ml_datafeeds"
      },
      "path": [
        {
          "description": "The ID of the datafeeds stats to fetch",
          "name": "datafeed_id",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "Whether to ignore if a wildcard expression matches no datafeeds. (This includes `_all` string or when no datafeeds have been specified)",
          "name": "allow_no_datafeeds",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "value",
        "value": {
          "kind": "array_of",
          "value": {
            "kind": "instance_of",
            "type": {
              "name": "DatafeedsRecord",
              "namespace": "cat.ml_datafeeds"
            }
          }
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "cat.ml_datafeeds"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "JobsRecord",
        "namespace": "cat.ml_jobs"
      },
      "properties": [
        {
          "description": "the job_id",
          "name": "id",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        },
        {
          "aliases": [
            "s"
          ],
          "description": "the job state",
          "name": "state",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "JobState",
              "namespace": "ml._types"
            }
          }
        },
        {
          "aliases": [
            "ot"
          ],
          "description": "the amount of time the job has been opened",
          "name": "opened_time",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "ae"
          ],
          "description": "why the job is or is not assigned to a node",
          "name": "assignment_explanation",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "dpr",
            "dataProcessedRecords"
          ],
          "description": "number of processed records",
          "name": "data.processed_records",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "dpf",
            "dataProcessedFields"
          ],
          "description": "number of processed fields",
          "name": "data.processed_fields",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "dib",
            "dataInputBytes"
          ],
          "description": "total input bytes",
          "name": "data.input_bytes",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ByteSize",
              "namespace": "_types"
            }
          }
        },
        {
          "aliases": [
            "dir",
            "dataInputRecords"
          ],
          "description": "total record count",
          "name": "data.input_records",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "dif",
            "dataInputFields"
          ],
          "description": "total field count",
          "name": "data.input_fields",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "did",
            "dataInvalidDates"
          ],
          "description": "number of records with invalid dates",
          "name": "data.invalid_dates",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "dmf",
            "dataMissingFields"
          ],
          "description": "number of records with missing fields",
          "name": "data.missing_fields",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "doot",
            "dataOutOfOrderTimestamps"
          ],
          "description": "number of records handled out of order",
          "name": "data.out_of_order_timestamps",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "deb",
            "dataEmptyBuckets"
          ],
          "description": "number of empty buckets",
          "name": "data.empty_buckets",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "dsb",
            "dataSparseBuckets"
          ],
          "description": "number of sparse buckets",
          "name": "data.sparse_buckets",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "db",
            "dataBuckets"
          ],
          "description": "total bucket count",
          "name": "data.buckets",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "der",
            "dataEarliestRecord"
          ],
          "description": "earliest record time",
          "name": "data.earliest_record",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "dlr",
            "dataLatestRecord"
          ],
          "description": "latest record time",
          "name": "data.latest_record",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "dl",
            "dataLast"
          ],
          "description": "last time data was seen",
          "name": "data.last",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "dleb",
            "dataLastEmptyBucket"
          ],
          "description": "last time an empty bucket occurred",
          "name": "data.last_empty_bucket",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "dlsb",
            "dataLastSparseBucket"
          ],
          "description": "last time a sparse bucket occurred",
          "name": "data.last_sparse_bucket",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "mb",
            "modelBytes"
          ],
          "description": "model size",
          "name": "model.bytes",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ByteSize",
              "namespace": "_types"
            }
          }
        },
        {
          "aliases": [
            "mms",
            "modelMemoryStatus"
          ],
          "description": "current memory status",
          "name": "model.memory_status",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "MemoryStatus",
              "namespace": "ml._types"
            }
          }
        },
        {
          "aliases": [
            "mbe",
            "modelBytesExceeded"
          ],
          "description": "how much the model has exceeded the limit",
          "name": "model.bytes_exceeded",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ByteSize",
              "namespace": "_types"
            }
          }
        },
        {
          "aliases": [
            "mml",
            "modelMemoryLimit"
          ],
          "description": "model memory limit",
          "name": "model.memory_limit",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "mbf",
            "modelByFields"
          ],
          "description": "count of 'by' fields",
          "name": "model.by_fields",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "mof",
            "modelOverFields"
          ],
          "description": "count of 'over' fields",
          "name": "model.over_fields",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "mpf",
            "modelPartitionFields"
          ],
          "description": "count of 'partition' fields",
          "name": "model.partition_fields",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "mbaf",
            "modelBucketAllocationFailures"
          ],
          "description": "number of bucket allocation failures",
          "name": "model.bucket_allocation_failures",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "mcs",
            "modelCategorizationStatus"
          ],
          "description": "current categorization status",
          "name": "model.categorization_status",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "CategorizationStatus",
              "namespace": "ml._types"
            }
          }
        },
        {
          "aliases": [
            "mcdc",
            "modelCategorizedDocCount"
          ],
          "description": "count of categorized documents",
          "name": "model.categorized_doc_count",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "mtcc",
            "modelTotalCategoryCount"
          ],
          "description": "count of categories",
          "name": "model.total_category_count",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "modelFrequentCategoryCount"
          ],
          "description": "count of frequent categories",
          "name": "model.frequent_category_count",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "mrcc",
            "modelRareCategoryCount"
          ],
          "description": "count of rare categories",
          "name": "model.rare_category_count",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "mdcc",
            "modelDeadCategoryCount"
          ],
          "description": "count of dead categories",
          "name": "model.dead_category_count",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "mfcc",
            "modelFailedCategoryCount"
          ],
          "description": "count of failed categories",
          "name": "model.failed_category_count",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "mlt",
            "modelLogTime"
          ],
          "description": "when the model stats were gathered",
          "name": "model.log_time",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "mt",
            "modelTimestamp"
          ],
          "description": "the time of the last record when the model stats were gathered",
          "name": "model.timestamp",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "ft",
            "forecastsTotal"
          ],
          "description": "total number of forecasts",
          "name": "forecasts.total",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "fmmin",
            "forecastsMemoryMin"
          ],
          "description": "minimum memory used by forecasts",
          "name": "forecasts.memory.min",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "fmmax",
            "forecastsMemoryMax"
          ],
          "description": "maximum memory used by forecasts",
          "name": "forecasts.memory.max",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "fmavg",
            "forecastsMemoryAvg"
          ],
          "description": "average memory used by forecasts",
          "name": "forecasts.memory.avg",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "fmt",
            "forecastsMemoryTotal"
          ],
          "description": "total memory used by all forecasts",
          "name": "forecasts.memory.total",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "frmin",
            "forecastsRecordsMin"
          ],
          "description": "minimum record count for forecasts",
          "name": "forecasts.records.min",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "frmax",
            "forecastsRecordsMax"
          ],
          "description": "maximum record count for forecasts",
          "name": "forecasts.records.max",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "fravg",
            "forecastsRecordsAvg"
          ],
          "description": "average record count for forecasts",
          "name": "forecasts.records.avg",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "frt",
            "forecastsRecordsTotal"
          ],
          "description": "total record count for all forecasts",
          "name": "forecasts.records.total",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "ftmin",
            "forecastsTimeMin"
          ],
          "description": "minimum runtime for forecasts",
          "name": "forecasts.time.min",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "ftmax",
            "forecastsTimeMax"
          ],
          "description": "maximum run time for forecasts",
          "name": "forecasts.time.max",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "ftavg",
            "forecastsTimeAvg"
          ],
          "description": "average runtime for all forecasts (milliseconds)",
          "name": "forecasts.time.avg",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "ftt",
            "forecastsTimeTotal"
          ],
          "description": "total runtime for all forecasts",
          "name": "forecasts.time.total",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "ni",
            "nodeId"
          ],
          "description": "id of the assigned node",
          "name": "node.id",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "NodeId",
              "namespace": "_types"
            }
          }
        },
        {
          "aliases": [
            "nn",
            "nodeName"
          ],
          "description": "name of the assigned node",
          "name": "node.name",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "ne",
            "nodeEphemeralId"
          ],
          "description": "ephemeral id of the assigned node",
          "name": "node.ephemeral_id",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "NodeId",
              "namespace": "_types"
            }
          }
        },
        {
          "aliases": [
            "na",
            "nodeAddress"
          ],
          "description": "network address of the assigned node",
          "name": "node.address",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "bc",
            "bucketsCount"
          ],
          "description": "bucket count",
          "name": "buckets.count",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "btt",
            "bucketsTimeTotal"
          ],
          "description": "total bucket processing time",
          "name": "buckets.time.total",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "btmin",
            "bucketsTimeMin"
          ],
          "description": "minimum bucket processing time",
          "name": "buckets.time.min",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "btmax",
            "bucketsTimeMax"
          ],
          "description": "maximum bucket processing time",
          "name": "buckets.time.max",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "btea",
            "bucketsTimeExpAvg"
          ],
          "description": "exponential average bucket processing time (milliseconds)",
          "name": "buckets.time.exp_avg",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "bteah",
            "bucketsTimeExpAvgHour"
          ],
          "description": "exponential average bucket processing time by hour (milliseconds)",
          "name": "buckets.time.exp_avg_hour",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonCatQueryParameters",
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Gets configuration and usage information about anomaly detection jobs.",
      "inherits": {
        "type": {
          "name": "CatRequestBase",
          "namespace": "cat._types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "cat.ml_jobs"
      },
      "path": [
        {
          "description": "The ID of the jobs stats to fetch",
          "name": "job_id",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "Whether to ignore if a wildcard expression matches no jobs. (This includes `_all` string or when no jobs have been specified)",
          "name": "allow_no_jobs",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "The unit in which to display byte values",
          "name": "bytes",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Bytes",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "value",
        "value": {
          "kind": "array_of",
          "value": {
            "kind": "instance_of",
            "type": {
              "name": "JobsRecord",
              "namespace": "cat.ml_jobs"
            }
          }
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "cat.ml_jobs"
      }
    },
    {
      "attachedBehaviors": [
        "CommonCatQueryParameters",
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Gets configuration and usage information about inference trained models.",
      "inherits": {
        "type": {
          "name": "CatRequestBase",
          "namespace": "cat._types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "cat.ml_trained_models"
      },
      "path": [
        {
          "description": "The ID of the trained models stats to fetch",
          "name": "model_id",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "Whether to ignore if a wildcard expression matches no trained models. (This includes `_all` string or when no trained models have been specified)",
          "name": "allow_no_match",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "The unit in which to display byte values",
          "name": "bytes",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Bytes",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "skips a number of trained models",
          "name": "from",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "specifies a max number of trained models to get",
          "name": "size",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "value",
        "value": {
          "kind": "array_of",
          "value": {
            "kind": "instance_of",
            "type": {
              "name": "TrainedModelsRecord",
              "namespace": "cat.ml_trained_models"
            }
          }
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "cat.ml_trained_models"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "TrainedModelsRecord",
        "namespace": "cat.ml_trained_models"
      },
      "properties": [
        {
          "description": "the trained model id",
          "name": "id",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        },
        {
          "aliases": [
            "c",
            "createdBy"
          ],
          "description": "who created the model",
          "name": "created_by",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "hs",
            "modelHeapSize"
          ],
          "description": "the estimated heap size to keep the model in memory",
          "name": "heap_size",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ByteSize",
              "namespace": "_types"
            }
          }
        },
        {
          "aliases": [
            "o",
            "modelOperations"
          ],
          "description": "the estimated number of operations to use the model",
          "name": "operations",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "l"
          ],
          "description": "The license level of the model",
          "name": "license",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "ct"
          ],
          "description": "The time the model was created",
          "name": "create_time",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DateString",
              "namespace": "_types"
            }
          }
        },
        {
          "aliases": [
            "v"
          ],
          "description": "The version of Elasticsearch when the model was created",
          "name": "version",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "VersionString",
              "namespace": "_types"
            }
          }
        },
        {
          "aliases": [
            "d"
          ],
          "description": "The model description",
          "name": "description",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "ip",
            "ingestPipelines"
          ],
          "description": "The number of pipelines referencing the model",
          "name": "ingest.pipelines",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "ic",
            "ingestCount"
          ],
          "description": "The total number of docs processed by the model",
          "name": "ingest.count",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "it",
            "ingestTime"
          ],
          "description": "The total time spent processing docs with this model",
          "name": "ingest.time",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "icurr",
            "ingestCurrent"
          ],
          "description": "The total documents currently being handled by the model",
          "name": "ingest.current",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "if",
            "ingestFailed"
          ],
          "description": "The total count of failed ingest attempts with this model",
          "name": "ingest.failed",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "dfid",
            "dataFrameAnalytics"
          ],
          "description": "The data frame analytics config id that created the model (if still available)",
          "name": "data_frame.id",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "dft",
            "dataFrameAnalyticsTime"
          ],
          "description": "The time the data frame analytics config was created",
          "name": "data_frame.create_time",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "dfsi",
            "dataFrameAnalyticsSrcIndex"
          ],
          "description": "The source index used to train in the data frame analysis",
          "name": "data_frame.source_index",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "dfa",
            "dataFrameAnalyticsAnalysis"
          ],
          "description": "The analysis used by the data frame to build the model",
          "name": "data_frame.analysis",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "type",
          "required": false,
          "since": "8.0.0",
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "NodeAttributesRecord",
        "namespace": "cat.nodeattrs"
      },
      "properties": [
        {
          "description": "node name",
          "name": "node",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "unique node id",
          "name": "id",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "process id",
          "name": "pid",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "h"
          ],
          "description": "host name",
          "name": "host",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "i"
          ],
          "description": "ip address",
          "name": "ip",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "bound transport port",
          "name": "port",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "attribute description",
          "name": "attr",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "attribute value",
          "name": "value",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonCatQueryParameters",
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Returns information about custom node attributes.",
      "inherits": {
        "type": {
          "name": "CatRequestBase",
          "namespace": "cat._types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "cat.nodeattrs"
      },
      "path": [],
      "query": []
    },
    {
      "body": {
        "kind": "value",
        "value": {
          "kind": "array_of",
          "value": {
            "kind": "instance_of",
            "type": {
              "name": "NodeAttributesRecord",
              "namespace": "cat.nodeattrs"
            }
          }
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "cat.nodeattrs"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "NodesRecord",
        "namespace": "cat.nodes"
      },
      "properties": [
        {
          "aliases": [
            "nodeId"
          ],
          "description": "unique node id",
          "name": "id",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        },
        {
          "aliases": [
            "p"
          ],
          "description": "process id",
          "name": "pid",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "i"
          ],
          "description": "ip address",
          "name": "ip",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "po"
          ],
          "description": "bound transport port",
          "name": "port",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "http"
          ],
          "description": "bound http address",
          "name": "http_address",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "v"
          ],
          "description": "es version",
          "name": "version",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "VersionString",
              "namespace": "_types"
            }
          }
        },
        {
          "aliases": [
            "f"
          ],
          "description": "es distribution flavor",
          "name": "flavor",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "t"
          ],
          "description": "es distribution type",
          "name": "type",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Type",
              "namespace": "_types"
            }
          }
        },
        {
          "aliases": [
            "b"
          ],
          "description": "es build hash",
          "name": "build",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "j"
          ],
          "description": "jdk version",
          "name": "jdk",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "dt",
            "diskTotal"
          ],
          "description": "total disk space",
          "name": "disk.total",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ByteSize",
              "namespace": "_types"
            }
          }
        },
        {
          "aliases": [
            "du",
            "diskUsed"
          ],
          "description": "used disk space",
          "name": "disk.used",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ByteSize",
              "namespace": "_types"
            }
          }
        },
        {
          "aliases": [
            "d",
            "da",
            "disk",
            "diskAvail"
          ],
          "description": "available disk space",
          "name": "disk.avail",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ByteSize",
              "namespace": "_types"
            }
          }
        },
        {
          "aliases": [
            "dup",
            "diskUsedPercent"
          ],
          "description": "used disk space percentage",
          "name": "disk.used_percent",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Percentage",
              "namespace": "_types"
            }
          }
        },
        {
          "aliases": [
            "hc",
            "heapCurrent"
          ],
          "description": "used heap",
          "name": "heap.current",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "hp",
            "heapPercent"
          ],
          "description": "used heap ratio",
          "name": "heap.percent",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Percentage",
              "namespace": "_types"
            }
          }
        },
        {
          "aliases": [
            "hm",
            "heapMax"
          ],
          "description": "max configured heap",
          "name": "heap.max",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "rc",
            "ramCurrent"
          ],
          "description": "used machine memory",
          "name": "ram.current",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "rp",
            "ramPercent"
          ],
          "description": "used machine memory ratio",
          "name": "ram.percent",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Percentage",
              "namespace": "_types"
            }
          }
        },
        {
          "aliases": [
            "rn",
            "ramMax"
          ],
          "description": "total machine memory",
          "name": "ram.max",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "fdc",
            "fileDescriptorCurrent"
          ],
          "description": "used file descriptors",
          "name": "file_desc.current",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "fdp",
            "fileDescriptorPercent"
          ],
          "description": "used file descriptor ratio",
          "name": "file_desc.percent",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Percentage",
              "namespace": "_types"
            }
          }
        },
        {
          "aliases": [
            "fdm",
            "fileDescriptorMax"
          ],
          "description": "max file descriptors",
          "name": "file_desc.max",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "recent cpu usage",
          "name": "cpu",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "1m load avg",
          "name": "load_1m",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "5m load avg",
          "name": "load_5m",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "l"
          ],
          "description": "15m load avg",
          "name": "load_15m",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "u"
          ],
          "description": "node uptime",
          "name": "uptime",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "r",
            "role",
            "nodeRole"
          ],
          "description": "m:master eligible node, d:data node, i:ingest node, -:coordinating node only",
          "name": "node.role",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "m"
          ],
          "description": "*:current master",
          "name": "master",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "n"
          ],
          "description": "node name",
          "name": "name",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        },
        {
          "aliases": [
            "cs",
            "completionSize"
          ],
          "description": "size of completion",
          "name": "completion.size",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "fm",
            "fielddataMemory"
          ],
          "description": "used fielddata cache",
          "name": "fielddata.memory_size",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "fe",
            "fielddataEvictions"
          ],
          "description": "fielddata evictions",
          "name": "fielddata.evictions",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "qcm",
            "queryCacheMemory"
          ],
          "description": "used query cache",
          "name": "query_cache.memory_size",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "qce",
            "queryCacheEvictions"
          ],
          "description": "query cache evictions",
          "name": "query_cache.evictions",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "qchc",
            "queryCacheHitCount"
          ],
          "description": "query cache hit counts",
          "name": "query_cache.hit_count",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "qcmc",
            "queryCacheMissCount"
          ],
          "description": "query cache miss counts",
          "name": "query_cache.miss_count",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "rcm",
            "requestCacheMemory"
          ],
          "description": "used request cache",
          "name": "request_cache.memory_size",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "rce",
            "requestCacheEvictions"
          ],
          "description": "request cache evictions",
          "name": "request_cache.evictions",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "rchc",
            "requestCacheHitCount"
          ],
          "description": "request cache hit counts",
          "name": "request_cache.hit_count",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "rcmc",
            "requestCacheMissCount"
          ],
          "description": "request cache miss counts",
          "name": "request_cache.miss_count",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "ft",
            "flushTotal"
          ],
          "description": "number of flushes",
          "name": "flush.total",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "ftt",
            "flushTotalTime"
          ],
          "description": "time spent in flush",
          "name": "flush.total_time",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "gc",
            "getCurrent"
          ],
          "description": "number of current get ops",
          "name": "get.current",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "gti",
            "getTime"
          ],
          "description": "time spent in get",
          "name": "get.time",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "gto",
            "getTotal"
          ],
          "description": "number of get ops",
          "name": "get.total",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "geti",
            "getExistsTime"
          ],
          "description": "time spent in successful gets",
          "name": "get.exists_time",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "geto",
            "getExistsTotal"
          ],
          "description": "number of successful gets",
          "name": "get.exists_total",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "gmti",
            "getMissingTime"
          ],
          "description": "time spent in failed gets",
          "name": "get.missing_time",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "gmto",
            "getMissingTotal"
          ],
          "description": "number of failed gets",
          "name": "get.missing_total",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "idc",
            "indexingDeleteCurrent"
          ],
          "description": "number of current deletions",
          "name": "indexing.delete_current",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "idti",
            "indexingDeleteTime"
          ],
          "description": "time spent in deletions",
          "name": "indexing.delete_time",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "idto",
            "indexingDeleteTotal"
          ],
          "description": "number of delete ops",
          "name": "indexing.delete_total",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "iic",
            "indexingIndexCurrent"
          ],
          "description": "number of current indexing ops",
          "name": "indexing.index_current",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "iiti",
            "indexingIndexTime"
          ],
          "description": "time spent in indexing",
          "name": "indexing.index_time",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "iito",
            "indexingIndexTotal"
          ],
          "description": "number of indexing ops",
          "name": "indexing.index_total",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "iif",
            "indexingIndexFailed"
          ],
          "description": "number of failed indexing ops",
          "name": "indexing.index_failed",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "mc",
            "mergesCurrent"
          ],
          "description": "number of current merges",
          "name": "merges.current",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "mcd",
            "mergesCurrentDocs"
          ],
          "description": "number of current merging docs",
          "name": "merges.current_docs",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "mcs",
            "mergesCurrentSize"
          ],
          "description": "size of current merges",
          "name": "merges.current_size",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "mt",
            "mergesTotal"
          ],
          "description": "number of completed merge ops",
          "name": "merges.total",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "mtd",
            "mergesTotalDocs"
          ],
          "description": "docs merged",
          "name": "merges.total_docs",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "mts",
            "mergesTotalSize"
          ],
          "description": "size merged",
          "name": "merges.total_size",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "mtt",
            "mergesTotalTime"
          ],
          "description": "time spent in merges",
          "name": "merges.total_time",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "total refreshes",
          "name": "refresh.total",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "time spent in refreshes",
          "name": "refresh.time",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "rto",
            "refreshTotal"
          ],
          "description": "total external refreshes",
          "name": "refresh.external_total",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "rti",
            "refreshTime"
          ],
          "description": "time spent in external refreshes",
          "name": "refresh.external_time",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "rli",
            "refreshListeners"
          ],
          "description": "number of pending refresh listeners",
          "name": "refresh.listeners",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "scrcc",
            "scriptCompilations"
          ],
          "description": "script compilations",
          "name": "script.compilations",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "scrce",
            "scriptCacheEvictions"
          ],
          "description": "script cache evictions",
          "name": "script.cache_evictions",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "scrclt",
            "scriptCacheCompilationLimitTriggered"
          ],
          "description": "script cache compilation limit triggered",
          "name": "script.compilation_limit_triggered",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "sfc",
            "searchFetchCurrent"
          ],
          "description": "current fetch phase ops",
          "name": "search.fetch_current",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "sfti",
            "searchFetchTime"
          ],
          "description": "time spent in fetch phase",
          "name": "search.fetch_time",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "sfto",
            "searchFetchTotal"
          ],
          "description": "total fetch ops",
          "name": "search.fetch_total",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "so",
            "searchOpenContexts"
          ],
          "description": "open search contexts",
          "name": "search.open_contexts",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "sqc",
            "searchQueryCurrent"
          ],
          "description": "current query phase ops",
          "name": "search.query_current",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "sqti",
            "searchQueryTime"
          ],
          "description": "time spent in query phase",
          "name": "search.query_time",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "sqto",
            "searchQueryTotal"
          ],
          "description": "total query phase ops",
          "name": "search.query_total",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "scc",
            "searchScrollCurrent"
          ],
          "description": "open scroll contexts",
          "name": "search.scroll_current",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "scti",
            "searchScrollTime"
          ],
          "description": "time scroll contexts held open",
          "name": "search.scroll_time",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "scto",
            "searchScrollTotal"
          ],
          "description": "completed scroll contexts",
          "name": "search.scroll_total",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "sc",
            "segmentsCount"
          ],
          "description": "number of segments",
          "name": "segments.count",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "sm",
            "segmentsMemory"
          ],
          "description": "memory used by segments",
          "name": "segments.memory",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "siwm",
            "segmentsIndexWriterMemory"
          ],
          "description": "memory used by index writer",
          "name": "segments.index_writer_memory",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "svmm",
            "segmentsVersionMapMemory"
          ],
          "description": "memory used by version map",
          "name": "segments.version_map_memory",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "sfbm",
            "fixedBitsetMemory"
          ],
          "description": "memory used by fixed bit sets for nested object field types  and export type filters for types referred in _parent fields",
          "name": "segments.fixed_bitset_memory",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "suc",
            "suggestCurrent"
          ],
          "description": "number of current suggest ops",
          "name": "suggest.current",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "suti",
            "suggestTime"
          ],
          "description": "time spend in suggest",
          "name": "suggest.time",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "suto",
            "suggestTotal"
          ],
          "description": "number of suggest ops",
          "name": "suggest.total",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "bto",
            "bulkTotalOperations"
          ],
          "description": "number of bulk shard ops",
          "name": "bulk.total_operations",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "btti",
            "bulkTotalTime"
          ],
          "description": "time spend in shard bulk",
          "name": "bulk.total_time",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "btsi",
            "bulkTotalSizeInBytes"
          ],
          "description": "total size in bytes of shard bulk",
          "name": "bulk.total_size_in_bytes",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "bati",
            "bulkAvgTime"
          ],
          "description": "average time spend in shard bulk",
          "name": "bulk.avg_time",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "basi",
            "bulkAvgSizeInBytes"
          ],
          "description": "average size in bytes of shard bulk",
          "name": "bulk.avg_size_in_bytes",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonCatQueryParameters",
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Returns basic statistics about performance of cluster nodes.",
      "inherits": {
        "type": {
          "name": "CatRequestBase",
          "namespace": "cat._types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "cat.nodes"
      },
      "path": [],
      "query": [
        {
          "description": "The unit in which to display byte values",
          "name": "bytes",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Bytes",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Return the full node ID instead of the shortened version (default: false)",
          "name": "full_id",
          "required": false,
          "type": {
            "items": [
              {
                "kind": "instance_of",
                "type": {
                  "name": "boolean",
                  "namespace": "internal"
                }
              },
              {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              }
            ],
            "kind": "union_of"
          }
        }
      ]
    },
    {
      "body": {
        "kind": "value",
        "value": {
          "kind": "array_of",
          "value": {
            "kind": "instance_of",
            "type": {
              "name": "NodesRecord",
              "namespace": "cat.nodes"
            }
          }
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "cat.nodes"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "PendingTasksRecord",
        "namespace": "cat.pending_tasks"
      },
      "properties": [
        {
          "aliases": [
            "o"
          ],
          "description": "task insertion order",
          "name": "insertOrder",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "t"
          ],
          "description": "how long task has been in queue",
          "name": "timeInQueue",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "p"
          ],
          "description": "task priority",
          "name": "priority",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "s"
          ],
          "description": "task source",
          "name": "source",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonCatQueryParameters",
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Returns a concise representation of the cluster pending tasks.",
      "inherits": {
        "type": {
          "name": "CatRequestBase",
          "namespace": "cat._types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "cat.pending_tasks"
      },
      "path": [],
      "query": []
    },
    {
      "body": {
        "kind": "value",
        "value": {
          "kind": "array_of",
          "value": {
            "kind": "instance_of",
            "type": {
              "name": "PendingTasksRecord",
              "namespace": "cat.pending_tasks"
            }
          }
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "cat.pending_tasks"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "PluginsRecord",
        "namespace": "cat.plugins"
      },
      "properties": [
        {
          "description": "unique node id",
          "name": "id",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "NodeId",
              "namespace": "_types"
            }
          }
        },
        {
          "aliases": [
            "n"
          ],
          "description": "node name",
          "name": "name",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        },
        {
          "aliases": [
            "c"
          ],
          "description": "component",
          "name": "component",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "v"
          ],
          "description": "component version",
          "name": "version",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "VersionString",
              "namespace": "_types"
            }
          }
        },
        {
          "aliases": [
            "d"
          ],
          "description": "plugin details",
          "name": "description",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "t"
          ],
          "description": "plugin type",
          "name": "type",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Type",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonCatQueryParameters",
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Returns information about installed plugins across nodes node.",
      "inherits": {
        "type": {
          "name": "CatRequestBase",
          "namespace": "cat._types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "cat.plugins"
      },
      "path": [],
      "query": []
    },
    {
      "body": {
        "kind": "value",
        "value": {
          "kind": "array_of",
          "value": {
            "kind": "instance_of",
            "type": {
              "name": "PluginsRecord",
              "namespace": "cat.plugins"
            }
          }
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "cat.plugins"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "RecoveryRecord",
        "namespace": "cat.recovery"
      },
      "properties": [
        {
          "aliases": [
            "i",
            "idx"
          ],
          "description": "index name",
          "name": "index",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndexName",
              "namespace": "_types"
            }
          }
        },
        {
          "aliases": [
            "s",
            "sh"
          ],
          "description": "shard name",
          "name": "shard",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "start"
          ],
          "description": "recovery start time",
          "name": "start_time",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "start_millis"
          ],
          "description": "recovery start time in epoch milliseconds",
          "name": "start_time_millis",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "stop"
          ],
          "description": "recovery stop time",
          "name": "stop_time",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "stop_millis"
          ],
          "description": "recovery stop time in epoch milliseconds",
          "name": "stop_time_millis",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "t",
            "ti"
          ],
          "description": "recovery time",
          "name": "time",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "ty"
          ],
          "description": "recovery type",
          "name": "type",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Type",
              "namespace": "_types"
            }
          }
        },
        {
          "aliases": [
            "st"
          ],
          "description": "recovery stage",
          "name": "stage",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "shost"
          ],
          "description": "source host",
          "name": "source_host",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "snode"
          ],
          "description": "source node name",
          "name": "source_node",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "thost"
          ],
          "description": "target host",
          "name": "target_host",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "tnode"
          ],
          "description": "target node name",
          "name": "target_node",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "rep"
          ],
          "description": "repository",
          "name": "repository",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "snap"
          ],
          "description": "snapshot",
          "name": "snapshot",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "f"
          ],
          "description": "number of files to recover",
          "name": "files",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "fr"
          ],
          "description": "files recovered",
          "name": "files_recovered",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "fp"
          ],
          "description": "percent of files recovered",
          "name": "files_percent",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Percentage",
              "namespace": "_types"
            }
          }
        },
        {
          "aliases": [
            "tf"
          ],
          "description": "total number of files",
          "name": "files_total",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "b"
          ],
          "description": "number of bytes to recover",
          "name": "bytes",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "br"
          ],
          "description": "bytes recovered",
          "name": "bytes_recovered",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "bp"
          ],
          "description": "percent of bytes recovered",
          "name": "bytes_percent",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Percentage",
              "namespace": "_types"
            }
          }
        },
        {
          "aliases": [
            "tb"
          ],
          "description": "total number of bytes",
          "name": "bytes_total",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "to"
          ],
          "description": "number of translog ops to recover",
          "name": "translog_ops",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "tor"
          ],
          "description": "translog ops recovered",
          "name": "translog_ops_recovered",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "top"
          ],
          "description": "percent of translog ops recovered",
          "name": "translog_ops_percent",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Percentage",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonCatQueryParameters",
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Returns information about index shard recoveries, both on-going completed.",
      "inherits": {
        "type": {
          "name": "CatRequestBase",
          "namespace": "cat._types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "cat.recovery"
      },
      "path": [
        {
          "description": "Comma-separated list or wildcard expression of index names to limit the returned information",
          "name": "index",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Indices",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "If `true`, the response only includes ongoing shard recoveries",
          "name": "active_only",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "The unit in which to display byte values",
          "name": "bytes",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Bytes",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "If `true`, the response includes detailed information about shard recoveries",
          "name": "detailed",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "value",
        "value": {
          "kind": "array_of",
          "value": {
            "kind": "instance_of",
            "type": {
              "name": "RecoveryRecord",
              "namespace": "cat.recovery"
            }
          }
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "cat.recovery"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "RepositoriesRecord",
        "namespace": "cat.repositories"
      },
      "properties": [
        {
          "aliases": [
            "repoId"
          ],
          "description": "unique repository id",
          "name": "id",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "t"
          ],
          "description": "repository type",
          "name": "type",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonCatQueryParameters",
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Returns information about snapshot repositories registered in the cluster.",
      "inherits": {
        "type": {
          "name": "CatRequestBase",
          "namespace": "cat._types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "cat.repositories"
      },
      "path": [],
      "query": []
    },
    {
      "body": {
        "kind": "value",
        "value": {
          "kind": "array_of",
          "value": {
            "kind": "instance_of",
            "type": {
              "name": "RepositoriesRecord",
              "namespace": "cat.repositories"
            }
          }
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "cat.repositories"
      }
    },
    {
      "attachedBehaviors": [
        "CommonCatQueryParameters",
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Provides low-level information about the segments in the shards of an index.",
      "inherits": {
        "type": {
          "name": "CatRequestBase",
          "namespace": "cat._types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "cat.segments"
      },
      "path": [
        {
          "description": "A comma-separated list of index names to limit the returned information",
          "name": "index",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Indices",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "The unit in which to display byte values",
          "name": "bytes",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Bytes",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "value",
        "value": {
          "kind": "array_of",
          "value": {
            "kind": "instance_of",
            "type": {
              "name": "SegmentsRecord",
              "namespace": "cat.segments"
            }
          }
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "cat.segments"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "SegmentsRecord",
        "namespace": "cat.segments"
      },
      "properties": [
        {
          "aliases": [
            "i",
            "idx"
          ],
          "description": "index name",
          "name": "index",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndexName",
              "namespace": "_types"
            }
          }
        },
        {
          "aliases": [
            "s",
            "sh"
          ],
          "description": "shard name",
          "name": "shard",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "p",
            "pr",
            "primaryOrReplica"
          ],
          "description": "primary or replica",
          "name": "prirep",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "ip of node where it lives",
          "name": "ip",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "unique id of node where it lives",
          "name": "id",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "NodeId",
              "namespace": "_types"
            }
          }
        },
        {
          "aliases": [
            "seg"
          ],
          "description": "segment name",
          "name": "segment",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "g",
            "gen"
          ],
          "description": "segment generation",
          "name": "generation",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "dc",
            "docsCount"
          ],
          "description": "number of docs in segment",
          "name": "docs.count",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "dd",
            "docsDeleted"
          ],
          "description": "number of deleted docs in segment",
          "name": "docs.deleted",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "si"
          ],
          "description": "segment size in bytes",
          "name": "size",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ByteSize",
              "namespace": "_types"
            }
          }
        },
        {
          "aliases": [
            "sm",
            "sizeMemory"
          ],
          "description": "segment memory in bytes",
          "name": "size.memory",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ByteSize",
              "namespace": "_types"
            }
          }
        },
        {
          "aliases": [
            "ic",
            "isCommitted"
          ],
          "description": "is segment committed",
          "name": "committed",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "is",
            "isSearchable"
          ],
          "description": "is segment searched",
          "name": "searchable",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "v"
          ],
          "description": "version",
          "name": "version",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "VersionString",
              "namespace": "_types"
            }
          }
        },
        {
          "aliases": [
            "ico",
            "isCompound"
          ],
          "description": "is segment compound",
          "name": "compound",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonCatQueryParameters",
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Provides a detailed view of shard allocation on nodes.",
      "inherits": {
        "type": {
          "name": "CatRequestBase",
          "namespace": "cat._types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "cat.shards"
      },
      "path": [
        {
          "description": "A comma-separated list of index names to limit the returned information",
          "name": "index",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Indices",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "The unit in which to display byte values",
          "name": "bytes",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Bytes",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "value",
        "value": {
          "kind": "array_of",
          "value": {
            "kind": "instance_of",
            "type": {
              "name": "ShardsRecord",
              "namespace": "cat.shards"
            }
          }
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "cat.shards"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "ShardsRecord",
        "namespace": "cat.shards"
      },
      "properties": [
        {
          "aliases": [
            "i",
            "idx"
          ],
          "description": "index name",
          "name": "index",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "s",
            "sh"
          ],
          "description": "shard name",
          "name": "shard",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "p",
            "pr",
            "primaryOrReplica"
          ],
          "description": "primary or replica",
          "name": "prirep",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "st"
          ],
          "description": "shard state",
          "name": "state",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "d",
            "dc"
          ],
          "description": "number of docs in shard",
          "name": "docs",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "sto"
          ],
          "description": "store size of shard (how much disk it uses)",
          "name": "store",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "ip of node where it lives",
          "name": "ip",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "unique id of node where it lives",
          "name": "id",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "n"
          ],
          "description": "name of node where it lives",
          "name": "node",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "sync id",
          "name": "sync_id",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "ur"
          ],
          "description": "reason shard is unassigned",
          "name": "unassigned.reason",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "ua"
          ],
          "description": "time shard became unassigned (UTC)",
          "name": "unassigned.at",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "uf"
          ],
          "description": "time has been unassigned",
          "name": "unassigned.for",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "ud"
          ],
          "description": "additional details as to why the shard became unassigned",
          "name": "unassigned.details",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "rs"
          ],
          "description": "recovery source type",
          "name": "recoverysource.type",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "cs",
            "completionSize"
          ],
          "description": "size of completion",
          "name": "completion.size",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "fm",
            "fielddataMemory"
          ],
          "description": "used fielddata cache",
          "name": "fielddata.memory_size",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "fe",
            "fielddataEvictions"
          ],
          "description": "fielddata evictions",
          "name": "fielddata.evictions",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "qcm",
            "queryCacheMemory"
          ],
          "description": "used query cache",
          "name": "query_cache.memory_size",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "qce",
            "queryCacheEvictions"
          ],
          "description": "query cache evictions",
          "name": "query_cache.evictions",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "ft",
            "flushTotal"
          ],
          "description": "number of flushes",
          "name": "flush.total",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "ftt",
            "flushTotalTime"
          ],
          "description": "time spent in flush",
          "name": "flush.total_time",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "gc",
            "getCurrent"
          ],
          "description": "number of current get ops",
          "name": "get.current",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "gti",
            "getTime"
          ],
          "description": "time spent in get",
          "name": "get.time",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "gto",
            "getTotal"
          ],
          "description": "number of get ops",
          "name": "get.total",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "geti",
            "getExistsTime"
          ],
          "description": "time spent in successful gets",
          "name": "get.exists_time",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "geto",
            "getExistsTotal"
          ],
          "description": "number of successful gets",
          "name": "get.exists_total",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "gmti",
            "getMissingTime"
          ],
          "description": "time spent in failed gets",
          "name": "get.missing_time",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "gmto",
            "getMissingTotal"
          ],
          "description": "number of failed gets",
          "name": "get.missing_total",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "idc",
            "indexingDeleteCurrent"
          ],
          "description": "number of current deletions",
          "name": "indexing.delete_current",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "idti",
            "indexingDeleteTime"
          ],
          "description": "time spent in deletions",
          "name": "indexing.delete_time",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "idto",
            "indexingDeleteTotal"
          ],
          "description": "number of delete ops",
          "name": "indexing.delete_total",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "iic",
            "indexingIndexCurrent"
          ],
          "description": "number of current indexing ops",
          "name": "indexing.index_current",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "iiti",
            "indexingIndexTime"
          ],
          "description": "time spent in indexing",
          "name": "indexing.index_time",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "iito",
            "indexingIndexTotal"
          ],
          "description": "number of indexing ops",
          "name": "indexing.index_total",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "iif",
            "indexingIndexFailed"
          ],
          "description": "number of failed indexing ops",
          "name": "indexing.index_failed",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "mc",
            "mergesCurrent"
          ],
          "description": "number of current merges",
          "name": "merges.current",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "mcd",
            "mergesCurrentDocs"
          ],
          "description": "number of current merging docs",
          "name": "merges.current_docs",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "mcs",
            "mergesCurrentSize"
          ],
          "description": "size of current merges",
          "name": "merges.current_size",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "mt",
            "mergesTotal"
          ],
          "description": "number of completed merge ops",
          "name": "merges.total",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "mtd",
            "mergesTotalDocs"
          ],
          "description": "docs merged",
          "name": "merges.total_docs",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "mts",
            "mergesTotalSize"
          ],
          "description": "size merged",
          "name": "merges.total_size",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "mtt",
            "mergesTotalTime"
          ],
          "description": "time spent in merges",
          "name": "merges.total_time",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "total refreshes",
          "name": "refresh.total",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "time spent in refreshes",
          "name": "refresh.time",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "rto",
            "refreshTotal"
          ],
          "description": "total external refreshes",
          "name": "refresh.external_total",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "rti",
            "refreshTime"
          ],
          "description": "time spent in external refreshes",
          "name": "refresh.external_time",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "rli",
            "refreshListeners"
          ],
          "description": "number of pending refresh listeners",
          "name": "refresh.listeners",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "sfc",
            "searchFetchCurrent"
          ],
          "description": "current fetch phase ops",
          "name": "search.fetch_current",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "sfti",
            "searchFetchTime"
          ],
          "description": "time spent in fetch phase",
          "name": "search.fetch_time",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "sfto",
            "searchFetchTotal"
          ],
          "description": "total fetch ops",
          "name": "search.fetch_total",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "so",
            "searchOpenContexts"
          ],
          "description": "open search contexts",
          "name": "search.open_contexts",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "sqc",
            "searchQueryCurrent"
          ],
          "description": "current query phase ops",
          "name": "search.query_current",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "sqti",
            "searchQueryTime"
          ],
          "description": "time spent in query phase",
          "name": "search.query_time",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "sqto",
            "searchQueryTotal"
          ],
          "description": "total query phase ops",
          "name": "search.query_total",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "scc",
            "searchScrollCurrent"
          ],
          "description": "open scroll contexts",
          "name": "search.scroll_current",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "scti",
            "searchScrollTime"
          ],
          "description": "time scroll contexts held open",
          "name": "search.scroll_time",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "scto",
            "searchScrollTotal"
          ],
          "description": "completed scroll contexts",
          "name": "search.scroll_total",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "sc",
            "segmentsCount"
          ],
          "description": "number of segments",
          "name": "segments.count",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "sm",
            "segmentsMemory"
          ],
          "description": "memory used by segments",
          "name": "segments.memory",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "siwm",
            "segmentsIndexWriterMemory"
          ],
          "description": "memory used by index writer",
          "name": "segments.index_writer_memory",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "svmm",
            "segmentsVersionMapMemory"
          ],
          "description": "memory used by version map",
          "name": "segments.version_map_memory",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "sfbm",
            "fixedBitsetMemory"
          ],
          "description": "memory used by fixed bit sets for nested object field types and export type filters for types referred in _parent fields",
          "name": "segments.fixed_bitset_memory",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "sqm",
            "maxSeqNo"
          ],
          "description": "max sequence number",
          "name": "seq_no.max",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "sql",
            "localCheckpoint"
          ],
          "description": "local checkpoint",
          "name": "seq_no.local_checkpoint",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "sqg",
            "globalCheckpoint"
          ],
          "description": "global checkpoint",
          "name": "seq_no.global_checkpoint",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "wc",
            "warmerCurrent"
          ],
          "description": "current warmer ops",
          "name": "warmer.current",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "wto",
            "warmerTotal"
          ],
          "description": "total warmer ops",
          "name": "warmer.total",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "wtt",
            "warmerTotalTime"
          ],
          "description": "time spent in warmers",
          "name": "warmer.total_time",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "pd",
            "dataPath"
          ],
          "description": "shard data path",
          "name": "path.data",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "ps",
            "statsPath"
          ],
          "description": "shard state path",
          "name": "path.state",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "bto",
            "bulkTotalOperations"
          ],
          "description": "number of bulk shard ops",
          "name": "bulk.total_operations",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "btti",
            "bulkTotalTime"
          ],
          "description": "time spend in shard bulk",
          "name": "bulk.total_time",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "btsi",
            "bulkTotalSizeInBytes"
          ],
          "description": "total size in bytes of shard bulk",
          "name": "bulk.total_size_in_bytes",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "bati",
            "bulkAvgTime"
          ],
          "description": "average time spend in shard bulk",
          "name": "bulk.avg_time",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "basi",
            "bulkAvgSizeInBytes"
          ],
          "description": "avg size in bytes of shard bulk",
          "name": "bulk.avg_size_in_bytes",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonCatQueryParameters",
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Returns all snapshots in a specific repository.",
      "inherits": {
        "type": {
          "name": "CatRequestBase",
          "namespace": "cat._types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "cat.snapshots"
      },
      "path": [
        {
          "description": "Name of repository from which to fetch the snapshot information",
          "name": "repository",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Names",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "Set to true to ignore unavailable snapshots",
          "name": "ignore_unavailable",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "value",
        "value": {
          "kind": "array_of",
          "value": {
            "kind": "instance_of",
            "type": {
              "name": "SnapshotsRecord",
              "namespace": "cat.snapshots"
            }
          }
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "cat.snapshots"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "SnapshotsRecord",
        "namespace": "cat.snapshots"
      },
      "properties": [
        {
          "aliases": [
            "snapshot"
          ],
          "description": "unique snapshot",
          "name": "id",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "re",
            "repo"
          ],
          "description": "repository name",
          "name": "repository",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "s"
          ],
          "description": "snapshot name",
          "name": "status",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "ste",
            "startEpoch"
          ],
          "description": "start time in seconds since 1970-01-01 00:00:00",
          "name": "start_epoch",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "EpochMillis",
              "namespace": "_types"
            }
          }
        },
        {
          "aliases": [
            "sti",
            "startTime"
          ],
          "description": "start time in HH:MM:SS",
          "name": "start_time",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DateString",
              "namespace": "_types"
            }
          }
        },
        {
          "aliases": [
            "ete",
            "endEpoch"
          ],
          "description": "end time in seconds since 1970-01-01 00:00:00",
          "name": "end_epoch",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "EpochMillis",
              "namespace": "_types"
            }
          }
        },
        {
          "aliases": [
            "eti",
            "endTime"
          ],
          "description": "end time in HH:MM:SS",
          "name": "end_time",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DateString",
              "namespace": "_types"
            }
          }
        },
        {
          "aliases": [
            "dur"
          ],
          "description": "duration",
          "name": "duration",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "aliases": [
            "i"
          ],
          "description": "number of indices",
          "name": "indices",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "ss"
          ],
          "description": "number of successful shards",
          "name": "successful_shards",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "fs"
          ],
          "description": "number of failed shards",
          "name": "failed_shards",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "ts"
          ],
          "description": "number of total shards",
          "name": "total_shards",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "r"
          ],
          "description": "reason for failures",
          "name": "reason",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonCatQueryParameters",
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Returns information about the tasks currently executing on one or more nodes in the cluster.",
      "inherits": {
        "type": {
          "name": "CatRequestBase",
          "namespace": "cat._types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "cat.tasks"
      },
      "path": [],
      "query": [
        {
          "description": "A comma-separated list of actions that should be returned. Leave empty to return all.",
          "name": "actions",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        },
        {
          "description": "Return detailed task information (default: false)",
          "name": "detailed",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "node_id",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        },
        {
          "name": "parent_task",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "value",
        "value": {
          "kind": "array_of",
          "value": {
            "kind": "instance_of",
            "type": {
              "name": "TasksRecord",
              "namespace": "cat.tasks"
            }
          }
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "cat.tasks"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "TasksRecord",
        "namespace": "cat.tasks"
      },
      "properties": [
        {
          "description": "id of the task with the node",
          "name": "id",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        },
        {
          "aliases": [
            "ac"
          ],
          "description": "task action",
          "name": "action",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "ti"
          ],
          "description": "unique task id",
          "name": "task_id",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        },
        {
          "aliases": [
            "pti"
          ],
          "description": "parent task id",
          "name": "parent_task_id",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "ty"
          ],
          "description": "task type",
          "name": "type",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Type",
              "namespace": "_types"
            }
          }
        },
        {
          "aliases": [
            "start"
          ],
          "description": "start time in ms",
          "name": "start_time",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "ts",
            "hms",
            "hhmmss"
          ],
          "description": "start time in HH:MM:SS",
          "name": "timestamp",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "running time ns",
          "name": "running_time_ns",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "time"
          ],
          "description": "running time",
          "name": "running_time",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "ni"
          ],
          "description": "unique node id",
          "name": "node_id",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "NodeId",
              "namespace": "_types"
            }
          }
        },
        {
          "aliases": [
            "i"
          ],
          "description": "ip address",
          "name": "ip",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "po"
          ],
          "description": "bound transport port",
          "name": "port",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "n"
          ],
          "description": "node name",
          "name": "node",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "v"
          ],
          "description": "es version",
          "name": "version",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "VersionString",
              "namespace": "_types"
            }
          }
        },
        {
          "aliases": [
            "x"
          ],
          "description": "X-Opaque-ID header",
          "name": "x_opaque_id",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "desc"
          ],
          "description": "task action",
          "name": "description",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonCatQueryParameters",
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Returns information about existing templates.",
      "inherits": {
        "type": {
          "name": "CatRequestBase",
          "namespace": "cat._types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "cat.templates"
      },
      "path": [
        {
          "description": "A pattern that returned template names must match",
          "name": "name",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": []
    },
    {
      "body": {
        "kind": "value",
        "value": {
          "kind": "array_of",
          "value": {
            "kind": "instance_of",
            "type": {
              "name": "TemplatesRecord",
              "namespace": "cat.templates"
            }
          }
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "cat.templates"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "TemplatesRecord",
        "namespace": "cat.templates"
      },
      "properties": [
        {
          "aliases": [
            "n"
          ],
          "description": "template name",
          "name": "name",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        },
        {
          "aliases": [
            "t"
          ],
          "description": "template index patterns",
          "name": "index_patterns",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "o",
            "p"
          ],
          "description": "template application order/priority number",
          "name": "order",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "v"
          ],
          "description": "version",
          "name": "version",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "VersionString",
              "namespace": "_types"
            }
          }
        },
        {
          "aliases": [
            "c"
          ],
          "description": "component templates comprising index template",
          "name": "composed_of",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonCatQueryParameters",
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Returns cluster-wide thread pool statistics per node.\nBy default the active, queue and rejected statistics are returned for all thread pools.",
      "inherits": {
        "type": {
          "name": "CatRequestBase",
          "namespace": "cat._types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "cat.thread_pool"
      },
      "path": [
        {
          "description": "A comma-separated list of regular-expressions to filter the thread pools in the output",
          "name": "thread_pool_patterns",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Names",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "name": "size",
          "required": false,
          "type": {
            "items": [
              {
                "kind": "instance_of",
                "type": {
                  "name": "Size",
                  "namespace": "_types"
                }
              },
              {
                "kind": "instance_of",
                "type": {
                  "name": "boolean",
                  "namespace": "internal"
                }
              }
            ],
            "kind": "union_of"
          }
        }
      ]
    },
    {
      "body": {
        "kind": "value",
        "value": {
          "kind": "array_of",
          "value": {
            "kind": "instance_of",
            "type": {
              "name": "ThreadPoolRecord",
              "namespace": "cat.thread_pool"
            }
          }
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "cat.thread_pool"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "ThreadPoolRecord",
        "namespace": "cat.thread_pool"
      },
      "properties": [
        {
          "aliases": [
            "nn"
          ],
          "description": "node name",
          "name": "node_name",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "id"
          ],
          "description": "persistent node id",
          "name": "node_id",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "NodeId",
              "namespace": "_types"
            }
          }
        },
        {
          "aliases": [
            "eid"
          ],
          "description": "ephemeral node id",
          "name": "ephemeral_node_id",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "p"
          ],
          "description": "process id",
          "name": "pid",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "h"
          ],
          "description": "host name",
          "name": "host",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "i"
          ],
          "description": "ip address",
          "name": "ip",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "po"
          ],
          "description": "bound transport port",
          "name": "port",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "n"
          ],
          "description": "thread pool name",
          "name": "name",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "t"
          ],
          "description": "thread pool type",
          "name": "type",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "a"
          ],
          "description": "number of active threads",
          "name": "active",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "psz"
          ],
          "description": "number of threads",
          "name": "pool_size",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "q"
          ],
          "description": "number of tasks currently in queue",
          "name": "queue",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "qs"
          ],
          "description": "maximum number of tasks permitted in queue",
          "name": "queue_size",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "r"
          ],
          "description": "number of rejected tasks",
          "name": "rejected",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "l"
          ],
          "description": "highest number of seen active threads",
          "name": "largest",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "c"
          ],
          "description": "number of completed tasks",
          "name": "completed",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "cr"
          ],
          "description": "core number of threads in a scaling thread pool",
          "name": "core",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "mx"
          ],
          "description": "maximum number of threads in a scaling thread pool",
          "name": "max",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "sz"
          ],
          "description": "number of threads in a fixed thread pool",
          "name": "size",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "ka"
          ],
          "description": "thread keep alive time",
          "name": "keep_alive",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonCatQueryParameters",
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Gets configuration and usage information about transforms.",
      "inherits": {
        "type": {
          "name": "CatRequestBase",
          "namespace": "cat._types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "cat.transforms"
      },
      "path": [
        {
          "description": "The id of the transform for which to get stats. '_all' or '*' implies all transforms",
          "name": "transform_id",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "Whether to ignore if a wildcard expression matches no transforms. (This includes `_all` string or when no transforms have been specified)",
          "name": "allow_no_match",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "skips a number of transform configs, defaults to 0",
          "name": "from",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "specifies a max number of transforms to get, defaults to 100",
          "name": "size",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "value",
        "value": {
          "kind": "array_of",
          "value": {
            "kind": "instance_of",
            "type": {
              "name": "TransformsRecord",
              "namespace": "cat.transforms"
            }
          }
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "cat.transforms"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "TransformsRecord",
        "namespace": "cat.transforms"
      },
      "properties": [
        {
          "description": "the id",
          "name": "id",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        },
        {
          "aliases": [
            "s"
          ],
          "description": "transform state",
          "name": "state",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "c"
          ],
          "description": "checkpoint",
          "name": "checkpoint",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "docp",
            "documentsProcessed"
          ],
          "description": "the number of documents read from source indices and processed",
          "name": "documents_processed",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "cp",
            "checkpointProgress"
          ],
          "description": "progress of the checkpoint",
          "name": "checkpoint_progress",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "lst",
            "lastSearchTime"
          ],
          "description": "last time transform searched for updates",
          "name": "last_search_time",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "cldt"
          ],
          "description": "changes last detected time",
          "name": "changes_last_detection_time",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "ct",
            "createTime"
          ],
          "description": "transform creation time",
          "name": "create_time",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "v"
          ],
          "description": "the version of Elasticsearch when the transform was created",
          "name": "version",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "VersionString",
              "namespace": "_types"
            }
          }
        },
        {
          "aliases": [
            "si",
            "sourceIndex"
          ],
          "description": "source index",
          "name": "source_index",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "di",
            "destIndex"
          ],
          "description": "destination index",
          "name": "dest_index",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "p"
          ],
          "description": "transform pipeline",
          "name": "pipeline",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "d"
          ],
          "description": "description",
          "name": "description",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "tt"
          ],
          "description": "batch or continuous transform",
          "name": "transform_type",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "f"
          ],
          "description": "frequency of transform",
          "name": "frequency",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "mpsz"
          ],
          "description": "max page search size",
          "name": "max_page_search_size",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "dps"
          ],
          "description": "docs per second",
          "name": "docs_per_second",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "r"
          ],
          "description": "reason for the current state",
          "name": "reason",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "st"
          ],
          "description": "total number of search phases",
          "name": "search_total",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "sf"
          ],
          "description": "total number of search failures",
          "name": "search_failure",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "stime"
          ],
          "description": "total search time",
          "name": "search_time",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "it"
          ],
          "description": "total number of index phases done by the transform",
          "name": "index_total",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "if"
          ],
          "description": "total number of index failures",
          "name": "index_failure",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "itime"
          ],
          "description": "total time spent indexing documents",
          "name": "index_time",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "doci"
          ],
          "description": "the number of documents written to the destination index",
          "name": "documents_indexed",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "dtime"
          ],
          "description": "total time spent deleting documents",
          "name": "delete_time",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "docd"
          ],
          "description": "the number of documents deleted from the destination index",
          "name": "documents_deleted",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "tc"
          ],
          "description": "the number of times the transform has been triggered",
          "name": "trigger_count",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "pp"
          ],
          "description": "the number of pages processed",
          "name": "pages_processed",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "pt"
          ],
          "description": "the total time spent processing documents",
          "name": "processing_time",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "cdtea",
            "checkpointTimeExpAvg"
          ],
          "description": "exponential average checkpoint processing time (milliseconds)",
          "name": "checkpoint_duration_time_exp_avg",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "idea"
          ],
          "description": "exponential average number of documents indexed",
          "name": "indexed_documents_exp_avg",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "pdea"
          ],
          "description": "exponential average number of documents processed",
          "name": "processed_documents_exp_avg",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "FollowIndexStats",
        "namespace": "ccr._types"
      },
      "properties": [
        {
          "name": "index",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndexName",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "shards",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "ShardStats",
                "namespace": "ccr._types"
              }
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "ReadException",
        "namespace": "ccr._types"
      },
      "properties": [
        {
          "name": "exception",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ErrorCause",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "from_seq_no",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "SequenceNumber",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "retries",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "ShardStats",
        "namespace": "ccr._types"
      },
      "properties": [
        {
          "name": "bytes_read",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "failed_read_requests",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "failed_write_requests",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "fatal_exception",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ErrorCause",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "follower_aliases_version",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "VersionNumber",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "follower_global_checkpoint",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "follower_index",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "follower_mapping_version",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "VersionNumber",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "follower_max_seq_no",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "SequenceNumber",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "follower_settings_version",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "VersionNumber",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "last_requested_seq_no",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "SequenceNumber",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "leader_global_checkpoint",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "leader_index",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "leader_max_seq_no",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "SequenceNumber",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "operations_read",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "operations_written",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "outstanding_read_requests",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "outstanding_write_requests",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "read_exceptions",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "ReadException",
                "namespace": "ccr._types"
              }
            }
          }
        },
        {
          "name": "remote_cluster",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "shard_id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "successful_read_requests",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "successful_write_requests",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "time_since_last_read_millis",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "EpochMillis",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "total_read_remote_exec_time_millis",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "EpochMillis",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "total_read_time_millis",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "EpochMillis",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "total_write_time_millis",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "EpochMillis",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "write_buffer_operation_count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "write_buffer_size_in_bytes",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ByteSize",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Deletes auto-follow patterns.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "ccr.delete_auto_follow_pattern"
      },
      "path": [
        {
          "description": "The name of the auto follow pattern.",
          "name": "name",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": []
    },
    {
      "body": {
        "kind": "properties",
        "properties": []
      },
      "inherits": {
        "type": {
          "name": "AcknowledgedResponseBase",
          "namespace": "_types"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "ccr.delete_auto_follow_pattern"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "leader_index",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "IndexName",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "max_outstanding_read_requests",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "long",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "max_outstanding_write_requests",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "long",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "max_read_request_operation_count",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "long",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "max_read_request_size",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "max_retry_delay",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Time",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "max_write_buffer_count",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "long",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "max_write_buffer_size",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "max_write_request_operation_count",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "long",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "max_write_request_size",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "read_poll_timeout",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Time",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "remote_cluster",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        ]
      },
      "description": "Creates a new follower index configured to follow the referenced leader index.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "ccr.follow"
      },
      "path": [
        {
          "description": "The name of the follower index",
          "name": "index",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndexName",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "Sets the number of shard copies that must be active before returning. Defaults to 0. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)",
          "name": "wait_for_active_shards",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "WaitForActiveShards",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "follow_index_created",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "follow_index_shards_acked",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "index_following_started",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "ccr.follow"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "FollowerIndex",
        "namespace": "ccr.follow_info"
      },
      "properties": [
        {
          "name": "follower_index",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndexName",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "leader_index",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndexName",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "parameters",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "FollowerIndexParameters",
              "namespace": "ccr.follow_info"
            }
          }
        },
        {
          "name": "remote_cluster",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "status",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "FollowerIndexStatus",
              "namespace": "ccr.follow_info"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "FollowerIndexParameters",
        "namespace": "ccr.follow_info"
      },
      "properties": [
        {
          "name": "max_outstanding_read_requests",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "max_outstanding_write_requests",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "max_read_request_operation_count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "max_read_request_size",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "max_retry_delay",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "max_write_buffer_count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "max_write_buffer_size",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "max_write_request_operation_count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "max_write_request_size",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "read_poll_timeout",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "active"
        },
        {
          "name": "paused"
        }
      ],
      "name": {
        "name": "FollowerIndexStatus",
        "namespace": "ccr.follow_info"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Retrieves information about all follower indices, including parameters and status for each follower index",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "ccr.follow_info"
      },
      "path": [
        {
          "description": "A comma-separated list of index patterns; use `_all` to perform the operation on all indices",
          "name": "index",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Indices",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": []
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "follower_indices",
            "required": true,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "FollowerIndex",
                  "namespace": "ccr.follow_info"
                }
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "ccr.follow_info"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Retrieves follower stats. return shard-level stats about the following tasks associated with each shard for the specified indices.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "ccr.follow_stats"
      },
      "path": [
        {
          "description": "A comma-separated list of index patterns; use `_all` to perform the operation on all indices",
          "name": "index",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Indices",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": []
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "indices",
            "required": true,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "FollowIndexStats",
                  "namespace": "ccr._types"
                }
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "ccr.follow_stats"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "follower_cluster",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "follower_index",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "IndexName",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "follower_index_uuid",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Uuid",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "leader_remote_cluster",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        ]
      },
      "description": "Removes the follower retention leases from the leader.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "ccr.forget_follower"
      },
      "path": [
        {
          "description": "the name of the leader index for which specified follower retention leases should be removed",
          "name": "index",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndexName",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": []
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "_shards",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "ShardStatistics",
                "namespace": "_types"
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "ccr.forget_follower"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "AutoFollowPattern",
        "namespace": "ccr.get_auto_follow_pattern"
      },
      "properties": [
        {
          "name": "name",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "pattern",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "AutoFollowPatternSummary",
              "namespace": "ccr.get_auto_follow_pattern"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "AutoFollowPatternSummary",
        "namespace": "ccr.get_auto_follow_pattern"
      },
      "properties": [
        {
          "name": "active",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "The remote cluster containing the leader indices to match against.",
          "name": "remote_cluster",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "The name of follower index.",
          "name": "follow_index_pattern",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndexPattern",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "An array of simple index patterns to match against indices in the remote cluster specified by the remote_cluster field.",
          "name": "leader_index_patterns",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndexPatterns",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "An array of simple index patterns that can be used to exclude indices from being auto-followed.",
          "name": "leader_index_exclusion_patterns",
          "required": true,
          "since": "7.14.0",
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndexPatterns",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "The maximum number of outstanding reads requests from the remote cluster.",
          "name": "max_outstanding_read_requests",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Gets configured auto-follow patterns. Returns the specified auto-follow pattern collection.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "ccr.get_auto_follow_pattern"
      },
      "path": [
        {
          "description": "Specifies the auto-follow pattern collection that you want to retrieve. If you do not specify a name, the API returns information for all collections.",
          "name": "name",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": []
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "patterns",
            "required": true,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "AutoFollowPattern",
                  "namespace": "ccr.get_auto_follow_pattern"
                }
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "ccr.get_auto_follow_pattern"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Pauses an auto-follow pattern",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "ccr.pause_auto_follow_pattern"
      },
      "path": [
        {
          "description": "The name of the auto follow pattern that should pause discovering new indices to follow.",
          "name": "name",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": []
    },
    {
      "body": {
        "kind": "properties",
        "properties": []
      },
      "inherits": {
        "type": {
          "name": "AcknowledgedResponseBase",
          "namespace": "_types"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "ccr.pause_auto_follow_pattern"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Pauses a follower index. The follower index will not fetch any additional operations from the leader index.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "ccr.pause_follow"
      },
      "path": [
        {
          "description": "The name of the follower index that should pause following its leader index.",
          "name": "index",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndexName",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": []
    },
    {
      "body": {
        "kind": "properties",
        "properties": []
      },
      "inherits": {
        "type": {
          "name": "AcknowledgedResponseBase",
          "namespace": "_types"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "ccr.pause_follow"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "properties",
        "properties": [
          {
            "description": "The remote cluster containing the leader indices to match against.",
            "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-remote-clusters.html",
            "name": "remote_cluster",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          },
          {
            "description": "The name of follower index. The template {{leader_index}} can be used to derive the name of the follower index from the name of the leader index. When following a data stream, use {{leader_index}}; CCR does not support changes to the names of a follower data stream’s backing indices.",
            "name": "follow_index_pattern",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "IndexPattern",
                "namespace": "_types"
              }
            }
          },
          {
            "description": "An array of simple index patterns to match against indices in the remote cluster specified by the remote_cluster field.",
            "name": "leader_index_patterns",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "IndexPatterns",
                "namespace": "_types"
              }
            }
          },
          {
            "description": "An array of simple index patterns that can be used to exclude indices from being auto-followed. Indices in the remote cluster whose names are matching one or more leader_index_patterns and one or more leader_index_exclusion_patterns won’t be followed.",
            "name": "leader_index_exclusion_patterns",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "IndexPatterns",
                "namespace": "_types"
              }
            }
          },
          {
            "description": "The maximum number of outstanding reads requests from the remote cluster.",
            "name": "max_outstanding_read_requests",
            "required": false,
            "serverDefault": 12,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "integer",
                "namespace": "_types"
              }
            }
          },
          {
            "description": "Settings to override from the leader index. Note that certain settings can not be overrode (e.g., index.number_of_shards).",
            "name": "settings",
            "required": false,
            "type": {
              "key": {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              },
              "kind": "dictionary_of",
              "singleKey": false,
              "value": {
                "kind": "user_defined_value"
              }
            }
          },
          {
            "description": "The maximum number of outstanding reads requests from the remote cluster.",
            "name": "max_outstanding_write_requests",
            "required": false,
            "serverDefault": 9,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "integer",
                "namespace": "_types"
              }
            }
          },
          {
            "description": "The maximum time to wait for new operations on the remote cluster when the follower index is synchronized with the leader index. When the timeout has elapsed, the poll for operations will return to the follower so that it can update some statistics. Then the follower will immediately attempt to read from the leader again.",
            "name": "read_poll_timeout",
            "required": false,
            "serverDefault": "1m",
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Time",
                "namespace": "_types"
              }
            }
          },
          {
            "description": "The maximum number of operations to pull per read from the remote cluster.",
            "name": "max_read_request_operation_count",
            "required": false,
            "serverDefault": 5120,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "integer",
                "namespace": "_types"
              }
            }
          },
          {
            "description": "The maximum size in bytes of per read of a batch of operations pulled from the remote cluster.",
            "name": "max_read_request_size",
            "required": false,
            "serverDefault": "32mb",
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "ByteSize",
                "namespace": "_types"
              }
            }
          },
          {
            "description": "The maximum time to wait before retrying an operation that failed exceptionally. An exponential backoff strategy is employed when retrying.",
            "name": "max_retry_delay",
            "required": false,
            "serverDefault": "500ms",
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Time",
                "namespace": "_types"
              }
            }
          },
          {
            "description": "The maximum number of operations that can be queued for writing. When this limit is reached, reads from the remote cluster will be deferred until the number of queued operations goes below the limit.",
            "name": "max_write_buffer_count",
            "required": false,
            "serverDefault": 2147483647,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "integer",
                "namespace": "_types"
              }
            }
          },
          {
            "description": "The maximum total bytes of operations that can be queued for writing. When this limit is reached, reads from the remote cluster will be deferred until the total bytes of queued operations goes below the limit.",
            "name": "max_write_buffer_size",
            "required": false,
            "serverDefault": "512mb",
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "ByteSize",
                "namespace": "_types"
              }
            }
          },
          {
            "description": "The maximum number of operations per bulk write request executed on the follower.",
            "name": "max_write_request_operation_count",
            "required": false,
            "serverDefault": 5120,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "integer",
                "namespace": "_types"
              }
            }
          },
          {
            "description": "The maximum total bytes of operations per bulk write request executed on the follower.",
            "name": "max_write_request_size",
            "required": false,
            "serverDefault": "9223372036854775807b",
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "ByteSize",
                "namespace": "_types"
              }
            }
          }
        ]
      },
      "description": "Creates a new named collection of auto-follow patterns against a specified remote cluster. Newly created indices on the remote cluster matching any of the specified patterns will be automatically configured as follower indices.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "ccr.put_auto_follow_pattern"
      },
      "path": [
        {
          "description": "The name of the collection of auto-follow patterns.",
          "name": "name",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": []
    },
    {
      "body": {
        "kind": "properties",
        "properties": []
      },
      "inherits": {
        "type": {
          "name": "AcknowledgedResponseBase",
          "namespace": "_types"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "ccr.put_auto_follow_pattern"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Resumes an auto-follow pattern that has been paused",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "ccr.resume_auto_follow_pattern"
      },
      "path": [
        {
          "description": "The name of the auto follow pattern to resume discovering new indices to follow.",
          "name": "name",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": []
    },
    {
      "body": {
        "kind": "properties",
        "properties": []
      },
      "inherits": {
        "type": {
          "name": "AcknowledgedResponseBase",
          "namespace": "_types"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "ccr.resume_auto_follow_pattern"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "max_outstanding_read_requests",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "long",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "max_outstanding_write_requests",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "long",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "max_read_request_operation_count",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "long",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "max_read_request_size",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "max_retry_delay",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Time",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "max_write_buffer_count",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "long",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "max_write_buffer_size",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "max_write_request_operation_count",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "long",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "max_write_request_size",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "read_poll_timeout",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Time",
                "namespace": "_types"
              }
            }
          }
        ]
      },
      "description": "Resumes a follower index that has been paused",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "ccr.resume_follow"
      },
      "path": [
        {
          "description": "The name of the follow index to resume following.",
          "name": "index",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndexName",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": []
    },
    {
      "body": {
        "kind": "properties",
        "properties": []
      },
      "inherits": {
        "type": {
          "name": "AcknowledgedResponseBase",
          "namespace": "_types"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "ccr.resume_follow"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "AutoFollowStats",
        "namespace": "ccr.stats"
      },
      "properties": [
        {
          "name": "auto_followed_clusters",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "AutoFollowedCluster",
                "namespace": "ccr.stats"
              }
            }
          }
        },
        {
          "name": "number_of_failed_follow_indices",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "number_of_failed_remote_cluster_state_requests",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "number_of_successful_follow_indices",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "recent_auto_follow_errors",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "ErrorCause",
                "namespace": "_types"
              }
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "AutoFollowedCluster",
        "namespace": "ccr.stats"
      },
      "properties": [
        {
          "name": "cluster_name",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "last_seen_metadata_version",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "VersionNumber",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "time_since_last_check_millis",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DateString",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "FollowStats",
        "namespace": "ccr.stats"
      },
      "properties": [
        {
          "name": "indices",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "FollowIndexStats",
                "namespace": "ccr._types"
              }
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Gets all stats related to cross-cluster replication.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "ccr.stats"
      },
      "path": [],
      "query": []
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "auto_follow_stats",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "AutoFollowStats",
                "namespace": "ccr.stats"
              }
            }
          },
          {
            "name": "follow_stats",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "FollowStats",
                "namespace": "ccr.stats"
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "ccr.stats"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Stops the following task associated with a follower index and removes index metadata and settings associated with cross-cluster replication.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "ccr.unfollow"
      },
      "path": [
        {
          "description": "The name of the follower index that should be turned into a regular index.",
          "name": "index",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndexName",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": []
    },
    {
      "body": {
        "kind": "properties",
        "properties": []
      },
      "inherits": {
        "type": {
          "name": "AcknowledgedResponseBase",
          "namespace": "_types"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "ccr.unfollow"
      }
    },
    {
      "kind": "enum",
      "members": [
        {
          "description": "All shards are assigned.",
          "name": "green"
        },
        {
          "description": "All primary shards are assigned, but one or more replica shards are unassigned. If a node in the cluster fails, some data could be unavailable until that node is repaired.",
          "name": "yellow"
        },
        {
          "description": "One or more primary shards are unassigned, so some data is unavailable. This can occur briefly during cluster startup as primary shards are assigned.",
          "name": "red"
        }
      ],
      "name": {
        "name": "ClusterStatus",
        "namespace": "cluster._types"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "ComponentTemplate",
        "namespace": "cluster._types"
      },
      "properties": [
        {
          "name": "name",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "component_template",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ComponentTemplateNode",
              "namespace": "cluster._types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "ComponentTemplateNode",
        "namespace": "cluster._types"
      },
      "properties": [
        {
          "name": "template",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ComponentTemplateSummary",
              "namespace": "cluster._types"
            }
          }
        },
        {
          "name": "version",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "VersionNumber",
              "namespace": "_types"
            }
          }
        },
        {
          "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-meta-field.html",
          "name": "_meta",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Metadata",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "ComponentTemplateSummary",
        "namespace": "cluster._types"
      },
      "properties": [
        {
          "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-meta-field.html",
          "name": "_meta",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Metadata",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "version",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "VersionNumber",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "settings",
          "required": true,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "IndexName",
                "namespace": "_types"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "IndexSettings",
                "namespace": "indices._types"
              }
            }
          }
        },
        {
          "name": "mappings",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "TypeMapping",
              "namespace": "_types.mapping"
            }
          }
        },
        {
          "name": "aliases",
          "required": false,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "AliasDefinition",
                "namespace": "indices._types"
              }
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "AllocationDecision",
        "namespace": "cluster.allocation_explain"
      },
      "properties": [
        {
          "name": "decider",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "decision",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "AllocationExplainDecision",
              "namespace": "cluster.allocation_explain"
            }
          }
        },
        {
          "name": "explanation",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "NO"
        },
        {
          "name": "YES"
        },
        {
          "name": "THROTTLE"
        },
        {
          "name": "ALWAYS"
        }
      ],
      "name": {
        "name": "AllocationExplainDecision",
        "namespace": "cluster.allocation_explain"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "AllocationStore",
        "namespace": "cluster.allocation_explain"
      },
      "properties": [
        {
          "name": "allocation_id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "found",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "in_sync",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "matching_size_in_bytes",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "matching_sync_id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "store_exception",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "ClusterInfo",
        "namespace": "cluster.allocation_explain"
      },
      "properties": [
        {
          "name": "nodes",
          "required": true,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "NodeDiskUsage",
                "namespace": "cluster.allocation_explain"
              }
            }
          }
        },
        {
          "name": "shard_sizes",
          "required": true,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "long",
                "namespace": "_types"
              }
            }
          }
        },
        {
          "name": "shard_data_set_sizes",
          "required": false,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        },
        {
          "name": "shard_paths",
          "required": true,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        },
        {
          "name": "reserved_sizes",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "ReservedSize",
                "namespace": "cluster.allocation_explain"
              }
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "CurrentNode",
        "namespace": "cluster.allocation_explain"
      },
      "properties": [
        {
          "name": "id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "name",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "attributes",
          "required": true,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        },
        {
          "name": "transport_address",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "TransportAddress",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "weight_ranking",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "yes"
        },
        {
          "name": "no"
        },
        {
          "name": "worse_balance"
        },
        {
          "name": "throttled"
        },
        {
          "name": "awaiting_info"
        },
        {
          "name": "allocation_delayed"
        },
        {
          "name": "no_valid_shard_copy"
        },
        {
          "name": "no_attempt"
        }
      ],
      "name": {
        "name": "Decision",
        "namespace": "cluster.allocation_explain"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "DiskUsage",
        "namespace": "cluster.allocation_explain"
      },
      "properties": [
        {
          "name": "path",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "total_bytes",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "used_bytes",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "free_bytes",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "free_disk_percent",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "used_disk_percent",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "NodeAllocationExplanation",
        "namespace": "cluster.allocation_explain"
      },
      "properties": [
        {
          "name": "deciders",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "AllocationDecision",
                "namespace": "cluster.allocation_explain"
              }
            }
          }
        },
        {
          "name": "node_attributes",
          "required": true,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        },
        {
          "name": "node_decision",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Decision",
              "namespace": "cluster.allocation_explain"
            }
          }
        },
        {
          "name": "node_id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "node_name",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "store",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "AllocationStore",
              "namespace": "cluster.allocation_explain"
            }
          }
        },
        {
          "name": "transport_address",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "TransportAddress",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "weight_ranking",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "NodeDiskUsage",
        "namespace": "cluster.allocation_explain"
      },
      "properties": [
        {
          "name": "node_name",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "least_available",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DiskUsage",
              "namespace": "cluster.allocation_explain"
            }
          }
        },
        {
          "name": "most_available",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DiskUsage",
              "namespace": "cluster.allocation_explain"
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "properties",
        "properties": [
          {
            "description": "Specifies the node ID or the name of the node to only explain a shard that is currently located on the specified node.",
            "name": "current_node",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          },
          {
            "description": "Specifies the name of the index that you would like an explanation for.",
            "name": "index",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "IndexName",
                "namespace": "_types"
              }
            }
          },
          {
            "description": "If true, returns explanation for the primary shard for the given shard ID.",
            "name": "primary",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          },
          {
            "description": "Specifies the ID of the shard that you would like an explanation for.",
            "name": "shard",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "integer",
                "namespace": "_types"
              }
            }
          }
        ]
      },
      "description": "Provides explanations for shard allocations in the cluster.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "cluster.allocation_explain"
      },
      "path": [],
      "query": [
        {
          "description": "If true, returns information about disk usage and shard sizes.",
          "name": "include_disk_info",
          "required": false,
          "serverDefault": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "If true, returns YES decisions in explanation.",
          "name": "include_yes_decisions",
          "required": false,
          "serverDefault": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "ReservedSize",
        "namespace": "cluster.allocation_explain"
      },
      "properties": [
        {
          "name": "node_id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "path",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "total",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "shards",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "allocate_explanation",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "allocation_delay",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "allocation_delay_in_millis",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "long",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "can_allocate",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Decision",
                "namespace": "cluster.allocation_explain"
              }
            }
          },
          {
            "name": "can_move_to_other_node",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Decision",
                "namespace": "cluster.allocation_explain"
              }
            }
          },
          {
            "name": "can_rebalance_cluster",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Decision",
                "namespace": "cluster.allocation_explain"
              }
            }
          },
          {
            "name": "can_rebalance_cluster_decisions",
            "required": false,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "AllocationDecision",
                  "namespace": "cluster.allocation_explain"
                }
              }
            }
          },
          {
            "name": "can_rebalance_to_other_node",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Decision",
                "namespace": "cluster.allocation_explain"
              }
            }
          },
          {
            "name": "can_remain_decisions",
            "required": false,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "AllocationDecision",
                  "namespace": "cluster.allocation_explain"
                }
              }
            }
          },
          {
            "name": "can_remain_on_current_node",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Decision",
                "namespace": "cluster.allocation_explain"
              }
            }
          },
          {
            "name": "cluster_info",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "ClusterInfo",
                "namespace": "cluster.allocation_explain"
              }
            }
          },
          {
            "name": "configured_delay",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "configured_delay_in_millis",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "long",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "current_node",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "CurrentNode",
                "namespace": "cluster.allocation_explain"
              }
            }
          },
          {
            "name": "current_state",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "index",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "IndexName",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "move_explanation",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "node_allocation_decisions",
            "required": false,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "NodeAllocationExplanation",
                  "namespace": "cluster.allocation_explain"
                }
              }
            }
          },
          {
            "name": "primary",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "rebalance_explanation",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "remaining_delay",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "remaining_delay_in_millis",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "long",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "shard",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "integer",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "unassigned_info",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "UnassignedInformation",
                "namespace": "cluster.allocation_explain"
              }
            }
          },
          {
            "name": "note",
            "required": false,
            "since": "7.14.0",
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "cluster.allocation_explain"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "UnassignedInformation",
        "namespace": "cluster.allocation_explain"
      },
      "properties": [
        {
          "name": "at",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DateString",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "last_allocation_status",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "reason",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "UnassignedInformationReason",
              "namespace": "cluster.allocation_explain"
            }
          }
        },
        {
          "name": "details",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "failed_allocation_attempts",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "delayed",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "allocation_status",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "INDEX_CREATED"
        },
        {
          "name": "CLUSTER_RECOVERED"
        },
        {
          "name": "INDEX_REOPENED"
        },
        {
          "name": "DANGLING_INDEX_IMPORTED"
        },
        {
          "name": "NEW_INDEX_RESTORED"
        },
        {
          "name": "EXISTING_INDEX_RESTORED"
        },
        {
          "name": "REPLICA_ADDED"
        },
        {
          "name": "ALLOCATION_FAILED"
        },
        {
          "name": "NODE_LEFT"
        },
        {
          "name": "REROUTE_CANCELLED"
        },
        {
          "name": "REINITIALIZED"
        },
        {
          "name": "REALLOCATED_REPLICA"
        },
        {
          "name": "PRIMARY_FAILED"
        },
        {
          "name": "FORCED_EMPTY_PRIMARY"
        },
        {
          "name": "MANUAL_ALLOCATION"
        }
      ],
      "name": {
        "name": "UnassignedInformationReason",
        "namespace": "cluster.allocation_explain"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Deletes a component template",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "cluster.delete_component_template"
      },
      "path": [
        {
          "description": "The name of the template",
          "name": "name",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "Specify timeout for connection to master",
          "name": "master_timeout",
          "required": false,
          "serverDefault": "30s",
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Explicit operation timeout",
          "name": "timeout",
          "required": false,
          "serverDefault": "30s",
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": []
      },
      "inherits": {
        "type": {
          "name": "AcknowledgedResponseBase",
          "namespace": "_types"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "cluster.delete_component_template"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Clears cluster voting config exclusions.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "cluster.delete_voting_config_exclusions"
      },
      "path": [],
      "query": [
        {
          "description": "Specifies whether to wait for all excluded nodes to be removed from the\ncluster before clearing the voting configuration exclusions list.\nDefaults to true, meaning that all excluded nodes must be removed from\nthe cluster before this API takes any action. If set to false then the\nvoting configuration exclusions list is cleared even if some excluded\nnodes are still in the cluster.",
          "name": "wait_for_removal",
          "required": false,
          "serverDefault": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "no_body"
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "cluster.delete_voting_config_exclusions"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Returns information about whether a particular component template exist",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "cluster.exists_component_template"
      },
      "path": [
        {
          "description": "Comma-separated list of component template names used to limit the request.\nWildcard (*) expressions are supported.",
          "name": "name",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Names",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "Period to wait for a connection to the master node. If no response is\nreceived before the timeout expires, the request fails and returns an\nerror.",
          "name": "master_timeout",
          "required": false,
          "serverDefault": "30s",
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "If true, the request retrieves information from the local node only.\nDefaults to false, which means information is retrieved from the master node.",
          "name": "local",
          "required": false,
          "serverDefault": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "no_body"
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "cluster.exists_component_template"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Returns one or more component templates",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "cluster.get_component_template"
      },
      "path": [
        {
          "description": "The comma separated names of the component templates",
          "name": "name",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "name": "flat_settings",
          "required": false,
          "serverDefault": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Return local information, do not retrieve the state from master node (default: false)",
          "name": "local",
          "required": false,
          "serverDefault": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Explicit operation timeout for connection to master node",
          "name": "master_timeout",
          "required": false,
          "serverDefault": "30s",
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "component_templates",
            "required": true,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "ComponentTemplate",
                  "namespace": "cluster._types"
                }
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "cluster.get_component_template"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Returns cluster settings.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "cluster.get_settings"
      },
      "path": [],
      "query": [
        {
          "description": "Return settings in flat format (default: false)",
          "name": "flat_settings",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Whether to return all default clusters setting.",
          "name": "include_defaults",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Explicit operation timeout for connection to master node",
          "name": "master_timeout",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Explicit operation timeout",
          "name": "timeout",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "persistent",
            "required": true,
            "type": {
              "key": {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              },
              "kind": "dictionary_of",
              "singleKey": false,
              "value": {
                "kind": "user_defined_value"
              }
            }
          },
          {
            "name": "transient",
            "required": true,
            "type": {
              "key": {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              },
              "kind": "dictionary_of",
              "singleKey": false,
              "value": {
                "kind": "user_defined_value"
              }
            }
          },
          {
            "name": "defaults",
            "required": false,
            "type": {
              "key": {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              },
              "kind": "dictionary_of",
              "singleKey": false,
              "value": {
                "kind": "user_defined_value"
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "cluster.get_settings"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "IndexHealthStats",
        "namespace": "cluster.health"
      },
      "properties": [
        {
          "name": "active_primary_shards",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "active_shards",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "initializing_shards",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "number_of_replicas",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "number_of_shards",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "relocating_shards",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "shards",
          "required": false,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "ShardHealthStats",
                "namespace": "cluster.health"
              }
            }
          }
        },
        {
          "name": "status",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Health",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "unassigned_shards",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Returns basic information about the health of the cluster.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "cluster.health"
      },
      "path": [
        {
          "description": "Comma-separated list of data streams, indices, and index aliases used to limit the request. Wildcard expressions (*) are supported. To target all data streams and indices in a cluster, omit this parameter or use _all or *.",
          "name": "index",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Indices",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
          "name": "expand_wildcards",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ExpandWildcards",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Can be one of cluster, indices or shards. Controls the details level of the health information returned.",
          "name": "level",
          "required": false,
          "serverDefault": "cluster",
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Level",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "If true, the request retrieves information from the local node only. Defaults to false, which means information is retrieved from the master node.",
          "name": "local",
          "required": false,
          "serverDefault": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Period to wait for a connection to the master node. If no response is received before the timeout expires, the request fails and returns an error.",
          "name": "master_timeout",
          "required": false,
          "serverDefault": "30s",
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Period to wait for a response. If no response is received before the timeout expires, the request fails and returns an error.",
          "name": "timeout",
          "required": false,
          "serverDefault": "30s",
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "A number controlling to how many active shards to wait for, all to wait for all shards in the cluster to be active, or 0 to not wait.",
          "name": "wait_for_active_shards",
          "required": false,
          "serverDefault": "0",
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "WaitForActiveShards",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Can be one of immediate, urgent, high, normal, low, languid. Wait until all currently queued events with the given priority are processed.",
          "name": "wait_for_events",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "WaitForEvents",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "The request waits until the specified number N of nodes is available. It also accepts >=N, <=N, >N and <N. Alternatively, it is possible to use ge(N), le(N), gt(N) and lt(N) notation.",
          "name": "wait_for_nodes",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "A boolean value which controls whether to wait (until the timeout provided) for the cluster to have no shard initializations. Defaults to false, which means it will not wait for initializing shards.",
          "name": "wait_for_no_initializing_shards",
          "required": false,
          "serverDefault": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "A boolean value which controls whether to wait (until the timeout provided) for the cluster to have no shard relocations. Defaults to false, which means it will not wait for relocating shards.",
          "name": "wait_for_no_relocating_shards",
          "required": false,
          "serverDefault": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "One of green, yellow or red. Will wait (until the timeout provided) until the status of the cluster changes to the one provided or better, i.e. green > yellow > red. By default, will not wait for any status.",
          "name": "wait_for_status",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "WaitForStatus",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "description": "The number of active primary shards.",
            "name": "active_primary_shards",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "integer",
                "namespace": "_types"
              }
            }
          },
          {
            "description": "The total number of active primary and replica shards.",
            "name": "active_shards",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "integer",
                "namespace": "_types"
              }
            }
          },
          {
            "description": "The ratio of active shards in the cluster expressed as a percentage.",
            "name": "active_shards_percent_as_number",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Percentage",
                "namespace": "_types"
              }
            }
          },
          {
            "description": "The name of the cluster.",
            "name": "cluster_name",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          },
          {
            "description": "The number of shards whose allocation has been delayed by the timeout settings.",
            "name": "delayed_unassigned_shards",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "integer",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "indices",
            "required": false,
            "type": {
              "key": {
                "kind": "instance_of",
                "type": {
                  "name": "IndexName",
                  "namespace": "_types"
                }
              },
              "kind": "dictionary_of",
              "singleKey": false,
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "IndexHealthStats",
                  "namespace": "cluster.health"
                }
              }
            }
          },
          {
            "description": "The number of shards that are under initialization.",
            "name": "initializing_shards",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "integer",
                "namespace": "_types"
              }
            }
          },
          {
            "description": "The number of nodes that are dedicated data nodes.",
            "name": "number_of_data_nodes",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "integer",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "number_of_in_flight_fetch",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "integer",
                "namespace": "_types"
              }
            }
          },
          {
            "description": "The number of nodes within the cluster.",
            "name": "number_of_nodes",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "integer",
                "namespace": "_types"
              }
            }
          },
          {
            "description": "The number of cluster-level changes that have not yet been executed.",
            "name": "number_of_pending_tasks",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "integer",
                "namespace": "_types"
              }
            }
          },
          {
            "description": "The number of shards that are under relocation.",
            "name": "relocating_shards",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "integer",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "status",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Health",
                "namespace": "_types"
              }
            }
          },
          {
            "description": "The time expressed in milliseconds since the earliest initiated task is waiting for being performed.",
            "name": "task_max_waiting_in_queue_millis",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "EpochMillis",
                "namespace": "_types"
              }
            }
          },
          {
            "description": "If false the response returned within the period of time that is specified by the timeout parameter (30s by default)",
            "name": "timed_out",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          },
          {
            "description": "The number of shards that are not allocated.",
            "name": "unassigned_shards",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "integer",
                "namespace": "_types"
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "cluster.health"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "ShardHealthStats",
        "namespace": "cluster.health"
      },
      "properties": [
        {
          "name": "active_shards",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "initializing_shards",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "primary_active",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "relocating_shards",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "status",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Health",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "unassigned_shards",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "PendingTask",
        "namespace": "cluster.pending_tasks"
      },
      "properties": [
        {
          "name": "insert_order",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "priority",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "source",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "time_in_queue",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "time_in_queue_millis",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Returns a list of any cluster-level changes (e.g. create index, update mapping,\nallocate or fail shard) which have not yet been executed.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "cluster.pending_tasks"
      },
      "path": [],
      "query": [
        {
          "description": "Return local information, do not retrieve the state from master node (default: false)",
          "name": "local",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Specify timeout for connection to master",
          "name": "master_timeout",
          "required": false,
          "serverDefault": "30s",
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "tasks",
            "required": true,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "PendingTask",
                  "namespace": "cluster.pending_tasks"
                }
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "cluster.pending_tasks"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Updates the cluster voting config exclusions by node ids or node names.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "cluster.post_voting_config_exclusions"
      },
      "path": [],
      "query": [
        {
          "description": "A comma-separated list of the names of the nodes to exclude from the\nvoting configuration. If specified, you may not also specify node_ids.",
          "name": "node_names",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Names",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "A comma-separated list of the persistent ids of the nodes to exclude\nfrom the voting configuration. If specified, you may not also specify node_names.",
          "name": "node_ids",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Ids",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "When adding a voting configuration exclusion, the API waits for the\nspecified nodes to be excluded from the voting configuration before\nreturning. If the timeout expires before the appropriate condition\nis satisfied, the request fails and returns an error.",
          "name": "timeout",
          "required": false,
          "serverDefault": "30s",
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "no_body"
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "cluster.post_voting_config_exclusions"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "template",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "IndexState",
                "namespace": "indices._types"
              }
            }
          },
          {
            "name": "aliases",
            "required": false,
            "type": {
              "key": {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              },
              "kind": "dictionary_of",
              "singleKey": false,
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "AliasDefinition",
                  "namespace": "indices._types"
                }
              }
            }
          },
          {
            "name": "mappings",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "TypeMapping",
                "namespace": "_types.mapping"
              }
            }
          },
          {
            "name": "settings",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "IndexSettings",
                "namespace": "indices._types"
              }
            }
          },
          {
            "name": "version",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "VersionNumber",
                "namespace": "_types"
              }
            }
          },
          {
            "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-meta-field.html",
            "name": "_meta",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Metadata",
                "namespace": "_types"
              }
            }
          }
        ]
      },
      "description": "Creates or updates a component template",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "cluster.put_component_template"
      },
      "path": [
        {
          "description": "The name of the template",
          "name": "name",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "Whether the index template should only be added if new or can also replace an existing one",
          "name": "create",
          "required": false,
          "serverDefault": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Specify timeout for connection to master",
          "name": "master_timeout",
          "required": false,
          "serverDefault": "30s",
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": []
      },
      "inherits": {
        "type": {
          "name": "AcknowledgedResponseBase",
          "namespace": "_types"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "cluster.put_component_template"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "persistent",
            "required": false,
            "type": {
              "key": {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              },
              "kind": "dictionary_of",
              "singleKey": false,
              "value": {
                "kind": "user_defined_value"
              }
            }
          },
          {
            "name": "transient",
            "required": false,
            "type": {
              "key": {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              },
              "kind": "dictionary_of",
              "singleKey": false,
              "value": {
                "kind": "user_defined_value"
              }
            }
          }
        ]
      },
      "description": "Updates the cluster settings.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "cluster.put_settings"
      },
      "path": [],
      "query": [
        {
          "description": "Return settings in flat format (default: false)",
          "name": "flat_settings",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Explicit operation timeout for connection to master node",
          "name": "master_timeout",
          "required": false,
          "serverDefault": "30s",
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Explicit operation timeout",
          "name": "timeout",
          "required": false,
          "serverDefault": "30s",
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "acknowledged",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "persistent",
            "required": true,
            "type": {
              "key": {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              },
              "kind": "dictionary_of",
              "singleKey": false,
              "value": {
                "kind": "user_defined_value"
              }
            }
          },
          {
            "name": "transient",
            "required": true,
            "type": {
              "key": {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              },
              "kind": "dictionary_of",
              "singleKey": false,
              "value": {
                "kind": "user_defined_value"
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "cluster.put_settings"
      }
    },
    {
      "kind": "type_alias",
      "name": {
        "name": "ClusterRemoteInfo",
        "namespace": "cluster.remote_info"
      },
      "type": {
        "items": [
          {
            "kind": "instance_of",
            "type": {
              "name": "ClusterRemoteSniffInfo",
              "namespace": "cluster.remote_info"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "ClusterRemoteProxyInfo",
              "namespace": "cluster.remote_info"
            }
          }
        ],
        "kind": "union_of"
      },
      "variants": {
        "kind": "internal_tag",
        "tag": "mode"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "ClusterRemoteProxyInfo",
        "namespace": "cluster.remote_info"
      },
      "properties": [
        {
          "name": "mode",
          "required": true,
          "type": {
            "kind": "literal_value",
            "value": "proxy"
          }
        },
        {
          "name": "connected",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "initial_connect_timeout",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "skip_unavailable",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "proxy_address",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "server_name",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "num_proxy_sockets_connected",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "max_proxy_socket_connections",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "ClusterRemoteSniffInfo",
        "namespace": "cluster.remote_info"
      },
      "properties": [
        {
          "name": "mode",
          "required": true,
          "type": {
            "kind": "literal_value",
            "value": "sniff"
          }
        },
        {
          "name": "connected",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "max_connections_per_cluster",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "num_nodes_connected",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "initial_connect_timeout",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "skip_unavailable",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "seeds",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "The cluster remote info API allows you to retrieve all of the configured\nremote cluster information. It returns connection and endpoint information\nkeyed by the configured remote cluster alias.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "cluster.remote_info"
      },
      "path": [],
      "query": []
    },
    {
      "body": {
        "kind": "properties",
        "properties": []
      },
      "inherits": {
        "generics": [
          {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "ClusterRemoteInfo",
              "namespace": "cluster.remote_info"
            }
          }
        ],
        "type": {
          "name": "DictionaryResponseBase",
          "namespace": "_types"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "cluster.remote_info"
      }
    },
    {
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/cluster-reroute.html#cluster-reroute-api-request-body",
      "kind": "interface",
      "name": {
        "name": "Command",
        "namespace": "cluster.reroute"
      },
      "properties": [
        {
          "description": "Cancel allocation of a shard (or recovery). Accepts index and shard for index name and shard number, and node for the node to cancel the shard allocation on. This can be used to force resynchronization of existing replicas from the primary shard by cancelling them and allowing them to be reinitialized through the standard recovery process. By default only replica shard allocations can be cancelled. If it is necessary to cancel the allocation of a primary shard then the allow_primary flag must also be included in the request.",
          "name": "cancel",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "CommandCancelAction",
              "namespace": "cluster.reroute"
            }
          }
        },
        {
          "description": "Move a started shard from one node to another node. Accepts index and shard for index name and shard number, from_node for the node to move the shard from, and to_node for the node to move the shard to.",
          "name": "move",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "CommandMoveAction",
              "namespace": "cluster.reroute"
            }
          }
        },
        {
          "description": "Allocate an unassigned replica shard to a node. Accepts index and shard for index name and shard number, and node to allocate the shard to. Takes allocation deciders into account.",
          "name": "allocate_replica",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "CommandAllocateReplicaAction",
              "namespace": "cluster.reroute"
            }
          }
        },
        {
          "description": "Allocate a primary shard to a node that holds a stale copy. Accepts the index and shard for index name and shard number, and node to allocate the shard to. Using this command may lead to data loss for the provided shard id. If a node which has the good copy of the data rejoins the cluster later on, that data will be deleted or overwritten with the data of the stale copy that was forcefully allocated with this command. To ensure that these implications are well-understood, this command requires the flag accept_data_loss to be explicitly set to true.",
          "name": "allocate_stale_primary",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "CommandAllocatePrimaryAction",
              "namespace": "cluster.reroute"
            }
          }
        },
        {
          "description": "Allocate an empty primary shard to a node. Accepts the index and shard for index name and shard number, and node to allocate the shard to. Using this command leads to a complete loss of all data that was indexed into this shard, if it was previously started. If a node which has a copy of the data rejoins the cluster later on, that data will be deleted. To ensure that these implications are well-understood, this command requires the flag accept_data_loss to be explicitly set to true.",
          "name": "allocate_empty_primary",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "CommandAllocatePrimaryAction",
              "namespace": "cluster.reroute"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "CommandAllocatePrimaryAction",
        "namespace": "cluster.reroute"
      },
      "properties": [
        {
          "name": "index",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndexName",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "shard",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "node",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "If a node which has a copy of the data rejoins the cluster later on, that data will be deleted. To ensure that these implications are well-understood, this command requires the flag accept_data_loss to be explicitly set to true",
          "name": "accept_data_loss",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-cluster.html",
      "kind": "interface",
      "name": {
        "name": "CommandAllocateReplicaAction",
        "namespace": "cluster.reroute"
      },
      "properties": [
        {
          "name": "index",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndexName",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "shard",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "node",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "CommandCancelAction",
        "namespace": "cluster.reroute"
      },
      "properties": [
        {
          "name": "index",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndexName",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "shard",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "node",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "allow_primary",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "CommandMoveAction",
        "namespace": "cluster.reroute"
      },
      "properties": [
        {
          "name": "index",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndexName",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "shard",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "The node to move the shard from",
          "name": "from_node",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "The node to move the shard to",
          "name": "to_node",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "properties",
        "properties": [
          {
            "description": "Defines the commands to perform.",
            "name": "commands",
            "required": false,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "Command",
                  "namespace": "cluster.reroute"
                }
              }
            }
          }
        ]
      },
      "description": "Allows to manually change the allocation of individual shards in the cluster.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "cluster.reroute"
      },
      "path": [],
      "query": [
        {
          "description": "If true, then the request simulates the operation only and returns the resulting state.",
          "name": "dry_run",
          "required": false,
          "serverDefault": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "If true, then the response contains an explanation of why the commands can or cannot be executed.",
          "name": "explain",
          "required": false,
          "serverDefault": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Limits the information returned to the specified metrics.",
          "name": "metric",
          "required": false,
          "serverDefault": "all",
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Metrics",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "If true, then retries allocation of shards that are blocked due to too many subsequent allocation failures.",
          "name": "retry_failed",
          "required": false,
          "serverDefault": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Period to wait for a connection to the master node. If no response is received before the timeout expires, the request fails and returns an error.",
          "name": "master_timeout",
          "required": false,
          "serverDefault": "30s",
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Period to wait for a response. If no response is received before the timeout expires, the request fails and returns an error.",
          "name": "timeout",
          "required": false,
          "serverDefault": "30s",
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "RerouteDecision",
        "namespace": "cluster.reroute"
      },
      "properties": [
        {
          "name": "decider",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "decision",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "explanation",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "RerouteExplanation",
        "namespace": "cluster.reroute"
      },
      "properties": [
        {
          "name": "command",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "decisions",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "RerouteDecision",
                "namespace": "cluster.reroute"
              }
            }
          }
        },
        {
          "name": "parameters",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "RerouteParameters",
              "namespace": "cluster.reroute"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "RerouteParameters",
        "namespace": "cluster.reroute"
      },
      "properties": [
        {
          "name": "allow_primary",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "index",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndexName",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "node",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "NodeName",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "shard",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "from_node",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "NodeName",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "to_node",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "NodeName",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "explanations",
            "required": false,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "RerouteExplanation",
                  "namespace": "cluster.reroute"
                }
              }
            }
          },
          {
            "description": "There aren't any guarantees on the output/structure of the raw cluster state.\nHere you will find the internal representation of the cluster, which can\ndiffer from the external representation.",
            "name": "state",
            "required": true,
            "type": {
              "kind": "user_defined_value"
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "cluster.reroute"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Returns a comprehensive information about the state of the cluster.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "cluster.state"
      },
      "path": [
        {
          "description": "Limit the information returned to the specified metrics",
          "name": "metric",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Metrics",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices",
          "name": "index",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Indices",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)",
          "name": "allow_no_indices",
          "required": false,
          "serverDefault": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
          "name": "expand_wildcards",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ExpandWildcards",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Return settings in flat format (default: false)",
          "name": "flat_settings",
          "required": false,
          "serverDefault": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed)",
          "name": "ignore_unavailable",
          "required": false,
          "serverDefault": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Return local information, do not retrieve the state from master node (default: false)",
          "name": "local",
          "required": false,
          "serverDefault": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Specify timeout for connection to master",
          "name": "master_timeout",
          "required": false,
          "serverDefault": "30s",
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Wait for the metadata version to be equal or greater than the specified metadata version",
          "name": "wait_for_metadata_version",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "VersionNumber",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "The maximum time to wait for wait_for_metadata_version before timing out",
          "name": "wait_for_timeout",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "value",
        "value": {
          "kind": "user_defined_value"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "cluster.state"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "CharFilterTypes",
        "namespace": "cluster.stats"
      },
      "properties": [
        {
          "name": "char_filter_types",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "FieldTypes",
                "namespace": "cluster.stats"
              }
            }
          }
        },
        {
          "name": "tokenizer_types",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "FieldTypes",
                "namespace": "cluster.stats"
              }
            }
          }
        },
        {
          "name": "filter_types",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "FieldTypes",
                "namespace": "cluster.stats"
              }
            }
          }
        },
        {
          "name": "analyzer_types",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "FieldTypes",
                "namespace": "cluster.stats"
              }
            }
          }
        },
        {
          "name": "built_in_char_filters",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "FieldTypes",
                "namespace": "cluster.stats"
              }
            }
          }
        },
        {
          "name": "built_in_tokenizers",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "FieldTypes",
                "namespace": "cluster.stats"
              }
            }
          }
        },
        {
          "name": "built_in_filters",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "FieldTypes",
                "namespace": "cluster.stats"
              }
            }
          }
        },
        {
          "name": "built_in_analyzers",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "FieldTypes",
                "namespace": "cluster.stats"
              }
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "ClusterFileSystem",
        "namespace": "cluster.stats"
      },
      "properties": [
        {
          "name": "available_in_bytes",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "free_in_bytes",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "total_in_bytes",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "ClusterIndices",
        "namespace": "cluster.stats"
      },
      "properties": [
        {
          "description": "Contains statistics about memory used for completion in selected nodes.",
          "name": "completion",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "CompletionStats",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Total number of indices with shards assigned to selected nodes.",
          "name": "count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Contains counts for documents in selected nodes.",
          "name": "docs",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DocStats",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Contains statistics about the field data cache of selected nodes.",
          "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-fielddata.html",
          "name": "fielddata",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "FielddataStats",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Contains statistics about the query cache of selected nodes.",
          "name": "query_cache",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "QueryCacheStats",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Contains statistics about segments in selected nodes.",
          "name": "segments",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "SegmentsStats",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Contains statistics about indices with shards assigned to selected nodes.",
          "name": "shards",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ClusterIndicesShards",
              "namespace": "cluster.stats"
            }
          }
        },
        {
          "description": "Contains statistics about the size of shards assigned to selected nodes.",
          "name": "store",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "StoreStats",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Contains statistics about field mappings in selected nodes.",
          "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping.html",
          "name": "mappings",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "FieldTypesMappings",
              "namespace": "cluster.stats"
            }
          }
        },
        {
          "description": "Contains statistics about analyzers and analyzer components used in selected nodes.",
          "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/analyzer-anatomy.html",
          "name": "analysis",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "CharFilterTypes",
              "namespace": "cluster.stats"
            }
          }
        },
        {
          "name": "versions",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "IndicesVersions",
                "namespace": "cluster.stats"
              }
            }
          }
        }
      ]
    },
    {
      "description": "Contains statistics about shards assigned to selected nodes.",
      "kind": "interface",
      "name": {
        "name": "ClusterIndicesShards",
        "namespace": "cluster.stats"
      },
      "properties": [
        {
          "description": "Contains statistics about shards assigned to selected nodes.",
          "name": "index",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ClusterIndicesShardsIndex",
              "namespace": "cluster.stats"
            }
          }
        },
        {
          "description": "Number of primary shards assigned to selected nodes.",
          "name": "primaries",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Ratio of replica shards to primary shards across all selected nodes.",
          "name": "replication",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Total number of shards assigned to selected nodes.",
          "name": "total",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "ClusterIndicesShardsIndex",
        "namespace": "cluster.stats"
      },
      "properties": [
        {
          "description": "Contains statistics about the number of primary shards assigned to selected nodes.",
          "name": "primaries",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ClusterShardMetrics",
              "namespace": "cluster.stats"
            }
          }
        },
        {
          "description": "Contains statistics about the number of replication shards assigned to selected nodes.",
          "name": "replication",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ClusterShardMetrics",
              "namespace": "cluster.stats"
            }
          }
        },
        {
          "description": "Contains statistics about the number of shards assigned to selected nodes.",
          "name": "shards",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ClusterShardMetrics",
              "namespace": "cluster.stats"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "ClusterIngest",
        "namespace": "cluster.stats"
      },
      "properties": [
        {
          "name": "number_of_pipelines",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "processor_stats",
          "required": true,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "ClusterProcessor",
                "namespace": "cluster.stats"
              }
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "ClusterJvm",
        "namespace": "cluster.stats"
      },
      "properties": [
        {
          "name": "max_uptime_in_millis",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "mem",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ClusterJvmMemory",
              "namespace": "cluster.stats"
            }
          }
        },
        {
          "name": "threads",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "versions",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "ClusterJvmVersion",
                "namespace": "cluster.stats"
              }
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "ClusterJvmMemory",
        "namespace": "cluster.stats"
      },
      "properties": [
        {
          "name": "heap_max_in_bytes",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "heap_used_in_bytes",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "ClusterJvmVersion",
        "namespace": "cluster.stats"
      },
      "properties": [
        {
          "name": "bundled_jdk",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "using_bundled_jdk",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "version",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "VersionString",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "vm_name",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "vm_vendor",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "vm_version",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "VersionString",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "ClusterNetworkTypes",
        "namespace": "cluster.stats"
      },
      "properties": [
        {
          "name": "http_types",
          "required": true,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "integer",
                "namespace": "_types"
              }
            }
          }
        },
        {
          "name": "transport_types",
          "required": true,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "integer",
                "namespace": "_types"
              }
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "ClusterNodeCount",
        "namespace": "cluster.stats"
      },
      "properties": [
        {
          "name": "coordinating_only",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "data",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "ingest",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "master",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "total",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "voting_only",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "data_cold",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "data_frozen",
          "required": false,
          "since": "7.13.0",
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "data_content",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "data_warm",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "data_hot",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "ml",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "remote_cluster_client",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "transform",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "ClusterNodes",
        "namespace": "cluster.stats"
      },
      "properties": [
        {
          "description": "Contains counts for nodes selected by the request’s node filters.",
          "name": "count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ClusterNodeCount",
              "namespace": "cluster.stats"
            }
          }
        },
        {
          "description": "Contains statistics about the discovery types used by selected nodes.",
          "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-discovery-hosts-providers.html",
          "name": "discovery_types",
          "required": true,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "integer",
                "namespace": "_types"
              }
            }
          }
        },
        {
          "description": "Contains statistics about file stores by selected nodes.",
          "name": "fs",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ClusterFileSystem",
              "namespace": "cluster.stats"
            }
          }
        },
        {
          "name": "ingest",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ClusterIngest",
              "namespace": "cluster.stats"
            }
          }
        },
        {
          "description": "Contains statistics about the Java Virtual Machines (JVMs) used by selected nodes.",
          "name": "jvm",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ClusterJvm",
              "namespace": "cluster.stats"
            }
          }
        },
        {
          "description": "Contains statistics about the transport and HTTP networks used by selected nodes.",
          "name": "network_types",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ClusterNetworkTypes",
              "namespace": "cluster.stats"
            }
          }
        },
        {
          "description": "Contains statistics about the operating systems used by selected nodes.",
          "name": "os",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ClusterOperatingSystem",
              "namespace": "cluster.stats"
            }
          }
        },
        {
          "description": "Contains statistics about Elasticsearch distributions installed on selected nodes.",
          "name": "packaging_types",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "NodePackagingType",
                "namespace": "cluster.stats"
              }
            }
          }
        },
        {
          "description": "Contains statistics about installed plugins and modules by selected nodes.",
          "name": "plugins",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "PluginStats",
                "namespace": "_types"
              }
            }
          }
        },
        {
          "description": "Contains statistics about processes used by selected nodes.",
          "name": "process",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ClusterProcess",
              "namespace": "cluster.stats"
            }
          }
        },
        {
          "description": "Array of Elasticsearch versions used on selected nodes.",
          "name": "versions",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "VersionString",
                "namespace": "_types"
              }
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "ClusterOperatingSystem",
        "namespace": "cluster.stats"
      },
      "properties": [
        {
          "name": "allocated_processors",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "available_processors",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "mem",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "OperatingSystemMemoryInfo",
              "namespace": "cluster.stats"
            }
          }
        },
        {
          "name": "names",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "ClusterOperatingSystemName",
                "namespace": "cluster.stats"
              }
            }
          }
        },
        {
          "name": "pretty_names",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "ClusterOperatingSystemPrettyName",
                "namespace": "cluster.stats"
              }
            }
          }
        },
        {
          "name": "architectures",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "ClusterOperatingSystemArchitecture",
                "namespace": "cluster.stats"
              }
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "ClusterOperatingSystemArchitecture",
        "namespace": "cluster.stats"
      },
      "properties": [
        {
          "name": "count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "arch",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "ClusterOperatingSystemName",
        "namespace": "cluster.stats"
      },
      "properties": [
        {
          "name": "count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "name",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "ClusterOperatingSystemPrettyName",
        "namespace": "cluster.stats"
      },
      "properties": [
        {
          "name": "count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "pretty_name",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "ClusterProcess",
        "namespace": "cluster.stats"
      },
      "properties": [
        {
          "name": "cpu",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ClusterProcessCpu",
              "namespace": "cluster.stats"
            }
          }
        },
        {
          "name": "open_file_descriptors",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ClusterProcessOpenFileDescriptors",
              "namespace": "cluster.stats"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "ClusterProcessCpu",
        "namespace": "cluster.stats"
      },
      "properties": [
        {
          "name": "percent",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "ClusterProcessOpenFileDescriptors",
        "namespace": "cluster.stats"
      },
      "properties": [
        {
          "name": "avg",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "max",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "min",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "ClusterProcessor",
        "namespace": "cluster.stats"
      },
      "properties": [
        {
          "name": "count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "current",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "failed",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "time_in_millis",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "ClusterShardMetrics",
        "namespace": "cluster.stats"
      },
      "properties": [
        {
          "name": "avg",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "max",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "min",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "FieldTypes",
        "namespace": "cluster.stats"
      },
      "properties": [
        {
          "name": "name",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "index_count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "script_count",
          "required": false,
          "since": "7.13.0",
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "FieldTypesMappings",
        "namespace": "cluster.stats"
      },
      "properties": [
        {
          "name": "field_types",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "FieldTypes",
                "namespace": "cluster.stats"
              }
            }
          }
        },
        {
          "name": "runtime_field_types",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "RuntimeFieldTypes",
                "namespace": "cluster.stats"
              }
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "IndicesVersions",
        "namespace": "cluster.stats"
      },
      "properties": [
        {
          "name": "index_count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "primary_shard_count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "total_primary_bytes",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "version",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "VersionString",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "NodePackagingType",
        "namespace": "cluster.stats"
      },
      "properties": [
        {
          "name": "count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "flavor",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "OperatingSystemMemoryInfo",
        "namespace": "cluster.stats"
      },
      "properties": [
        {
          "name": "free_in_bytes",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "free_percent",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "total_in_bytes",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "used_in_bytes",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "used_percent",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Returns high-level overview of cluster statistics.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "cluster.stats"
      },
      "path": [
        {
          "description": "Comma-separated list of node filters used to limit returned information. Defaults to all nodes in the cluster.",
          "name": "node_id",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "NodeIds",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "Return settings in flat format (default: false)",
          "name": "flat_settings",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Period to wait for each node to respond. If a node does not respond before its timeout expires, the response does not include its stats. However, timed out nodes are included in the response’s _nodes.failed property. Defaults to no timeout.",
          "name": "timeout",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "description": "Name of the cluster, based on the Cluster name setting setting.",
            "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/important-settings.html#cluster-name",
            "name": "cluster_name",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Name",
                "namespace": "_types"
              }
            }
          },
          {
            "description": "Unique identifier for the cluster.",
            "name": "cluster_uuid",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Uuid",
                "namespace": "_types"
              }
            }
          },
          {
            "description": "Contains statistics about indices with shards assigned to selected nodes.",
            "name": "indices",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "ClusterIndices",
                "namespace": "cluster.stats"
              }
            }
          },
          {
            "description": "Contains statistics about nodes selected by the request’s node filters.",
            "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/cluster.html#cluster-nodes",
            "name": "nodes",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "ClusterNodes",
                "namespace": "cluster.stats"
              }
            }
          },
          {
            "description": "Health status of the cluster, based on the state of its primary and replica shards.",
            "name": "status",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "ClusterStatus",
                "namespace": "cluster._types"
              }
            }
          },
          {
            "description": "Unix timestamp, in milliseconds, of the last time the cluster statistics were refreshed.",
            "docUrl": "https://en.wikipedia.org/wiki/Unix_time",
            "name": "timestamp",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "long",
                "namespace": "_types"
              }
            }
          }
        ]
      },
      "inherits": {
        "type": {
          "name": "NodesResponseBase",
          "namespace": "nodes._types"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "cluster.stats"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "RuntimeFieldTypes",
        "namespace": "cluster.stats"
      },
      "properties": [
        {
          "name": "name",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "index_count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "scriptless_count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "shadowed_count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "lang",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        },
        {
          "name": "lines_max",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "lines_total",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "chars_max",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "chars_total",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "source_max",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "source_total",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "doc_max",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "doc_total",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Deletes the specified dangling index",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "dangling_indices.delete_dangling_index"
      },
      "path": [
        {
          "description": "The UUID of the dangling index",
          "name": "index_uuid",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Uuid",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "Must be set to true in order to delete the dangling index",
          "name": "accept_data_loss",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Specify timeout for connection to master",
          "name": "master_timeout",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Explicit operation timeout",
          "name": "timeout",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": []
      },
      "inherits": {
        "type": {
          "name": "AcknowledgedResponseBase",
          "namespace": "_types"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "dangling_indices.delete_dangling_index"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Imports the specified dangling index",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "dangling_indices.import_dangling_index"
      },
      "path": [
        {
          "description": "The UUID of the dangling index",
          "name": "index_uuid",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Uuid",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "Must be set to true in order to import the dangling index",
          "name": "accept_data_loss",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Specify timeout for connection to master",
          "name": "master_timeout",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Explicit operation timeout",
          "name": "timeout",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": []
      },
      "inherits": {
        "type": {
          "name": "AcknowledgedResponseBase",
          "namespace": "_types"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "dangling_indices.import_dangling_index"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "DanglingIndex",
        "namespace": "dangling_indices.list_dangling_indices"
      },
      "properties": [
        {
          "name": "index_name",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "index_uuid",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "creation_date_millis",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "EpochMillis",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "node_ids",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Ids",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Returns all dangling indices.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "dangling_indices.list_dangling_indices"
      },
      "path": [],
      "query": []
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "dangling_indices",
            "required": true,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "DanglingIndex",
                  "namespace": "dangling_indices.list_dangling_indices"
                }
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "dangling_indices.list_dangling_indices"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "Configuration",
        "namespace": "enrich._types"
      },
      "properties": [
        {
          "name": "geo_match",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Policy",
              "namespace": "enrich._types"
            }
          }
        },
        {
          "name": "match",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Policy",
              "namespace": "enrich._types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "Policy",
        "namespace": "enrich._types"
      },
      "properties": [
        {
          "name": "enrich_fields",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Fields",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "indices",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Indices",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "match_field",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "query",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "name",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "Summary",
        "namespace": "enrich._types"
      },
      "properties": [
        {
          "name": "config",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Configuration",
              "namespace": "enrich._types"
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Deletes an existing enrich policy and its enrich index.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "enrich.delete_policy"
      },
      "path": [
        {
          "description": "The name of the enrich policy",
          "name": "name",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": []
    },
    {
      "body": {
        "kind": "properties",
        "properties": []
      },
      "inherits": {
        "type": {
          "name": "AcknowledgedResponseBase",
          "namespace": "_types"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "enrich.delete_policy"
      }
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "SCHEDULED"
        },
        {
          "name": "RUNNING"
        },
        {
          "name": "COMPLETE"
        },
        {
          "name": "FAILED"
        }
      ],
      "name": {
        "name": "EnrichPolicyPhase",
        "namespace": "enrich.execute_policy"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "ExecuteEnrichPolicyStatus",
        "namespace": "enrich.execute_policy"
      },
      "properties": [
        {
          "name": "phase",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "EnrichPolicyPhase",
              "namespace": "enrich.execute_policy"
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Creates the enrich index for an existing enrich policy.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "enrich.execute_policy"
      },
      "path": [
        {
          "description": "The name of the enrich policy",
          "name": "name",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "Should the request should block until the execution is complete.",
          "name": "wait_for_completion",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "status",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "ExecuteEnrichPolicyStatus",
                "namespace": "enrich.execute_policy"
              }
            }
          },
          {
            "name": "task_id",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "TaskId",
                "namespace": "_types"
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "enrich.execute_policy"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Gets information about an enrich policy.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "enrich.get_policy"
      },
      "path": [
        {
          "description": "A comma-separated list of enrich policy names",
          "name": "name",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Names",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": []
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "policies",
            "required": true,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "Summary",
                  "namespace": "enrich._types"
                }
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "enrich.get_policy"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "geo_match",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Policy",
                "namespace": "enrich._types"
              }
            }
          },
          {
            "name": "match",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Policy",
                "namespace": "enrich._types"
              }
            }
          }
        ]
      },
      "description": "Creates a new enrich policy.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "enrich.put_policy"
      },
      "path": [
        {
          "description": "The name of the enrich policy",
          "name": "name",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": []
    },
    {
      "body": {
        "kind": "properties",
        "properties": []
      },
      "inherits": {
        "type": {
          "name": "AcknowledgedResponseBase",
          "namespace": "_types"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "enrich.put_policy"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "CacheStats",
        "namespace": "enrich.stats"
      },
      "properties": [
        {
          "name": "node_id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "hits",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "misses",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "evictions",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "CoordinatorStats",
        "namespace": "enrich.stats"
      },
      "properties": [
        {
          "name": "executed_searches_total",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "node_id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "queue_size",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "remote_requests_current",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "remote_requests_total",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "ExecutingPolicy",
        "namespace": "enrich.stats"
      },
      "properties": [
        {
          "name": "name",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "task",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Info",
              "namespace": "tasks._types"
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Gets enrich coordinator statistics and information about enrich policies that are currently executing.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "enrich.stats"
      },
      "path": [],
      "query": []
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "coordinator_stats",
            "required": true,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "CoordinatorStats",
                  "namespace": "enrich.stats"
                }
              }
            }
          },
          {
            "name": "executing_policies",
            "required": true,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "ExecutingPolicy",
                  "namespace": "enrich.stats"
                }
              }
            }
          },
          {
            "name": "cache_stats",
            "required": false,
            "since": "7.16.0",
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "CacheStats",
                  "namespace": "enrich.stats"
                }
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "enrich.stats"
      }
    },
    {
      "generics": [
        {
          "name": "TEvent",
          "namespace": "eql._types"
        }
      ],
      "kind": "interface",
      "name": {
        "name": "EqlHits",
        "namespace": "eql._types"
      },
      "properties": [
        {
          "description": "Metadata about the number of matching events or sequences.",
          "name": "total",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "TotalHits",
              "namespace": "_global.search._types"
            }
          }
        },
        {
          "description": "Contains events matching the query. Each object represents a matching event.",
          "name": "events",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "generics": [
                {
                  "kind": "instance_of",
                  "type": {
                    "name": "TEvent",
                    "namespace": "eql._types"
                  }
                }
              ],
              "kind": "instance_of",
              "type": {
                "name": "HitsEvent",
                "namespace": "eql._types"
              }
            }
          }
        },
        {
          "description": "Contains event sequences matching the query. Each object represents a matching sequence. This parameter is only returned for EQL queries containing a sequence.",
          "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/eql-syntax.html#eql-sequences",
          "name": "sequences",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "generics": [
                {
                  "kind": "instance_of",
                  "type": {
                    "name": "TEvent",
                    "namespace": "eql._types"
                  }
                }
              ],
              "kind": "instance_of",
              "type": {
                "name": "HitsSequence",
                "namespace": "eql._types"
              }
            }
          }
        }
      ]
    },
    {
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/eql-search-api.html#eql-search-api-response-body",
      "generics": [
        {
          "name": "TEvent",
          "namespace": "eql._types"
        }
      ],
      "kind": "interface",
      "name": {
        "name": "EqlSearchResponseBase",
        "namespace": "eql._types"
      },
      "properties": [
        {
          "description": "Identifier for the search.",
          "name": "id",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "If true, the response does not contain complete search results.",
          "name": "is_partial",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "If true, the search request is still executing.",
          "name": "is_running",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Milliseconds it took Elasticsearch to execute the request.",
          "name": "took",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "If true, the request timed out before completion.",
          "name": "timed_out",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Contains matching events and sequences. Also contains related metadata.",
          "name": "hits",
          "required": true,
          "type": {
            "generics": [
              {
                "kind": "instance_of",
                "type": {
                  "name": "TEvent",
                  "namespace": "eql._types"
                }
              }
            ],
            "kind": "instance_of",
            "type": {
              "name": "EqlHits",
              "namespace": "eql._types"
            }
          }
        }
      ]
    },
    {
      "generics": [
        {
          "name": "TEvent",
          "namespace": "eql._types"
        }
      ],
      "kind": "interface",
      "name": {
        "name": "HitsEvent",
        "namespace": "eql._types"
      },
      "properties": [
        {
          "description": "Name of the index containing the event.",
          "name": "_index",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndexName",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Unique identifier for the event. This ID is only unique within the index.",
          "name": "_id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Original JSON body passed for the event at index time.",
          "name": "_source",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "TEvent",
              "namespace": "eql._types"
            }
          }
        },
        {
          "name": "fields",
          "required": false,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "Field",
                "namespace": "_types"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "array_of",
              "value": {
                "kind": "user_defined_value"
              }
            }
          }
        }
      ]
    },
    {
      "generics": [
        {
          "name": "TEvent",
          "namespace": "eql._types"
        }
      ],
      "kind": "interface",
      "name": {
        "name": "HitsSequence",
        "namespace": "eql._types"
      },
      "properties": [
        {
          "description": "Contains events matching the query. Each object represents a matching event.",
          "name": "events",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "generics": [
                {
                  "kind": "instance_of",
                  "type": {
                    "name": "TEvent",
                    "namespace": "eql._types"
                  }
                }
              ],
              "kind": "instance_of",
              "type": {
                "name": "HitsEvent",
                "namespace": "eql._types"
              }
            }
          }
        },
        {
          "description": "Shared field values used to constrain matches in the sequence. These are defined using the by keyword in the EQL query syntax.",
          "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/eql-syntax.html#eql-sequences",
          "name": "join_keys",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "user_defined_value"
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Deletes an async EQL search by ID. If the search is still running, the search request will be cancelled. Otherwise, the saved search results are deleted.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "eql.delete"
      },
      "path": [
        {
          "description": "Identifier for the search to delete.",
          "name": "id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": []
    },
    {
      "body": {
        "kind": "properties",
        "properties": []
      },
      "inherits": {
        "type": {
          "name": "AcknowledgedResponseBase",
          "namespace": "_types"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "eql.delete"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Returns async results from previously executed Event Query Language (EQL) search",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "eql.get"
      },
      "path": [
        {
          "description": "Identifier for the search.",
          "name": "id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "Period for which the search and its results are stored on the cluster. Defaults to the keep_alive value set by the search’s EQL search API request.",
          "name": "keep_alive",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Timeout duration to wait for the request to finish. Defaults to no timeout, meaning the request waits for complete search results.",
          "name": "wait_for_completion_timeout",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": []
      },
      "generics": [
        {
          "name": "TEvent",
          "namespace": "eql.get"
        }
      ],
      "inherits": {
        "generics": [
          {
            "kind": "instance_of",
            "type": {
              "name": "TEvent",
              "namespace": "eql.get"
            }
          }
        ],
        "type": {
          "name": "EqlSearchResponseBase",
          "namespace": "eql._types"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "eql.get"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Returns the status of a previously submitted async or stored Event Query Language (EQL) search",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "eql.get_status"
      },
      "path": [
        {
          "description": "Identifier for the search.",
          "name": "id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": []
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "description": "Identifier for the search.",
            "name": "id",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Id",
                "namespace": "_types"
              }
            }
          },
          {
            "description": "If true, the search request is still executing. If false, the search is completed.",
            "name": "is_partial",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          },
          {
            "description": "If true, the response does not contain complete search results. This could be because either the search is still running (is_running status is false), or because it is already completed (is_running status is true) and results are partial due to failures or timeouts.",
            "name": "is_running",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          },
          {
            "description": "For a running search shows a timestamp when the eql search started, in milliseconds since the Unix epoch.",
            "name": "start_time_in_millis",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "EpochMillis",
                "namespace": "_types"
              }
            }
          },
          {
            "description": "Shows a timestamp when the eql search will be expired, in milliseconds since the Unix epoch. When this time is reached, the search and its results are deleted, even if the search is still ongoing.",
            "name": "expiration_time_in_millis",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "EpochMillis",
                "namespace": "_types"
              }
            }
          },
          {
            "description": "For a completed search shows the http status code of the completed search.",
            "name": "completion_status",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "integer",
                "namespace": "_types"
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "eql.get_status"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "properties",
        "properties": [
          {
            "description": "EQL query you wish to run.",
            "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/eql-syntax.html",
            "name": "query",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "case_sensitive",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          },
          {
            "description": "Field containing the event classification, such as process, file, or network.",
            "name": "event_category_field",
            "required": false,
            "serverDefault": "event.category",
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Field",
                "namespace": "_types"
              }
            }
          },
          {
            "description": "Field used to sort hits with the same timestamp in ascending order",
            "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/eql.html#eql-search-specify-a-sort-tiebreaker",
            "name": "tiebreaker_field",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Field",
                "namespace": "_types"
              }
            }
          },
          {
            "description": "Field containing event timestamp. Default \"@timestamp\"",
            "name": "timestamp_field",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Field",
                "namespace": "_types"
              }
            }
          },
          {
            "description": "Maximum number of events to search at a time for sequence queries.",
            "name": "fetch_size",
            "required": false,
            "serverDefault": 1000,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "uint",
                "namespace": "_types"
              }
            }
          },
          {
            "description": "Query, written in Query DSL, used to filter the events on which the EQL query runs.",
            "name": "filter",
            "required": false,
            "type": {
              "items": [
                {
                  "kind": "instance_of",
                  "type": {
                    "name": "QueryContainer",
                    "namespace": "_types.query_dsl"
                  }
                },
                {
                  "kind": "array_of",
                  "value": {
                    "kind": "instance_of",
                    "type": {
                      "name": "QueryContainer",
                      "namespace": "_types.query_dsl"
                    }
                  }
                }
              ],
              "kind": "union_of"
            }
          },
          {
            "name": "keep_alive",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Time",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "keep_on_completion",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "wait_for_completion_timeout",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Time",
                "namespace": "_types"
              }
            }
          },
          {
            "description": "For basic queries, the maximum number of matching events to return. Defaults to 10",
            "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/eql-syntax.html#eql-basic-syntax",
            "name": "size",
            "required": false,
            "type": {
              "items": [
                {
                  "kind": "instance_of",
                  "type": {
                    "name": "uint",
                    "namespace": "_types"
                  }
                },
                {
                  "kind": "instance_of",
                  "type": {
                    "name": "float",
                    "namespace": "_types"
                  }
                }
              ],
              "kind": "union_of"
            }
          },
          {
            "description": "Array of wildcard (*) patterns. The response returns values for field names matching these patterns in the fields property of each hit.",
            "name": "fields",
            "required": false,
            "type": {
              "kind": "array_of",
              "value": {
                "items": [
                  {
                    "kind": "instance_of",
                    "type": {
                      "name": "Field",
                      "namespace": "_types"
                    }
                  },
                  {
                    "kind": "instance_of",
                    "type": {
                      "name": "SearchFieldFormatted",
                      "namespace": "eql.search"
                    }
                  }
                ],
                "kind": "union_of"
              }
            }
          },
          {
            "name": "result_position",
            "required": false,
            "serverDefault": "tail",
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "ResultPosition",
                "namespace": "eql.search"
              }
            }
          }
        ]
      },
      "description": "Returns results matching a query expressed in Event Query Language (EQL)",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "eql.search"
      },
      "path": [
        {
          "description": "The name of the index to scope the operation",
          "name": "index",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndexName",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "name": "allow_no_indices",
          "required": false,
          "serverDefault": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "expand_wildcards",
          "required": false,
          "serverDefault": "open",
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ExpandWildcards",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "If true, missing or closed indices are not included in the response.",
          "name": "ignore_unavailable",
          "required": false,
          "serverDefault": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Period for which the search and its results are stored on the cluster.",
          "name": "keep_alive",
          "required": false,
          "serverDefault": "5d",
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "If true, the search and its results are stored on the cluster.",
          "name": "keep_on_completion",
          "required": false,
          "serverDefault": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Timeout duration to wait for the request to finish. Defaults to no timeout, meaning the request waits for complete search results.",
          "name": "wait_for_completion_timeout",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": []
      },
      "generics": [
        {
          "name": "TEvent",
          "namespace": "eql.search"
        }
      ],
      "inherits": {
        "generics": [
          {
            "kind": "instance_of",
            "type": {
              "name": "TEvent",
              "namespace": "eql.search"
            }
          }
        ],
        "type": {
          "name": "EqlSearchResponseBase",
          "namespace": "eql._types"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "eql.search"
      }
    },
    {
      "kind": "enum",
      "members": [
        {
          "description": "Return the most recent matches, similar to the Unix tail command.",
          "name": "tail"
        },
        {
          "description": "Return the earliest matches, similar to the Unix head command.",
          "name": "head"
        }
      ],
      "name": {
        "name": "ResultPosition",
        "namespace": "eql.search"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "SearchFieldFormatted",
        "namespace": "eql.search"
      },
      "properties": [
        {
          "description": "Wildcard pattern. The request returns values for field names matching this pattern.",
          "name": "field",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Format in which the values are returned.",
          "name": "format",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "Feature",
        "namespace": "features._types"
      },
      "properties": [
        {
          "name": "name",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "description",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Gets a list of features which can be included in snapshots using the feature_states field when creating a snapshot",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "features.get_features"
      },
      "path": [],
      "query": []
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "features",
            "required": true,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "Feature",
                  "namespace": "features._types"
                }
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "features.get_features"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Resets the internal state of features, usually by deleting system indices",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "features.reset_features"
      },
      "path": [],
      "query": []
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "features",
            "required": true,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "Feature",
                  "namespace": "features._types"
                }
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "features.reset_features"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "Connection",
        "namespace": "graph._types"
      },
      "properties": [
        {
          "name": "doc_count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "source",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "target",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "weight",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "ExploreControls",
        "namespace": "graph._types"
      },
      "properties": [
        {
          "name": "sample_diversity",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "SampleDiversity",
              "namespace": "graph._types"
            }
          }
        },
        {
          "name": "sample_size",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "timeout",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "use_significance",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "Hop",
        "namespace": "graph._types"
      },
      "properties": [
        {
          "name": "connections",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Hop",
              "namespace": "graph._types"
            }
          }
        },
        {
          "name": "query",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "QueryContainer",
              "namespace": "_types.query_dsl"
            }
          }
        },
        {
          "name": "vertices",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "VertexDefinition",
                "namespace": "graph._types"
              }
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "SampleDiversity",
        "namespace": "graph._types"
      },
      "properties": [
        {
          "name": "field",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "max_docs_per_value",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "Vertex",
        "namespace": "graph._types"
      },
      "properties": [
        {
          "name": "depth",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "field",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "term",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "weight",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "VertexDefinition",
        "namespace": "graph._types"
      },
      "properties": [
        {
          "name": "exclude",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        },
        {
          "name": "field",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "include",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "VertexInclude",
                "namespace": "graph._types"
              }
            }
          }
        },
        {
          "name": "min_doc_count",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "shard_min_doc_count",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "size",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "VertexInclude",
        "namespace": "graph._types"
      },
      "properties": [
        {
          "name": "boost",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "term",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "connections",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Hop",
                "namespace": "graph._types"
              }
            }
          },
          {
            "name": "controls",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "ExploreControls",
                "namespace": "graph._types"
              }
            }
          },
          {
            "name": "query",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "QueryContainer",
                "namespace": "_types.query_dsl"
              }
            }
          },
          {
            "name": "vertices",
            "required": false,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "VertexDefinition",
                  "namespace": "graph._types"
                }
              }
            }
          }
        ]
      },
      "description": "Explore extracted and summarized information about the documents and terms in an index.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "graph.explore"
      },
      "path": [
        {
          "description": "A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices",
          "name": "index",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Indices",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "Specific routing value",
          "name": "routing",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Routing",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Explicit operation timeout",
          "name": "timeout",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "connections",
            "required": true,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "Connection",
                  "namespace": "graph._types"
                }
              }
            }
          },
          {
            "name": "failures",
            "required": true,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "ShardFailure",
                  "namespace": "_types"
                }
              }
            }
          },
          {
            "name": "timed_out",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "took",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "long",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "vertices",
            "required": true,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "Vertex",
                  "namespace": "graph._types"
                }
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "graph.explore"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "Action",
        "namespace": "ilm._types"
      },
      "properties": []
    },
    {
      "kind": "interface",
      "name": {
        "name": "Phase",
        "namespace": "ilm._types"
      },
      "properties": [
        {
          "name": "actions",
          "required": true,
          "type": {
            "items": [
              {
                "key": {
                  "kind": "instance_of",
                  "type": {
                    "name": "string",
                    "namespace": "internal"
                  }
                },
                "kind": "dictionary_of",
                "singleKey": false,
                "value": {
                  "kind": "instance_of",
                  "type": {
                    "name": "Action",
                    "namespace": "ilm._types"
                  }
                }
              },
              {
                "kind": "array_of",
                "value": {
                  "kind": "instance_of",
                  "type": {
                    "name": "string",
                    "namespace": "internal"
                  }
                }
              }
            ],
            "kind": "union_of"
          }
        },
        {
          "name": "min_age",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "Phases",
        "namespace": "ilm._types"
      },
      "properties": [
        {
          "name": "cold",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Phase",
              "namespace": "ilm._types"
            }
          }
        },
        {
          "name": "delete",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Phase",
              "namespace": "ilm._types"
            }
          }
        },
        {
          "name": "hot",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Phase",
              "namespace": "ilm._types"
            }
          }
        },
        {
          "name": "warm",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Phase",
              "namespace": "ilm._types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "Policy",
        "namespace": "ilm._types"
      },
      "properties": [
        {
          "name": "phases",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Phases",
              "namespace": "ilm._types"
            }
          }
        },
        {
          "name": "name",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Deletes the specified lifecycle policy definition. A currently used policy cannot be deleted.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "ilm.delete_lifecycle"
      },
      "path": [
        {
          "description": "The name of the index lifecycle policy",
          "name": "policy",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": []
    },
    {
      "body": {
        "kind": "properties",
        "properties": []
      },
      "inherits": {
        "type": {
          "name": "AcknowledgedResponseBase",
          "namespace": "_types"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "ilm.delete_lifecycle"
      }
    },
    {
      "kind": "type_alias",
      "name": {
        "name": "LifecycleExplain",
        "namespace": "ilm.explain_lifecycle"
      },
      "type": {
        "items": [
          {
            "kind": "instance_of",
            "type": {
              "name": "LifecycleExplainManaged",
              "namespace": "ilm.explain_lifecycle"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "LifecycleExplainUnmanaged",
              "namespace": "ilm.explain_lifecycle"
            }
          }
        ],
        "kind": "union_of"
      },
      "variants": {
        "kind": "internal_tag",
        "tag": "managed"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "LifecycleExplainManaged",
        "namespace": "ilm.explain_lifecycle"
      },
      "properties": [
        {
          "name": "action",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "action_time_millis",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "EpochMillis",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "age",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "failed_step",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "failed_step_retry_count",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "index",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndexName",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "is_auto_retryable_error",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "lifecycle_date_millis",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "EpochMillis",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "managed",
          "required": true,
          "type": {
            "kind": "literal_value",
            "value": true
          }
        },
        {
          "name": "phase",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "phase_time_millis",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "EpochMillis",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "policy",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "step",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "step_info",
          "required": false,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "user_defined_value"
            }
          }
        },
        {
          "name": "step_time_millis",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "EpochMillis",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "phase_execution",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "LifecycleExplainPhaseExecution",
              "namespace": "ilm.explain_lifecycle"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "LifecycleExplainPhaseExecution",
        "namespace": "ilm.explain_lifecycle"
      },
      "properties": [
        {
          "name": "policy",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "version",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "VersionNumber",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "modified_date_in_millis",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "EpochMillis",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "LifecycleExplainUnmanaged",
        "namespace": "ilm.explain_lifecycle"
      },
      "properties": [
        {
          "name": "index",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndexName",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "managed",
          "required": true,
          "type": {
            "kind": "literal_value",
            "value": false
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Retrieves information about the index's current lifecycle state, such as the currently executing phase, action, and step.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "ilm.explain_lifecycle"
      },
      "path": [
        {
          "description": "The name of the index to explain",
          "name": "index",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndexName",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "filters the indices included in the response to ones in an ILM error state, implies only_managed",
          "name": "only_errors",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "filters the indices included in the response to ones managed by ILM",
          "name": "only_managed",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "indices",
            "required": true,
            "type": {
              "key": {
                "kind": "instance_of",
                "type": {
                  "name": "IndexName",
                  "namespace": "_types"
                }
              },
              "kind": "dictionary_of",
              "singleKey": false,
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "LifecycleExplain",
                  "namespace": "ilm.explain_lifecycle"
                }
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "ilm.explain_lifecycle"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "Lifecycle",
        "namespace": "ilm.get_lifecycle"
      },
      "properties": [
        {
          "name": "modified_date",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DateString",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "policy",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Policy",
              "namespace": "ilm._types"
            }
          }
        },
        {
          "name": "version",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "VersionNumber",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Returns the specified policy definition. Includes the policy version and last modified date.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "ilm.get_lifecycle"
      },
      "path": [
        {
          "description": "The name of the index lifecycle policy",
          "name": "policy",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": []
    },
    {
      "body": {
        "kind": "properties",
        "properties": []
      },
      "inherits": {
        "generics": [
          {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "Lifecycle",
              "namespace": "ilm.get_lifecycle"
            }
          }
        ],
        "type": {
          "name": "DictionaryResponseBase",
          "namespace": "_types"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "ilm.get_lifecycle"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Retrieves the current index lifecycle management (ILM) status.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "ilm.get_status"
      },
      "path": [],
      "query": []
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "operation_mode",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "LifecycleOperationMode",
                "namespace": "_types"
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "ilm.get_status"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "current_step",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "StepKey",
                "namespace": "ilm.move_to_step"
              }
            }
          },
          {
            "name": "next_step",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "StepKey",
                "namespace": "ilm.move_to_step"
              }
            }
          }
        ]
      },
      "description": "Manually moves an index into the specified step and executes that step.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "ilm.move_to_step"
      },
      "path": [
        {
          "description": "The name of the index whose lifecycle step is to change",
          "name": "index",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndexName",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": []
    },
    {
      "body": {
        "kind": "properties",
        "properties": []
      },
      "inherits": {
        "type": {
          "name": "AcknowledgedResponseBase",
          "namespace": "_types"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "ilm.move_to_step"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "StepKey",
        "namespace": "ilm.move_to_step"
      },
      "properties": [
        {
          "name": "action",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "name",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "phase",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "policy",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Policy",
                "namespace": "ilm._types"
              }
            }
          }
        ]
      },
      "description": "Creates a lifecycle policy",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "ilm.put_lifecycle"
      },
      "path": [
        {
          "description": "The name of the index lifecycle policy",
          "name": "policy",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": []
    },
    {
      "body": {
        "kind": "properties",
        "properties": []
      },
      "inherits": {
        "type": {
          "name": "AcknowledgedResponseBase",
          "namespace": "_types"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "ilm.put_lifecycle"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Removes the assigned lifecycle policy and stops managing the specified index",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "ilm.remove_policy"
      },
      "path": [
        {
          "description": "The name of the index to remove policy on",
          "name": "index",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndexName",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": []
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "failed_indexes",
            "required": true,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "IndexName",
                  "namespace": "_types"
                }
              }
            }
          },
          {
            "name": "has_failures",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "ilm.remove_policy"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Retries executing the policy for an index that is in the ERROR step.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "ilm.retry"
      },
      "path": [
        {
          "description": "The name of the indices (comma-separated) whose failed lifecycle step is to be retry",
          "name": "index",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndexName",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": []
    },
    {
      "body": {
        "kind": "properties",
        "properties": []
      },
      "inherits": {
        "type": {
          "name": "AcknowledgedResponseBase",
          "namespace": "_types"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "ilm.retry"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Start the index lifecycle management (ILM) plugin.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "ilm.start"
      },
      "path": [],
      "query": [
        {
          "name": "master_timeout",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "timeout",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": []
      },
      "inherits": {
        "type": {
          "name": "AcknowledgedResponseBase",
          "namespace": "_types"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "ilm.start"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Halts all lifecycle management operations and stops the index lifecycle management (ILM) plugin",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "ilm.stop"
      },
      "path": [],
      "query": [
        {
          "name": "master_timeout",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "timeout",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": []
      },
      "inherits": {
        "type": {
          "name": "AcknowledgedResponseBase",
          "namespace": "_types"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "ilm.stop"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "Alias",
        "namespace": "indices._types"
      },
      "properties": [
        {
          "name": "filter",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "QueryContainer",
              "namespace": "_types.query_dsl"
            }
          }
        },
        {
          "name": "index_routing",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Routing",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "is_hidden",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "is_write_index",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "routing",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Routing",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "search_routing",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Routing",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "AliasDefinition",
        "namespace": "indices._types"
      },
      "properties": [
        {
          "name": "filter",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "QueryContainer",
              "namespace": "_types.query_dsl"
            }
          }
        },
        {
          "name": "index_routing",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "is_write_index",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "routing",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "search_routing",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "enum",
      "members": [
        {
          "description": "All shards are assigned.",
          "name": "green"
        },
        {
          "description": "All primary shards are assigned, but one or more replica shards are unassigned.",
          "name": "yellow"
        },
        {
          "description": "One or more primary shards are unassigned, so some data is unavailable.",
          "name": "red"
        }
      ],
      "name": {
        "name": "DataStreamHealthStatus",
        "namespace": "indices._types"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "FielddataFrequencyFilter",
        "namespace": "indices._types"
      },
      "properties": [
        {
          "name": "max",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "min",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "min_segment_size",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "false"
        },
        {
          "name": "checksum"
        },
        {
          "name": "true"
        }
      ],
      "name": {
        "name": "IndexCheckOnStartup",
        "namespace": "indices._types"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "IndexRouting",
        "namespace": "indices._types"
      },
      "properties": [
        {
          "name": "allocation",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndexRoutingAllocation",
              "namespace": "indices._types"
            }
          }
        },
        {
          "name": "rebalance",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndexRoutingRebalance",
              "namespace": "indices._types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "IndexRoutingAllocation",
        "namespace": "indices._types"
      },
      "properties": [
        {
          "name": "enable",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndexRoutingAllocationOptions",
              "namespace": "indices._types"
            }
          }
        },
        {
          "name": "include",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndexRoutingAllocationInclude",
              "namespace": "indices._types"
            }
          }
        },
        {
          "name": "initial_recovery",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndexRoutingAllocationInitialRecovery",
              "namespace": "indices._types"
            }
          }
        },
        {
          "name": "disk",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndexRoutingAllocationDisk",
              "namespace": "indices._types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "IndexRoutingAllocationDisk",
        "namespace": "indices._types"
      },
      "properties": [
        {
          "name": "threshold_enabled",
          "required": true,
          "type": {
            "items": [
              {
                "kind": "instance_of",
                "type": {
                  "name": "boolean",
                  "namespace": "internal"
                }
              },
              {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              }
            ],
            "kind": "union_of"
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "IndexRoutingAllocationInclude",
        "namespace": "indices._types"
      },
      "properties": [
        {
          "name": "_tier_preference",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "_id",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "IndexRoutingAllocationInitialRecovery",
        "namespace": "indices._types"
      },
      "properties": [
        {
          "name": "_id",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "all"
        },
        {
          "name": "primaries"
        },
        {
          "name": "new_primaries"
        },
        {
          "name": "none"
        }
      ],
      "name": {
        "name": "IndexRoutingAllocationOptions",
        "namespace": "indices._types"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "IndexRoutingRebalance",
        "namespace": "indices._types"
      },
      "properties": [
        {
          "name": "enable",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndexRoutingRebalanceOptions",
              "namespace": "indices._types"
            }
          }
        }
      ]
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "all"
        },
        {
          "name": "primaries"
        },
        {
          "name": "replicas"
        },
        {
          "name": "none"
        }
      ],
      "name": {
        "name": "IndexRoutingRebalanceOptions",
        "namespace": "indices._types"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "IndexSettingBlocks",
        "namespace": "indices._types"
      },
      "properties": [
        {
          "aliases": [
            "index.blocks.read_only"
          ],
          "name": "read_only",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "index.blocks.read_only_allow_delete"
          ],
          "name": "read_only_allow_delete",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "index.blocks.read"
          ],
          "name": "read",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "index.blocks.write"
          ],
          "name": "write",
          "required": false,
          "type": {
            "items": [
              {
                "kind": "instance_of",
                "type": {
                  "name": "boolean",
                  "namespace": "internal"
                }
              },
              {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              }
            ],
            "kind": "union_of"
          }
        },
        {
          "aliases": [
            "index.blocks.metadata"
          ],
          "name": "metadata",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/7.8/index-modules.html#index-modules-settings",
      "kind": "interface",
      "name": {
        "name": "IndexSettings",
        "namespace": "indices._types"
      },
      "properties": [
        {
          "aliases": [
            "index.number_of_shards"
          ],
          "name": "number_of_shards",
          "required": false,
          "serverDefault": "1",
          "type": {
            "items": [
              {
                "kind": "instance_of",
                "type": {
                  "name": "integer",
                  "namespace": "_types"
                }
              },
              {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              }
            ],
            "kind": "union_of"
          }
        },
        {
          "aliases": [
            "index.number_of_replicas"
          ],
          "name": "number_of_replicas",
          "required": false,
          "serverDefault": "0",
          "type": {
            "items": [
              {
                "kind": "instance_of",
                "type": {
                  "name": "integer",
                  "namespace": "_types"
                }
              },
              {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              }
            ],
            "kind": "union_of"
          }
        },
        {
          "aliases": [
            "index.number_of_routing_shards"
          ],
          "name": "number_of_routing_shards",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "aliases": [
            "index.check_on_startup"
          ],
          "name": "check_on_startup",
          "required": false,
          "serverDefault": "false",
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndexCheckOnStartup",
              "namespace": "indices._types"
            }
          }
        },
        {
          "aliases": [
            "index.codec"
          ],
          "name": "codec",
          "required": false,
          "serverDefault": "LZ4",
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "index.routing_partition_size"
          ],
          "name": "routing_partition_size",
          "required": false,
          "serverDefault": "1",
          "type": {
            "items": [
              {
                "kind": "instance_of",
                "type": {
                  "name": "integer",
                  "namespace": "_types"
                }
              },
              {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              }
            ],
            "kind": "union_of"
          }
        },
        {
          "aliases": [
            "index.soft_deletes.retention_lease.period"
          ],
          "name": "soft_deletes.retention_lease.period",
          "required": false,
          "serverDefault": "12h",
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "aliases": [
            "index.load_fixed_bitset_filters_eagerly"
          ],
          "name": "load_fixed_bitset_filters_eagerly",
          "required": false,
          "serverDefault": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "index.hidden"
          ],
          "name": "hidden",
          "required": false,
          "serverDefault": "false",
          "type": {
            "items": [
              {
                "kind": "instance_of",
                "type": {
                  "name": "boolean",
                  "namespace": "internal"
                }
              },
              {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              }
            ],
            "kind": "union_of"
          }
        },
        {
          "aliases": [
            "index.auto_expand_replicas"
          ],
          "name": "auto_expand_replicas",
          "required": false,
          "serverDefault": "false",
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "index.search.idle.after"
          ],
          "name": "search.idle.after",
          "required": false,
          "serverDefault": "30s",
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "aliases": [
            "index.refresh_interval"
          ],
          "name": "refresh_interval",
          "required": false,
          "serverDefault": "1s",
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "aliases": [
            "index.max_result_window"
          ],
          "name": "max_result_window",
          "required": false,
          "serverDefault": 10000,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "aliases": [
            "index.max_inner_result_window"
          ],
          "name": "max_inner_result_window",
          "required": false,
          "serverDefault": 100,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "aliases": [
            "index.max_rescore_window"
          ],
          "name": "max_rescore_window",
          "required": false,
          "serverDefault": 10000,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "aliases": [
            "index.max_docvalue_fields_search"
          ],
          "name": "max_docvalue_fields_search",
          "required": false,
          "serverDefault": 100,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "aliases": [
            "index.max_script_fields"
          ],
          "name": "max_script_fields",
          "required": false,
          "serverDefault": 32,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "aliases": [
            "index.max_ngram_diff"
          ],
          "name": "max_ngram_diff",
          "required": false,
          "serverDefault": 1,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "aliases": [
            "index.max_shingle_diff"
          ],
          "name": "max_shingle_diff",
          "required": false,
          "serverDefault": 3,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "aliases": [
            "index.blocks"
          ],
          "name": "blocks",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndexSettingBlocks",
              "namespace": "indices._types"
            }
          }
        },
        {
          "aliases": [
            "index.max_refresh_listeners"
          ],
          "name": "max_refresh_listeners",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "aliases": [
            "index.analyze.max_token_count"
          ],
          "name": "analyze.max_token_count",
          "required": false,
          "serverDefault": 10000,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "aliases": [
            "index.highlight.max_analyzed_offset"
          ],
          "name": "highlight.max_analyzed_offset",
          "required": false,
          "serverDefault": 1000000,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "aliases": [
            "index.max_terms_count"
          ],
          "name": "max_terms_count",
          "required": false,
          "serverDefault": 65536,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "aliases": [
            "index.max_regex_length"
          ],
          "name": "max_regex_length",
          "required": false,
          "serverDefault": 1000,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "aliases": [
            "index.routing"
          ],
          "name": "routing",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndexRouting",
              "namespace": "indices._types"
            }
          }
        },
        {
          "aliases": [
            "index.gc_deletes"
          ],
          "name": "gc_deletes",
          "required": false,
          "serverDefault": "60s",
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "aliases": [
            "index.default_pipeline"
          ],
          "name": "default_pipeline",
          "required": false,
          "serverDefault": "_none",
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "PipelineName",
              "namespace": "_types"
            }
          }
        },
        {
          "aliases": [
            "index.final_pipeline"
          ],
          "name": "final_pipeline",
          "required": false,
          "serverDefault": "_none",
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "PipelineName",
              "namespace": "_types"
            }
          }
        },
        {
          "aliases": [
            "index.lifecycle"
          ],
          "name": "lifecycle",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndexSettingsLifecycle",
              "namespace": "indices._types"
            }
          }
        },
        {
          "aliases": [
            "index.provided_name"
          ],
          "name": "provided_name",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        },
        {
          "aliases": [
            "index.creation_date"
          ],
          "name": "creation_date",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DateString",
              "namespace": "_types"
            }
          }
        },
        {
          "aliases": [
            "index.uuid"
          ],
          "name": "uuid",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Uuid",
              "namespace": "_types"
            }
          }
        },
        {
          "aliases": [
            "index.version"
          ],
          "name": "version",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndexVersioning",
              "namespace": "indices._types"
            }
          }
        },
        {
          "aliases": [
            "index.verified_before_close"
          ],
          "name": "verified_before_close",
          "required": false,
          "type": {
            "items": [
              {
                "kind": "instance_of",
                "type": {
                  "name": "boolean",
                  "namespace": "internal"
                }
              },
              {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              }
            ],
            "kind": "union_of"
          }
        },
        {
          "aliases": [
            "index.format"
          ],
          "name": "format",
          "required": false,
          "type": {
            "items": [
              {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              },
              {
                "kind": "instance_of",
                "type": {
                  "name": "integer",
                  "namespace": "_types"
                }
              }
            ],
            "kind": "union_of"
          }
        },
        {
          "aliases": [
            "index.max_slices_per_scroll"
          ],
          "name": "max_slices_per_scroll",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "aliases": [
            "index.translog.durability"
          ],
          "name": "translog.durability",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "index.query_string.lenient"
          ],
          "name": "query_string.lenient",
          "required": false,
          "type": {
            "items": [
              {
                "kind": "instance_of",
                "type": {
                  "name": "boolean",
                  "namespace": "internal"
                }
              },
              {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              }
            ],
            "kind": "union_of"
          }
        },
        {
          "aliases": [
            "index.priority"
          ],
          "name": "priority",
          "required": false,
          "type": {
            "items": [
              {
                "kind": "instance_of",
                "type": {
                  "name": "integer",
                  "namespace": "_types"
                }
              },
              {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              }
            ],
            "kind": "union_of"
          }
        },
        {
          "name": "top_metrics_max_size",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "analysis",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndexSettingsAnalysis",
              "namespace": "indices._types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "IndexSettingsAnalysis",
        "namespace": "indices._types"
      },
      "properties": [
        {
          "name": "analyzer",
          "required": false,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "Analyzer",
                "namespace": "_types.analysis"
              }
            }
          }
        },
        {
          "name": "char_filter",
          "required": false,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "CharFilter",
                "namespace": "_types.analysis"
              }
            }
          }
        },
        {
          "name": "filter",
          "required": false,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "TokenFilter",
                "namespace": "_types.analysis"
              }
            }
          }
        },
        {
          "name": "normalizer",
          "required": false,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "CustomNormalizer",
                "namespace": "_types.analysis"
              }
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "IndexSettingsLifecycle",
        "namespace": "indices._types"
      },
      "properties": [
        {
          "name": "name",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "IndexState",
        "namespace": "indices._types"
      },
      "properties": [
        {
          "name": "aliases",
          "required": false,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "IndexName",
                "namespace": "_types"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "Alias",
                "namespace": "indices._types"
              }
            }
          }
        },
        {
          "name": "mappings",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "TypeMapping",
              "namespace": "_types.mapping"
            }
          }
        },
        {
          "name": "settings",
          "required": false,
          "type": {
            "items": [
              {
                "kind": "instance_of",
                "type": {
                  "name": "IndexSettings",
                  "namespace": "indices._types"
                }
              },
              {
                "kind": "instance_of",
                "type": {
                  "name": "IndexStatePrefixedSettings",
                  "namespace": "indices._types"
                }
              }
            ],
            "kind": "union_of"
          }
        },
        {
          "name": "data_stream",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DataStreamName",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "IndexStatePrefixedSettings",
        "namespace": "indices._types"
      },
      "properties": [
        {
          "name": "index",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndexSettings",
              "namespace": "indices._types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "IndexVersioning",
        "namespace": "indices._types"
      },
      "properties": [
        {
          "name": "created",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "VersionString",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "NumericFielddata",
        "namespace": "indices._types"
      },
      "properties": [
        {
          "name": "format",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "NumericFielddataFormat",
              "namespace": "indices._types"
            }
          }
        }
      ]
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "array"
        },
        {
          "name": "disabled"
        }
      ],
      "name": {
        "name": "NumericFielddataFormat",
        "namespace": "indices._types"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "OverlappingIndexTemplate",
        "namespace": "indices._types"
      },
      "properties": [
        {
          "name": "name",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "index_patterns",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "IndexName",
                "namespace": "_types"
              }
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "StringFielddata",
        "namespace": "indices._types"
      },
      "properties": [
        {
          "name": "format",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "StringFielddataFormat",
              "namespace": "indices._types"
            }
          }
        }
      ]
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "paged_bytes"
        },
        {
          "name": "disabled"
        }
      ],
      "name": {
        "name": "StringFielddataFormat",
        "namespace": "indices._types"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "TemplateMapping",
        "namespace": "indices._types"
      },
      "properties": [
        {
          "name": "aliases",
          "required": true,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "IndexName",
                "namespace": "_types"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "Alias",
                "namespace": "indices._types"
              }
            }
          }
        },
        {
          "name": "index_patterns",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "Name",
                "namespace": "_types"
              }
            }
          }
        },
        {
          "name": "mappings",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "TypeMapping",
              "namespace": "_types.mapping"
            }
          }
        },
        {
          "name": "order",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "settings",
          "required": true,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "user_defined_value"
            }
          }
        },
        {
          "name": "version",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "VersionNumber",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "metadata"
        },
        {
          "name": "read"
        },
        {
          "name": "read_only"
        },
        {
          "name": "write"
        }
      ],
      "name": {
        "name": "IndicesBlockOptions",
        "namespace": "indices.add_block"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "IndicesBlockStatus",
        "namespace": "indices.add_block"
      },
      "properties": [
        {
          "name": "name",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndexName",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "blocked",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Adds a block to an index.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "indices.add_block"
      },
      "path": [
        {
          "description": "A comma separated list of indices to add a block to",
          "name": "index",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndexName",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "The block to add (one of read, write, read_only or metadata)",
          "name": "block",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndicesBlockOptions",
              "namespace": "indices.add_block"
            }
          }
        }
      ],
      "query": [
        {
          "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)",
          "name": "allow_no_indices",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
          "name": "expand_wildcards",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ExpandWildcards",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed)",
          "name": "ignore_unavailable",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Specify timeout for connection to master",
          "name": "master_timeout",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Explicit operation timeout",
          "name": "timeout",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "shards_acknowledged",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "indices",
            "required": true,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "IndicesBlockStatus",
                  "namespace": "indices.add_block"
                }
              }
            }
          }
        ]
      },
      "inherits": {
        "type": {
          "name": "AcknowledgedResponseBase",
          "namespace": "_types"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "indices.add_block"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "AnalyzeDetail",
        "namespace": "indices.analyze"
      },
      "properties": [
        {
          "name": "analyzer",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "AnalyzerDetail",
              "namespace": "indices.analyze"
            }
          }
        },
        {
          "name": "charfilters",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "CharFilterDetail",
                "namespace": "indices.analyze"
              }
            }
          }
        },
        {
          "name": "custom_analyzer",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "tokenfilters",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "TokenDetail",
                "namespace": "indices.analyze"
              }
            }
          }
        },
        {
          "name": "tokenizer",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "TokenDetail",
              "namespace": "indices.analyze"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "AnalyzeToken",
        "namespace": "indices.analyze"
      },
      "properties": [
        {
          "name": "end_offset",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "position",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "position_length",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "start_offset",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "token",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "AnalyzerDetail",
        "namespace": "indices.analyze"
      },
      "properties": [
        {
          "name": "name",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "tokens",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "ExplainAnalyzeToken",
                "namespace": "indices.analyze"
              }
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "CharFilterDetail",
        "namespace": "indices.analyze"
      },
      "properties": [
        {
          "name": "filtered_text",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        },
        {
          "name": "name",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "ExplainAnalyzeToken",
        "namespace": "indices.analyze"
      },
      "properties": [
        {
          "name": "bytes",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "end_offset",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "keyword",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "position",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "positionLength",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "start_offset",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "termFrequency",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "token",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "analyzer",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "attributes",
            "required": false,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              }
            }
          },
          {
            "name": "char_filter",
            "required": false,
            "type": {
              "kind": "array_of",
              "value": {
                "items": [
                  {
                    "kind": "instance_of",
                    "type": {
                      "name": "string",
                      "namespace": "internal"
                    }
                  },
                  {
                    "kind": "instance_of",
                    "type": {
                      "name": "CharFilter",
                      "namespace": "_types.analysis"
                    }
                  }
                ],
                "kind": "union_of"
              }
            }
          },
          {
            "name": "explain",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "field",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Field",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "filter",
            "required": false,
            "type": {
              "kind": "array_of",
              "value": {
                "items": [
                  {
                    "kind": "instance_of",
                    "type": {
                      "name": "string",
                      "namespace": "internal"
                    }
                  },
                  {
                    "kind": "instance_of",
                    "type": {
                      "name": "TokenFilter",
                      "namespace": "_types.analysis"
                    }
                  }
                ],
                "kind": "union_of"
              }
            }
          },
          {
            "name": "normalizer",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "text",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "TextToAnalyze",
                "namespace": "indices.analyze"
              }
            }
          },
          {
            "name": "tokenizer",
            "required": false,
            "type": {
              "items": [
                {
                  "kind": "instance_of",
                  "type": {
                    "name": "string",
                    "namespace": "internal"
                  }
                },
                {
                  "kind": "instance_of",
                  "type": {
                    "name": "Tokenizer",
                    "namespace": "_types.analysis"
                  }
                }
              ],
              "kind": "union_of"
            }
          }
        ]
      },
      "description": "Performs the analysis process on a text and return the tokens breakdown of the text.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "indices.analyze"
      },
      "path": [
        {
          "description": "The name of the index to scope the operation",
          "name": "index",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndexName",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": []
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "detail",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "AnalyzeDetail",
                "namespace": "indices.analyze"
              }
            }
          },
          {
            "name": "tokens",
            "required": false,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "AnalyzeToken",
                  "namespace": "indices.analyze"
                }
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "indices.analyze"
      }
    },
    {
      "kind": "type_alias",
      "name": {
        "name": "TextToAnalyze",
        "namespace": "indices.analyze"
      },
      "type": {
        "items": [
          {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          },
          {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        ],
        "kind": "union_of"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "TokenDetail",
        "namespace": "indices.analyze"
      },
      "properties": [
        {
          "name": "name",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "tokens",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "ExplainAnalyzeToken",
                "namespace": "indices.analyze"
              }
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Clears all or specific caches for one or more indices.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "indices.clear_cache"
      },
      "path": [
        {
          "description": "A comma-separated list of index name to limit the operation",
          "name": "index",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Indices",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)",
          "name": "allow_no_indices",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
          "name": "expand_wildcards",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ExpandWildcards",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Clear field data",
          "name": "fielddata",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "A comma-separated list of fields to clear when using the `fielddata` parameter (default: all)",
          "name": "fields",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Fields",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed)",
          "name": "ignore_unavailable",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Clear query caches",
          "name": "query",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Clear request cache",
          "name": "request",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": []
      },
      "inherits": {
        "type": {
          "name": "ShardsOperationResponseBase",
          "namespace": "_types"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "indices.clear_cache"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "aliases",
            "required": false,
            "type": {
              "key": {
                "kind": "instance_of",
                "type": {
                  "name": "IndexName",
                  "namespace": "_types"
                }
              },
              "kind": "dictionary_of",
              "singleKey": false,
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "Alias",
                  "namespace": "indices._types"
                }
              }
            }
          },
          {
            "name": "settings",
            "required": false,
            "type": {
              "key": {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              },
              "kind": "dictionary_of",
              "singleKey": false,
              "value": {
                "kind": "user_defined_value"
              }
            }
          }
        ]
      },
      "description": "Clones an index",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "indices.clone"
      },
      "path": [
        {
          "description": "The name of the source index to clone",
          "name": "index",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndexName",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "The name of the target index to clone into",
          "name": "target",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "Specify timeout for connection to master",
          "name": "master_timeout",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Explicit operation timeout",
          "name": "timeout",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Set the number of active shards to wait for on the cloned index before the operation returns.",
          "name": "wait_for_active_shards",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "WaitForActiveShards",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "index",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "IndexName",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "shards_acknowledged",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          }
        ]
      },
      "inherits": {
        "type": {
          "name": "AcknowledgedResponseBase",
          "namespace": "_types"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "indices.clone"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "CloseIndexResult",
        "namespace": "indices.close"
      },
      "properties": [
        {
          "name": "closed",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "shards",
          "required": false,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "CloseShardResult",
                "namespace": "indices.close"
              }
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "CloseShardResult",
        "namespace": "indices.close"
      },
      "properties": [
        {
          "name": "failures",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "ShardFailure",
                "namespace": "_types"
              }
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Closes an index.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "indices.close"
      },
      "path": [
        {
          "description": "A comma separated list of indices to close",
          "name": "index",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Indices",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)",
          "name": "allow_no_indices",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
          "name": "expand_wildcards",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ExpandWildcards",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed)",
          "name": "ignore_unavailable",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Specify timeout for connection to master",
          "name": "master_timeout",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Explicit operation timeout",
          "name": "timeout",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Sets the number of active shards to wait for before the operation returns.",
          "name": "wait_for_active_shards",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "WaitForActiveShards",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "indices",
            "required": true,
            "type": {
              "key": {
                "kind": "instance_of",
                "type": {
                  "name": "IndexName",
                  "namespace": "_types"
                }
              },
              "kind": "dictionary_of",
              "singleKey": false,
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "CloseIndexResult",
                  "namespace": "indices.close"
                }
              }
            }
          },
          {
            "name": "shards_acknowledged",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          }
        ]
      },
      "inherits": {
        "type": {
          "name": "AcknowledgedResponseBase",
          "namespace": "_types"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "indices.close"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "aliases",
            "required": false,
            "type": {
              "key": {
                "kind": "instance_of",
                "type": {
                  "name": "IndexName",
                  "namespace": "_types"
                }
              },
              "kind": "dictionary_of",
              "singleKey": false,
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "Alias",
                  "namespace": "indices._types"
                }
              }
            }
          },
          {
            "description": "Mapping for fields in the index. If specified, this mapping can include:\n- Field names\n- Field data types\n- Mapping parameters",
            "name": "mappings",
            "required": false,
            "type": {
              "items": [
                {
                  "key": {
                    "kind": "instance_of",
                    "type": {
                      "name": "string",
                      "namespace": "internal"
                    }
                  },
                  "kind": "dictionary_of",
                  "singleKey": false,
                  "value": {
                    "kind": "instance_of",
                    "type": {
                      "name": "TypeMapping",
                      "namespace": "_types.mapping"
                    }
                  }
                },
                {
                  "kind": "instance_of",
                  "type": {
                    "name": "TypeMapping",
                    "namespace": "_types.mapping"
                  }
                }
              ],
              "kind": "union_of"
            }
          },
          {
            "name": "settings",
            "required": false,
            "type": {
              "key": {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              },
              "kind": "dictionary_of",
              "singleKey": false,
              "value": {
                "kind": "user_defined_value"
              }
            }
          }
        ]
      },
      "description": "Creates an index with optional settings and mappings.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "indices.create"
      },
      "path": [
        {
          "description": "The name of the index",
          "name": "index",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndexName",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "name": "include_type_name",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Specify timeout for connection to master",
          "name": "master_timeout",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Explicit operation timeout",
          "name": "timeout",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Set the number of active shards to wait for before the operation returns.",
          "name": "wait_for_active_shards",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "WaitForActiveShards",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "index",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "IndexName",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "shards_acknowledged",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          }
        ]
      },
      "inherits": {
        "type": {
          "name": "AcknowledgedResponseBase",
          "namespace": "_types"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "indices.create"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Creates a data stream",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "indices.create_data_stream"
      },
      "path": [
        {
          "description": "The name of the data stream",
          "name": "name",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DataStreamName",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": []
    },
    {
      "body": {
        "kind": "properties",
        "properties": []
      },
      "inherits": {
        "type": {
          "name": "AcknowledgedResponseBase",
          "namespace": "_types"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "indices.create_data_stream"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "DataStreamsStatsItem",
        "namespace": "indices.data_streams_stats"
      },
      "properties": [
        {
          "name": "backing_indices",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "data_stream",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "store_size",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ByteSize",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "store_size_bytes",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "maximum_timestamp",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Provides statistics on operations happening in a data stream.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "indices.data_streams_stats"
      },
      "path": [
        {
          "description": "A comma-separated list of data stream names; use `_all` or empty string to perform the operation on all data streams",
          "name": "name",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndexName",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "name": "expand_wildcards",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ExpandWildcards",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "_shards",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "ShardStatistics",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "backing_indices",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "integer",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "data_stream_count",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "integer",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "total_store_sizes",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "ByteSize",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "total_store_size_bytes",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "integer",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "data_streams",
            "required": true,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "DataStreamsStatsItem",
                  "namespace": "indices.data_streams_stats"
                }
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "indices.data_streams_stats"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Deletes an index.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "indices.delete"
      },
      "path": [
        {
          "description": "A comma-separated list of indices to delete; use `_all` or `*` string to delete all indices",
          "name": "index",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Indices",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "Ignore if a wildcard expression resolves to no concrete indices (default: false)",
          "name": "allow_no_indices",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Whether wildcard expressions should get expanded to open, closed, or hidden indices",
          "name": "expand_wildcards",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ExpandWildcards",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Ignore unavailable indexes (default: false)",
          "name": "ignore_unavailable",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Specify timeout for connection to master",
          "name": "master_timeout",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Explicit operation timeout",
          "name": "timeout",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": []
      },
      "inherits": {
        "type": {
          "name": "IndicesResponseBase",
          "namespace": "_types"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "indices.delete"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Deletes an alias.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "indices.delete_alias"
      },
      "path": [
        {
          "description": "A comma-separated list of index names (supports wildcards); use `_all` for all indices",
          "name": "index",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Indices",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "A comma-separated list of aliases to delete (supports wildcards); use `_all` to delete all aliases for the specified indices.",
          "name": "name",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Names",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "Specify timeout for connection to master",
          "name": "master_timeout",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Explicit timestamp for the document",
          "name": "timeout",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": []
      },
      "inherits": {
        "type": {
          "name": "AcknowledgedResponseBase",
          "namespace": "_types"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "indices.delete_alias"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Deletes a data stream.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "indices.delete_data_stream"
      },
      "path": [
        {
          "description": "A comma-separated list of data streams to delete; use `*` to delete all data streams",
          "name": "name",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DataStreamNames",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "Whether wildcard expressions should get expanded to open or closed indices (default: open)",
          "name": "expand_wildcards",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ExpandWildcards",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": []
      },
      "inherits": {
        "type": {
          "name": "AcknowledgedResponseBase",
          "namespace": "_types"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "indices.delete_data_stream"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Deletes an index template.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "indices.delete_index_template"
      },
      "path": [
        {
          "description": "The name of the template",
          "name": "name",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": []
    },
    {
      "body": {
        "kind": "properties",
        "properties": []
      },
      "inherits": {
        "type": {
          "name": "AcknowledgedResponseBase",
          "namespace": "_types"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "indices.delete_index_template"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Deletes an index template.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "indices.delete_template"
      },
      "path": [
        {
          "description": "The name of the template",
          "name": "name",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "Specify timeout for connection to master",
          "name": "master_timeout",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Explicit operation timeout",
          "name": "timeout",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": []
      },
      "inherits": {
        "type": {
          "name": "AcknowledgedResponseBase",
          "namespace": "_types"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "indices.delete_template"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Analyzes the disk usage of each field of an index or data stream",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "indices.disk_usage"
      },
      "path": [
        {
          "description": "Comma-separated list of data streams, indices, and aliases used to limit the request. It’s recommended to execute this API with a single index (or the latest backing index of a data stream) as the API consumes resources significantly.",
          "name": "index",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndexName",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "If false, the request returns an error if any wildcard expression, index alias, or _all value targets only missing or closed indices. This behavior applies even if the request targets other open indices. For example, a request targeting foo*,bar* returns an error if an index starts with foo but no index starts with bar.",
          "name": "allow_no_indices",
          "required": false,
          "serverDefault": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Type of index that wildcard patterns can match. If the request can target data streams, this argument determines whether wildcard expressions match hidden data streams. Supports comma-separated values, such as open,hidden.",
          "name": "expand_wildcards",
          "required": false,
          "serverDefault": "open",
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ExpandWildcards",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "If true, the API performs a flush before analysis. If false, the response may not include uncommitted data.",
          "name": "flush",
          "required": false,
          "serverDefault": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "If true, missing or closed indices are not included in the response.",
          "name": "ignore_unavailable",
          "required": false,
          "serverDefault": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Period to wait for a connection to the master node. If no response is received before the timeout expires, the request fails and returns an error.",
          "name": "master_timeout",
          "required": false,
          "serverDefault": "30s",
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "TimeUnit",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Period to wait for a response. If no response is received before the timeout expires, the request fails and returns an error.",
          "name": "timeout",
          "required": false,
          "serverDefault": "30s",
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "TimeUnit",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Analyzing field disk usage is resource-intensive. To use the API, this parameter must be set to true.",
          "name": "run_expensive_tasks",
          "required": false,
          "serverDefault": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "The number of shard copies that must be active before proceeding with the operation. Set to all or any positive integer up to the total number of shards in the index (number_of_replicas+1). Default: 1, the primary shard.",
          "name": "wait_for_active_shards",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "value",
        "value": {
          "kind": "user_defined_value"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "indices.disk_usage"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Returns information about whether a particular index exists.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "indices.exists"
      },
      "path": [
        {
          "description": "A comma-separated list of index names",
          "name": "index",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Indices",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "Ignore if a wildcard expression resolves to no concrete indices (default: false)",
          "name": "allow_no_indices",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Whether wildcard expressions should get expanded to open or closed indices (default: open)",
          "name": "expand_wildcards",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ExpandWildcards",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Return settings in flat format (default: false)",
          "name": "flat_settings",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Ignore unavailable indexes (default: false)",
          "name": "ignore_unavailable",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Whether to return all default setting for each of the indices.",
          "name": "include_defaults",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Return local information, do not retrieve the state from master node (default: false)",
          "name": "local",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "no_body"
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "indices.exists"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Returns information about whether a particular alias exists.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "indices.exists_alias"
      },
      "path": [
        {
          "description": "A comma-separated list of alias names to return",
          "name": "name",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Names",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "A comma-separated list of index names to filter aliases",
          "name": "index",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Indices",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)",
          "name": "allow_no_indices",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
          "name": "expand_wildcards",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ExpandWildcards",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed)",
          "name": "ignore_unavailable",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Return local information, do not retrieve the state from master node (default: false)",
          "name": "local",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "no_body"
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "indices.exists_alias"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Returns information about whether a particular index template exists.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "indices.exists_index_template"
      },
      "path": [
        {
          "description": "Comma-separated list of index template names used to limit the request. Wildcard (*) expressions are supported.",
          "name": "name",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "Period to wait for a connection to the master node. If no response is received before the timeout expires, the request fails and returns an error.",
          "name": "master_timeout",
          "required": false,
          "serverDefault": "30s",
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "no_body"
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "indices.exists_index_template"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Returns information about whether a particular index template exists.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "indices.exists_template"
      },
      "path": [
        {
          "description": "The comma separated names of the index templates",
          "name": "name",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Names",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "Return settings in flat format (default: false)",
          "name": "flat_settings",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Return local information, do not retrieve the state from master node (default: false)",
          "name": "local",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Explicit operation timeout for connection to master node",
          "name": "master_timeout",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "no_body"
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "indices.exists_template"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Returns information about whether a particular document type exists. (DEPRECATED)",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "indices.exists_type"
      },
      "path": [
        {
          "description": "A comma-separated list of index names; use `_all` to check the types across all indices",
          "name": "index",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Indices",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "A comma-separated list of document types to check",
          "name": "type",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Types",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)",
          "name": "allow_no_indices",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
          "name": "expand_wildcards",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ExpandWildcards",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed)",
          "name": "ignore_unavailable",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Return local information, do not retrieve the state from master node (default: false)",
          "name": "local",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "no_body"
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "indices.exists_type"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Performs the flush operation on one or more indices.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "indices.flush"
      },
      "path": [
        {
          "description": "A comma-separated list of index names; use `_all` or empty string for all indices",
          "name": "index",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Indices",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)",
          "name": "allow_no_indices",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
          "name": "expand_wildcards",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ExpandWildcards",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Whether a flush should be forced even if it is not necessarily needed ie. if no changes will be committed to the index. This is useful if transaction log IDs should be incremented even if no uncommitted changes are present. (This setting can be considered as internal)",
          "name": "force",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed)",
          "name": "ignore_unavailable",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "If set to true the flush operation will block until the flush can be executed if another flush operation is already executing. The default is true. If set to false the flush will be skipped iff if another flush operation is already running.",
          "name": "wait_if_ongoing",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": []
      },
      "inherits": {
        "type": {
          "name": "ShardsOperationResponseBase",
          "namespace": "_types"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "indices.flush"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Performs the force merge operation on one or more indices.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "indices.forcemerge"
      },
      "path": [
        {
          "description": "A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices",
          "name": "index",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Indices",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)",
          "name": "allow_no_indices",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
          "name": "expand_wildcards",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ExpandWildcards",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Specify whether the index should be flushed after performing the operation (default: true)",
          "name": "flush",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed)",
          "name": "ignore_unavailable",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "The number of segments the index should be merged into (default: dynamic)",
          "name": "max_num_segments",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Specify whether the operation should only expunge deleted documents",
          "name": "only_expunge_deletes",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": []
      },
      "inherits": {
        "type": {
          "name": "ShardsOperationResponseBase",
          "namespace": "_types"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "indices.forcemerge"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Freezes an index. A frozen index has almost no overhead on the cluster (except for maintaining its metadata in memory) and is read-only.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "indices.freeze"
      },
      "path": [
        {
          "description": "The name of the index to freeze",
          "name": "index",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndexName",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)",
          "name": "allow_no_indices",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
          "name": "expand_wildcards",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ExpandWildcards",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed)",
          "name": "ignore_unavailable",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Specify timeout for connection to master",
          "name": "master_timeout",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Explicit operation timeout",
          "name": "timeout",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Sets the number of active shards to wait for before the operation returns.",
          "name": "wait_for_active_shards",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "WaitForActiveShards",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "shards_acknowledged",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          }
        ]
      },
      "inherits": {
        "type": {
          "name": "AcknowledgedResponseBase",
          "namespace": "_types"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "indices.freeze"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Returns information about one or more indices.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "indices.get"
      },
      "path": [
        {
          "description": "Comma-separated list of data streams, indices, and index aliases used to limit the request. Wildcard expressions (*) are supported.",
          "name": "index",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Indices",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "Ignore if a wildcard expression resolves to no concrete indices (default: false)",
          "name": "allow_no_indices",
          "required": false,
          "serverDefault": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Type of index that wildcard expressions can match. If the request can target data streams, this argument determines whether wildcard expressions match hidden data streams. Supports comma-separated values, such as open,hidden.",
          "name": "expand_wildcards",
          "required": false,
          "serverDefault": "open",
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ExpandWildcards",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "If true, returns settings in flat format.",
          "name": "flat_settings",
          "required": false,
          "serverDefault": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "If false, requests that target a missing index return an error.",
          "name": "ignore_unavailable",
          "required": false,
          "serverDefault": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "If true, return all default settings in the response.",
          "name": "include_defaults",
          "required": false,
          "serverDefault": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "If true, a mapping type is expected in the body of mappings.",
          "name": "include_type_name",
          "required": false,
          "serverDefault": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "If true, the request retrieves information from the local node only. Defaults to false, which means information is retrieved from the master node.",
          "name": "local",
          "required": false,
          "serverDefault": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Period to wait for a connection to the master node. If no response is received before the timeout expires, the request fails and returns an error.",
          "name": "master_timeout",
          "required": false,
          "serverDefault": "30s",
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": []
      },
      "inherits": {
        "generics": [
          {
            "kind": "instance_of",
            "type": {
              "name": "IndexName",
              "namespace": "_types"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "IndexState",
              "namespace": "indices._types"
            }
          }
        ],
        "type": {
          "name": "DictionaryResponseBase",
          "namespace": "_types"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "indices.get"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "IndexAliases",
        "namespace": "indices.get_alias"
      },
      "properties": [
        {
          "name": "aliases",
          "required": true,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "AliasDefinition",
                "namespace": "indices._types"
              }
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Returns an alias.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "indices.get_alias"
      },
      "path": [
        {
          "description": "A comma-separated list of alias names to return",
          "name": "name",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Names",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "A comma-separated list of index names to filter aliases",
          "name": "index",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Indices",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)",
          "name": "allow_no_indices",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
          "name": "expand_wildcards",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ExpandWildcards",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed)",
          "name": "ignore_unavailable",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Return local information, do not retrieve the state from master node (default: false)",
          "name": "local",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": []
      },
      "inherits": {
        "generics": [
          {
            "kind": "instance_of",
            "type": {
              "name": "IndexName",
              "namespace": "_types"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "IndexAliases",
              "namespace": "indices.get_alias"
            }
          }
        ],
        "type": {
          "name": "DictionaryResponseBase",
          "namespace": "_types"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "indices.get_alias"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "IndicesGetDataStreamItem",
        "namespace": "indices.get_data_stream"
      },
      "properties": [
        {
          "name": "name",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DataStreamName",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "timestamp_field",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndicesGetDataStreamItemTimestampField",
              "namespace": "indices.get_data_stream"
            }
          }
        },
        {
          "name": "indices",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "IndicesGetDataStreamItemIndex",
                "namespace": "indices.get_data_stream"
              }
            }
          }
        },
        {
          "name": "generation",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "template",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "hidden",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "system",
          "required": false,
          "since": "7.10.0",
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "status",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DataStreamHealthStatus",
              "namespace": "indices._types"
            }
          }
        },
        {
          "name": "ilm_policy",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        },
        {
          "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-meta-field.html",
          "name": "_meta",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Metadata",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "IndicesGetDataStreamItemIndex",
        "namespace": "indices.get_data_stream"
      },
      "properties": [
        {
          "name": "index_name",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndexName",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "index_uuid",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Uuid",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "IndicesGetDataStreamItemTimestampField",
        "namespace": "indices.get_data_stream"
      },
      "properties": [
        {
          "name": "name",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Returns data streams.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "indices.get_data_stream"
      },
      "path": [
        {
          "description": "A comma-separated list of data streams to get; use `*` to get all data streams",
          "name": "name",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DataStreamNames",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "Whether wildcard expressions should get expanded to open or closed indices (default: open)",
          "name": "expand_wildcards",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ExpandWildcards",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "data_streams",
            "required": true,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "IndicesGetDataStreamItem",
                  "namespace": "indices.get_data_stream"
                }
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "indices.get_data_stream"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Returns mapping for one or more fields.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "indices.get_field_mapping"
      },
      "path": [
        {
          "description": "A comma-separated list of fields",
          "name": "fields",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Fields",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "A comma-separated list of index names",
          "name": "index",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Indices",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)",
          "name": "allow_no_indices",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
          "name": "expand_wildcards",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ExpandWildcards",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed)",
          "name": "ignore_unavailable",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Whether the default mapping values should be returned as well",
          "name": "include_defaults",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "include_type_name",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Return local information, do not retrieve the state from master node (default: false)",
          "name": "local",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": []
      },
      "inherits": {
        "generics": [
          {
            "kind": "instance_of",
            "type": {
              "name": "IndexName",
              "namespace": "_types"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "TypeFieldMappings",
              "namespace": "indices.get_field_mapping"
            }
          }
        ],
        "type": {
          "name": "DictionaryResponseBase",
          "namespace": "_types"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "indices.get_field_mapping"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "TypeFieldMappings",
        "namespace": "indices.get_field_mapping"
      },
      "properties": [
        {
          "name": "mappings",
          "required": true,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "Field",
                "namespace": "_types"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "FieldMapping",
                "namespace": "_types.mapping"
              }
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "IndexTemplate",
        "namespace": "indices.get_index_template"
      },
      "properties": [
        {
          "name": "index_patterns",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "Name",
                "namespace": "_types"
              }
            }
          }
        },
        {
          "name": "composed_of",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "Name",
                "namespace": "_types"
              }
            }
          }
        },
        {
          "name": "template",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndexTemplateSummary",
              "namespace": "indices.get_index_template"
            }
          }
        },
        {
          "name": "version",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "VersionNumber",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "priority",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-meta-field.html",
          "name": "_meta",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Metadata",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "allow_auto_create",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "data_stream",
          "required": false,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "user_defined_value"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "IndexTemplateItem",
        "namespace": "indices.get_index_template"
      },
      "properties": [
        {
          "name": "name",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "index_template",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndexTemplate",
              "namespace": "indices.get_index_template"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "IndexTemplateSummary",
        "namespace": "indices.get_index_template"
      },
      "properties": [
        {
          "name": "aliases",
          "required": false,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "IndexName",
                "namespace": "_types"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "Alias",
                "namespace": "indices._types"
              }
            }
          }
        },
        {
          "name": "mappings",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "TypeMapping",
              "namespace": "_types.mapping"
            }
          }
        },
        {
          "name": "settings",
          "required": false,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "user_defined_value"
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Returns an index template.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "indices.get_index_template"
      },
      "path": [
        {
          "description": "Comma-separated list of index template names used to limit the request. Wildcard (*) expressions are supported.",
          "name": "name",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "If true, the request retrieves information from the local node only. Defaults to false, which means information is retrieved from the master node.",
          "name": "local",
          "required": false,
          "serverDefault": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "If true, returns settings in flat format.",
          "name": "flat_settings",
          "required": false,
          "serverDefault": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "If true, a mapping type is expected in the body of mappings.",
          "name": "include_type_name",
          "required": false,
          "serverDefault": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Period to wait for a connection to the master node. If no response is received before the timeout expires, the request fails and returns an error.",
          "name": "master_timeout",
          "required": false,
          "serverDefault": "30s",
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "index_templates",
            "required": true,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "IndexTemplateItem",
                  "namespace": "indices.get_index_template"
                }
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "indices.get_index_template"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "IndexMappingRecord",
        "namespace": "indices.get_mapping"
      },
      "properties": [
        {
          "name": "item",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "TypeMapping",
              "namespace": "_types.mapping"
            }
          }
        },
        {
          "name": "mappings",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "TypeMapping",
              "namespace": "_types.mapping"
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Returns mappings for one or more indices.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "indices.get_mapping"
      },
      "path": [
        {
          "description": "A comma-separated list of index names",
          "name": "index",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Indices",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)",
          "name": "allow_no_indices",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
          "name": "expand_wildcards",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ExpandWildcards",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed)",
          "name": "ignore_unavailable",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "include_type_name",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Return local information, do not retrieve the state from master node (default: false)",
          "name": "local",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Specify timeout for connection to master",
          "name": "master_timeout",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": []
      },
      "inherits": {
        "generics": [
          {
            "kind": "instance_of",
            "type": {
              "name": "IndexName",
              "namespace": "_types"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "IndexMappingRecord",
              "namespace": "indices.get_mapping"
            }
          }
        ],
        "type": {
          "name": "DictionaryResponseBase",
          "namespace": "_types"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "indices.get_mapping"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Returns settings for one or more indices.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "indices.get_settings"
      },
      "path": [
        {
          "description": "A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices",
          "name": "index",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Indices",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "The name of the settings that should be included",
          "name": "name",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Names",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)",
          "name": "allow_no_indices",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
          "name": "expand_wildcards",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ExpandWildcards",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Return settings in flat format (default: false)",
          "name": "flat_settings",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed)",
          "name": "ignore_unavailable",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Whether to return all default setting for each of the indices.",
          "name": "include_defaults",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Return local information, do not retrieve the state from master node (default: false)",
          "name": "local",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Specify timeout for connection to master",
          "name": "master_timeout",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": []
      },
      "inherits": {
        "generics": [
          {
            "kind": "instance_of",
            "type": {
              "name": "IndexName",
              "namespace": "_types"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "IndexState",
              "namespace": "indices._types"
            }
          }
        ],
        "type": {
          "name": "DictionaryResponseBase",
          "namespace": "_types"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "indices.get_settings"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Returns an index template.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "indices.get_template"
      },
      "path": [
        {
          "description": "The comma separated names of the index templates",
          "name": "name",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Names",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "Return settings in flat format (default: false)",
          "name": "flat_settings",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "include_type_name",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Return local information, do not retrieve the state from master node (default: false)",
          "name": "local",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Explicit operation timeout for connection to master node",
          "name": "master_timeout",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": []
      },
      "inherits": {
        "generics": [
          {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "TemplateMapping",
              "namespace": "indices._types"
            }
          }
        ],
        "type": {
          "name": "DictionaryResponseBase",
          "namespace": "_types"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "indices.get_template"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Migrates an alias to a data stream",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "indices.migrate_to_data_stream"
      },
      "path": [
        {
          "description": "The name of the alias to migrate",
          "name": "name",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndexName",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": []
    },
    {
      "body": {
        "kind": "properties",
        "properties": []
      },
      "inherits": {
        "type": {
          "name": "AcknowledgedResponseBase",
          "namespace": "_types"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "indices.migrate_to_data_stream"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Opens an index.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "indices.open"
      },
      "path": [
        {
          "description": "A comma separated list of indices to open",
          "name": "index",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Indices",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)",
          "name": "allow_no_indices",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
          "name": "expand_wildcards",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ExpandWildcards",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed)",
          "name": "ignore_unavailable",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Specify timeout for connection to master",
          "name": "master_timeout",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Explicit operation timeout",
          "name": "timeout",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Sets the number of active shards to wait for before the operation returns.",
          "name": "wait_for_active_shards",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "WaitForActiveShards",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "shards_acknowledged",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          }
        ]
      },
      "inherits": {
        "type": {
          "name": "AcknowledgedResponseBase",
          "namespace": "_types"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "indices.open"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Promotes a data stream from a replicated data stream managed by CCR to a regular data stream",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "indices.promote_data_stream"
      },
      "path": [
        {
          "description": "The name of the data stream",
          "name": "name",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndexName",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": []
    },
    {
      "body": {
        "kind": "value",
        "value": {
          "kind": "user_defined_value"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "indices.promote_data_stream"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "filter",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "QueryContainer",
                "namespace": "_types.query_dsl"
              }
            }
          },
          {
            "name": "index_routing",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Routing",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "is_write_index",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "routing",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Routing",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "search_routing",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Routing",
                "namespace": "_types"
              }
            }
          }
        ]
      },
      "description": "Creates or updates an alias.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "indices.put_alias"
      },
      "path": [
        {
          "description": "A comma-separated list of index names the alias should point to (supports wildcards); use `_all` to perform the operation on all indices.",
          "name": "index",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Indices",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "The name of the alias to be created or updated",
          "name": "name",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "Specify timeout for connection to master",
          "name": "master_timeout",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Explicit timestamp for the document",
          "name": "timeout",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": []
      },
      "inherits": {
        "type": {
          "name": "AcknowledgedResponseBase",
          "namespace": "_types"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "indices.put_alias"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "IndexTemplateMapping",
        "namespace": "indices.put_index_template"
      },
      "properties": [
        {
          "name": "aliases",
          "required": false,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "IndexName",
                "namespace": "_types"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "Alias",
                "namespace": "indices._types"
              }
            }
          }
        },
        {
          "name": "mappings",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "TypeMapping",
              "namespace": "_types.mapping"
            }
          }
        },
        {
          "name": "settings",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndexSettings",
              "namespace": "indices._types"
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "index_patterns",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Indices",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "composed_of",
            "required": false,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "Name",
                  "namespace": "_types"
                }
              }
            }
          },
          {
            "name": "template",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "IndexTemplateMapping",
                "namespace": "indices.put_index_template"
              }
            }
          },
          {
            "name": "data_stream",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "EmptyObject",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "priority",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "integer",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "version",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "VersionNumber",
                "namespace": "_types"
              }
            }
          },
          {
            "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-meta-field.html",
            "name": "_meta",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Metadata",
                "namespace": "_types"
              }
            }
          }
        ]
      },
      "description": "Creates or updates an index template.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "indices.put_index_template"
      },
      "path": [
        {
          "description": "Index or template name",
          "name": "name",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": []
    },
    {
      "body": {
        "kind": "properties",
        "properties": []
      },
      "inherits": {
        "type": {
          "name": "AcknowledgedResponseBase",
          "namespace": "_types"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "indices.put_index_template"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "properties",
        "properties": [
          {
            "description": "Controls whether dynamic date detection is enabled.",
            "name": "date_detection",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          },
          {
            "description": "Controls whether new fields are added dynamically.",
            "name": "dynamic",
            "required": false,
            "type": {
              "items": [
                {
                  "kind": "instance_of",
                  "type": {
                    "name": "boolean",
                    "namespace": "internal"
                  }
                },
                {
                  "kind": "instance_of",
                  "type": {
                    "name": "DynamicMapping",
                    "namespace": "_types.mapping"
                  }
                }
              ],
              "kind": "union_of"
            }
          },
          {
            "description": "If date detection is enabled then new string fields are checked\nagainst 'dynamic_date_formats' and if the value matches then\na new date field is added instead of string.",
            "name": "dynamic_date_formats",
            "required": false,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              }
            }
          },
          {
            "description": "Specify dynamic templates for the mapping.",
            "name": "dynamic_templates",
            "required": false,
            "type": {
              "items": [
                {
                  "key": {
                    "kind": "instance_of",
                    "type": {
                      "name": "string",
                      "namespace": "internal"
                    }
                  },
                  "kind": "dictionary_of",
                  "singleKey": false,
                  "value": {
                    "kind": "instance_of",
                    "type": {
                      "name": "DynamicTemplate",
                      "namespace": "_types.mapping"
                    }
                  }
                },
                {
                  "kind": "array_of",
                  "value": {
                    "key": {
                      "kind": "instance_of",
                      "type": {
                        "name": "string",
                        "namespace": "internal"
                      }
                    },
                    "kind": "dictionary_of",
                    "singleKey": false,
                    "value": {
                      "kind": "instance_of",
                      "type": {
                        "name": "DynamicTemplate",
                        "namespace": "_types.mapping"
                      }
                    }
                  }
                }
              ],
              "kind": "union_of"
            }
          },
          {
            "description": "Control whether field names are enabled for the index.",
            "name": "_field_names",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "FieldNamesField",
                "namespace": "_types.mapping"
              }
            }
          },
          {
            "description": "A mapping type can have custom meta data associated with it. These are\nnot used at all by Elasticsearch, but can be used to store\napplication-specific metadata.",
            "name": "_meta",
            "required": false,
            "type": {
              "key": {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              },
              "kind": "dictionary_of",
              "singleKey": false,
              "value": {
                "kind": "user_defined_value"
              }
            }
          },
          {
            "description": "Automatically map strings into numeric data types for all fields.",
            "name": "numeric_detection",
            "required": false,
            "serverDefault": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          },
          {
            "description": "Mapping for a field. For new fields, this mapping can include:\n\n- Field name\n- Field data type\n- Mapping parameters",
            "name": "properties",
            "required": false,
            "type": {
              "key": {
                "kind": "instance_of",
                "type": {
                  "name": "PropertyName",
                  "namespace": "_types"
                }
              },
              "kind": "dictionary_of",
              "singleKey": false,
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "Property",
                  "namespace": "_types.mapping"
                }
              }
            }
          },
          {
            "description": "Enable making a routing value required on indexed documents.",
            "name": "_routing",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "RoutingField",
                "namespace": "_types.mapping"
              }
            }
          },
          {
            "description": "Control whether the _source field is enabled on the index.",
            "name": "_source",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "SourceField",
                "namespace": "_types.mapping"
              }
            }
          },
          {
            "description": "Mapping of runtime fields for the index.",
            "name": "runtime",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "RuntimeFields",
                "namespace": "_types.mapping"
              }
            }
          }
        ]
      },
      "description": "Updates the index mappings.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "indices.put_mapping"
      },
      "path": [
        {
          "description": "A comma-separated list of index names the mapping should be added to (supports wildcards); use `_all` or omit to add the mapping on all indices.",
          "name": "index",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Indices",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)",
          "name": "allow_no_indices",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
          "name": "expand_wildcards",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ExpandWildcards",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed)",
          "name": "ignore_unavailable",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "include_type_name",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Specify timeout for connection to master",
          "name": "master_timeout",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Explicit operation timeout",
          "name": "timeout",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "When true, applies mappings only to the write index of an alias or data stream",
          "name": "write_index_only",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": []
      },
      "inherits": {
        "type": {
          "name": "IndicesResponseBase",
          "namespace": "_types"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "indices.put_mapping"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "identifier": "settings",
        "kind": "value",
        "value": {
          "kind": "instance_of",
          "type": {
            "name": "IndexSettings",
            "namespace": "indices._types"
          }
        }
      },
      "description": "Updates the index settings.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "indices.put_settings"
      },
      "path": [
        {
          "description": "A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices",
          "name": "index",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Indices",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)",
          "name": "allow_no_indices",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
          "name": "expand_wildcards",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ExpandWildcards",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Return settings in flat format (default: false)",
          "name": "flat_settings",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed)",
          "name": "ignore_unavailable",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Specify timeout for connection to master",
          "name": "master_timeout",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Whether to update existing settings. If set to `true` existing settings on an index remain unchanged, the default is `false`",
          "name": "preserve_existing",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Explicit operation timeout",
          "name": "timeout",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": []
      },
      "inherits": {
        "type": {
          "name": "AcknowledgedResponseBase",
          "namespace": "_types"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "indices.put_settings"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "properties",
        "properties": [
          {
            "description": "Aliases for the index.",
            "name": "aliases",
            "required": false,
            "type": {
              "key": {
                "kind": "instance_of",
                "type": {
                  "name": "IndexName",
                  "namespace": "_types"
                }
              },
              "kind": "dictionary_of",
              "singleKey": false,
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "Alias",
                  "namespace": "indices._types"
                }
              }
            }
          },
          {
            "description": "Array of wildcard expressions used to match the names\nof indices during creation.",
            "name": "index_patterns",
            "required": false,
            "type": {
              "items": [
                {
                  "kind": "instance_of",
                  "type": {
                    "name": "string",
                    "namespace": "internal"
                  }
                },
                {
                  "kind": "array_of",
                  "value": {
                    "kind": "instance_of",
                    "type": {
                      "name": "string",
                      "namespace": "internal"
                    }
                  }
                }
              ],
              "kind": "union_of"
            }
          },
          {
            "description": "Mapping for fields in the index.",
            "name": "mappings",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "TypeMapping",
                "namespace": "_types.mapping"
              }
            }
          },
          {
            "description": "Order in which Elasticsearch applies this template if index\nmatches multiple templates.\n\nTemplates with lower 'order' values are merged first. Templates with higher\n'order' values are merged later, overriding templates with lower values.",
            "name": "order",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "integer",
                "namespace": "_types"
              }
            }
          },
          {
            "description": "Configuration options for the index.",
            "name": "settings",
            "required": false,
            "type": {
              "key": {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              },
              "kind": "dictionary_of",
              "singleKey": false,
              "value": {
                "kind": "user_defined_value"
              }
            }
          },
          {
            "description": "Version number used to manage index templates externally. This number\nis not automatically generated by Elasticsearch.",
            "name": "version",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "VersionNumber",
                "namespace": "_types"
              }
            }
          }
        ]
      },
      "description": "Creates or updates an index template.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "indices.put_template"
      },
      "path": [
        {
          "description": "The name of the template",
          "name": "name",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "If true, this request cannot replace or update existing index templates.",
          "name": "create",
          "required": false,
          "serverDefault": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "flat_settings",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "include_type_name",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Period to wait for a connection to the master node. If no response is\nreceived before the timeout expires, the request fails and returns an error.",
          "name": "master_timeout",
          "required": false,
          "serverDefault": "30s",
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "timeout",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Order in which Elasticsearch applies this template if index\nmatches multiple templates.\n\nTemplates with lower 'order' values are merged first. Templates with higher\n'order' values are merged later, overriding templates with lower values.",
          "name": "order",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": []
      },
      "inherits": {
        "type": {
          "name": "AcknowledgedResponseBase",
          "namespace": "_types"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "indices.put_template"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "FileDetails",
        "namespace": "indices.recovery"
      },
      "properties": [
        {
          "name": "length",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "name",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "recovered",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "RecoveryBytes",
        "namespace": "indices.recovery"
      },
      "properties": [
        {
          "name": "percent",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Percentage",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "recovered",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ByteSize",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "recovered_in_bytes",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ByteSize",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "recovered_from_snapshot",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ByteSize",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "recovered_from_snapshot_in_bytes",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ByteSize",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "reused",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ByteSize",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "reused_in_bytes",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ByteSize",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "total",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ByteSize",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "total_in_bytes",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ByteSize",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "RecoveryFiles",
        "namespace": "indices.recovery"
      },
      "properties": [
        {
          "name": "details",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "FileDetails",
                "namespace": "indices.recovery"
              }
            }
          }
        },
        {
          "name": "percent",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Percentage",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "recovered",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "reused",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "total",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "RecoveryIndexStatus",
        "namespace": "indices.recovery"
      },
      "properties": [
        {
          "name": "bytes",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "RecoveryBytes",
              "namespace": "indices.recovery"
            }
          }
        },
        {
          "name": "files",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "RecoveryFiles",
              "namespace": "indices.recovery"
            }
          }
        },
        {
          "name": "size",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "RecoveryBytes",
              "namespace": "indices.recovery"
            }
          }
        },
        {
          "name": "source_throttle_time",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "source_throttle_time_in_millis",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "EpochMillis",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "target_throttle_time",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "target_throttle_time_in_millis",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "EpochMillis",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "total_time_in_millis",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "EpochMillis",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "total_time",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "RecoveryOrigin",
        "namespace": "indices.recovery"
      },
      "properties": [
        {
          "name": "hostname",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "host",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Host",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "transport_address",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "TransportAddress",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "id",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "ip",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Ip",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "name",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "bootstrap_new_history_uuid",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "repository",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "snapshot",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "version",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "VersionString",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "restoreUUID",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Uuid",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "index",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndexName",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "RecoveryStartStatus",
        "namespace": "indices.recovery"
      },
      "properties": [
        {
          "name": "check_index_time",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "total_time_in_millis",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "RecoveryStatus",
        "namespace": "indices.recovery"
      },
      "properties": [
        {
          "name": "shards",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "ShardRecovery",
                "namespace": "indices.recovery"
              }
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Returns information about ongoing index shard recoveries.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "indices.recovery"
      },
      "path": [
        {
          "description": "A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices",
          "name": "index",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Indices",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "Display only those recoveries that are currently on-going",
          "name": "active_only",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Whether to display detailed information about shard recovery",
          "name": "detailed",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": []
      },
      "inherits": {
        "generics": [
          {
            "kind": "instance_of",
            "type": {
              "name": "IndexName",
              "namespace": "_types"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "RecoveryStatus",
              "namespace": "indices.recovery"
            }
          }
        ],
        "type": {
          "name": "DictionaryResponseBase",
          "namespace": "_types"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "indices.recovery"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "ShardRecovery",
        "namespace": "indices.recovery"
      },
      "properties": [
        {
          "name": "id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "index",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "RecoveryIndexStatus",
              "namespace": "indices.recovery"
            }
          }
        },
        {
          "name": "primary",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "source",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "RecoveryOrigin",
              "namespace": "indices.recovery"
            }
          }
        },
        {
          "name": "stage",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "start",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "RecoveryStartStatus",
              "namespace": "indices.recovery"
            }
          }
        },
        {
          "name": "start_time",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DateString",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "start_time_in_millis",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "EpochMillis",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "stop_time",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DateString",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "stop_time_in_millis",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "EpochMillis",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "target",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "RecoveryOrigin",
              "namespace": "indices.recovery"
            }
          }
        },
        {
          "name": "total_time",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DateString",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "total_time_in_millis",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "EpochMillis",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "translog",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "TranslogStatus",
              "namespace": "indices.recovery"
            }
          }
        },
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Type",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "verify_index",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "VerifyIndex",
              "namespace": "indices.recovery"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "TranslogStatus",
        "namespace": "indices.recovery"
      },
      "properties": [
        {
          "name": "percent",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Percentage",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "recovered",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "total",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "total_on_start",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "total_time",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "total_time_in_millis",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "EpochMillis",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "VerifyIndex",
        "namespace": "indices.recovery"
      },
      "properties": [
        {
          "name": "check_index_time",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "check_index_time_in_millis",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "EpochMillis",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "total_time",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "total_time_in_millis",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "EpochMillis",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Performs the refresh operation in one or more indices.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "indices.refresh"
      },
      "path": [
        {
          "description": "A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices",
          "name": "index",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Indices",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)",
          "name": "allow_no_indices",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
          "name": "expand_wildcards",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ExpandWildcards",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed)",
          "name": "ignore_unavailable",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": []
      },
      "inherits": {
        "type": {
          "name": "ShardsOperationResponseBase",
          "namespace": "_types"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "indices.refresh"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "ReloadDetails",
        "namespace": "indices.reload_search_analyzers"
      },
      "properties": [
        {
          "name": "index",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "reloaded_analyzers",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        },
        {
          "name": "reloaded_node_ids",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Reloads an index's search analyzers and their resources.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "indices.reload_search_analyzers"
      },
      "path": [
        {
          "description": "A comma-separated list of index names to reload analyzers for",
          "name": "index",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Indices",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)",
          "name": "allow_no_indices",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
          "name": "expand_wildcards",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ExpandWildcards",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed)",
          "name": "ignore_unavailable",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "reload_details",
            "required": true,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "ReloadDetails",
                  "namespace": "indices.reload_search_analyzers"
                }
              }
            }
          },
          {
            "name": "_shards",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "ShardStatistics",
                "namespace": "_types"
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "indices.reload_search_analyzers"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Returns information about any matching indices, aliases, and data streams",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "indices.resolve_index"
      },
      "path": [
        {
          "description": "A comma-separated list of names or wildcard expressions",
          "name": "name",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Names",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "Whether wildcard expressions should get expanded to open or closed indices (default: open)",
          "name": "expand_wildcards",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ExpandWildcards",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "ResolveIndexAliasItem",
        "namespace": "indices.resolve_index"
      },
      "properties": [
        {
          "name": "name",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "indices",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Indices",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "ResolveIndexDataStreamsItem",
        "namespace": "indices.resolve_index"
      },
      "properties": [
        {
          "name": "name",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DataStreamName",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "timestamp_field",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "backing_indices",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Indices",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "ResolveIndexItem",
        "namespace": "indices.resolve_index"
      },
      "properties": [
        {
          "name": "name",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "aliases",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        },
        {
          "name": "attributes",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        },
        {
          "name": "data_stream",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DataStreamName",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "indices",
            "required": true,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "ResolveIndexItem",
                  "namespace": "indices.resolve_index"
                }
              }
            }
          },
          {
            "name": "aliases",
            "required": true,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "ResolveIndexAliasItem",
                  "namespace": "indices.resolve_index"
                }
              }
            }
          },
          {
            "name": "data_streams",
            "required": true,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "ResolveIndexDataStreamsItem",
                  "namespace": "indices.resolve_index"
                }
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "indices.resolve_index"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "aliases",
            "required": false,
            "type": {
              "key": {
                "kind": "instance_of",
                "type": {
                  "name": "IndexName",
                  "namespace": "_types"
                }
              },
              "kind": "dictionary_of",
              "singleKey": false,
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "Alias",
                  "namespace": "indices._types"
                }
              }
            }
          },
          {
            "name": "conditions",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "RolloverConditions",
                "namespace": "indices.rollover"
              }
            }
          },
          {
            "name": "mappings",
            "required": false,
            "type": {
              "items": [
                {
                  "key": {
                    "kind": "instance_of",
                    "type": {
                      "name": "string",
                      "namespace": "internal"
                    }
                  },
                  "kind": "dictionary_of",
                  "singleKey": false,
                  "value": {
                    "kind": "instance_of",
                    "type": {
                      "name": "TypeMapping",
                      "namespace": "_types.mapping"
                    }
                  }
                },
                {
                  "kind": "instance_of",
                  "type": {
                    "name": "TypeMapping",
                    "namespace": "_types.mapping"
                  }
                }
              ],
              "kind": "union_of"
            }
          },
          {
            "name": "settings",
            "required": false,
            "type": {
              "key": {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              },
              "kind": "dictionary_of",
              "singleKey": false,
              "value": {
                "kind": "user_defined_value"
              }
            }
          }
        ]
      },
      "description": "Updates an alias to point to a new index when the existing index\nis considered to be too large or too old.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "indices.rollover"
      },
      "path": [
        {
          "description": "The name of the alias to rollover",
          "name": "alias",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndexAlias",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "The name of the rollover index",
          "name": "new_index",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndexName",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "If set to true the rollover action will only be validated but not actually performed even if a condition matches. The default is false",
          "name": "dry_run",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "include_type_name",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Specify timeout for connection to master",
          "name": "master_timeout",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Explicit operation timeout",
          "name": "timeout",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Set the number of active shards to wait for on the newly created rollover index before the operation returns.",
          "name": "wait_for_active_shards",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "WaitForActiveShards",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "conditions",
            "required": true,
            "type": {
              "key": {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              },
              "kind": "dictionary_of",
              "singleKey": false,
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "boolean",
                  "namespace": "internal"
                }
              }
            }
          },
          {
            "name": "dry_run",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "new_index",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "old_index",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "rolled_over",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "shards_acknowledged",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          }
        ]
      },
      "inherits": {
        "type": {
          "name": "AcknowledgedResponseBase",
          "namespace": "_types"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "indices.rollover"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "RolloverConditions",
        "namespace": "indices.rollover"
      },
      "properties": [
        {
          "name": "max_age",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "max_docs",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "max_size",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "max_primary_shard_size",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ByteSize",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "IndexSegment",
        "namespace": "indices.segments"
      },
      "properties": [
        {
          "name": "shards",
          "required": true,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "items": [
                {
                  "kind": "instance_of",
                  "type": {
                    "name": "ShardsSegment",
                    "namespace": "indices.segments"
                  }
                },
                {
                  "kind": "array_of",
                  "value": {
                    "kind": "instance_of",
                    "type": {
                      "name": "ShardsSegment",
                      "namespace": "indices.segments"
                    }
                  }
                }
              ],
              "kind": "union_of"
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Provides low-level information about segments in a Lucene index.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "indices.segments"
      },
      "path": [
        {
          "description": "A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices",
          "name": "index",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Indices",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)",
          "name": "allow_no_indices",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
          "name": "expand_wildcards",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ExpandWildcards",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed)",
          "name": "ignore_unavailable",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Includes detailed memory usage by Lucene.",
          "name": "verbose",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "indices",
            "required": true,
            "type": {
              "key": {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              },
              "kind": "dictionary_of",
              "singleKey": false,
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "IndexSegment",
                  "namespace": "indices.segments"
                }
              }
            }
          },
          {
            "name": "_shards",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "ShardStatistics",
                "namespace": "_types"
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "indices.segments"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "Segment",
        "namespace": "indices.segments"
      },
      "properties": [
        {
          "name": "attributes",
          "required": true,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        },
        {
          "name": "committed",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "compound",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "deleted_docs",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "generation",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "memory_in_bytes",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "search",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "size_in_bytes",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "num_docs",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "version",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "VersionString",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "ShardSegmentRouting",
        "namespace": "indices.segments"
      },
      "properties": [
        {
          "name": "node",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "primary",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "state",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "ShardsSegment",
        "namespace": "indices.segments"
      },
      "properties": [
        {
          "name": "num_committed_segments",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "routing",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ShardSegmentRouting",
              "namespace": "indices.segments"
            }
          }
        },
        {
          "name": "num_search_segments",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "segments",
          "required": true,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "Segment",
                "namespace": "indices.segments"
              }
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "IndicesShardStores",
        "namespace": "indices.shard_stores"
      },
      "properties": [
        {
          "name": "shards",
          "required": true,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "ShardStoreWrapper",
                "namespace": "indices.shard_stores"
              }
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Provides store information for shard copies of indices.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "indices.shard_stores"
      },
      "path": [
        {
          "description": "List of data streams, indices, and aliases used to limit the request.",
          "name": "index",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Indices",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "If false, the request returns an error if any wildcard expression, index alias, or _all\nvalue targets only missing or closed indices. This behavior applies even if the request\ntargets other open indices.",
          "name": "allow_no_indices",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Type of index that wildcard patterns can match. If the request can target data streams,\nthis argument determines whether wildcard expressions match hidden data streams.",
          "name": "expand_wildcards",
          "required": false,
          "serverDefault": "open",
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ExpandWildcards",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "If true, missing or closed indices are not included in the response.",
          "name": "ignore_unavailable",
          "required": false,
          "serverDefault": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "List of shard health statuses used to limit the request.",
          "name": "status",
          "required": false,
          "type": {
            "items": [
              {
                "kind": "instance_of",
                "type": {
                  "name": "ShardStatus",
                  "namespace": "indices.shard_stores"
                }
              },
              {
                "kind": "array_of",
                "value": {
                  "kind": "instance_of",
                  "type": {
                    "name": "ShardStatus",
                    "namespace": "indices.shard_stores"
                  }
                }
              }
            ],
            "kind": "union_of"
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "indices",
            "required": true,
            "type": {
              "key": {
                "kind": "instance_of",
                "type": {
                  "name": "IndexName",
                  "namespace": "_types"
                }
              },
              "kind": "dictionary_of",
              "singleKey": false,
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "IndicesShardStores",
                  "namespace": "indices.shard_stores"
                }
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "indices.shard_stores"
      }
    },
    {
      "kind": "enum",
      "members": [
        {
          "description": "The primary shard and all replica shards are assigned.",
          "name": "green"
        },
        {
          "description": "One or more replica shards are unassigned.",
          "name": "yellow"
        },
        {
          "description": "The primary shard is unassigned.",
          "name": "red"
        },
        {
          "description": "Return all shards, regardless of health status.",
          "name": "all"
        }
      ],
      "name": {
        "name": "ShardStatus",
        "namespace": "indices.shard_stores"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "ShardStore",
        "namespace": "indices.shard_stores"
      },
      "properties": [
        {
          "name": "allocation",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ShardStoreAllocation",
              "namespace": "indices.shard_stores"
            }
          }
        },
        {
          "name": "allocation_id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "attributes",
          "required": true,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "user_defined_value"
            }
          }
        },
        {
          "name": "id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "legacy_version",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "VersionNumber",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "name",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "store_exception",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ShardStoreException",
              "namespace": "indices.shard_stores"
            }
          }
        },
        {
          "name": "transport_address",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "TransportAddress",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "primary"
        },
        {
          "name": "replica"
        },
        {
          "name": "unused"
        }
      ],
      "name": {
        "name": "ShardStoreAllocation",
        "namespace": "indices.shard_stores"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "ShardStoreException",
        "namespace": "indices.shard_stores"
      },
      "properties": [
        {
          "name": "reason",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "ShardStoreWrapper",
        "namespace": "indices.shard_stores"
      },
      "properties": [
        {
          "name": "stores",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "ShardStore",
                "namespace": "indices.shard_stores"
              }
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "aliases",
            "required": false,
            "type": {
              "key": {
                "kind": "instance_of",
                "type": {
                  "name": "IndexName",
                  "namespace": "_types"
                }
              },
              "kind": "dictionary_of",
              "singleKey": false,
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "Alias",
                  "namespace": "indices._types"
                }
              }
            }
          },
          {
            "name": "settings",
            "required": false,
            "type": {
              "key": {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              },
              "kind": "dictionary_of",
              "singleKey": false,
              "value": {
                "kind": "user_defined_value"
              }
            }
          }
        ]
      },
      "description": "Allow to shrink an existing index into a new index with fewer primary shards.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "indices.shrink"
      },
      "path": [
        {
          "description": "The name of the source index to shrink",
          "name": "index",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndexName",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "The name of the target index to shrink into",
          "name": "target",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndexName",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "Specify timeout for connection to master",
          "name": "master_timeout",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Explicit operation timeout",
          "name": "timeout",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Set the number of active shards to wait for on the shrunken index before the operation returns.",
          "name": "wait_for_active_shards",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "WaitForActiveShards",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "shards_acknowledged",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "index",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "IndexName",
                "namespace": "_types"
              }
            }
          }
        ]
      },
      "inherits": {
        "type": {
          "name": "AcknowledgedResponseBase",
          "namespace": "_types"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "indices.shrink"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "index_patterns",
            "required": false,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "IndexName",
                  "namespace": "_types"
                }
              }
            }
          },
          {
            "name": "composed_of",
            "required": false,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "Name",
                  "namespace": "_types"
                }
              }
            }
          },
          {
            "description": "Any overlapping templates that would have matched, but have lower priority",
            "name": "overlapping",
            "required": false,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "OverlappingIndexTemplate",
                  "namespace": "indices._types"
                }
              }
            }
          },
          {
            "name": "template",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "TemplateMapping",
                "namespace": "indices._types"
              }
            }
          }
        ]
      },
      "description": "Simulate matching the given index name against the index templates in the system",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "indices.simulate_index_template"
      },
      "path": [
        {
          "description": "Index or template name to simulate",
          "name": "name",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": []
    },
    {
      "body": {
        "kind": "properties",
        "properties": []
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "indices.simulate_index_template"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "Overlapping",
        "namespace": "indices.simulate_template"
      },
      "properties": [
        {
          "name": "name",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "index_patterns",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "identifier": "template",
        "kind": "value",
        "value": {
          "kind": "instance_of",
          "type": {
            "name": "IndexTemplate",
            "namespace": "indices.get_index_template"
          }
        }
      },
      "description": "Simulate resolving the given template name or body",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "indices.simulate_template"
      },
      "path": [
        {
          "description": "Name of the index template to simulate. To test a template configuration before you add it to the cluster, omit this parameter and specify the template configuration in the request body.",
          "name": "name",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "If true, the template passed in the body is only used if no existing templates match the same index patterns. If false, the simulation uses the template with the highest priority. Note that the template is not permanently added or updated in either case; it is only used for the simulation.",
          "name": "create",
          "required": false,
          "serverDefault": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Period to wait for a connection to the master node. If no response is received before the timeout expires, the request fails and returns an error.",
          "name": "master_timeout",
          "required": false,
          "serverDefault": "30s",
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "template",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Template",
                "namespace": "indices.simulate_template"
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "indices.simulate_template"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "Template",
        "namespace": "indices.simulate_template"
      },
      "properties": [
        {
          "name": "aliases",
          "required": true,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "IndexName",
                "namespace": "_types"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "Alias",
                "namespace": "indices._types"
              }
            }
          }
        },
        {
          "name": "mappings",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "TypeMapping",
              "namespace": "_types.mapping"
            }
          }
        },
        {
          "name": "settings",
          "required": true,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "user_defined_value"
            }
          }
        },
        {
          "name": "overlapping",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "Overlapping",
                "namespace": "indices.simulate_template"
              }
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "aliases",
            "required": false,
            "type": {
              "key": {
                "kind": "instance_of",
                "type": {
                  "name": "IndexName",
                  "namespace": "_types"
                }
              },
              "kind": "dictionary_of",
              "singleKey": false,
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "Alias",
                  "namespace": "indices._types"
                }
              }
            }
          },
          {
            "name": "settings",
            "required": false,
            "type": {
              "key": {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              },
              "kind": "dictionary_of",
              "singleKey": false,
              "value": {
                "kind": "user_defined_value"
              }
            }
          }
        ]
      },
      "description": "Allows you to split an existing index into a new index with more primary shards.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "indices.split"
      },
      "path": [
        {
          "description": "The name of the source index to split",
          "name": "index",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndexName",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "The name of the target index to split into",
          "name": "target",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndexName",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "Specify timeout for connection to master",
          "name": "master_timeout",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Explicit operation timeout",
          "name": "timeout",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Set the number of active shards to wait for on the shrunken index before the operation returns.",
          "name": "wait_for_active_shards",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "WaitForActiveShards",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "shards_acknowledged",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "index",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "IndexName",
                "namespace": "_types"
              }
            }
          }
        ]
      },
      "inherits": {
        "type": {
          "name": "AcknowledgedResponseBase",
          "namespace": "_types"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "indices.split"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "IndexStats",
        "namespace": "indices.stats"
      },
      "properties": [
        {
          "description": "Contains statistics about completions across all shards assigned to the node.",
          "name": "completion",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "CompletionStats",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Contains statistics about documents across all primary shards assigned to the node.",
          "name": "docs",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DocStats",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Contains statistics about the field data cache across all shards assigned to the node.",
          "name": "fielddata",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "FielddataStats",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Contains statistics about flush operations for the node.",
          "name": "flush",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "FlushStats",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Contains statistics about get operations for the node.",
          "name": "get",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "GetStats",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Contains statistics about indexing operations for the node.",
          "name": "indexing",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndexingStats",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Contains statistics about merge operations for the node.",
          "name": "merges",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "MergesStats",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Contains statistics about the query cache across all shards assigned to the node.",
          "name": "query_cache",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "QueryCacheStats",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Contains statistics about recovery operations for the node.",
          "name": "recovery",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "RecoveryStats",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Contains statistics about refresh operations for the node.",
          "name": "refresh",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "RefreshStats",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Contains statistics about the request cache across all shards assigned to the node.",
          "name": "request_cache",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "RequestCacheStats",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Contains statistics about search operations for the node.",
          "name": "search",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "SearchStats",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Contains statistics about segments across all shards assigned to the node.",
          "name": "segments",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "SegmentsStats",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Contains statistics about the size of shards assigned to the node.",
          "name": "store",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "StoreStats",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Contains statistics about transaction log operations for the node.",
          "name": "translog",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "TranslogStats",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Contains statistics about index warming operations for the node.",
          "name": "warmer",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "WarmerStats",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "bulk",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "BulkStats",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "shards",
          "required": false,
          "since": "7.15.0",
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ShardsTotalStats",
              "namespace": "indices.stats"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "IndicesStats",
        "namespace": "indices.stats"
      },
      "properties": [
        {
          "name": "primaries",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndexStats",
              "namespace": "indices.stats"
            }
          }
        },
        {
          "name": "shards",
          "required": false,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "ShardStats",
                  "namespace": "indices.stats"
                }
              }
            }
          }
        },
        {
          "name": "total",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndexStats",
              "namespace": "indices.stats"
            }
          }
        },
        {
          "name": "uuid",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Uuid",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Provides statistics on operations happening in an index.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "indices.stats"
      },
      "path": [
        {
          "description": "Limit the information returned the specific metrics.",
          "name": "metric",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Metrics",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices",
          "name": "index",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Indices",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "A comma-separated list of fields for the `completion` index metric (supports wildcards)",
          "name": "completion_fields",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Fields",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
          "name": "expand_wildcards",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ExpandWildcards",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "A comma-separated list of fields for the `fielddata` index metric (supports wildcards)",
          "name": "fielddata_fields",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Fields",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "A comma-separated list of fields for `fielddata` and `completion` index metric (supports wildcards)",
          "name": "fields",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Fields",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "If set to false stats will also collected from closed indices if explicitly specified or if expand_wildcards expands to closed indices",
          "name": "forbid_closed_indices",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "A comma-separated list of search groups for `search` index metric",
          "name": "groups",
          "required": false,
          "type": {
            "items": [
              {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              },
              {
                "kind": "array_of",
                "value": {
                  "kind": "instance_of",
                  "type": {
                    "name": "string",
                    "namespace": "internal"
                  }
                }
              }
            ],
            "kind": "union_of"
          }
        },
        {
          "description": "Whether to report the aggregated disk usage of each one of the Lucene index files (only applies if segment stats are requested)",
          "name": "include_segment_file_sizes",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "If set to true segment stats will include stats for segments that are not currently loaded into memory",
          "name": "include_unloaded_segments",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Return stats aggregated at cluster, index or shard level",
          "name": "level",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Level",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "A comma-separated list of document types for the `indexing` index metric",
          "name": "types",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Types",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "indices",
            "required": false,
            "type": {
              "key": {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              },
              "kind": "dictionary_of",
              "singleKey": false,
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "IndicesStats",
                  "namespace": "indices.stats"
                }
              }
            }
          },
          {
            "name": "_shards",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "ShardStatistics",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "_all",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "IndicesStats",
                "namespace": "indices.stats"
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "indices.stats"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "ShardCommit",
        "namespace": "indices.stats"
      },
      "properties": [
        {
          "name": "generation",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "num_docs",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "user_data",
          "required": true,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "ShardFileSizeInfo",
        "namespace": "indices.stats"
      },
      "properties": [
        {
          "name": "description",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "size_in_bytes",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "min_size_in_bytes",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "max_size_in_bytes",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "average_size_in_bytes",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "count",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "ShardLease",
        "namespace": "indices.stats"
      },
      "properties": [
        {
          "name": "id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "retaining_seq_no",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "SequenceNumber",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "timestamp",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "source",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "ShardPath",
        "namespace": "indices.stats"
      },
      "properties": [
        {
          "name": "data_path",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "is_custom_data_path",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "state_path",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "ShardQueryCache",
        "namespace": "indices.stats"
      },
      "properties": [
        {
          "name": "cache_count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "cache_size",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "evictions",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "hit_count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "memory_size_in_bytes",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "miss_count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "total_count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "ShardRetentionLeases",
        "namespace": "indices.stats"
      },
      "properties": [
        {
          "name": "primary_term",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "version",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "VersionNumber",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "leases",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "ShardLease",
                "namespace": "indices.stats"
              }
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "ShardRouting",
        "namespace": "indices.stats"
      },
      "properties": [
        {
          "name": "node",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "primary",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "relocating_node",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "state",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ShardRoutingState",
              "namespace": "indices.stats"
            }
          }
        }
      ]
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "UNASSIGNED"
        },
        {
          "name": "INITIALIZING"
        },
        {
          "name": "STARTED"
        },
        {
          "name": "RELOCATING"
        }
      ],
      "name": {
        "name": "ShardRoutingState",
        "namespace": "indices.stats"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "ShardSequenceNumber",
        "namespace": "indices.stats"
      },
      "properties": [
        {
          "name": "global_checkpoint",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "local_checkpoint",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "max_seq_no",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "SequenceNumber",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "ShardStats",
        "namespace": "indices.stats"
      },
      "properties": [
        {
          "name": "commit",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ShardCommit",
              "namespace": "indices.stats"
            }
          }
        },
        {
          "name": "completion",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "CompletionStats",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "docs",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DocStats",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "fielddata",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "FielddataStats",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "flush",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "FlushStats",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "get",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "GetStats",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "indexing",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndexingStats",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "merges",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "MergesStats",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "shard_path",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ShardPath",
              "namespace": "indices.stats"
            }
          }
        },
        {
          "name": "query_cache",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ShardQueryCache",
              "namespace": "indices.stats"
            }
          }
        },
        {
          "name": "recovery",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "RecoveryStats",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "refresh",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "RefreshStats",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "request_cache",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "RequestCacheStats",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "retention_leases",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ShardRetentionLeases",
              "namespace": "indices.stats"
            }
          }
        },
        {
          "name": "routing",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ShardRouting",
              "namespace": "indices.stats"
            }
          }
        },
        {
          "name": "search",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "SearchStats",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "segments",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "SegmentsStats",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "seq_no",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ShardSequenceNumber",
              "namespace": "indices.stats"
            }
          }
        },
        {
          "name": "store",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "StoreStats",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "translog",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "TranslogStats",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "warmer",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "WarmerStats",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "bulk",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "BulkStats",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "shards",
          "required": true,
          "since": "7.15.0",
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ShardsTotalStats",
              "namespace": "indices.stats"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "ShardsTotalStats",
        "namespace": "indices.stats"
      },
      "properties": [
        {
          "name": "total_count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Unfreezes an index. When a frozen index is unfrozen, the index goes through the normal recovery process and becomes writeable again.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "indices.unfreeze"
      },
      "path": [
        {
          "description": "The name of the index to unfreeze",
          "name": "index",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndexName",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)",
          "name": "allow_no_indices",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
          "name": "expand_wildcards",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ExpandWildcards",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed)",
          "name": "ignore_unavailable",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Specify timeout for connection to master",
          "name": "master_timeout",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Explicit operation timeout",
          "name": "timeout",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Sets the number of active shards to wait for before the operation returns.",
          "name": "wait_for_active_shards",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "shards_acknowledged",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          }
        ]
      },
      "inherits": {
        "type": {
          "name": "AcknowledgedResponseBase",
          "namespace": "_types"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "indices.unfreeze"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "IndicesUpdateAliasBulk",
        "namespace": "indices.update_aliases"
      },
      "properties": []
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "actions",
            "required": false,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "IndicesUpdateAliasBulk",
                  "namespace": "indices.update_aliases"
                }
              }
            }
          }
        ]
      },
      "description": "Updates index aliases.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "indices.update_aliases"
      },
      "path": [],
      "query": [
        {
          "description": "Specify timeout for connection to master",
          "name": "master_timeout",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Request timeout",
          "name": "timeout",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": []
      },
      "inherits": {
        "type": {
          "name": "AcknowledgedResponseBase",
          "namespace": "_types"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "indices.update_aliases"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "IndicesValidationExplanation",
        "namespace": "indices.validate_query"
      },
      "properties": [
        {
          "name": "error",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "explanation",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "index",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndexName",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "valid",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "query",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "QueryContainer",
                "namespace": "_types.query_dsl"
              }
            }
          }
        ]
      },
      "description": "Allows a user to validate a potentially expensive query without executing it.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "indices.validate_query"
      },
      "path": [
        {
          "description": "A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices",
          "name": "index",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Indices",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "A comma-separated list of document types to restrict the operation; leave empty to perform the operation on all types",
          "name": "type",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Types",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)",
          "name": "allow_no_indices",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Execute validation on all shards instead of one random shard per index",
          "name": "all_shards",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "The analyzer to use for the query string",
          "name": "analyzer",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Specify whether wildcard and prefix queries should be analyzed (default: false)",
          "name": "analyze_wildcard",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "The default operator for query string query (AND or OR)",
          "name": "default_operator",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DefaultOperator",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "The field to use as default where no field prefix is given in the query string",
          "name": "df",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
          "name": "expand_wildcards",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ExpandWildcards",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Return detailed information about the error",
          "name": "explain",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed)",
          "name": "ignore_unavailable",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Specify whether format-based query failures (such as providing text to a numeric field) should be ignored",
          "name": "lenient",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Provide a more detailed explanation showing the actual Lucene query that will be executed.",
          "name": "rewrite",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Query in the Lucene query string syntax",
          "name": "q",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "explanations",
            "required": false,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "IndicesValidationExplanation",
                  "namespace": "indices.validate_query"
                }
              }
            }
          },
          {
            "name": "_shards",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "ShardStatistics",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "valid",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "error",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "indices.validate_query"
      }
    },
    {
      "inherits": {
        "type": {
          "name": "ProcessorBase",
          "namespace": "ingest._types"
        }
      },
      "kind": "interface",
      "name": {
        "name": "AppendProcessor",
        "namespace": "ingest._types"
      },
      "properties": [
        {
          "name": "field",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "value",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "user_defined_value"
            }
          }
        },
        {
          "name": "allow_duplicates",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "ProcessorBase",
          "namespace": "ingest._types"
        }
      },
      "kind": "interface",
      "name": {
        "name": "AttachmentProcessor",
        "namespace": "ingest._types"
      },
      "properties": [
        {
          "name": "field",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "ignore_missing",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "indexed_chars",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "indexed_chars_field",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "properties",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        },
        {
          "name": "target_field",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "resource_name",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "ProcessorBase",
          "namespace": "ingest._types"
        }
      },
      "kind": "interface",
      "name": {
        "name": "BytesProcessor",
        "namespace": "ingest._types"
      },
      "properties": [
        {
          "name": "field",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "ignore_missing",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "target_field",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "ProcessorBase",
          "namespace": "ingest._types"
        }
      },
      "kind": "interface",
      "name": {
        "name": "CircleProcessor",
        "namespace": "ingest._types"
      },
      "properties": [
        {
          "name": "error_distance",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "field",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "ignore_missing",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "shape_type",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ShapeType",
              "namespace": "ingest._types"
            }
          }
        },
        {
          "name": "target_field",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "ProcessorBase",
          "namespace": "ingest._types"
        }
      },
      "kind": "interface",
      "name": {
        "name": "ConvertProcessor",
        "namespace": "ingest._types"
      },
      "properties": [
        {
          "name": "field",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "ignore_missing",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "target_field",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ConvertType",
              "namespace": "ingest._types"
            }
          }
        }
      ]
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "integer"
        },
        {
          "name": "long"
        },
        {
          "name": "float"
        },
        {
          "name": "double"
        },
        {
          "name": "string"
        },
        {
          "name": "boolean"
        },
        {
          "name": "auto"
        }
      ],
      "name": {
        "name": "ConvertType",
        "namespace": "ingest._types"
      }
    },
    {
      "inherits": {
        "type": {
          "name": "ProcessorBase",
          "namespace": "ingest._types"
        }
      },
      "kind": "interface",
      "name": {
        "name": "CsvProcessor",
        "namespace": "ingest._types"
      },
      "properties": [
        {
          "name": "empty_value",
          "required": true,
          "type": {
            "kind": "user_defined_value"
          }
        },
        {
          "name": "description",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "field",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "ignore_missing",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "quote",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "separator",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "target_fields",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Fields",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "trim",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "ProcessorBase",
          "namespace": "ingest._types"
        }
      },
      "kind": "interface",
      "name": {
        "name": "DateIndexNameProcessor",
        "namespace": "ingest._types"
      },
      "properties": [
        {
          "name": "date_formats",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        },
        {
          "name": "date_rounding",
          "required": true,
          "type": {
            "items": [
              {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              },
              {
                "kind": "instance_of",
                "type": {
                  "name": "DateRounding",
                  "namespace": "ingest._types"
                }
              }
            ],
            "kind": "union_of"
          }
        },
        {
          "name": "field",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "index_name_format",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "index_name_prefix",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "locale",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "timezone",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "ProcessorBase",
          "namespace": "ingest._types"
        }
      },
      "kind": "interface",
      "name": {
        "name": "DateProcessor",
        "namespace": "ingest._types"
      },
      "properties": [
        {
          "name": "field",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "formats",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        },
        {
          "name": "locale",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "target_field",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "timezone",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "enum",
      "members": [
        {
          "identifier": "Second",
          "name": "s"
        },
        {
          "identifier": "Minute",
          "name": "m"
        },
        {
          "identifier": "Hour",
          "name": "h"
        },
        {
          "identifier": "Day",
          "name": "d"
        },
        {
          "identifier": "Week",
          "name": "w"
        },
        {
          "identifier": "Month",
          "name": "M"
        },
        {
          "identifier": "Year",
          "name": "y"
        }
      ],
      "name": {
        "name": "DateRounding",
        "namespace": "ingest._types"
      }
    },
    {
      "inherits": {
        "type": {
          "name": "ProcessorBase",
          "namespace": "ingest._types"
        }
      },
      "kind": "interface",
      "name": {
        "name": "DissectProcessor",
        "namespace": "ingest._types"
      },
      "properties": [
        {
          "name": "append_separator",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "field",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "ignore_missing",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "pattern",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "ProcessorBase",
          "namespace": "ingest._types"
        }
      },
      "kind": "interface",
      "name": {
        "name": "DotExpanderProcessor",
        "namespace": "ingest._types"
      },
      "properties": [
        {
          "name": "field",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "path",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "ProcessorBase",
          "namespace": "ingest._types"
        }
      },
      "kind": "interface",
      "name": {
        "name": "DropProcessor",
        "namespace": "ingest._types"
      },
      "properties": []
    },
    {
      "inherits": {
        "type": {
          "name": "ProcessorBase",
          "namespace": "ingest._types"
        }
      },
      "kind": "interface",
      "name": {
        "name": "EnrichProcessor",
        "namespace": "ingest._types"
      },
      "properties": [
        {
          "name": "field",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "ignore_missing",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "max_matches",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "override",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "policy_name",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "shape_relation",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "GeoShapeRelation",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "target_field",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "ProcessorBase",
          "namespace": "ingest._types"
        }
      },
      "kind": "interface",
      "name": {
        "name": "FailProcessor",
        "namespace": "ingest._types"
      },
      "properties": [
        {
          "name": "message",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "ProcessorBase",
          "namespace": "ingest._types"
        }
      },
      "kind": "interface",
      "name": {
        "name": "ForeachProcessor",
        "namespace": "ingest._types"
      },
      "properties": [
        {
          "name": "field",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "ignore_missing",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "processor",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ProcessorContainer",
              "namespace": "ingest._types"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "ProcessorBase",
          "namespace": "ingest._types"
        }
      },
      "kind": "interface",
      "name": {
        "name": "GeoIpProcessor",
        "namespace": "ingest._types"
      },
      "properties": [
        {
          "name": "database_file",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "field",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "first_only",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "ignore_missing",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "properties",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        },
        {
          "name": "target_field",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "ProcessorBase",
          "namespace": "ingest._types"
        }
      },
      "kind": "interface",
      "name": {
        "name": "GrokProcessor",
        "namespace": "ingest._types"
      },
      "properties": [
        {
          "name": "field",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "ignore_missing",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "pattern_definitions",
          "required": true,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        },
        {
          "name": "patterns",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        },
        {
          "name": "trace_match",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "ProcessorBase",
          "namespace": "ingest._types"
        }
      },
      "kind": "interface",
      "name": {
        "name": "GsubProcessor",
        "namespace": "ingest._types"
      },
      "properties": [
        {
          "name": "field",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "ignore_missing",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "pattern",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "replacement",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "target_field",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "InferenceConfig",
        "namespace": "ingest._types"
      },
      "properties": [
        {
          "name": "regression",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "InferenceConfigRegression",
              "namespace": "ingest._types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "InferenceConfigRegression",
        "namespace": "ingest._types"
      },
      "properties": [
        {
          "name": "results_field",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "ProcessorBase",
          "namespace": "ingest._types"
        }
      },
      "kind": "interface",
      "name": {
        "name": "InferenceProcessor",
        "namespace": "ingest._types"
      },
      "properties": [
        {
          "name": "model_id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "target_field",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "field_map",
          "required": false,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "Field",
                "namespace": "_types"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "user_defined_value"
            }
          }
        },
        {
          "name": "inference_config",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "InferenceConfig",
              "namespace": "ingest._types"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "ProcessorBase",
          "namespace": "ingest._types"
        }
      },
      "kind": "interface",
      "name": {
        "name": "JoinProcessor",
        "namespace": "ingest._types"
      },
      "properties": [
        {
          "name": "field",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "separator",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "target_field",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "ProcessorBase",
          "namespace": "ingest._types"
        }
      },
      "kind": "interface",
      "name": {
        "name": "JsonProcessor",
        "namespace": "ingest._types"
      },
      "properties": [
        {
          "name": "add_to_root",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "field",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "target_field",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "ProcessorBase",
          "namespace": "ingest._types"
        }
      },
      "kind": "interface",
      "name": {
        "name": "KeyValueProcessor",
        "namespace": "ingest._types"
      },
      "properties": [
        {
          "name": "exclude_keys",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        },
        {
          "name": "field",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "field_split",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "ignore_missing",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "include_keys",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        },
        {
          "name": "prefix",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "strip_brackets",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "target_field",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "trim_key",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "trim_value",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "value_split",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "ProcessorBase",
          "namespace": "ingest._types"
        }
      },
      "kind": "interface",
      "name": {
        "name": "LowercaseProcessor",
        "namespace": "ingest._types"
      },
      "properties": [
        {
          "name": "field",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "ignore_missing",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "target_field",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "Pipeline",
        "namespace": "ingest._types"
      },
      "properties": [
        {
          "name": "description",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "on_failure",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "ProcessorContainer",
                "namespace": "ingest._types"
              }
            }
          }
        },
        {
          "name": "processors",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "ProcessorContainer",
                "namespace": "ingest._types"
              }
            }
          }
        },
        {
          "name": "version",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "VersionNumber",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "PipelineConfig",
        "namespace": "ingest._types"
      },
      "properties": [
        {
          "name": "description",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "version",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "VersionNumber",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "processors",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "ProcessorContainer",
                "namespace": "ingest._types"
              }
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "ProcessorBase",
          "namespace": "ingest._types"
        }
      },
      "kind": "interface",
      "name": {
        "name": "PipelineProcessor",
        "namespace": "ingest._types"
      },
      "properties": [
        {
          "name": "name",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "ProcessorBase",
        "namespace": "ingest._types"
      },
      "properties": [
        {
          "name": "if",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "ignore_failure",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "on_failure",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "ProcessorContainer",
                "namespace": "ingest._types"
              }
            }
          }
        },
        {
          "name": "tag",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "ProcessorContainer",
        "namespace": "ingest._types"
      },
      "properties": [
        {
          "name": "attachment",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "AttachmentProcessor",
              "namespace": "ingest._types"
            }
          }
        },
        {
          "name": "append",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "AppendProcessor",
              "namespace": "ingest._types"
            }
          }
        },
        {
          "name": "csv",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "CsvProcessor",
              "namespace": "ingest._types"
            }
          }
        },
        {
          "name": "convert",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ConvertProcessor",
              "namespace": "ingest._types"
            }
          }
        },
        {
          "name": "date",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DateProcessor",
              "namespace": "ingest._types"
            }
          }
        },
        {
          "name": "date_index_name",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DateIndexNameProcessor",
              "namespace": "ingest._types"
            }
          }
        },
        {
          "name": "dot_expander",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DotExpanderProcessor",
              "namespace": "ingest._types"
            }
          }
        },
        {
          "name": "enrich",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "EnrichProcessor",
              "namespace": "ingest._types"
            }
          }
        },
        {
          "name": "fail",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "FailProcessor",
              "namespace": "ingest._types"
            }
          }
        },
        {
          "name": "foreach",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ForeachProcessor",
              "namespace": "ingest._types"
            }
          }
        },
        {
          "name": "json",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "JsonProcessor",
              "namespace": "ingest._types"
            }
          }
        },
        {
          "name": "user_agent",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "UserAgentProcessor",
              "namespace": "ingest._types"
            }
          }
        },
        {
          "name": "kv",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "KeyValueProcessor",
              "namespace": "ingest._types"
            }
          }
        },
        {
          "name": "geoip",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "GeoIpProcessor",
              "namespace": "ingest._types"
            }
          }
        },
        {
          "name": "grok",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "GrokProcessor",
              "namespace": "ingest._types"
            }
          }
        },
        {
          "name": "gsub",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "GsubProcessor",
              "namespace": "ingest._types"
            }
          }
        },
        {
          "name": "join",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "JoinProcessor",
              "namespace": "ingest._types"
            }
          }
        },
        {
          "name": "lowercase",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "LowercaseProcessor",
              "namespace": "ingest._types"
            }
          }
        },
        {
          "name": "remove",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "RemoveProcessor",
              "namespace": "ingest._types"
            }
          }
        },
        {
          "name": "rename",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "RenameProcessor",
              "namespace": "ingest._types"
            }
          }
        },
        {
          "name": "script",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Script",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "set",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "SetProcessor",
              "namespace": "ingest._types"
            }
          }
        },
        {
          "name": "sort",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "SortProcessor",
              "namespace": "ingest._types"
            }
          }
        },
        {
          "name": "split",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "SplitProcessor",
              "namespace": "ingest._types"
            }
          }
        },
        {
          "name": "trim",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "TrimProcessor",
              "namespace": "ingest._types"
            }
          }
        },
        {
          "name": "uppercase",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "UppercaseProcessor",
              "namespace": "ingest._types"
            }
          }
        },
        {
          "name": "urldecode",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "UrlDecodeProcessor",
              "namespace": "ingest._types"
            }
          }
        },
        {
          "name": "bytes",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "BytesProcessor",
              "namespace": "ingest._types"
            }
          }
        },
        {
          "name": "dissect",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DissectProcessor",
              "namespace": "ingest._types"
            }
          }
        },
        {
          "name": "set_security_user",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "SetSecurityUserProcessor",
              "namespace": "ingest._types"
            }
          }
        },
        {
          "name": "pipeline",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "PipelineProcessor",
              "namespace": "ingest._types"
            }
          }
        },
        {
          "name": "drop",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DropProcessor",
              "namespace": "ingest._types"
            }
          }
        },
        {
          "name": "circle",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "CircleProcessor",
              "namespace": "ingest._types"
            }
          }
        },
        {
          "name": "inference",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "InferenceProcessor",
              "namespace": "ingest._types"
            }
          }
        }
      ],
      "variants": {
        "kind": "container"
      }
    },
    {
      "inherits": {
        "type": {
          "name": "ProcessorBase",
          "namespace": "ingest._types"
        }
      },
      "kind": "interface",
      "name": {
        "name": "RemoveProcessor",
        "namespace": "ingest._types"
      },
      "properties": [
        {
          "name": "field",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Fields",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "ignore_missing",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "ProcessorBase",
          "namespace": "ingest._types"
        }
      },
      "kind": "interface",
      "name": {
        "name": "RenameProcessor",
        "namespace": "ingest._types"
      },
      "properties": [
        {
          "name": "field",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "ignore_missing",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "target_field",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "ProcessorBase",
          "namespace": "ingest._types"
        }
      },
      "kind": "interface",
      "name": {
        "name": "SetProcessor",
        "namespace": "ingest._types"
      },
      "properties": [
        {
          "name": "field",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "override",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "value",
          "required": true,
          "type": {
            "kind": "user_defined_value"
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "ProcessorBase",
          "namespace": "ingest._types"
        }
      },
      "kind": "interface",
      "name": {
        "name": "SetSecurityUserProcessor",
        "namespace": "ingest._types"
      },
      "properties": [
        {
          "name": "field",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "properties",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        }
      ]
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "geo_shape"
        },
        {
          "name": "shape"
        }
      ],
      "name": {
        "name": "ShapeType",
        "namespace": "ingest._types"
      }
    },
    {
      "inherits": {
        "type": {
          "name": "ProcessorBase",
          "namespace": "ingest._types"
        }
      },
      "kind": "interface",
      "name": {
        "name": "SortProcessor",
        "namespace": "ingest._types"
      },
      "properties": [
        {
          "name": "field",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "order",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "SortOrder",
              "namespace": "_global.search._types"
            }
          }
        },
        {
          "name": "target_field",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "ProcessorBase",
          "namespace": "ingest._types"
        }
      },
      "kind": "interface",
      "name": {
        "name": "SplitProcessor",
        "namespace": "ingest._types"
      },
      "properties": [
        {
          "name": "field",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "ignore_missing",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "preserve_trailing",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "separator",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "target_field",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "ProcessorBase",
          "namespace": "ingest._types"
        }
      },
      "kind": "interface",
      "name": {
        "name": "TrimProcessor",
        "namespace": "ingest._types"
      },
      "properties": [
        {
          "name": "field",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "ignore_missing",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "target_field",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "ProcessorBase",
          "namespace": "ingest._types"
        }
      },
      "kind": "interface",
      "name": {
        "name": "UppercaseProcessor",
        "namespace": "ingest._types"
      },
      "properties": [
        {
          "name": "field",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "ignore_missing",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "target_field",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "ProcessorBase",
          "namespace": "ingest._types"
        }
      },
      "kind": "interface",
      "name": {
        "name": "UrlDecodeProcessor",
        "namespace": "ingest._types"
      },
      "properties": [
        {
          "name": "field",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "ignore_missing",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "target_field",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "ProcessorBase",
          "namespace": "ingest._types"
        }
      },
      "kind": "interface",
      "name": {
        "name": "UserAgentProcessor",
        "namespace": "ingest._types"
      },
      "properties": [
        {
          "name": "field",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "ignore_missing",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "options",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "UserAgentProperty",
                "namespace": "ingest._types"
              }
            }
          }
        },
        {
          "name": "regex_file",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "target_field",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "NAME"
        },
        {
          "name": "MAJOR"
        },
        {
          "name": "MINOR"
        },
        {
          "name": "PATCH"
        },
        {
          "name": "OS"
        },
        {
          "name": "OS_NAME"
        },
        {
          "name": "OS_MAJOR"
        },
        {
          "name": "OS_MINOR"
        },
        {
          "name": "DEVICE"
        },
        {
          "name": "BUILD"
        }
      ],
      "name": {
        "name": "UserAgentProperty",
        "namespace": "ingest._types"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Deletes a pipeline.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "ingest.delete_pipeline"
      },
      "path": [
        {
          "description": "Pipeline ID",
          "name": "id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "Explicit operation timeout for connection to master node",
          "name": "master_timeout",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Explicit operation timeout",
          "name": "timeout",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": []
      },
      "inherits": {
        "type": {
          "name": "AcknowledgedResponseBase",
          "namespace": "_types"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "ingest.delete_pipeline"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "GeoIpDownloadStatistics",
        "namespace": "ingest.geo_ip_stats"
      },
      "properties": [
        {
          "description": "Total number of successful database downloads.",
          "name": "successful_downloads",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Total number of failed database downloads.",
          "name": "failed_downloads",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Total milliseconds spent downloading databases.",
          "name": "total_download_time",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Current number of databases available for use.",
          "name": "database_count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Total number of database updates skipped.",
          "name": "skipped_updates",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "GeoIpNodeDatabaseName",
        "namespace": "ingest.geo_ip_stats"
      },
      "properties": [
        {
          "description": "Name of the database.",
          "name": "name",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "description": "Downloaded databases for the node. The field key is the node ID.",
      "kind": "interface",
      "name": {
        "name": "GeoIpNodeDatabases",
        "namespace": "ingest.geo_ip_stats"
      },
      "properties": [
        {
          "description": "Downloaded databases for the node.",
          "name": "databases",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "GeoIpNodeDatabaseName",
                "namespace": "ingest.geo_ip_stats"
              }
            }
          }
        },
        {
          "description": "Downloaded database files, including related license files. Elasticsearch stores these files in the node’s temporary directory: $ES_TMPDIR/geoip-databases/<node_id>.",
          "name": "files_in_temp",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Returns statistical information about geoip databases",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "ingest.geo_ip_stats"
      },
      "path": [],
      "query": []
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "description": "Download statistics for all GeoIP2 databases.",
            "name": "stats",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "GeoIpDownloadStatistics",
                "namespace": "ingest.geo_ip_stats"
              }
            }
          },
          {
            "description": "Downloaded GeoIP2 databases for each node.",
            "name": "nodes",
            "required": true,
            "type": {
              "key": {
                "kind": "instance_of",
                "type": {
                  "name": "Id",
                  "namespace": "_types"
                }
              },
              "kind": "dictionary_of",
              "singleKey": false,
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "GeoIpNodeDatabases",
                  "namespace": "ingest.geo_ip_stats"
                }
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "ingest.geo_ip_stats"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Returns a pipeline.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "ingest.get_pipeline"
      },
      "path": [
        {
          "description": "Comma separated list of pipeline ids. Wildcards supported",
          "name": "id",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "Explicit operation timeout for connection to master node",
          "name": "master_timeout",
          "required": false,
          "serverDefault": "30s",
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Return pipelines without their definitions (default: false)",
          "name": "summary",
          "required": false,
          "serverDefault": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": []
      },
      "inherits": {
        "generics": [
          {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "Pipeline",
              "namespace": "ingest._types"
            }
          }
        ],
        "type": {
          "name": "DictionaryResponseBase",
          "namespace": "_types"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "ingest.get_pipeline"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Returns a list of the built-in patterns.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "ingest.processor_grok"
      },
      "path": [],
      "query": []
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "patterns",
            "required": true,
            "type": {
              "key": {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              },
              "kind": "dictionary_of",
              "singleKey": false,
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "ingest.processor_grok"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "properties",
        "properties": [
          {
            "description": "Optional metadata about the ingest pipeline. May have any contents. This map is not automatically generated by Elasticsearch.",
            "name": "_meta",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Metadata",
                "namespace": "_types"
              }
            }
          },
          {
            "description": "Description of the ingest pipeline.",
            "name": "description",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          },
          {
            "description": "Processors to run immediately after a processor failure. Each processor supports a processor-level `on_failure` value. If a processor without an `on_failure` value fails, Elasticsearch uses this pipeline-level parameter as a fallback. The processors in this parameter run sequentially in the order specified. Elasticsearch will not attempt to run the pipeline's remaining processors.",
            "name": "on_failure",
            "required": false,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "ProcessorContainer",
                  "namespace": "ingest._types"
                }
              }
            }
          },
          {
            "description": "Processors used to perform transformations on documents before indexing. Processors run sequentially in the order specified.",
            "name": "processors",
            "required": false,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "ProcessorContainer",
                  "namespace": "ingest._types"
                }
              }
            }
          },
          {
            "description": "Version number used by external systems to track ingest pipelines. This parameter is intended for external systems only. Elasticsearch does not use or validate pipeline version numbers.",
            "name": "version",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "VersionNumber",
                "namespace": "_types"
              }
            }
          }
        ]
      },
      "description": "Creates or updates a pipeline.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "ingest.put_pipeline"
      },
      "path": [
        {
          "description": "ID of the ingest pipeline to create or update.",
          "name": "id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "Period to wait for a connection to the master node. If no response is received before the timeout expires, the request fails and returns an error.",
          "name": "master_timeout",
          "required": false,
          "serverDefault": "30s",
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Period to wait for a response. If no response is received before the timeout expires, the request fails and returns an error.",
          "name": "timeout",
          "required": false,
          "serverDefault": "30s",
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": []
      },
      "inherits": {
        "type": {
          "name": "AcknowledgedResponseBase",
          "namespace": "_types"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "ingest.put_pipeline"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "Document",
        "namespace": "ingest.simulate"
      },
      "properties": [
        {
          "name": "_id",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "_index",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndexName",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "_source",
          "required": true,
          "type": {
            "kind": "user_defined_value"
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "DocumentSimulation",
        "namespace": "ingest.simulate"
      },
      "properties": [
        {
          "name": "_id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "_index",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndexName",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "_ingest",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Ingest",
              "namespace": "ingest.simulate"
            }
          }
        },
        {
          "name": "_parent",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "_routing",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "_source",
          "required": true,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "user_defined_value"
            }
          }
        },
        {
          "name": "_type",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Type",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "Ingest",
        "namespace": "ingest.simulate"
      },
      "properties": [
        {
          "name": "timestamp",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DateString",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "pipeline",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "PipelineSimulation",
        "namespace": "ingest.simulate"
      },
      "properties": [
        {
          "name": "doc",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DocumentSimulation",
              "namespace": "ingest.simulate"
            }
          }
        },
        {
          "name": "processor_results",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "PipelineSimulation",
                "namespace": "ingest.simulate"
              }
            }
          }
        },
        {
          "name": "tag",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "processor_type",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "status",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ActionStatusOptions",
              "namespace": "watcher._types"
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "docs",
            "required": false,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "Document",
                  "namespace": "ingest.simulate"
                }
              }
            }
          },
          {
            "name": "pipeline",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Pipeline",
                "namespace": "ingest._types"
              }
            }
          }
        ]
      },
      "description": "Allows to simulate a pipeline with example documents.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "ingest.simulate"
      },
      "path": [
        {
          "description": "Pipeline ID",
          "name": "id",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "Verbose mode. Display data output for each processor in executed pipeline",
          "name": "verbose",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "docs",
            "required": true,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "PipelineSimulation",
                  "namespace": "ingest.simulate"
                }
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "ingest.simulate"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "License",
        "namespace": "license._types"
      },
      "properties": [
        {
          "name": "expiry_date_in_millis",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "EpochMillis",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "issue_date_in_millis",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "EpochMillis",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "issued_to",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "issuer",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "max_nodes",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "max_resource_units",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "signature",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "start_date_in_millis",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "EpochMillis",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "LicenseType",
              "namespace": "license._types"
            }
          }
        },
        {
          "name": "uid",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "active"
        },
        {
          "name": "valid"
        },
        {
          "name": "invalid"
        },
        {
          "name": "expired"
        }
      ],
      "name": {
        "name": "LicenseStatus",
        "namespace": "license._types"
      }
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "missing"
        },
        {
          "name": "trial"
        },
        {
          "name": "basic"
        },
        {
          "name": "standard"
        },
        {
          "name": "dev"
        },
        {
          "name": "silver"
        },
        {
          "name": "gold"
        },
        {
          "name": "platinum"
        },
        {
          "name": "enterprise"
        }
      ],
      "name": {
        "name": "LicenseType",
        "namespace": "license._types"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Deletes licensing information for the cluster",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "license.delete"
      },
      "path": [],
      "query": []
    },
    {
      "body": {
        "kind": "properties",
        "properties": []
      },
      "inherits": {
        "type": {
          "name": "AcknowledgedResponseBase",
          "namespace": "_types"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "license.delete"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "LicenseInformation",
        "namespace": "license.get"
      },
      "properties": [
        {
          "name": "expiry_date",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DateString",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "expiry_date_in_millis",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "EpochMillis",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "issue_date",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DateString",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "issue_date_in_millis",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "EpochMillis",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "issued_to",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "issuer",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "max_nodes",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "max_resource_units",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "status",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "LicenseStatus",
              "namespace": "license._types"
            }
          }
        },
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "LicenseType",
              "namespace": "license._types"
            }
          }
        },
        {
          "name": "uid",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Uuid",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "start_date_in_millis",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "EpochMillis",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Retrieves licensing information for the cluster",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "license.get"
      },
      "path": [],
      "query": [
        {
          "description": "Supported for backwards compatibility with 7.x. If this param is used it must be set to true",
          "name": "accept_enterprise",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Return local information, do not retrieve the state from master node (default: false)",
          "name": "local",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "license",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "LicenseInformation",
                "namespace": "license.get"
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "license.get"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Retrieves information about the status of the basic license.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "license.get_basic_status"
      },
      "path": [],
      "query": []
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "eligible_to_start_basic",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "license.get_basic_status"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Retrieves information about the status of the trial license.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "license.get_trial_status"
      },
      "path": [],
      "query": []
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "eligible_to_start_trial",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "license.get_trial_status"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "Acknowledgement",
        "namespace": "license.post"
      },
      "properties": [
        {
          "name": "license",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        },
        {
          "name": "message",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "license",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "License",
                "namespace": "license._types"
              }
            }
          },
          {
            "name": "licenses",
            "required": false,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "License",
                  "namespace": "license._types"
                }
              }
            }
          }
        ]
      },
      "description": "Updates the license for the cluster.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "license.post"
      },
      "path": [],
      "query": [
        {
          "description": "whether the user has acknowledged acknowledge messages (default: false)",
          "name": "acknowledge",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "acknowledge",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Acknowledgement",
                "namespace": "license.post"
              }
            }
          },
          {
            "name": "acknowledged",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "license_status",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "LicenseStatus",
                "namespace": "license._types"
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "license.post"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Starts an indefinite basic license.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "license.post_start_basic"
      },
      "path": [],
      "query": [
        {
          "description": "whether the user has acknowledged acknowledge messages (default: false)",
          "name": "acknowledge",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "acknowledge",
            "required": true,
            "type": {
              "key": {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              },
              "kind": "dictionary_of",
              "singleKey": false,
              "value": {
                "items": [
                  {
                    "kind": "instance_of",
                    "type": {
                      "name": "string",
                      "namespace": "internal"
                    }
                  },
                  {
                    "kind": "array_of",
                    "value": {
                      "kind": "instance_of",
                      "type": {
                        "name": "string",
                        "namespace": "internal"
                      }
                    }
                  }
                ],
                "kind": "union_of"
              }
            }
          },
          {
            "name": "basic_was_started",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "error_message",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        ]
      },
      "inherits": {
        "type": {
          "name": "AcknowledgedResponseBase",
          "namespace": "_types"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "license.post_start_basic"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "starts a limited time trial license.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "license.post_start_trial"
      },
      "path": [],
      "query": [
        {
          "description": "whether the user has acknowledged acknowledge messages (default: false)",
          "name": "acknowledge",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "type_query_string",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "error_message",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "acknowledged",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "trial_was_started",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "type",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "LicenseType",
                "namespace": "license._types"
              }
            }
          }
        ]
      },
      "inherits": {
        "type": {
          "name": "AcknowledgedResponseBase",
          "namespace": "_types"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "license.post_start_trial"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "Pipeline",
        "namespace": "logstash._types"
      },
      "properties": [
        {
          "name": "description",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "last_modified",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Timestamp",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "pipeline_metadata",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "PipelineMetadata",
              "namespace": "logstash._types"
            }
          }
        },
        {
          "name": "username",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "pipeline",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "pipeline_settings",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "PipelineSettings",
              "namespace": "logstash._types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "PipelineMetadata",
        "namespace": "logstash._types"
      },
      "properties": [
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "version",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "PipelineSettings",
        "namespace": "logstash._types"
      },
      "properties": [
        {
          "name": "pipeline.workers",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "pipeline.batch.size",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "pipeline.batch.delay",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "queue.type",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "queue.max_bytes.number",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "queue.max_bytes.units",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "queue.checkpoint.writes",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Deletes Logstash Pipelines used by Central Management",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "logstash.delete_pipeline"
      },
      "path": [
        {
          "description": "The ID of the Pipeline",
          "name": "id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": []
    },
    {
      "body": {
        "kind": "no_body"
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "logstash.delete_pipeline"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Retrieves Logstash Pipelines used by Central Management",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "logstash.get_pipeline"
      },
      "path": [
        {
          "description": "A comma-separated list of Pipeline IDs",
          "name": "id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Ids",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": []
    },
    {
      "body": {
        "kind": "value",
        "value": {
          "key": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          },
          "kind": "dictionary_of",
          "singleKey": false,
          "value": {
            "kind": "instance_of",
            "type": {
              "name": "Pipeline",
              "namespace": "logstash._types"
            }
          }
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "logstash.get_pipeline"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "identifier": "pipeline",
        "kind": "value",
        "value": {
          "kind": "instance_of",
          "type": {
            "name": "Pipeline",
            "namespace": "logstash._types"
          }
        }
      },
      "description": "Adds and updates Logstash Pipelines used for Central Management",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "logstash.put_pipeline"
      },
      "path": [
        {
          "description": "The ID of the Pipeline",
          "name": "id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": []
    },
    {
      "body": {
        "kind": "no_body"
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "logstash.put_pipeline"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "Deprecation",
        "namespace": "migration.deprecations"
      },
      "properties": [
        {
          "name": "details",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "The level property describes the significance of the issue.",
          "name": "level",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DeprecationLevel",
              "namespace": "migration.deprecations"
            }
          }
        },
        {
          "name": "message",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "url",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "none"
        },
        {
          "name": "info"
        },
        {
          "description": "You can upgrade directly, but you are using deprecated functionality which will not be available or behave differently in the next major version.",
          "name": "warning"
        },
        {
          "description": "You cannot upgrade without fixing this problem.",
          "name": "critical"
        }
      ],
      "name": {
        "name": "DeprecationLevel",
        "namespace": "migration.deprecations"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Retrieves information about different cluster, node, and index level settings that use deprecated features that will be removed or changed in the next major version.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "migration.deprecations"
      },
      "path": [
        {
          "description": "Comma-separate list of data streams or indices to check. Wildcard (*) expressions are supported.",
          "name": "index",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndexName",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": []
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "cluster_settings",
            "required": true,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "Deprecation",
                  "namespace": "migration.deprecations"
                }
              }
            }
          },
          {
            "name": "index_settings",
            "required": true,
            "type": {
              "key": {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              },
              "kind": "dictionary_of",
              "singleKey": false,
              "value": {
                "kind": "array_of",
                "value": {
                  "kind": "instance_of",
                  "type": {
                    "name": "Deprecation",
                    "namespace": "migration.deprecations"
                  }
                }
              }
            }
          },
          {
            "name": "node_settings",
            "required": true,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "Deprecation",
                  "namespace": "migration.deprecations"
                }
              }
            }
          },
          {
            "name": "ml_settings",
            "required": true,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "Deprecation",
                  "namespace": "migration.deprecations"
                }
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "migration.deprecations"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "AnalysisConfig",
        "namespace": "ml._types"
      },
      "properties": [
        {
          "description": "The size of the interval that the analysis is aggregated into, typically between 5m and 1h. If the anomaly detection job uses a datafeed with aggregations, this value must be divisible by the interval of the date histogram aggregation.\n* @server_default 5m",
          "name": "bucket_span",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "TimeSpan",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "If `categorization_field_name` is specified, you can also define the analyzer that is used to interpret the categorization field. This property cannot be used at the same time as `categorization_filters`. The categorization analyzer specifies how the `categorization_field` is interpreted by the categorization process. The `categorization_analyzer` field can be specified either as a string or as an object. If it is a string it must refer to a built-in analyzer or one added by another plugin.",
          "name": "categorization_analyzer",
          "required": false,
          "type": {
            "items": [
              {
                "kind": "instance_of",
                "type": {
                  "name": "CategorizationAnalyzer",
                  "namespace": "ml._types"
                }
              },
              {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              }
            ],
            "kind": "union_of"
          }
        },
        {
          "description": "If this property is specified, the values of the specified field will be categorized. The resulting categories must be used in a detector by setting `by_field_name`, `over_field_name`, or `partition_field_name` to the keyword `mlcategory`.",
          "name": "categorization_field_name",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "If `categorization_field_name` is specified, you can also define optional filters. This property expects an array of regular expressions. The expressions are used to filter out matching sequences from the categorization field values. You can use this functionality to fine tune the categorization by excluding sequences from consideration when categories are defined. For example, you can exclude SQL statements that appear in your log files. This property cannot be used at the same time as `categorization_analyzer`. If you only want to define simple regular expression filters that are applied prior to tokenization, setting this property is the easiest method. If you also want to customize the tokenizer or post-tokenization filtering, use the `categorization_analyzer` property instead and include the filters as pattern_replace character filters. The effect is exactly the same.",
          "name": "categorization_filters",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        },
        {
          "description": "Detector configuration objects specify which data fields a job analyzes. They also specify which analytical functions are used. You can specify multiple detectors for a job. If the detectors array does not contain at least one detector, no analysis can occur and an error is returned.",
          "name": "detectors",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "Detector",
                "namespace": "ml._types"
              }
            }
          }
        },
        {
          "description": "A comma separated list of influencer field names. Typically these can be the by, over, or partition fields that are used in the detector configuration. You might also want to use a field name that is not specifically named in a detector, but is available as part of the input data. When you use multiple detectors, the use of influencers is recommended as it aggregates results for each influencer entity.",
          "name": "influencers",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "Field",
                "namespace": "_types"
              }
            }
          }
        },
        {
          "description": "Advanced configuration option. Affects the pruning of models that have not been updated for the given time duration. The value must be set to a multiple of the `bucket_span`. If set too low, important information may be removed from the model. Typically, set to `30d` or longer. If not set, model pruning only occurs if the model memory status reaches the soft limit or the hard limit.",
          "name": "model_prune_window",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "The size of the window in which to expect data that is out of time order. If you specify a non-zero value, it must be greater than or equal to one second. NOTE: Latency is only applicable when you send data by using the post data API.",
          "name": "latency",
          "required": false,
          "serverDefault": "0",
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "This functionality is reserved for internal use. It is not supported for use in customer environments and is not subject to the support SLA of official GA features. If set to true, the analysis will automatically find correlations between metrics for a given by field value and report anomalies when those correlations cease to hold. For example, suppose CPU and memory usage on host A is usually highly correlated with the same metrics on host B. Perhaps this correlation occurs because they are running a load-balanced application. If you enable this property, anomalies will be reported when, for example, CPU usage on host A is high and the value of CPU usage on host B is low. That is to say, you’ll see an anomaly when the CPU of host A is unusual given the CPU of host B. To use the `multivariate_by_fields` property, you must also specify `by_field_name` in your detector.",
          "name": "multivariate_by_fields",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Settings related to how categorization interacts with partition fields.",
          "name": "per_partition_categorization",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "PerPartitionCategorization",
              "namespace": "ml._types"
            }
          }
        },
        {
          "description": "If this property is specified, the data that is fed to the job is expected to be pre-summarized. This property value is the name of the field that contains the count of raw data points that have been summarized. The same `summary_count_field_name` applies to all detectors in the job. NOTE: The `summary_count_field_name` property cannot be used with the `metric` function.",
          "name": "summary_count_field_name",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "OverloadOf"
      ],
      "behaviors": [
        {
          "generics": [
            {
              "kind": "instance_of",
              "type": {
                "name": "AnalysisConfig",
                "namespace": "ml._types"
              }
            }
          ],
          "type": {
            "name": "OverloadOf",
            "namespace": "_spec_utils"
          }
        }
      ],
      "kind": "interface",
      "name": {
        "name": "AnalysisConfigRead",
        "namespace": "ml._types"
      },
      "properties": [
        {
          "description": "The size of the interval that the analysis is aggregated into, typically between 5m and 1h. If the anomaly detection job uses a datafeed with aggregations, this value must be divisible by the interval of the date histogram aggregation.\n* @server_default 5m",
          "name": "bucket_span",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "TimeSpan",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "If `categorization_field_name` is specified, you can also define the analyzer that is used to interpret the categorization field. This property cannot be used at the same time as `categorization_filters`. The categorization analyzer specifies how the `categorization_field` is interpreted by the categorization process. The `categorization_analyzer` field can be specified either as a string or as an object. If it is a string it must refer to a built-in analyzer or one added by another plugin.",
          "name": "categorization_analyzer",
          "required": false,
          "type": {
            "items": [
              {
                "kind": "instance_of",
                "type": {
                  "name": "CategorizationAnalyzer",
                  "namespace": "ml._types"
                }
              },
              {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              }
            ],
            "kind": "union_of"
          }
        },
        {
          "description": "If this property is specified, the values of the specified field will be categorized. The resulting categories must be used in a detector by setting `by_field_name`, `over_field_name`, or `partition_field_name` to the keyword `mlcategory`.",
          "name": "categorization_field_name",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "If `categorization_field_name` is specified, you can also define optional filters. This property expects an array of regular expressions. The expressions are used to filter out matching sequences from the categorization field values. You can use this functionality to fine tune the categorization by excluding sequences from consideration when categories are defined. For example, you can exclude SQL statements that appear in your log files. This property cannot be used at the same time as `categorization_analyzer`. If you only want to define simple regular expression filters that are applied prior to tokenization, setting this property is the easiest method. If you also want to customize the tokenizer or post-tokenization filtering, use the `categorization_analyzer` property instead and include the filters as pattern_replace character filters. The effect is exactly the same.",
          "name": "categorization_filters",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        },
        {
          "description": "Detector configuration objects specify which data fields a job analyzes. They also specify which analytical functions are used. You can specify multiple detectors for a job. If the detectors array does not contain at least one detector, no analysis can occur and an error is returned.",
          "name": "detectors",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "Detector",
                "namespace": "ml._types"
              }
            }
          }
        },
        {
          "description": "A comma separated list of influencer field names. Typically these can be the by, over, or partition fields that are used in the detector configuration. You might also want to use a field name that is not specifically named in a detector, but is available as part of the input data. When you use multiple detectors, the use of influencers is recommended as it aggregates results for each influencer entity.",
          "name": "influencers",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "Field",
                "namespace": "_types"
              }
            }
          }
        },
        {
          "description": "Advanced configuration option. Affects the pruning of models that have not been updated for the given time duration. The value must be set to a multiple of the `bucket_span`. If set too low, important information may be removed from the model. Typically, set to `30d` or longer. If not set, model pruning only occurs if the model memory status reaches the soft limit or the hard limit.",
          "name": "model_prune_window",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "The size of the window in which to expect data that is out of time order. If you specify a non-zero value, it must be greater than or equal to one second. NOTE: Latency is only applicable when you send data by using the post data API.",
          "name": "latency",
          "required": false,
          "serverDefault": "0",
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "This functionality is reserved for internal use. It is not supported for use in customer environments and is not subject to the support SLA of official GA features. If set to true, the analysis will automatically find correlations between metrics for a given by field value and report anomalies when those correlations cease to hold. For example, suppose CPU and memory usage on host A is usually highly correlated with the same metrics on host B. Perhaps this correlation occurs because they are running a load-balanced application. If you enable this property, anomalies will be reported when, for example, CPU usage on host A is high and the value of CPU usage on host B is low. That is to say, you’ll see an anomaly when the CPU of host A is unusual given the CPU of host B. To use the `multivariate_by_fields` property, you must also specify `by_field_name` in your detector.",
          "name": "multivariate_by_fields",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Settings related to how categorization interacts with partition fields.",
          "name": "per_partition_categorization",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "PerPartitionCategorization",
              "namespace": "ml._types"
            }
          }
        },
        {
          "description": "If this property is specified, the data that is fed to the job is expected to be pre-summarized. This property value is the name of the field that contains the count of raw data points that have been summarized. The same `summary_count_field_name` applies to all detectors in the job. NOTE: The `summary_count_field_name` property cannot be used with the `metric` function.",
          "name": "summary_count_field_name",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "AnalysisLimits",
        "namespace": "ml._types"
      },
      "properties": [
        {
          "description": "The maximum number of examples stored per category in memory and in the results data store. If you increase this value, more examples are available, however it requires that you have more storage available. If you set this value to 0, no examples are stored. NOTE: The `categorization_examples_limit` applies only to analysis that uses categorization.",
          "name": "categorization_examples_limit",
          "required": false,
          "serverDefault": 4,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "The approximate maximum amount of memory resources that are required for analytical processing. Once this limit is approached, data pruning becomes more aggressive. Upon exceeding this limit, new entities are not modeled. If the `xpack.ml.max_model_memory_limit` setting has a value greater than 0 and less than 1024mb, that value is used instead of the default. The default value is relatively small to ensure that high resource usage is a conscious decision. If you have jobs that are expected to analyze high cardinality fields, you will likely need to use a higher value. If you specify a number instead of a string, the units are assumed to be MiB. Specifying a string is recommended for clarity. If you specify a byte size unit of `b` or `kb` and the number does not equate to a discrete number of megabytes, it is rounded down to the closest MiB. The minimum valid value is 1 MiB. If you specify a value less than 1 MiB, an error occurs. If you specify a value for the `xpack.ml.max_model_memory_limit` setting, an error occurs when you try to create jobs that have `model_memory_limit` values greater than that setting value.",
          "name": "model_memory_limit",
          "required": false,
          "serverDefault": "1024mb",
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "AnalysisMemoryLimit",
        "namespace": "ml._types"
      },
      "properties": [
        {
          "description": "Limits can be applied for the resources required to hold the mathematical models in memory. These limits are approximate and can be set per job. They do not control the memory used by other processes, for example the Elasticsearch Java processes.",
          "name": "model_memory_limit",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "Anomaly",
        "namespace": "ml._types"
      },
      "properties": [
        {
          "name": "actual",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "double",
                "namespace": "_types"
              }
            }
          }
        },
        {
          "name": "bucket_span",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "by_field_name",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "by_field_value",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "causes",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "AnomalyCause",
                "namespace": "ml._types"
              }
            }
          }
        },
        {
          "name": "detector_index",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "field_name",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "function",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "function_description",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "influencers",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "Influence",
                "namespace": "ml._types"
              }
            }
          }
        },
        {
          "name": "initial_record_score",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "is_interim",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "job_id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "over_field_name",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "over_field_value",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "partition_field_name",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "partition_field_value",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "probability",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "record_score",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "result_type",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "timestamp",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "EpochMillis",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "typical",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "double",
                "namespace": "_types"
              }
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "AnomalyCause",
        "namespace": "ml._types"
      },
      "properties": [
        {
          "name": "actual",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "double",
                "namespace": "_types"
              }
            }
          }
        },
        {
          "name": "by_field_name",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "by_field_value",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "correlated_by_field_value",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "field_name",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "function",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "function_description",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "influencers",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "Influence",
                "namespace": "ml._types"
              }
            }
          }
        },
        {
          "name": "over_field_name",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "over_field_value",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "partition_field_name",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "partition_field_value",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "probability",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "typical",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "double",
                "namespace": "_types"
              }
            }
          }
        }
      ]
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "actual"
        },
        {
          "name": "typical"
        },
        {
          "name": "diff_from_typical"
        },
        {
          "name": "time"
        }
      ],
      "name": {
        "name": "AppliesTo",
        "namespace": "ml._types"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "BucketInfluencer",
        "namespace": "ml._types"
      },
      "properties": [
        {
          "description": "The length of the bucket in seconds. This value matches the bucket_span that is specified in the job.",
          "name": "bucket_span",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "A normalized score between 0-100, which is based on the probability of the influencer in this bucket aggregated across detectors. Unlike initial_influencer_score, this value will be updated by a re-normalization process as new data is analyzed.",
          "name": "influencer_score",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "The field name of the influencer.",
          "name": "influencer_field_name",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "The entity that influenced, contributed to, or was to blame for the anomaly.",
          "name": "influencer_field_value",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "A normalized score between 0-100, which is based on the probability of the influencer aggregated across detectors. This is the initial value that was calculated at the time the bucket was processed.",
          "name": "initial_influencer_score",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "If true, this is an interim result. In other words, the results are calculated based on partial input data.",
          "name": "is_interim",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Identifier for the anomaly detection job.",
          "name": "job_id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "The probability that the influencer has this behavior, in the range 0 to 1. This value can be held to a high precision of over 300 decimal places, so the influencer_score is provided as a human-readable and friendly interpretation of this.",
          "name": "probability",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Internal. This value is always set to influencer.",
          "name": "result_type",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "The start time of the bucket for which these results were calculated.",
          "name": "timestamp",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "foo",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "BucketSummary",
        "namespace": "ml._types"
      },
      "properties": [
        {
          "name": "anomaly_score",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "bucket_influencers",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "BucketInfluencer",
                "namespace": "ml._types"
              }
            }
          }
        },
        {
          "name": "bucket_span",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "event_count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "initial_anomaly_score",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "is_interim",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "job_id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "partition_scores",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "PartitionScore",
                "namespace": "ml._types"
              }
            }
          }
        },
        {
          "name": "processing_time_ms",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "result_type",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "timestamp",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "CalendarEvent",
        "namespace": "ml._types"
      },
      "properties": [
        {
          "name": "calendar_id",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "event_id",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "A description of the scheduled event.",
          "name": "description",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "The timestamp for the end of the scheduled event in milliseconds since the epoch or ISO 8601 format.",
          "name": "end_time",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "EpochMillis",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "The timestamp for the beginning of the scheduled event in milliseconds since the epoch or ISO 8601 format.",
          "name": "start_time",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "EpochMillis",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "CategorizationAnalyzer",
        "namespace": "ml._types"
      },
      "properties": [
        {
          "name": "char_filter",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "items": [
                {
                  "kind": "instance_of",
                  "type": {
                    "name": "string",
                    "namespace": "internal"
                  }
                },
                {
                  "kind": "instance_of",
                  "type": {
                    "name": "CharFilter",
                    "namespace": "_types.analysis"
                  }
                }
              ],
              "kind": "union_of"
            }
          }
        },
        {
          "description": "One or more character filters. In addition to the built-in character filters, other plugins can provide more character filters. If this property is not specified, no character filters are applied prior to categorization. If you are customizing some other aspect of the analyzer and you need to achieve the equivalent of `categorization_filters` (which are not permitted when some other aspect of the analyzer is customized), add them here as pattern replace character filters.",
          "name": "filter",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "items": [
                {
                  "kind": "instance_of",
                  "type": {
                    "name": "string",
                    "namespace": "internal"
                  }
                },
                {
                  "kind": "instance_of",
                  "type": {
                    "name": "TokenFilter",
                    "namespace": "_types.analysis"
                  }
                }
              ],
              "kind": "union_of"
            }
          }
        },
        {
          "description": "One or more token filters. In addition to the built-in token filters, other plugins can provide more token filters. If this property is not specified, no token filters are applied prior to categorization.",
          "name": "tokenizer",
          "required": false,
          "type": {
            "items": [
              {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              },
              {
                "kind": "instance_of",
                "type": {
                  "name": "Tokenizer",
                  "namespace": "_types.analysis"
                }
              }
            ],
            "kind": "union_of"
          }
        }
      ]
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "ok"
        },
        {
          "name": "warn"
        }
      ],
      "name": {
        "name": "CategorizationStatus",
        "namespace": "ml._types"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "Category",
        "namespace": "ml._types"
      },
      "properties": [
        {
          "description": "A unique identifier for the category. category_id is unique at the job level, even when per-partition categorization is enabled.",
          "name": "category_id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ulong",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "A list of examples of actual values that matched the category.",
          "name": "examples",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        },
        {
          "description": "[experimental] A Grok pattern that could be used in Logstash or an ingest pipeline to extract fields from messages that match the category. This field is experimental and may be changed or removed in a future release. The Grok patterns that are found are not optimal, but are often a good starting point for manual tweaking.",
          "name": "grok_pattern",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Identifier for the anomaly detection job.",
          "name": "job_id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "The maximum length of the fields that matched the category. The value is increased by 10% to enable matching for similar fields that have not been analyzed.",
          "name": "max_matching_length",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ulong",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "If per-partition categorization is enabled, this property identifies the field used to segment the categorization. It is not present when per-partition categorization is disabled.",
          "name": "partition_field_name",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "If per-partition categorization is enabled, this property identifies the value of the partition_field_name for the category. It is not present when per-partition categorization is disabled.",
          "name": "partition_field_value",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "A regular expression that is used to search for values that match the category.",
          "name": "regex",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "A space separated list of the common tokens that are matched in values of the category.",
          "name": "terms",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "The number of messages that have been matched by this category. This is only guaranteed to have the latest accurate count after a job _flush or _close",
          "name": "num_matches",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "A list of category_id entries that this current category encompasses. Any new message that is processed by the categorizer will match against this category and not any of the categories in this list. This is only guaranteed to have the latest accurate list of categories after a job _flush or _close",
          "name": "preferred_to_categories",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "Id",
                "namespace": "_types"
              }
            }
          }
        },
        {
          "name": "p",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "result_type",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "mlcategory",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "ChunkingConfig",
        "namespace": "ml._types"
      },
      "properties": [
        {
          "description": "If the mode is `auto`, the chunk size is dynamically calculated; this is the recommended value when the datafeed does not use aggregations. If the mode is `manual`, chunking is applied according to the specified `time_span`; use this mode when the datafeed uses aggregations. If the mode is `off`, no chunking is applied.",
          "name": "mode",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ChunkingMode",
              "namespace": "ml._types"
            }
          }
        },
        {
          "description": "The time span that each search will be querying. This setting is only applicable when the `mode` is set to `manual`.",
          "name": "time_span",
          "required": false,
          "serverDefault": "3h",
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "auto"
        },
        {
          "name": "manual"
        },
        {
          "name": "off"
        }
      ],
      "name": {
        "name": "ChunkingMode",
        "namespace": "ml._types"
      }
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "gt"
        },
        {
          "name": "gte"
        },
        {
          "name": "lt"
        },
        {
          "name": "lte"
        }
      ],
      "name": {
        "name": "ConditionOperator",
        "namespace": "ml._types"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "CustomSettings",
        "namespace": "ml._types"
      },
      "properties": [
        {
          "name": "custom_urls",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "UrlConfig",
                "namespace": "xpack.usage"
              }
            }
          }
        },
        {
          "name": "created_by",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "job_tags",
          "required": false,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "DataCounts",
        "namespace": "ml._types"
      },
      "properties": [
        {
          "name": "bucket_count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "earliest_record_timestamp",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "empty_bucket_count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "input_bytes",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "input_field_count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "input_record_count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "invalid_date_count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "job_id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "last_data_time",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "latest_empty_bucket_timestamp",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "latest_record_timestamp",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "latest_sparse_bucket_timestamp",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "latest_bucket_timestamp",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "missing_field_count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "out_of_order_timestamp_count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "processed_field_count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "processed_record_count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "sparse_bucket_count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "DataDescription",
        "namespace": "ml._types"
      },
      "properties": [
        {
          "description": "Only JSON format is supported at this time.",
          "name": "format",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "The name of the field that contains the timestamp.",
          "name": "time_field",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "The time format, which can be `epoch`, `epoch_ms`, or a custom pattern. The value `epoch` refers to UNIX or Epoch time (the number of seconds since 1 Jan 1970). The value `epoch_ms` indicates that time is measured in milliseconds since the epoch. The `epoch` and `epoch_ms` time formats accept either integer or real values. Custom patterns must conform to the Java DateTimeFormatter class. When you use date-time formatting patterns, it is recommended that you provide the full date, time and time zone. For example: yyyy-MM-dd'T'HH:mm:ssX. If the pattern that you specify is not sufficient to produce a complete timestamp, job creation fails.",
          "name": "time_format",
          "required": false,
          "serverDefault": "epoch",
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "field_delimiter",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "Datafeed",
        "namespace": "ml._types"
      },
      "properties": [
        {
          "name": "aggregations",
          "required": false,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "AggregationContainer",
                "namespace": "_types.aggregations"
              }
            }
          }
        },
        {
          "name": "aggs",
          "required": false,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "AggregationContainer",
                "namespace": "_types.aggregations"
              }
            }
          }
        },
        {
          "name": "chunking_config",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ChunkingConfig",
              "namespace": "ml._types"
            }
          }
        },
        {
          "name": "datafeed_id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "frequency",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Timestamp",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "indices",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        },
        {
          "name": "indexes",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        },
        {
          "name": "job_id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "max_empty_searches",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "query",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "QueryContainer",
              "namespace": "_types.query_dsl"
            }
          }
        },
        {
          "name": "query_delay",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Timestamp",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "script_fields",
          "required": false,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "ScriptField",
                "namespace": "_types"
              }
            }
          }
        },
        {
          "name": "scroll_size",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "delayed_data_check_config",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DelayedDataCheckConfig",
              "namespace": "ml._types"
            }
          }
        },
        {
          "name": "runtime_mappings",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "RuntimeFields",
              "namespace": "_types.mapping"
            }
          }
        },
        {
          "name": "indices_options",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DatafeedIndicesOptions",
              "namespace": "ml._types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "DatafeedConfig",
        "namespace": "ml._types"
      },
      "properties": [
        {
          "description": "If set, the datafeed performs aggregation searches. Support for aggregations is limited and should be used only with low cardinality data.",
          "name": "aggregations",
          "required": false,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "AggregationContainer",
                "namespace": "_types.aggregations"
              }
            }
          }
        },
        {
          "name": "aggs",
          "required": false,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "AggregationContainer",
                "namespace": "_types.aggregations"
              }
            }
          }
        },
        {
          "description": "Datafeeds might be required to search over long time periods, for several months or years. This search is split into time chunks in order to ensure the load on Elasticsearch is managed. Chunking configuration controls how the size of these time chunks are calculated and is an advanced configuration option.",
          "name": "chunking_config",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ChunkingConfig",
              "namespace": "ml._types"
            }
          }
        },
        {
          "description": "A numerical character string that uniquely identifies the datafeed. This identifier can contain lowercase alphanumeric characters (a-z and 0-9), hyphens, and underscores. It must start and end with alphanumeric characters.",
          "name": "datafeed_id",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Specifies whether the datafeed checks for missing data and the size of the window. The datafeed can optionally search over indices that have already been read in an effort to determine whether any data has subsequently been added to the index. If missing data is found, it is a good indication that the `query_delay` option is set too low and the data is being indexed after the datafeed has passed that moment in time. This check runs only on real-time datafeeds.",
          "name": "delayed_data_check_config",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DelayedDataCheckConfig",
              "namespace": "ml._types"
            }
          }
        },
        {
          "description": "The interval at which scheduled queries are made while the datafeed runs in real time. The default value is either the bucket span for short bucket spans, or, for longer bucket spans, a sensible fraction of the bucket span. For example: `150s`. When frequency is shorter than the bucket span, interim results for the last (partial) bucket are written then eventually overwritten by the full bucket results. If the datafeed uses aggregations, this value must be divisible by the interval of the date histogram aggregation.",
          "name": "frequency",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Timestamp",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "indexes",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        },
        {
          "description": "An array of index names. Wildcards are supported.",
          "name": "indices",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        },
        {
          "description": "Specifies index expansion options that are used during search.",
          "name": "indices_options",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DatafeedIndicesOptions",
              "namespace": "ml._types"
            }
          }
        },
        {
          "name": "job_id",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "If a real-time datafeed has never seen any data (including during any initial training period) then it will automatically stop itself and close its associated job after this many real-time searches that return no documents. In other words, it will stop after `frequency` times `max_empty_searches` of real-time operation. If not set then a datafeed with no end time that sees no data will remain started until it is explicitly stopped.",
          "name": "max_empty_searches",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "The Elasticsearch query domain-specific language (DSL). This value corresponds to the query object in an Elasticsearch search POST body. All the options that are supported by Elasticsearch can be used, as this object is passed verbatim to Elasticsearch.",
          "name": "query",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "QueryContainer",
              "namespace": "_types.query_dsl"
            }
          }
        },
        {
          "description": "The number of seconds behind real time that data is queried. For example, if data from 10:04 a.m. might not be searchable in Elasticsearch until 10:06 a.m., set this property to 120 seconds. The default value is randomly selected between `60s` and `120s`. This randomness improves the query performance when there are multiple jobs running on the same node.",
          "name": "query_delay",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Timestamp",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Specifies runtime fields for the datafeed search.",
          "name": "runtime_mappings",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "RuntimeFields",
              "namespace": "_types.mapping"
            }
          }
        },
        {
          "description": "Specifies scripts that evaluate custom expressions and returns script fields to the datafeed. The detector configuration objects in a job can contain functions that use these script fields.",
          "name": "script_fields",
          "required": false,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "ScriptField",
                "namespace": "_types"
              }
            }
          }
        },
        {
          "description": "The size parameter that is used in Elasticsearch searches when the datafeed does not use aggregations. The maximum value is the value of `index.max_result_window`, which is 10,000 by default.",
          "name": "scroll_size",
          "required": false,
          "serverDefault": 1000,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "DatafeedIndicesOptions",
        "namespace": "ml._types"
      },
      "properties": [
        {
          "name": "allow_no_indices",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "expand_wildcards",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ExpandWildcards",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "ignore_unavailable",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "ignore_throttled",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "started"
        },
        {
          "name": "stopped"
        },
        {
          "name": "starting"
        },
        {
          "name": "stopping"
        }
      ],
      "name": {
        "name": "DatafeedState",
        "namespace": "ml._types"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "DatafeedStats",
        "namespace": "ml._types"
      },
      "properties": [
        {
          "name": "assignment_explanation",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "datafeed_id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "node",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DiscoveryNode",
              "namespace": "ml._types"
            }
          }
        },
        {
          "name": "state",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DatafeedState",
              "namespace": "ml._types"
            }
          }
        },
        {
          "name": "timing_stats",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DatafeedTimingStats",
              "namespace": "ml._types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "DatafeedTimingStats",
        "namespace": "ml._types"
      },
      "properties": [
        {
          "name": "bucket_count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "exponential_average_search_time_per_hour_ms",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "job_id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "search_count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "total_search_time_ms",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "average_search_time_per_bucket_ms",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "number",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "DataframeAnalysis",
        "namespace": "ml._types"
      },
      "properties": [
        {
          "description": "Advanced configuration option. Machine learning uses loss guided tree growing, which means that the decision trees grow where the regularized loss decreases most quickly. This parameter affects loss calculations by acting as a multiplier of the tree depth. Higher alpha values result in shallower trees and faster training times. By default, this value is calculated during hyperparameter optimization. It must be greater than or equal to zero.",
          "name": "alpha",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Defines which field of the document is to be predicted. It must match one of the fields in the index being used to train. If this field is missing from a document, then that document will not be used for training, but a prediction with the trained model will be generated for it. It is also known as continuous target variable.\nFor classification analysis, the data type of the field must be numeric (`integer`, `short`, `long`, `byte`), categorical (`ip` or `keyword`), or `boolean`. There must be no more than 30 different values in this field.\nFor regression analysis, the data type of the field must be numeric.",
          "name": "dependent_variable",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Advanced configuration option. Controls the fraction of data that is used to compute the derivatives of the loss function for tree training. A small value results in the use of a small fraction of the data. If this value is set to be less than 1, accuracy typically improves. However, too small a value may result in poor convergence for the ensemble and so require more trees. By default, this value is calculated during hyperparameter optimization. It must be greater than zero and less than or equal to 1.",
          "name": "downsample_factor",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Advanced configuration option. Specifies whether the training process should finish if it is not finding any better performing models. If disabled, the training process can take significantly longer and the chance of finding a better performing model is unremarkable.",
          "name": "early_stopping_enabled",
          "required": false,
          "serverDefault": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Advanced configuration option. The shrinkage applied to the weights. Smaller values result in larger forests which have a better generalization error. However, larger forests cause slower training. By default, this value is calculated during hyperparameter optimization. It must be a value between 0.001 and 1.",
          "name": "eta",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Advanced configuration option. Specifies the rate at which `eta` increases for each new tree that is added to the forest. For example, a rate of 1.05 increases `eta` by 5% for each extra tree. By default, this value is calculated during hyperparameter optimization. It must be between 0.5 and 2.",
          "name": "eta_growth_rate_per_tree",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Advanced configuration option. Defines the fraction of features that will be used when selecting a random bag for each candidate split. By default, this value is calculated during hyperparameter optimization.",
          "name": "feature_bag_fraction",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Advanced configuration option. A collection of feature preprocessors that modify one or more included fields. The analysis uses the resulting one or more features instead of the original document field. However, these features are ephemeral; they are not stored in the destination index. Multiple `feature_processors` entries can refer to the same document fields. Automatic categorical feature encoding still occurs for the fields that are unprocessed by a custom processor or that have categorical values. Use this property only if you want to override the automatic feature encoding of the specified fields.",
          "name": "feature_processors",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "DataframeAnalysisFeatureProcessor",
                "namespace": "ml._types"
              }
            }
          }
        },
        {
          "description": "Advanced configuration option. Regularization parameter to prevent overfitting on the training data set. Multiplies a linear penalty associated with the size of individual trees in the forest. A high gamma value causes training to prefer small trees. A small gamma value results in larger individual trees and slower training. By default, this value is calculated during hyperparameter optimization. It must be a nonnegative value.",
          "name": "gamma",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Advanced configuration option. Regularization parameter to prevent overfitting on the training data set. Multiplies an L2 regularization term which applies to leaf weights of the individual trees in the forest. A high lambda value causes training to favor small leaf weights. This behavior makes the prediction function smoother at the expense of potentially not being able to capture relevant relationships between the features and the dependent variable. A small lambda value results in large individual trees and slower training. By default, this value is calculated during hyperparameter optimization. It must be a nonnegative value.",
          "name": "lambda",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Advanced configuration option. A multiplier responsible for determining the maximum number of hyperparameter optimization steps in the Bayesian optimization procedure. The maximum number of steps is determined based on the number of undefined hyperparameters times the maximum optimization rounds per hyperparameter. By default, this value is calculated during hyperparameter optimization.",
          "name": "max_optimization_rounds_per_hyperparameter",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "aliases": [
            "maximum_number_trees"
          ],
          "description": "Advanced configuration option. Defines the maximum number of decision trees in the forest. The maximum value is 2000. By default, this value is calculated during hyperparameter optimization.",
          "name": "max_trees",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Advanced configuration option. Specifies the maximum number of feature importance values per document to return. By default, no feature importance calculation occurs.",
          "name": "num_top_feature_importance_values",
          "required": false,
          "serverDefault": 0,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Defines the name of the prediction field in the results. Defaults to `<dependent_variable>_prediction`.",
          "name": "prediction_field_name",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Defines the seed for the random generator that is used to pick training data. By default, it is randomly generated. Set it to a specific value to use the same training data each time you start a job (assuming other related parameters such as `source` and `analyzed_fields` are the same).",
          "name": "randomize_seed",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Advanced configuration option. Machine learning uses loss guided tree growing, which means that the decision trees grow where the regularized loss decreases most quickly. This soft limit combines with the `soft_tree_depth_tolerance` to penalize trees that exceed the specified depth; the regularized loss increases quickly beyond this depth. By default, this value is calculated during hyperparameter optimization. It must be greater than or equal to 0.",
          "name": "soft_tree_depth_limit",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Advanced configuration option. This option controls how quickly the regularized loss increases when the tree depth exceeds `soft_tree_depth_limit`. By default, this value is calculated during hyperparameter optimization. It must be greater than or equal to 0.01.",
          "name": "soft_tree_depth_tolerance",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Defines what percentage of the eligible documents that will be used for training. Documents that are ignored by the analysis (for example those that contain arrays with more than one value) won’t be included in the calculation for used percentage.",
          "name": "training_percent",
          "required": false,
          "serverDefault": 100,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Percentage",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "type_alias",
      "name": {
        "name": "DataframeAnalysisAnalyzedFields",
        "namespace": "ml._types"
      },
      "type": {
        "items": [
          {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "DataframeAnalysisAnalyzedFieldsIncludeExclude",
              "namespace": "ml._types"
            }
          }
        ],
        "kind": "union_of"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "DataframeAnalysisAnalyzedFieldsIncludeExclude",
        "namespace": "ml._types"
      },
      "properties": [
        {
          "description": "An array of strings that defines the fields that will be excluded from the analysis. You do not need to add fields with unsupported data types to excludes, these fields are excluded from the analysis automatically.",
          "name": "includes",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        },
        {
          "description": "An array of strings that defines the fields that will be included in the analysis.",
          "name": "excludes",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "DataframeAnalysis",
          "namespace": "ml._types"
        }
      },
      "kind": "interface",
      "name": {
        "name": "DataframeAnalysisClassification",
        "namespace": "ml._types"
      },
      "properties": [
        {
          "name": "class_assignment_objective",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Defines the number of categories for which the predicted probabilities are reported. It must be non-negative or -1. If it is -1 or greater than the total number of categories, probabilities are reported for all categories; if you have a large number of categories, there could be a significant effect on the size of your destination index. NOTE: To use the AUC ROC evaluation method, `num_top_classes` must be set to -1 or a value greater than or equal to the total number of categories.",
          "name": "num_top_classes",
          "required": false,
          "serverDefault": 2,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "DataframeAnalysisContainer",
        "namespace": "ml._types"
      },
      "properties": [
        {
          "description": "The configuration information necessary to perform classification.",
          "docUrl": "https://www.elastic.co/guide/en/machine-learning/current/dfa-classification.html",
          "name": "classification",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DataframeAnalysisClassification",
              "namespace": "ml._types"
            }
          }
        },
        {
          "description": "The configuration information necessary to perform outlier detection. NOTE: Advanced parameters are for fine-tuning classification analysis. They are set automatically by hyperparameter optimization to give the minimum validation error. It is highly recommended to use the default values unless you fully understand the function of these parameters.",
          "docUrl": "https://www.elastic.co/guide/en/machine-learning/current/dfa-classification.html",
          "name": "outlier_detection",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DataframeAnalysisOutlierDetection",
              "namespace": "ml._types"
            }
          }
        },
        {
          "description": "The configuration information necessary to perform regression. NOTE: Advanced parameters are for fine-tuning regression analysis. They are set automatically by hyperparameter optimization to give the minimum validation error. It is highly recommended to use the default values unless you fully understand the function of these parameters.",
          "docUrl": "https://www.elastic.co/guide/en/machine-learning/current/dfa-regression.html",
          "name": "regression",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DataframeAnalysisRegression",
              "namespace": "ml._types"
            }
          }
        }
      ],
      "variants": {
        "kind": "container"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "DataframeAnalysisFeatureProcessor",
        "namespace": "ml._types"
      },
      "properties": [
        {
          "description": "The configuration information necessary to perform frequency encoding.",
          "name": "frequency_encoding",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DataframeAnalysisFeatureProcessorFrequencyEncoding",
              "namespace": "ml._types"
            }
          }
        },
        {
          "description": "The configuration information necessary to perform multi encoding. It allows multiple processors to be changed together. This way the output of a processor can then be passed to another as an input.",
          "name": "multi_encoding",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DataframeAnalysisFeatureProcessorMultiEncoding",
              "namespace": "ml._types"
            }
          }
        },
        {
          "description": "The configuration information necessary to perform n-gram encoding. Features created by this encoder have the following name format: <feature_prefix>.<ngram><string position>. For example, if the feature_prefix is f, the feature name for the second unigram in a string is f.11.",
          "name": "n_gram_encoding",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DataframeAnalysisFeatureProcessorNGramEncoding",
              "namespace": "ml._types"
            }
          }
        },
        {
          "description": "The configuration information necessary to perform one hot encoding.",
          "name": "one_hot_encoding",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DataframeAnalysisFeatureProcessorOneHotEncoding",
              "namespace": "ml._types"
            }
          }
        },
        {
          "description": "The configuration information necessary to perform target mean encoding.",
          "name": "target_mean_encoding",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DataframeAnalysisFeatureProcessorTargetMeanEncoding",
              "namespace": "ml._types"
            }
          }
        }
      ],
      "variants": {
        "kind": "container"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "DataframeAnalysisFeatureProcessorFrequencyEncoding",
        "namespace": "ml._types"
      },
      "properties": [
        {
          "description": "The resulting feature name.",
          "name": "feature_name",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "field",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "The resulting frequency map for the field value. If the field value is missing from the frequency_map, the resulting value is 0.",
          "name": "frequency_map",
          "required": true,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "double",
                "namespace": "_types"
              }
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "DataframeAnalysisFeatureProcessorMultiEncoding",
        "namespace": "ml._types"
      },
      "properties": [
        {
          "description": "The ordered array of custom processors to execute. Must be more than 1.",
          "name": "processors",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "integer",
                "namespace": "_types"
              }
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "DataframeAnalysisFeatureProcessorNGramEncoding",
        "namespace": "ml._types"
      },
      "properties": [
        {
          "description": "The feature name prefix. Defaults to ngram_<start>_<length>.",
          "name": "feature_prefix",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "The name of the text field to encode.",
          "name": "field",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Specifies the length of the n-gram substring. Defaults to 50. Must be greater than 0.",
          "name": "length",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Specifies which n-grams to gather. It’s an array of integer values where the minimum value is 1, and a maximum value is 5.",
          "name": "n_grams",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "integer",
                "namespace": "_types"
              }
            }
          }
        },
        {
          "description": "Specifies the zero-indexed start of the n-gram substring. Negative values are allowed for encoding n-grams of string suffixes. Defaults to 0.",
          "name": "start",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "custom",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "DataframeAnalysisFeatureProcessorOneHotEncoding",
        "namespace": "ml._types"
      },
      "properties": [
        {
          "description": "The name of the field to encode.",
          "name": "field",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "The one hot map mapping the field value with the column name.",
          "name": "hot_map",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "DataframeAnalysisFeatureProcessorTargetMeanEncoding",
        "namespace": "ml._types"
      },
      "properties": [
        {
          "description": "The default value if field value is not found in the target_map.",
          "name": "default_value",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "The resulting feature name.",
          "name": "feature_name",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "The name of the field to encode.",
          "name": "field",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "The field value to target mean transition map.",
          "name": "target_map",
          "required": true,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "user_defined_value"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "DataframeAnalysisOutlierDetection",
        "namespace": "ml._types"
      },
      "properties": [
        {
          "description": "Specifies whether the feature influence calculation is enabled.",
          "name": "compute_feature_influence",
          "required": false,
          "serverDefault": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "The minimum outlier score that a document needs to have in order to calculate its feature influence score. Value range: 0-1.",
          "name": "feature_influence_threshold",
          "required": false,
          "serverDefault": 0.1,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "The method that outlier detection uses. Available methods are `lof`, `ldof`, `distance_kth_nn`, `distance_knn`, and `ensemble`. The default value is ensemble, which means that outlier detection uses an ensemble of different methods and normalises and combines their individual outlier scores to obtain the overall outlier score.",
          "name": "method",
          "required": false,
          "serverDefault": "ensemble",
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Defines the value for how many nearest neighbors each method of outlier detection uses to calculate its outlier score. When the value is not set, different values are used for different ensemble members. This default behavior helps improve the diversity in the ensemble; only override it if you are confident that the value you choose is appropriate for the data set.",
          "name": "n_neighbors",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "The proportion of the data set that is assumed to be outlying prior to outlier detection. For example, 0.05 means it is assumed that 5% of values are real outliers and 95% are inliers.",
          "name": "outlier_fraction",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "If true, the following operation is performed on the columns before computing outlier scores: `(x_i - mean(x_i)) / sd(x_i)`.",
          "name": "standardization_enabled",
          "required": false,
          "serverDefault": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "DataframeAnalysis",
          "namespace": "ml._types"
        }
      },
      "kind": "interface",
      "name": {
        "name": "DataframeAnalysisRegression",
        "namespace": "ml._types"
      },
      "properties": [
        {
          "description": "The loss function used during regression. Available options are `mse` (mean squared error), `msle` (mean squared logarithmic error), `huber` (Pseudo-Huber loss).",
          "name": "loss_function",
          "required": false,
          "serverDefault": "mse",
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "A positive number that is used as a parameter to the `loss_function`.",
          "name": "loss_function_parameter",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "DataframeAnalytics",
        "namespace": "ml._types"
      },
      "properties": [
        {
          "description": "An object containing information about the analysis job.",
          "name": "analysis_stats",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DataframeAnalyticsStatsContainer",
              "namespace": "ml._types"
            }
          }
        },
        {
          "description": "For running jobs only, contains messages relating to the selection of a node to run the job.",
          "name": "assignment_explanation",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "An object that provides counts for the quantity of documents skipped, used in training, or available for testing.",
          "name": "data_counts",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DataframeAnalyticsStatsDataCounts",
              "namespace": "ml._types"
            }
          }
        },
        {
          "description": "The unique identifier of the data frame analytics job.",
          "name": "id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "An object describing memory usage of the analytics. It is present only after the job is started and memory usage is reported.",
          "name": "memory_usage",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DataframeAnalyticsStatsMemoryUsage",
              "namespace": "ml._types"
            }
          }
        },
        {
          "description": "Contains properties for the node that runs the job. This information is available only for running jobs.",
          "name": "node",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "NodeAttributes",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "The progress report of the data frame analytics job by phase.",
          "name": "progress",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "DataframeAnalyticsStatsProgress",
                "namespace": "ml._types"
              }
            }
          }
        },
        {
          "description": "The status of the data frame analytics job, which can be one of the following values: failed, started, starting, stopping, stopped.",
          "name": "state",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DataframeState",
              "namespace": "ml._types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "DataframeAnalyticsDestination",
        "namespace": "ml._types"
      },
      "properties": [
        {
          "description": "Defines the destination index to store the results of the data frame analytics job.",
          "name": "index",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndexName",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Defines the name of the field in which to store the results of the analysis. Defaults to `ml`.",
          "name": "results_field",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "DataframeAnalyticsFieldSelection",
        "namespace": "ml._types"
      },
      "properties": [
        {
          "description": "Whether the field is selected to be included in the analysis.",
          "name": "is_included",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Whether the field is required.",
          "name": "is_required",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "The feature type of this field for the analysis. May be categorical or numerical.",
          "name": "feature_type",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "The mapping types of the field.",
          "name": "mapping_types",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        },
        {
          "description": "The field name.",
          "name": "name",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "The reason a field is not selected to be included in the analysis.",
          "name": "reason",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "DataframeAnalyticsMemoryEstimation",
        "namespace": "ml._types"
      },
      "properties": [
        {
          "description": "Estimated memory usage under the assumption that overflowing to disk is allowed during data frame analytics. expected_memory_with_disk is usually smaller than expected_memory_without_disk as using disk allows to limit the main memory needed to perform data frame analytics.",
          "name": "expected_memory_with_disk",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Estimated memory usage under the assumption that the whole data frame analytics should happen in memory (i.e. without overflowing to disk).",
          "name": "expected_memory_without_disk",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "DataframeAnalyticsSource",
        "namespace": "ml._types"
      },
      "properties": [
        {
          "description": "Index or indices on which to perform the analysis. It can be a single index or index pattern as well as an array of indices or patterns. NOTE: If your source indices contain documents with the same IDs, only the document that is indexed last appears in the destination index.",
          "name": "index",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Indices",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "The Elasticsearch query domain-specific language (DSL). This value corresponds to the query object in an Elasticsearch search POST body. All the options that are supported by Elasticsearch can be used, as this object is passed verbatim to Elasticsearch. By default, this property has the following value: {\"match_all\": {}}.",
          "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl.html",
          "name": "query",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "QueryContainer",
              "namespace": "_types.query_dsl"
            }
          }
        },
        {
          "description": "Definitions of runtime fields that will become part of the mapping of the destination index.",
          "name": "runtime_mappings",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "RuntimeFields",
              "namespace": "_types.mapping"
            }
          }
        },
        {
          "description": "Specify `includes` and/or `excludes patterns to select which fields will be present in the destination. Fields that are excluded cannot be included in the analysis.",
          "name": "_source",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DataframeAnalysisAnalyzedFields",
              "namespace": "ml._types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "DataframeAnalyticsStatsContainer",
        "namespace": "ml._types"
      },
      "properties": [
        {
          "description": "An object containing information about the classification analysis job.",
          "name": "classification_stats",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DataframeAnalyticsStatsHyperparameters",
              "namespace": "ml._types"
            }
          }
        },
        {
          "description": "An object containing information about the outlier detection job.",
          "name": "outlier_detection_stats",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DataframeAnalyticsStatsOutlierDetection",
              "namespace": "ml._types"
            }
          }
        },
        {
          "description": "An object containing information about the regression analysis.",
          "name": "regression_stats",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DataframeAnalyticsStatsHyperparameters",
              "namespace": "ml._types"
            }
          }
        }
      ],
      "variants": {
        "kind": "container"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "DataframeAnalyticsStatsDataCounts",
        "namespace": "ml._types"
      },
      "properties": [
        {
          "description": "The number of documents that are skipped during the analysis because they contained values that are not supported by the analysis. For example, outlier detection does not support missing fields so it skips documents with missing fields. Likewise, all types of analysis skip documents that contain arrays with more than one element.",
          "name": "skipped_docs_count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "The number of documents that are not used for training the model and can be used for testing.",
          "name": "test_docs_count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "The number of documents that are used for training the model.",
          "name": "training_docs_count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "DataframeAnalyticsStatsHyperparameters",
        "namespace": "ml._types"
      },
      "properties": [
        {
          "name": "hyperparameters",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Hyperparameters",
              "namespace": "ml._types"
            }
          }
        },
        {
          "description": "The number of iterations on the analysis.",
          "name": "iteration",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "timestamp",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DateString",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "timing_stats",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "TimingStats",
              "namespace": "ml._types"
            }
          }
        },
        {
          "name": "validation_loss",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ValidationLoss",
              "namespace": "ml._types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "DataframeAnalyticsStatsMemoryUsage",
        "namespace": "ml._types"
      },
      "properties": [
        {
          "description": "This value is present when the status is hard_limit and it is a new estimate of how much memory the job needs.",
          "name": "memory_reestimate_bytes",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "The number of bytes used at the highest peak of memory usage.",
          "name": "peak_usage_bytes",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "The memory usage status.",
          "name": "status",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "The timestamp when memory usage was calculated.",
          "name": "timestamp",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DateString",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "DataframeAnalyticsStatsOutlierDetection",
        "namespace": "ml._types"
      },
      "properties": [
        {
          "name": "parameters",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "OutlierDetectionParameters",
              "namespace": "ml._types"
            }
          }
        },
        {
          "name": "timestamp",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DateString",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "timing_stats",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "TimingStats",
              "namespace": "ml._types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "DataframeAnalyticsStatsProgress",
        "namespace": "ml._types"
      },
      "properties": [
        {
          "description": "Defines the phase of the data frame analytics job.",
          "name": "phase",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "The progress that the data frame analytics job has made expressed in percentage.",
          "name": "progress_percent",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "DataframeAnalyticsSummary",
        "namespace": "ml._types"
      },
      "properties": [
        {
          "name": "id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "source",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DataframeAnalyticsSource",
              "namespace": "ml._types"
            }
          }
        },
        {
          "name": "dest",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DataframeAnalyticsDestination",
              "namespace": "ml._types"
            }
          }
        },
        {
          "name": "analysis",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DataframeAnalysisContainer",
              "namespace": "ml._types"
            }
          }
        },
        {
          "name": "description",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "model_memory_limit",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "max_num_threads",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "analyzed_fields",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DataframeAnalysisAnalyzedFields",
              "namespace": "ml._types"
            }
          }
        },
        {
          "name": "allow_lazy_start",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "create_time",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "version",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "VersionString",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "DataframeEvaluationClassification",
        "namespace": "ml._types"
      },
      "properties": [
        {
          "description": "The field of the index which contains the ground truth. The data type of this field can be boolean or integer. If the data type is integer, the value has to be either 0 (false) or 1 (true).",
          "name": "actual_field",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "The field in the index which contains the predicted value, in other words the results of the classification analysis.",
          "name": "predicted_field",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "The field of the index which is an array of documents of the form { \"class_name\": XXX, \"class_probability\": YYY }. This field must be defined as nested in the mappings.",
          "name": "top_classes_field",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Specifies the metrics that are used for the evaluation.",
          "name": "metrics",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DataframeEvaluationClassificationMetrics",
              "namespace": "ml._types"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "DataframeEvaluationMetrics",
          "namespace": "ml._types"
        }
      },
      "kind": "interface",
      "name": {
        "name": "DataframeEvaluationClassificationMetrics",
        "namespace": "ml._types"
      },
      "properties": [
        {
          "description": "Accuracy of predictions (per-class and overall).",
          "name": "accuracy",
          "required": false,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "user_defined_value"
            }
          }
        },
        {
          "description": "Multiclass confusion matrix.",
          "name": "multiclass_confusion_matrix",
          "required": false,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "user_defined_value"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "DataframeEvaluationClassificationMetricsAucRoc",
        "namespace": "ml._types"
      },
      "properties": [
        {
          "description": "Name of the only class that is treated as positive during AUC ROC calculation. Other classes are treated as negative (\"one-vs-all\" strategy). All the evaluated documents must have class_name in the list of their top classes.",
          "name": "class_name",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Whether or not the curve should be returned in addition to the score. Default value is false.",
          "name": "include_curve",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "DataframeEvaluationContainer",
        "namespace": "ml._types"
      },
      "properties": [
        {
          "description": "Classification evaluation evaluates the results of a classification analysis which outputs a prediction that identifies to which of the classes each document belongs.",
          "name": "classification",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DataframeEvaluationClassification",
              "namespace": "ml._types"
            }
          }
        },
        {
          "description": "Outlier detection evaluates the results of an outlier detection analysis which outputs the probability that each document is an outlier.",
          "name": "outlier_detection",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DataframeEvaluationOutlierDetection",
              "namespace": "ml._types"
            }
          }
        },
        {
          "description": "Regression evaluation evaluates the results of a regression analysis which outputs a prediction of values.",
          "name": "regression",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DataframeEvaluationRegression",
              "namespace": "ml._types"
            }
          }
        }
      ],
      "variants": {
        "kind": "container"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "DataframeEvaluationMetrics",
        "namespace": "ml._types"
      },
      "properties": [
        {
          "description": "The AUC ROC (area under the curve of the receiver operating characteristic) score and optionally the curve. It is calculated for a specific class (provided as \"class_name\") treated as positive.",
          "name": "auc_roc",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DataframeEvaluationClassificationMetricsAucRoc",
              "namespace": "ml._types"
            }
          }
        },
        {
          "description": "Precision of predictions (per-class and average).",
          "name": "precision",
          "required": false,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "user_defined_value"
            }
          }
        },
        {
          "description": "Recall of predictions (per-class and average).",
          "name": "recall",
          "required": false,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "user_defined_value"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "DataframeEvaluationOutlierDetection",
        "namespace": "ml._types"
      },
      "properties": [
        {
          "description": "The field of the index which contains the ground truth. The data type of this field can be boolean or integer. If the data type is integer, the value has to be either 0 (false) or 1 (true).",
          "name": "actual_field",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "The field of the index that defines the probability of whether the item belongs to the class in question or not. It’s the field that contains the results of the analysis.",
          "name": "predicted_probability_field",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Specifies the metrics that are used for the evaluation.",
          "name": "metrics",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DataframeEvaluationOutlierDetectionMetrics",
              "namespace": "ml._types"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "DataframeEvaluationMetrics",
          "namespace": "ml._types"
        }
      },
      "kind": "interface",
      "name": {
        "name": "DataframeEvaluationOutlierDetectionMetrics",
        "namespace": "ml._types"
      },
      "properties": [
        {
          "description": "Accuracy of predictions (per-class and overall).",
          "name": "confusion_matrix",
          "required": false,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "user_defined_value"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "DataframeEvaluationRegression",
        "namespace": "ml._types"
      },
      "properties": [
        {
          "description": "The field of the index which contains the ground truth. The data type of this field must be numerical.",
          "name": "actual_field",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "The field in the index that contains the predicted value, in other words the results of the regression analysis.",
          "name": "predicted_field",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Specifies the metrics that are used for the evaluation. For more information on mse, msle, and huber, consult the Jupyter notebook on regression loss functions.",
          "name": "metrics",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DataframeEvaluationRegressionMetrics",
              "namespace": "ml._types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "DataframeEvaluationRegressionMetrics",
        "namespace": "ml._types"
      },
      "properties": [
        {
          "description": "Average squared difference between the predicted values and the actual (ground truth) value. For more information, read this wiki article.",
          "docUrl": "https://en.wikipedia.org/wiki/Mean_squared_error",
          "name": "mse",
          "required": false,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "user_defined_value"
            }
          }
        },
        {
          "description": "Average squared difference between the logarithm of the predicted values and the logarithm of the actual (ground truth) value.",
          "name": "msle",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DataframeEvaluationRegressionMetricsMsle",
              "namespace": "ml._types"
            }
          }
        },
        {
          "description": "Pseudo Huber loss function.",
          "docUrl": "https://en.wikipedia.org/wiki/Huber_loss#Pseudo-Huber_loss_function",
          "name": "huber",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DataframeEvaluationRegressionMetricsHuber",
              "namespace": "ml._types"
            }
          }
        },
        {
          "description": "Proportion of the variance in the dependent variable that is predictable from the independent variables.",
          "docUrl": "https://en.wikipedia.org/wiki/Coefficient_of_determination",
          "name": "r_squared",
          "required": false,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "user_defined_value"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "DataframeEvaluationRegressionMetricsHuber",
        "namespace": "ml._types"
      },
      "properties": [
        {
          "description": "Approximates 1/2 (prediction - actual)2 for values much less than delta and approximates a straight line with slope delta for values much larger than delta. Defaults to 1. Delta needs to be greater than 0.",
          "name": "delta",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "DataframeEvaluationRegressionMetricsMsle",
        "namespace": "ml._types"
      },
      "properties": [
        {
          "description": "Defines the transition point at which you switch from minimizing quadratic error to minimizing quadratic log error. Defaults to 1.",
          "name": "offset",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "started"
        },
        {
          "name": "stopped"
        },
        {
          "name": "starting"
        },
        {
          "name": "stopping"
        },
        {
          "name": "failed"
        }
      ],
      "name": {
        "name": "DataframeState",
        "namespace": "ml._types"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "DelayedDataCheckConfig",
        "namespace": "ml._types"
      },
      "properties": [
        {
          "description": "The window of time that is searched for late data. This window of time ends with the latest finalized bucket. It defaults to null, which causes an appropriate check_window to be calculated when the real-time datafeed runs. In particular, the default `check_window` span calculation is based on the maximum of `2h` or `8 * bucket_span`.",
          "name": "check_window",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Specifies whether the datafeed periodically checks for delayed data.",
          "name": "enabled",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "DetectionRule",
        "namespace": "ml._types"
      },
      "properties": [
        {
          "description": "The set of actions to be triggered when the rule applies. If more than one action is specified the effects of all actions are combined.",
          "name": "actions",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "RuleAction",
                "namespace": "ml._types"
              }
            }
          }
        },
        {
          "description": "An array of numeric conditions when the rule applies. A rule must either have a non-empty scope or at least one condition. Multiple conditions are combined together with a logical AND.",
          "name": "conditions",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "RuleCondition",
                "namespace": "ml._types"
              }
            }
          }
        },
        {
          "description": "A scope of series where the rule applies. A rule must either have a non-empty scope or at least one condition. By default, the scope includes all series. Scoping is allowed for any of the fields that are also specified in `by_field_name`, `over_field_name`, or `partition_field_name`.",
          "name": "scope",
          "required": false,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "Field",
                "namespace": "_types"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "FilterRef",
                "namespace": "ml._types"
              }
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "Detector",
        "namespace": "ml._types"
      },
      "properties": [
        {
          "description": "The field used to split the data. In particular, this property is used for analyzing the splits with respect to their own history. It is used for finding unusual values in the context of the split.",
          "name": "by_field_name",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Custom rules enable you to customize the way detectors operate. For example, a rule may dictate conditions under which results should be skipped. Kibana refers to custom rules as job rules.",
          "name": "custom_rules",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "DetectionRule",
                "namespace": "ml._types"
              }
            }
          }
        },
        {
          "description": "A description of the detector.",
          "name": "detector_description",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "A unique identifier for the detector. This identifier is based on the order of the detectors in the `analysis_config`, starting at zero. If you specify a value for this property, it is ignored.",
          "name": "detector_index",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "If set, frequent entities are excluded from influencing the anomaly results. Entities can be considered frequent over time or frequent in a population. If you are working with both over and by fields, you can set `exclude_frequent` to `all` for both fields, or to `by` or `over` for those specific fields.",
          "name": "exclude_frequent",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ExcludeFrequent",
              "namespace": "ml._types"
            }
          }
        },
        {
          "description": "The field that the detector uses in the function. If you use an event rate function such as count or rare, do not specify this field. The `field_name` cannot contain double quotes or backslashes.",
          "name": "field_name",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "The analysis function that is used. For example, `count`, `rare`, `mean`, `min`, `max`, or `sum`.",
          "name": "function",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "The field used to split the data. In particular, this property is used for analyzing the splits with respect to the history of all splits. It is used for finding unusual values in the population of all splits.",
          "name": "over_field_name",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "The field used to segment the analysis. When you use this property, you have completely independent baselines for each value of this field.",
          "name": "partition_field_name",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Defines whether a new series is used as the null series when there is no value for the by or partition fields.",
          "name": "use_null",
          "required": false,
          "serverDefault": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "DiscoveryNode",
        "namespace": "ml._types"
      },
      "properties": [
        {
          "name": "attributes",
          "required": true,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        },
        {
          "name": "ephemeral_id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "name",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "transport_address",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "TransportAddress",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "all"
        },
        {
          "name": "none"
        },
        {
          "name": "by"
        },
        {
          "name": "over"
        }
      ],
      "name": {
        "name": "ExcludeFrequent",
        "namespace": "ml._types"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "Filter",
        "namespace": "ml._types"
      },
      "properties": [
        {
          "name": "description",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "filter_id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "items",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "FilterRef",
        "namespace": "ml._types"
      },
      "properties": [
        {
          "description": "The identifier for the filter.",
          "name": "filter_id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "If set to `include`, the rule applies for values in the filter. If set to `exclude`, the rule applies for values not in the filter.",
          "name": "filter_type",
          "required": false,
          "serverDefault": "include",
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "FilterType",
              "namespace": "ml._types"
            }
          }
        }
      ]
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "include"
        },
        {
          "name": "exclude"
        }
      ],
      "name": {
        "name": "FilterType",
        "namespace": "ml._types"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "Hyperparameter",
        "namespace": "ml._types"
      },
      "properties": [
        {
          "description": "A positive number showing how much the parameter influences the variation of the loss function. For hyperparameters with values that are not specified by the user but tuned during hyperparameter optimization.",
          "docUrl": "https://www.elastic.co/guide/en/machine-learning/7.12/dfa-regression.html#dfa-regression-lossfunction",
          "name": "absolute_importance",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Name of the hyperparameter.",
          "name": "name",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "A number between 0 and 1 showing the proportion of influence on the variation of the loss function among all tuned hyperparameters. For hyperparameters with values that are not specified by the user but tuned during hyperparameter optimization.",
          "name": "relative_importance",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Indicates if the hyperparameter is specified by the user (true) or optimized (false).",
          "name": "supplied",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "The value of the hyperparameter, either optimized or specified by the user.",
          "name": "value",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "Hyperparameters",
        "namespace": "ml._types"
      },
      "properties": [
        {
          "name": "alpha",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "lambda",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "gamma",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "eta",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "eta_growth_rate_per_tree",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "feature_bag_fraction",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "downsample_factor",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "max_attempts_to_add_tree",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "max_optimization_rounds_per_hyperparameter",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "max_trees",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "num_folds",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "num_splits_per_feature",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "soft_tree_depth_limit",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "soft_tree_depth_tolerance",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "Influence",
        "namespace": "ml._types"
      },
      "properties": [
        {
          "name": "influencer_field_name",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "influencer_field_values",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "Job",
        "namespace": "ml._types"
      },
      "properties": [
        {
          "name": "allow_lazy_open",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "analysis_config",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "AnalysisConfig",
              "namespace": "ml._types"
            }
          }
        },
        {
          "name": "analysis_limits",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "AnalysisLimits",
              "namespace": "ml._types"
            }
          }
        },
        {
          "name": "background_persist_interval",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "blocked",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "JobBlocked",
              "namespace": "ml._types"
            }
          }
        },
        {
          "name": "create_time",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "custom_settings",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "CustomSettings",
              "namespace": "ml._types"
            }
          }
        },
        {
          "name": "daily_model_snapshot_retention_after_days",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "data_description",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DataDescription",
              "namespace": "ml._types"
            }
          }
        },
        {
          "name": "datafeed_config",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Datafeed",
              "namespace": "ml._types"
            }
          }
        },
        {
          "name": "deleting",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "description",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "finished_time",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "groups",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        },
        {
          "name": "job_id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "job_type",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "job_version",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "VersionString",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "model_plot_config",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ModelPlotConfig",
              "namespace": "ml._types"
            }
          }
        },
        {
          "name": "model_snapshot_id",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "model_snapshot_retention_days",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "renormalization_window_days",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "results_index_name",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndexName",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "results_retention_days",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "JobBlocked",
        "namespace": "ml._types"
      },
      "properties": [
        {
          "name": "reason",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "JobBlockedReason",
              "namespace": "ml._types"
            }
          }
        },
        {
          "name": "task_id",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "TaskId",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "delete"
        },
        {
          "name": "reset"
        },
        {
          "name": "revert"
        }
      ],
      "name": {
        "name": "JobBlockedReason",
        "namespace": "ml._types"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "JobConfig",
        "namespace": "ml._types"
      },
      "properties": [
        {
          "name": "allow_lazy_open",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "analysis_config",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "AnalysisConfig",
              "namespace": "ml._types"
            }
          }
        },
        {
          "name": "analysis_limits",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "AnalysisLimits",
              "namespace": "ml._types"
            }
          }
        },
        {
          "name": "background_persist_interval",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "custom_settings",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "CustomSettings",
              "namespace": "ml._types"
            }
          }
        },
        {
          "name": "daily_model_snapshot_retention_after_days",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "data_description",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DataDescription",
              "namespace": "ml._types"
            }
          }
        },
        {
          "name": "datafeed_config",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DatafeedConfig",
              "namespace": "ml._types"
            }
          }
        },
        {
          "name": "description",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "groups",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        },
        {
          "name": "job_id",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "job_type",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "model_plot_config",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ModelPlotConfig",
              "namespace": "ml._types"
            }
          }
        },
        {
          "name": "model_snapshot_retention_days",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "renormalization_window_days",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "results_index_name",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndexName",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "results_retention_days",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "JobForecastStatistics",
        "namespace": "ml._types"
      },
      "properties": [
        {
          "name": "memory_bytes",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "JobStatistics",
              "namespace": "ml._types"
            }
          }
        },
        {
          "name": "processing_time_ms",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "JobStatistics",
              "namespace": "ml._types"
            }
          }
        },
        {
          "name": "records",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "JobStatistics",
              "namespace": "ml._types"
            }
          }
        },
        {
          "name": "status",
          "required": false,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "long",
                "namespace": "_types"
              }
            }
          }
        },
        {
          "name": "total",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "forecasted_jobs",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "closing"
        },
        {
          "name": "closed"
        },
        {
          "name": "opened"
        },
        {
          "name": "failed"
        },
        {
          "name": "opening"
        }
      ],
      "name": {
        "name": "JobState",
        "namespace": "ml._types"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "JobStatistics",
        "namespace": "ml._types"
      },
      "properties": [
        {
          "name": "avg",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "max",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "min",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "total",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "JobStats",
        "namespace": "ml._types"
      },
      "properties": [
        {
          "name": "assignment_explanation",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "data_counts",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DataCounts",
              "namespace": "ml._types"
            }
          }
        },
        {
          "name": "forecasts_stats",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "JobForecastStatistics",
              "namespace": "ml._types"
            }
          }
        },
        {
          "name": "job_id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "model_size_stats",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ModelSizeStats",
              "namespace": "ml._types"
            }
          }
        },
        {
          "name": "node",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DiscoveryNode",
              "namespace": "ml._types"
            }
          }
        },
        {
          "name": "open_time",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DateString",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "state",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "JobState",
              "namespace": "ml._types"
            }
          }
        },
        {
          "name": "timing_stats",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "JobTimingStats",
              "namespace": "ml._types"
            }
          }
        },
        {
          "name": "deleting",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "JobTimingStats",
        "namespace": "ml._types"
      },
      "properties": [
        {
          "name": "average_bucket_processing_time_ms",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "bucket_count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "exponential_average_bucket_processing_time_ms",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "exponential_average_bucket_processing_time_per_hour_ms",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "job_id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "total_bucket_processing_time_ms",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "maximum_bucket_processing_time_ms",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "minimum_bucket_processing_time_ms",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "ok"
        },
        {
          "name": "soft_limit"
        },
        {
          "name": "hard_limit"
        }
      ],
      "name": {
        "name": "MemoryStatus",
        "namespace": "ml._types"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "ModelPlotConfig",
        "namespace": "ml._types"
      },
      "properties": [
        {
          "description": "If true, enables calculation and storage of the model change annotations for each entity that is being analyzed.",
          "name": "annotations_enabled",
          "required": false,
          "serverDefault": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "If true, enables calculation and storage of the model bounds for each entity that is being analyzed.",
          "name": "enabled",
          "required": false,
          "serverDefault": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Limits data collection to this comma separated list of partition or by field values. If terms are not specified or it is an empty string, no filtering is applied. Wildcards are not supported. Only the specified terms can be viewed when using the Single Metric Viewer.",
          "name": "terms",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "ModelSizeStats",
        "namespace": "ml._types"
      },
      "properties": [
        {
          "name": "bucket_allocation_failures_count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "job_id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "log_time",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "memory_status",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "MemoryStatus",
              "namespace": "ml._types"
            }
          }
        },
        {
          "name": "model_bytes",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "model_bytes_exceeded",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "model_bytes_memory_limit",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "peak_model_bytes",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "assignment_memory_basis",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "result_type",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "total_by_field_count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "total_over_field_count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "total_partition_field_count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "categorization_status",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "CategorizationStatus",
              "namespace": "ml._types"
            }
          }
        },
        {
          "name": "categorized_doc_count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "dead_category_count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "failed_category_count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "frequent_category_count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "rare_category_count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "total_category_count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "timestamp",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "ModelSnapshot",
        "namespace": "ml._types"
      },
      "properties": [
        {
          "description": "An optional description of the job.",
          "name": "description",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "A numerical character string that uniquely identifies the job that the snapshot was created for.",
          "name": "job_id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "The timestamp of the latest processed record.",
          "name": "latest_record_time_stamp",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "The timestamp of the latest bucket result.",
          "name": "latest_result_time_stamp",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "The minimum version required to be able to restore the model snapshot.",
          "name": "min_version",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "VersionString",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Summary information describing the model.",
          "name": "model_size_stats",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ModelSizeStats",
              "namespace": "ml._types"
            }
          }
        },
        {
          "description": "If true, this snapshot will not be deleted during automatic cleanup of snapshots older than model_snapshot_retention_days. However, this snapshot will be deleted when the job is deleted. The default value is false.",
          "name": "retain",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "For internal use only.",
          "name": "snapshot_doc_count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "A numerical character string that uniquely identifies the model snapshot.",
          "name": "snapshot_id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "The creation timestamp for the snapshot.",
          "name": "timestamp",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "OutlierDetectionParameters",
        "namespace": "ml._types"
      },
      "properties": [
        {
          "name": "compute_feature_influence",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "feature_influence_threshold",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "method",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "n_neighbors",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "outlier_fraction",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "standardization_enabled",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "OverallBucket",
        "namespace": "ml._types"
      },
      "properties": [
        {
          "description": "The length of the bucket in seconds. Matches the job with the longest bucket_span value.",
          "name": "bucket_span",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "If true, this is an interim result. In other words, the results are calculated based on partial input data.",
          "name": "is_interim",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "An array of objects that contain the max_anomaly_score per job_id.",
          "name": "jobs",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "OverallBucketJob",
                "namespace": "ml._types"
              }
            }
          }
        },
        {
          "description": "The top_n average of the maximum bucket anomaly_score per job.",
          "name": "overall_score",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Internal. This is always set to overall_bucket.",
          "name": "result_type",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "The start time of the bucket for which these results were calculated.",
          "name": "timestamp",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "OverallBucketJob",
        "namespace": "ml._types"
      },
      "properties": [
        {
          "name": "job_id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "max_anomaly_score",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "Page",
        "namespace": "ml._types"
      },
      "properties": [
        {
          "name": "from",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "size",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "PartitionScore",
        "namespace": "ml._types"
      },
      "properties": [
        {
          "name": "initial_record_score",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "partition_field_name",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "partition_field_value",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "probability",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "record_score",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "PerPartitionCategorization",
        "namespace": "ml._types"
      },
      "properties": [
        {
          "description": "To enable this setting, you must also set the `partition_field_name` property to the same value in every detector that uses the keyword `mlcategory`. Otherwise, job creation fails.",
          "name": "enabled",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "This setting can be set to true only if per-partition categorization is enabled. If true, both categorization and subsequent anomaly detection stops for partitions where the categorization status changes to warn. This setting makes it viable to have a job where it is expected that categorization works well for some partitions but not others; you do not pay the cost of bad categorization forever in the partitions where it works badly.",
          "name": "stop_on_warn",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "enum",
      "members": [
        {
          "description": "The result will not be created. This is the default value. Unless you also specify `skip_model_update`, the model will be updated as usual with the corresponding series value.",
          "name": "skip_result"
        },
        {
          "description": "The value for that series will not be used to update the model. Unless you also specify `skip_result`, the results will be created as usual. This action is suitable when certain values are expected to be consistently anomalous and they affect the model in a way that negatively impacts the rest of the results.",
          "name": "skip_model_update"
        }
      ],
      "name": {
        "name": "RuleAction",
        "namespace": "ml._types"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "RuleCondition",
        "namespace": "ml._types"
      },
      "properties": [
        {
          "description": "Specifies the result property to which the condition applies. If your detector uses lat_long, metric, rare, or freq_rare functions, you can only specify conditions that apply to time.",
          "name": "applies_to",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "AppliesTo",
              "namespace": "ml._types"
            }
          }
        },
        {
          "description": "Specifies the condition operator. The available options are greater than, greater than or equals, less than, and less than or equals.",
          "name": "operator",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ConditionOperator",
              "namespace": "ml._types"
            }
          }
        },
        {
          "description": "The value that is compared against the `applies_to` field using the operator.",
          "name": "value",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "TimingStats",
        "namespace": "ml._types"
      },
      "properties": [
        {
          "description": "Runtime of the analysis in milliseconds.",
          "name": "elapsed_time",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Runtime of the latest iteration of the analysis in milliseconds.",
          "name": "iteration_time",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "TotalFeatureImportance",
        "namespace": "ml._types"
      },
      "properties": [
        {
          "description": "The feature for which this importance was calculated.",
          "name": "feature_name",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "A collection of feature importance statistics related to the training data set for this particular feature.",
          "name": "importance",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "TotalFeatureImportanceStatistics",
                "namespace": "ml._types"
              }
            }
          }
        },
        {
          "description": "If the trained model is a classification model, feature importance statistics are gathered per target class value.",
          "name": "classes",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "TotalFeatureImportanceClass",
                "namespace": "ml._types"
              }
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "TotalFeatureImportanceClass",
        "namespace": "ml._types"
      },
      "properties": [
        {
          "description": "The target class value. Could be a string, boolean, or number.",
          "name": "class_name",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "A collection of feature importance statistics related to the training data set for this particular feature.",
          "name": "importance",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "TotalFeatureImportanceStatistics",
                "namespace": "ml._types"
              }
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "TotalFeatureImportanceStatistics",
        "namespace": "ml._types"
      },
      "properties": [
        {
          "description": "The average magnitude of this feature across all the training data. This value is the average of the absolute values of the importance for this feature.",
          "name": "mean_magnitude",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "The maximum importance value across all the training data for this feature.",
          "name": "max",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "The minimum importance value across all the training data for this feature.",
          "name": "min",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "TrainedModelConfig",
        "namespace": "ml._types"
      },
      "properties": [
        {
          "description": "Idetifier for the trained model.",
          "name": "model_id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "A comma delimited string of tags. A trained model can have many tags, or none.",
          "name": "tags",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        },
        {
          "description": "The Elasticsearch version number in which the trained model was created.",
          "name": "version",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "VersionString",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "compressed_definition",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Information on the creator of the trained model.",
          "name": "created_by",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "The time when the trained model was created.",
          "name": "create_time",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Any field map described in the inference configuration takes precedence.",
          "name": "default_field_map",
          "required": false,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        },
        {
          "description": "The free-text description of the trained model.",
          "name": "description",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "The estimated heap usage in bytes to keep the trained model in memory.",
          "name": "estimated_heap_memory_usage_bytes",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "The estimated number of operations to use the trained model.",
          "name": "estimated_operations",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "The default configuration for inference. This can be either a regression or classification configuration. It must match the underlying definition.trained_model's target_type.",
          "name": "inference_config",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "InferenceConfigContainer",
              "namespace": "_types.aggregations"
            }
          }
        },
        {
          "description": "The input field names for the model definition.",
          "name": "input",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "TrainedModelConfigInput",
              "namespace": "ml._types"
            }
          }
        },
        {
          "description": "The license level of the trained model.",
          "name": "license_level",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "An object containing metadata about the trained model. For example, models created by data frame analytics contain analysis_config and input objects.",
          "name": "metadata",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "TrainedModelConfigMetadata",
              "namespace": "ml._types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "TrainedModelConfigInput",
        "namespace": "ml._types"
      },
      "properties": [
        {
          "description": "An array of input field names for the model.",
          "name": "field_names",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "Field",
                "namespace": "_types"
              }
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "TrainedModelConfigMetadata",
        "namespace": "ml._types"
      },
      "properties": [
        {
          "name": "model_aliases",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        },
        {
          "description": "An object that contains the baseline for feature importance values. For regression analysis, it is a single value. For classification analysis, there is a value for each class.",
          "name": "feature_importance_baseline",
          "required": false,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        },
        {
          "description": "List of the available hyperparameters optimized during the fine_parameter_tuning phase as well as specified by the user.",
          "name": "hyperparameters",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "Hyperparameter",
                "namespace": "ml._types"
              }
            }
          }
        },
        {
          "description": "An array of the total feature importance for each feature used from the training data set. This array of objects is returned if data frame analytics trained the model and the request includes total_feature_importance in the include request parameter.",
          "name": "total_feature_importance",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "TotalFeatureImportance",
                "namespace": "ml._types"
              }
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "TrainedModelInferenceStats",
        "namespace": "ml._types"
      },
      "properties": [
        {
          "description": "The number of failures when using the model for inference.",
          "name": "failure_count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "The total number of times the model has been called for inference. This is across all inference contexts, including all pipelines.",
          "name": "inference_count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "The number of times the model was loaded for inference and was not retrieved from the cache. If this number is close to the inference_count, then the cache is not being appropriately used. This can be solved by increasing the cache size or its time-to-live (TTL). See General machine learning settings for the appropriate settings.",
          "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-settings.html#general-ml-settings",
          "name": "cache_miss_count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "The number of inference calls where all the training features for the model were missing.",
          "name": "missing_all_fields_count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "The time when the statistics were last updated.",
          "name": "timestamp",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "TrainedModelStats",
        "namespace": "ml._types"
      },
      "properties": [
        {
          "description": "The unique identifier of the trained model.",
          "name": "model_id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "The number of ingest pipelines that currently refer to the model.",
          "name": "pipeline_count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "A collection of inference stats fields.",
          "name": "inference_stats",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "TrainedModelInferenceStats",
              "namespace": "ml._types"
            }
          }
        },
        {
          "description": "A collection of ingest stats for the model across all nodes. The values are summations of the individual node statistics. The format matches the ingest section in Nodes stats.",
          "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/cluster-nodes-stats.html",
          "name": "ingest",
          "required": false,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "user_defined_value"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "ValidationLoss",
        "namespace": "ml._types"
      },
      "properties": [
        {
          "description": "Validation loss values for every added decision tree during the forest growing procedure.",
          "name": "fold_values",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        },
        {
          "description": "The type of the loss metric. For example, binomial_logistic.",
          "name": "loss_type",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Closes one or more anomaly detection jobs.\nA job can be opened and closed multiple times throughout its lifecycle. A closed job cannot receive data or perform analysis operations, but you can still explore and navigate results.\nWhen you close a job, it runs housekeeping tasks such as pruning the model history, flushing buffers, calculating final results and persisting the model snapshots. Depending upon the size of the job, it could take several minutes to close and the equivalent time to re-open. After it is closed, the job has a minimal overhead on the cluster except for maintaining its meta data. Therefore it is a best practice to close jobs that are no longer required to process data.\nIf you close an anomaly detection job whose datafeed is running, the request first tries to stop the datafeed. This behavior is equivalent to calling stop datafeed API with the same timeout and force parameters as the close job request.\nWhen a datafeed that has a specified end date stops, it automatically closes its associated job.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "ml.close_job"
      },
      "path": [
        {
          "description": "Identifier for the anomaly detection job. It can be a job identifier, a group name, or a wildcard expression. You can close multiple anomaly detection jobs in a single API request by using a group name, a comma-separated list of jobs, or a wildcard expression. You can close all jobs by using `_all` or by specifying `*` as the job identifier.",
          "name": "job_id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "Specifies what to do when the request: contains wildcard expressions and there are no jobs that match; contains the  `_all` string or no identifiers and there are no matches; or contains wildcard expressions and there are only partial matches. By default, it returns an empty jobs array when there are no matches and the subset of results when there are partial matches.\nIf `false`, the request returns a 404 status code when there are no matches or only partial matches.",
          "name": "allow_no_match",
          "required": false,
          "serverDefault": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "deprecation": {
            "description": "Use `allow_no_match` instead.",
            "version": "7.10.0"
          },
          "description": "Whether to ignore if a wildcard expression matches no jobs. (This includes `_all` string or when no jobs have been specified)",
          "name": "allow_no_jobs",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Use to close a failed job, or to forcefully close a job which has not responded to its initial close request; the request returns without performing the associated actions such as flushing buffers and persisting the model snapshots.\nIf you want the job to be in a consistent state after the close job API returns, do not set to `true`. This parameter should be used only in situations where the job has already failed or where you are not interested in results the job might have recently produced or might produce in the future.",
          "name": "force",
          "required": false,
          "serverDefault": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Controls the time to wait until a job has closed.",
          "name": "timeout",
          "required": false,
          "serverDefault": "30m",
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "closed",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "ml.close_job"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Deletes a calendar.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "ml.delete_calendar"
      },
      "path": [
        {
          "description": "The ID of the calendar to delete",
          "name": "calendar_id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": []
    },
    {
      "body": {
        "kind": "properties",
        "properties": []
      },
      "inherits": {
        "type": {
          "name": "AcknowledgedResponseBase",
          "namespace": "_types"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "ml.delete_calendar"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Deletes scheduled events from a calendar.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "ml.delete_calendar_event"
      },
      "path": [
        {
          "description": "The ID of the calendar to modify",
          "name": "calendar_id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "The ID of the event to remove from the calendar",
          "name": "event_id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": []
    },
    {
      "body": {
        "kind": "properties",
        "properties": []
      },
      "inherits": {
        "type": {
          "name": "AcknowledgedResponseBase",
          "namespace": "_types"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "ml.delete_calendar_event"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Deletes anomaly detection jobs from a calendar.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "ml.delete_calendar_job"
      },
      "path": [
        {
          "description": "The ID of the calendar to modify",
          "name": "calendar_id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "The ID of the job to remove from the calendar",
          "name": "job_id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": []
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "calendar_id",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Id",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "description",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "job_ids",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Ids",
                "namespace": "_types"
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "ml.delete_calendar_job"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Deletes an existing data frame analytics job.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "ml.delete_data_frame_analytics"
      },
      "path": [
        {
          "description": "Identifier for the data frame analytics job.",
          "name": "id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "If `true`, it deletes a job that is not stopped; this method is quicker than stopping and deleting the job.",
          "name": "force",
          "required": false,
          "serverDefault": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "The time to wait for the job to be deleted.",
          "name": "timeout",
          "required": false,
          "serverDefault": "1m",
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": []
      },
      "inherits": {
        "type": {
          "name": "AcknowledgedResponseBase",
          "namespace": "_types"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "ml.delete_data_frame_analytics"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Deletes an existing datafeed.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "ml.delete_datafeed"
      },
      "path": [
        {
          "description": "The ID of the datafeed to delete",
          "name": "datafeed_id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "True if the datafeed should be forcefully deleted",
          "name": "force",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": []
      },
      "inherits": {
        "type": {
          "name": "AcknowledgedResponseBase",
          "namespace": "_types"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "ml.delete_datafeed"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "requests_per_second",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "float",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "timeout",
            "required": false,
            "serverDefault": "8h",
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Time",
                "namespace": "_types"
              }
            }
          }
        ]
      },
      "description": "Deletes expired and unused machine learning data.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "ml.delete_expired_data"
      },
      "path": [
        {
          "description": "The ID of the job(s) to perform expired data hygiene for",
          "name": "job_id",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "The desired requests per second for the deletion processes.",
          "name": "requests_per_second",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "float",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "How long can the underlying delete processes run until they are canceled",
          "name": "timeout",
          "required": false,
          "serverDefault": "8h",
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "deleted",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "ml.delete_expired_data"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Deletes a filter.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "ml.delete_filter"
      },
      "path": [
        {
          "description": "The ID of the filter to delete",
          "name": "filter_id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": []
    },
    {
      "body": {
        "kind": "properties",
        "properties": []
      },
      "inherits": {
        "type": {
          "name": "AcknowledgedResponseBase",
          "namespace": "_types"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "ml.delete_filter"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Deletes forecasts from a machine learning job.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "ml.delete_forecast"
      },
      "path": [
        {
          "description": "The ID of the job from which to delete forecasts",
          "name": "job_id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "The ID of the forecast to delete, can be comma delimited list. Leaving blank implies `_all`",
          "name": "forecast_id",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "Whether to ignore if `_all` matches no forecasts",
          "name": "allow_no_forecasts",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Controls the time to wait until the forecast(s) are deleted. Default to 30 seconds",
          "name": "timeout",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": []
      },
      "inherits": {
        "type": {
          "name": "AcknowledgedResponseBase",
          "namespace": "_types"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "ml.delete_forecast"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Deletes an existing anomaly detection job.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "ml.delete_job"
      },
      "path": [
        {
          "description": "The ID of the job to delete",
          "name": "job_id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "True if the job should be forcefully deleted",
          "name": "force",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Should this request wait until the operation has completed before returning",
          "name": "wait_for_completion",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": []
      },
      "inherits": {
        "type": {
          "name": "AcknowledgedResponseBase",
          "namespace": "_types"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "ml.delete_job"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Deletes an existing model snapshot.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "ml.delete_model_snapshot"
      },
      "path": [
        {
          "description": "The ID of the job to fetch",
          "name": "job_id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "The ID of the snapshot to delete",
          "name": "snapshot_id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": []
    },
    {
      "body": {
        "kind": "properties",
        "properties": []
      },
      "inherits": {
        "type": {
          "name": "AcknowledgedResponseBase",
          "namespace": "_types"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "ml.delete_model_snapshot"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Deletes an existing trained inference model that is currently not referenced by an ingest pipeline.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "ml.delete_trained_model"
      },
      "path": [
        {
          "description": "The ID of the trained model to delete",
          "name": "model_id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": []
    },
    {
      "body": {
        "kind": "properties",
        "properties": []
      },
      "inherits": {
        "type": {
          "name": "AcknowledgedResponseBase",
          "namespace": "_types"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "ml.delete_trained_model"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Deletes a model alias that refers to the trained model",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "ml.delete_trained_model_alias"
      },
      "path": [
        {
          "description": "The trained model alias to delete",
          "name": "model_alias",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "The trained model where the model alias is assigned",
          "name": "model_id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": []
    },
    {
      "body": {
        "kind": "properties",
        "properties": []
      },
      "inherits": {
        "type": {
          "name": "AcknowledgedResponseBase",
          "namespace": "_types"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "ml.delete_trained_model_alias"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "analysis_config",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "AnalysisConfig",
                "namespace": "ml._types"
              }
            }
          },
          {
            "name": "max_bucket_cardinality",
            "required": false,
            "type": {
              "key": {
                "kind": "instance_of",
                "type": {
                  "name": "Field",
                  "namespace": "_types"
                }
              },
              "kind": "dictionary_of",
              "singleKey": false,
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "long",
                  "namespace": "_types"
                }
              }
            }
          },
          {
            "name": "overall_cardinality",
            "required": false,
            "type": {
              "key": {
                "kind": "instance_of",
                "type": {
                  "name": "Field",
                  "namespace": "_types"
                }
              },
              "kind": "dictionary_of",
              "singleKey": false,
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "long",
                  "namespace": "_types"
                }
              }
            }
          }
        ]
      },
      "description": "Estimates the model memory",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "ml.estimate_model_memory"
      },
      "path": [],
      "query": []
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "model_memory_estimate",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "ml.estimate_model_memory"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "ConfusionMatrixItem",
        "namespace": "ml.evaluate_data_frame"
      },
      "properties": [
        {
          "name": "actual_class",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "actual_class_doc_count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "predicted_classes",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "ConfusionMatrixPrediction",
                "namespace": "ml.evaluate_data_frame"
              }
            }
          }
        },
        {
          "name": "other_predicted_class_doc_count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "ConfusionMatrixPrediction",
        "namespace": "ml.evaluate_data_frame"
      },
      "properties": [
        {
          "name": "predicted_class",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "ConfusionMatrixThreshold",
        "namespace": "ml.evaluate_data_frame"
      },
      "properties": [
        {
          "description": "True Positive",
          "identifier": "true_positive",
          "name": "tp",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "False Positive",
          "identifier": "false_positive",
          "name": "fp",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "True Negative",
          "identifier": "true_negative",
          "name": "tn",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "False Negative",
          "identifier": "false_negative",
          "name": "fn",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "DataframeClassificationSummary",
        "namespace": "ml.evaluate_data_frame"
      },
      "properties": [
        {
          "name": "auc_roc",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DataframeEvaluationSummaryAucRoc",
              "namespace": "ml.evaluate_data_frame"
            }
          }
        },
        {
          "name": "accuracy",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DataframeClassificationSummaryAccuracy",
              "namespace": "ml.evaluate_data_frame"
            }
          }
        },
        {
          "name": "multiclass_confusion_matrix",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DataframeClassificationSummaryMulticlassConfusionMatrix",
              "namespace": "ml.evaluate_data_frame"
            }
          }
        },
        {
          "name": "precision",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DataframeClassificationSummaryPrecision",
              "namespace": "ml.evaluate_data_frame"
            }
          }
        },
        {
          "name": "recall",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DataframeClassificationSummaryRecall",
              "namespace": "ml.evaluate_data_frame"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "DataframeClassificationSummaryAccuracy",
        "namespace": "ml.evaluate_data_frame"
      },
      "properties": [
        {
          "name": "classes",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "DataframeEvaluationClass",
                "namespace": "ml.evaluate_data_frame"
              }
            }
          }
        },
        {
          "name": "overall_accuracy",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "DataframeClassificationSummaryMulticlassConfusionMatrix",
        "namespace": "ml.evaluate_data_frame"
      },
      "properties": [
        {
          "name": "confusion_matrix",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "ConfusionMatrixItem",
                "namespace": "ml.evaluate_data_frame"
              }
            }
          }
        },
        {
          "name": "other_actual_class_count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "DataframeClassificationSummaryPrecision",
        "namespace": "ml.evaluate_data_frame"
      },
      "properties": [
        {
          "name": "classes",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "DataframeEvaluationClass",
                "namespace": "ml.evaluate_data_frame"
              }
            }
          }
        },
        {
          "name": "avg_precision",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "DataframeClassificationSummaryRecall",
        "namespace": "ml.evaluate_data_frame"
      },
      "properties": [
        {
          "name": "classes",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "DataframeEvaluationClass",
                "namespace": "ml.evaluate_data_frame"
              }
            }
          }
        },
        {
          "name": "avg_recall",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "DataframeEvaluationValue",
          "namespace": "ml.evaluate_data_frame"
        }
      },
      "kind": "interface",
      "name": {
        "name": "DataframeEvaluationClass",
        "namespace": "ml.evaluate_data_frame"
      },
      "properties": [
        {
          "name": "class_name",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "DataframeEvaluationValue",
          "namespace": "ml.evaluate_data_frame"
        }
      },
      "kind": "interface",
      "name": {
        "name": "DataframeEvaluationSummaryAucRoc",
        "namespace": "ml.evaluate_data_frame"
      },
      "properties": [
        {
          "name": "curve",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "DataframeEvaluationSummaryAucRocCurveItem",
                "namespace": "ml.evaluate_data_frame"
              }
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "DataframeEvaluationSummaryAucRocCurveItem",
        "namespace": "ml.evaluate_data_frame"
      },
      "properties": [
        {
          "name": "tpr",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "fpr",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "threshold",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "DataframeEvaluationValue",
        "namespace": "ml.evaluate_data_frame"
      },
      "properties": [
        {
          "name": "value",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "DataframeOutlierDetectionSummary",
        "namespace": "ml.evaluate_data_frame"
      },
      "properties": [
        {
          "name": "auc_roc",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DataframeEvaluationSummaryAucRoc",
              "namespace": "ml.evaluate_data_frame"
            }
          }
        },
        {
          "name": "precision",
          "required": false,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "double",
                "namespace": "_types"
              }
            }
          }
        },
        {
          "name": "recall",
          "required": false,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "double",
                "namespace": "_types"
              }
            }
          }
        },
        {
          "name": "confusion_matrix",
          "required": false,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "ConfusionMatrixThreshold",
                "namespace": "ml.evaluate_data_frame"
              }
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "DataframeRegressionSummary",
        "namespace": "ml.evaluate_data_frame"
      },
      "properties": [
        {
          "name": "huber",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DataframeEvaluationValue",
              "namespace": "ml.evaluate_data_frame"
            }
          }
        },
        {
          "name": "mse",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DataframeEvaluationValue",
              "namespace": "ml.evaluate_data_frame"
            }
          }
        },
        {
          "name": "msle",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DataframeEvaluationValue",
              "namespace": "ml.evaluate_data_frame"
            }
          }
        },
        {
          "name": "r_squared",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DataframeEvaluationValue",
              "namespace": "ml.evaluate_data_frame"
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "properties",
        "properties": [
          {
            "description": "Defines the type of evaluation you want to perform.",
            "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/evaluate-dfanalytics.html#ml-evaluate-dfanalytics-resources",
            "name": "evaluation",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "DataframeEvaluationContainer",
                "namespace": "ml._types"
              }
            }
          },
          {
            "description": "Defines the index in which the evaluation will be performed.",
            "name": "index",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "IndexName",
                "namespace": "_types"
              }
            }
          },
          {
            "description": "A query clause that retrieves a subset of data from the source index.",
            "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl.html",
            "name": "query",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "QueryContainer",
                "namespace": "_types.query_dsl"
              }
            }
          }
        ]
      },
      "description": "Evaluates the data frame analytics for an annotated index.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "ml.evaluate_data_frame"
      },
      "path": [],
      "query": []
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "classification",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "DataframeClassificationSummary",
                "namespace": "ml.evaluate_data_frame"
              }
            }
          },
          {
            "name": "outlier_detection",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "DataframeOutlierDetectionSummary",
                "namespace": "ml.evaluate_data_frame"
              }
            }
          },
          {
            "name": "regression",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "DataframeRegressionSummary",
                "namespace": "ml.evaluate_data_frame"
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "ml.evaluate_data_frame"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "properties",
        "properties": [
          {
            "description": "The configuration of how to source the analysis data. It requires an index. Optionally, query and _source may be specified.",
            "name": "source",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "DataframeAnalyticsSource",
                "namespace": "ml._types"
              }
            }
          },
          {
            "description": "The destination configuration, consisting of index and optionally results_field (ml by default).",
            "name": "dest",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "DataframeAnalyticsDestination",
                "namespace": "ml._types"
              }
            }
          },
          {
            "description": "The analysis configuration, which contains the information necessary to perform one of the following types of analysis: classification, outlier detection, or regression.",
            "name": "analysis",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "DataframeAnalysisContainer",
                "namespace": "ml._types"
              }
            }
          },
          {
            "description": "A description of the job.",
            "name": "description",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          },
          {
            "description": "The approximate maximum amount of memory resources that are permitted for analytical processing. The default value for data frame analytics jobs is 1gb. If your elasticsearch.yml file contains an xpack.ml.max_model_memory_limit setting, an error occurs when you try to create data frame analytics jobs that have model_memory_limit values greater than that setting.",
            "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-settings.html",
            "name": "model_memory_limit",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          },
          {
            "description": "The maximum number of threads to be used by the analysis. The default value is 1. Using more threads may decrease the time necessary to complete the analysis at the cost of using more CPU. Note that the process may use additional threads for operational functionality other than the analysis itself.",
            "name": "max_num_threads",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "integer",
                "namespace": "_types"
              }
            }
          },
          {
            "description": "Specify includes and/or excludes patterns to select which fields will be included in the analysis. The patterns specified in excludes are applied last, therefore excludes takes precedence. In other words, if the same field is specified in both includes and excludes, then the field will not be included in the analysis.",
            "name": "analyzed_fields",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "DataframeAnalysisAnalyzedFields",
                "namespace": "ml._types"
              }
            }
          },
          {
            "description": "Specifies whether this job can start when there is insufficient machine learning node capacity for it to be immediately assigned to a node.",
            "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-settings.html#advanced-ml-settings",
            "name": "allow_lazy_start",
            "required": false,
            "serverDefault": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          }
        ]
      },
      "description": "Explains a data frame analytics config.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "ml.explain_data_frame_analytics"
      },
      "path": [
        {
          "description": "Identifier for the data frame analytics job. This identifier can contain lowercase alphanumeric characters (a-z and 0-9), hyphens, and underscores. It must start and end with alphanumeric characters.",
          "name": "id",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": []
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "description": "An array of objects that explain selection for each field, sorted by the field names.",
            "name": "field_selection",
            "required": true,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "DataframeAnalyticsFieldSelection",
                  "namespace": "ml._types"
                }
              }
            }
          },
          {
            "description": "An array of objects that explain selection for each field, sorted by the field names.",
            "name": "memory_estimation",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "DataframeAnalyticsMemoryEstimation",
                "namespace": "ml._types"
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "ml.explain_data_frame_analytics"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "advance_time",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "DateString",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "calc_interim",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "end",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "DateString",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "start",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "DateString",
                "namespace": "_types"
              }
            }
          }
        ]
      },
      "description": "Forces any buffered data to be processed by the job.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "ml.flush_job"
      },
      "path": [
        {
          "description": "The name of the job to flush",
          "name": "job_id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "Skips time to the given value without generating results or updating the model for the skipped interval",
          "name": "skip_time",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "flushed",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "last_finalized_bucket_end",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "integer",
                "namespace": "_types"
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "ml.flush_job"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "duration",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Time",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "expires_in",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Time",
                "namespace": "_types"
              }
            }
          }
        ]
      },
      "description": "Predicts the future behavior of a time series by using its historical behavior.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "ml.forecast"
      },
      "path": [
        {
          "description": "The ID of the job to forecast for",
          "name": "job_id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": []
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "forecast_id",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Id",
                "namespace": "_types"
              }
            }
          }
        ]
      },
      "inherits": {
        "type": {
          "name": "AcknowledgedResponseBase",
          "namespace": "_types"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "ml.forecast"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "anomaly_score",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "double",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "desc",
            "required": false,
            "serverDefault": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "exclude_interim",
            "required": false,
            "serverDefault": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "expand",
            "required": false,
            "serverDefault": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "page",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Page",
                "namespace": "ml._types"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Field",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "start",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "DateString",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "end",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "DateString",
                "namespace": "_types"
              }
            }
          }
        ]
      },
      "description": "Retrieves anomaly detection job results for one or more buckets.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "ml.get_buckets"
      },
      "path": [
        {
          "description": "ID of the job to get bucket results from",
          "name": "job_id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "The timestamp of the desired single bucket result",
          "name": "timestamp",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Timestamp",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "skips a number of buckets",
          "name": "from",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "specifies a max number of buckets to get",
          "name": "size",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Exclude interim results",
          "name": "exclude_interim",
          "required": false,
          "serverDefault": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Sort buckets by a particular field",
          "name": "sort",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Set the sort direction",
          "name": "desc",
          "required": false,
          "serverDefault": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Start time filter for buckets",
          "name": "start",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DateString",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "End time filter for buckets",
          "name": "end",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DateString",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "buckets",
            "required": true,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "BucketSummary",
                  "namespace": "ml._types"
                }
              }
            }
          },
          {
            "name": "count",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "long",
                "namespace": "_types"
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "ml.get_buckets"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Retrieves information about the scheduled events in calendars.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "ml.get_calendar_events"
      },
      "path": [
        {
          "description": "The ID of the calendar containing the events",
          "name": "calendar_id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "Get events for the job. When this option is used calendar_id must be '_all'",
          "name": "job_id",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Get events before this time",
          "name": "end",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DateString",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Skips a number of events",
          "name": "from",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Get events after this time",
          "name": "start",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Specifies a max number of events to get",
          "name": "size",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "count",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "long",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "events",
            "required": true,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "CalendarEvent",
                  "namespace": "ml._types"
                }
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "ml.get_calendar_events"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "Calendar",
        "namespace": "ml.get_calendars"
      },
      "properties": [
        {
          "description": "A string that uniquely identifies a calendar.",
          "name": "calendar_id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "description",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "An array of anomaly detection job identifiers.",
          "name": "job_ids",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "Id",
                "namespace": "_types"
              }
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "page",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Page",
                "namespace": "ml._types"
              }
            }
          }
        ]
      },
      "description": "Retrieves configuration information for calendars.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "ml.get_calendars"
      },
      "path": [
        {
          "description": "A string that uniquely identifies a calendar.",
          "name": "calendar_id",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "Skips the specified number of calendars.",
          "name": "from",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Specifies the maximum number of calendars to obtain.",
          "name": "size",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "calendars",
            "required": true,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "Calendar",
                  "namespace": "ml.get_calendars"
                }
              }
            }
          },
          {
            "name": "count",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "long",
                "namespace": "_types"
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "ml.get_calendars"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "page",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Page",
                "namespace": "ml._types"
              }
            }
          }
        ]
      },
      "description": "Retrieves anomaly detection job results for one or more categories.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "ml.get_categories"
      },
      "path": [
        {
          "description": "Identifier for the anomaly detection job.",
          "name": "job_id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Identifier for the category, which is unique in the job. If you specify neither the category ID nor the partition_field_value, the API returns information about all categories. If you specify only the partition_field_value, it returns information about all categories for the specified partition.",
          "name": "category_id",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "CategoryId",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "skips a number of categories",
          "name": "from",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "specifies a max number of categories to get",
          "name": "size",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Only return categories for the specified partition.",
          "name": "partition_field_value",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "categories",
            "required": true,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "Category",
                  "namespace": "ml._types"
                }
              }
            }
          },
          {
            "name": "count",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "long",
                "namespace": "_types"
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "ml.get_categories"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Retrieves configuration information for data frame analytics jobs.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "ml.get_data_frame_analytics"
      },
      "path": [
        {
          "description": "Identifier for the data frame analytics job. If you do not specify this option, the API returns information for the first hundred data frame analytics jobs.",
          "name": "id",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "Whether to ignore if a wildcard expression matches no data frame analytics. (This includes `_all` string or when no data frame analytics have been specified)",
          "name": "allow_no_match",
          "required": false,
          "serverDefault": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Skips the specified number of data frame analytics jobs.",
          "name": "from",
          "required": false,
          "serverDefault": 0,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Specifies the maximum number of data frame analytics jobs to obtain.",
          "name": "size",
          "required": false,
          "serverDefault": 100,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Indicates if certain fields should be removed from the configuration on retrieval. This allows the configuration to be in an acceptable format to be retrieved and then added to another cluster.",
          "name": "exclude_generated",
          "required": false,
          "serverDefault": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "count",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "integer",
                "namespace": "_types"
              }
            }
          },
          {
            "description": "An array of data frame analytics job resources, which are sorted by the id value in ascending order.",
            "name": "data_frame_analytics",
            "required": true,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "DataframeAnalyticsSummary",
                  "namespace": "ml._types"
                }
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "ml.get_data_frame_analytics"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Retrieves usage information for data frame analytics jobs.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "ml.get_data_frame_analytics_stats"
      },
      "path": [
        {
          "description": "Identifier for the data frame analytics job. If you do not specify this option, the API returns information for the first hundred data frame analytics jobs.",
          "name": "id",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "Whether to ignore if a wildcard expression matches no data frame analytics. (This includes `_all` string or when no data frame analytics have been specified)",
          "name": "allow_no_match",
          "required": false,
          "serverDefault": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Skips the specified number of data frame analytics jobs.",
          "name": "from",
          "required": false,
          "serverDefault": 0,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Specifies the maximum number of data frame analytics jobs to obtain.",
          "name": "size",
          "required": false,
          "serverDefault": 100,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Defines whether the stats response should be verbose.",
          "name": "verbose",
          "required": false,
          "serverDefault": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "count",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "long",
                "namespace": "_types"
              }
            }
          },
          {
            "description": "An array of objects that contain usage information for data frame analytics jobs, which are sorted by the id value in ascending order.",
            "name": "data_frame_analytics",
            "required": true,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "DataframeAnalytics",
                  "namespace": "ml._types"
                }
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "ml.get_data_frame_analytics_stats"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Retrieves usage information for datafeeds.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "ml.get_datafeed_stats"
      },
      "path": [
        {
          "description": "The ID of the datafeeds stats to fetch",
          "name": "datafeed_id",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Ids",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "Whether to ignore if a wildcard expression matches no datafeeds. (This includes `_all` string or when no datafeeds have been specified)",
          "name": "allow_no_datafeeds",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "count",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "long",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "datafeeds",
            "required": true,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "DatafeedStats",
                  "namespace": "ml._types"
                }
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "ml.get_datafeed_stats"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Retrieves configuration information for datafeeds.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "ml.get_datafeeds"
      },
      "path": [
        {
          "description": "The ID of the datafeeds to fetch",
          "name": "datafeed_id",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Ids",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "Whether to ignore if a wildcard expression matches no datafeeds. (This includes `_all` string or when no datafeeds have been specified)",
          "name": "allow_no_datafeeds",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Omits fields that are illegal to set on datafeed PUT",
          "name": "exclude_generated",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "count",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "long",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "datafeeds",
            "required": true,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "Datafeed",
                  "namespace": "ml._types"
                }
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "ml.get_datafeeds"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Retrieves filters.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "ml.get_filters"
      },
      "path": [
        {
          "description": "The ID of the filter to fetch",
          "name": "filter_id",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "skips a number of filters",
          "name": "from",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "specifies a max number of filters to get",
          "name": "size",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "count",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "long",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "filters",
            "required": true,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "Filter",
                  "namespace": "ml._types"
                }
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "ml.get_filters"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "page",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Page",
                "namespace": "ml._types"
              }
            }
          }
        ]
      },
      "description": "Retrieves anomaly detection job results for one or more influencers.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "ml.get_influencers"
      },
      "path": [
        {
          "description": "Identifier for the anomaly detection job.",
          "name": "job_id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "If true, the results are sorted in descending order.",
          "name": "desc",
          "required": false,
          "serverDefault": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Returns influencers with timestamps earlier than this time.",
          "name": "end",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DateString",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "If true, the output excludes interim results. By default, interim results are included.",
          "name": "exclude_interim",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Returns influencers with anomaly scores greater than or equal to this value.",
          "name": "influencer_score",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Skips the specified number of influencers.",
          "name": "from",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Specifies the maximum number of influencers to obtain.",
          "name": "size",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Specifies the sort field for the requested influencers. By default, the influencers are sorted by the influencer_score value.",
          "name": "sort",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Returns influencers with timestamps after this time.",
          "name": "start",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DateString",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "count",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "long",
                "namespace": "_types"
              }
            }
          },
          {
            "description": "Array of influencer objects",
            "name": "influencers",
            "required": true,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "BucketInfluencer",
                  "namespace": "ml._types"
                }
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "ml.get_influencers"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Retrieves usage information for anomaly detection jobs.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "ml.get_job_stats"
      },
      "path": [
        {
          "description": "The ID of the jobs stats to fetch",
          "name": "job_id",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "Whether to ignore if a wildcard expression matches no jobs. (This includes `_all` string or when no jobs have been specified)",
          "name": "allow_no_jobs",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "count",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "long",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "jobs",
            "required": true,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "JobStats",
                  "namespace": "ml._types"
                }
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "ml.get_job_stats"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Retrieves configuration information for anomaly detection jobs.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "ml.get_jobs"
      },
      "path": [
        {
          "description": "The ID of the jobs to fetch",
          "name": "job_id",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Ids",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "Whether to ignore if a wildcard expression matches no jobs. (This includes `_all` string or when no jobs have been specified)",
          "name": "allow_no_match",
          "required": false,
          "serverDefault": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Whether to ignore if a wildcard expression matches no jobs. (This includes `_all` string or when no jobs have been specified)",
          "name": "allow_no_jobs",
          "required": false,
          "serverDefault": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Omits fields that are illegal to set on job PUT",
          "name": "exclude_generated",
          "required": false,
          "serverDefault": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "count",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "long",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "jobs",
            "required": true,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "Job",
                  "namespace": "ml._types"
                }
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "ml.get_jobs"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "start",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Time",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "end",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Time",
                "namespace": "_types"
              }
            }
          }
        ]
      },
      "description": "Retrieves information about model snapshots.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "ml.get_model_snapshots"
      },
      "path": [
        {
          "description": "Identifier for the anomaly detection job.",
          "name": "job_id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "A numerical character string that uniquely identifies the model snapshot.",
          "name": "snapshot_id",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "If true, the results are sorted in descending order.",
          "name": "desc",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Returns snapshots with timestamps earlier than this time.",
          "name": "end",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Skips the specified number of snapshots.",
          "name": "from",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Specifies the maximum number of snapshots to obtain.",
          "name": "size",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Specifies the sort field for the requested snapshots. By default, the snapshots are sorted by their timestamp.",
          "name": "sort",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Returns snapshots with timestamps after this time.",
          "name": "start",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "count",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "long",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "model_snapshots",
            "required": true,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "ModelSnapshot",
                  "namespace": "ml._types"
                }
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "ml.get_model_snapshots"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "allow_no_jobs",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          }
        ]
      },
      "description": "Retrieves overall bucket results that summarize the bucket results of multiple anomaly detection jobs.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "ml.get_overall_buckets"
      },
      "path": [
        {
          "description": "Identifier for the anomaly detection job. It can be a job identifier, a group name, a comma-separated list of jobs or groups, or a wildcard expression.",
          "name": "job_id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "The span of the overall buckets. Must be greater or equal to the largest bucket span of the specified anomaly detection jobs, which is the default value.",
          "name": "bucket_span",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Returns overall buckets with overall scores greater than or equal to this value.",
          "name": "overall_score",
          "required": false,
          "type": {
            "items": [
              {
                "kind": "instance_of",
                "type": {
                  "name": "double",
                  "namespace": "_types"
                }
              },
              {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              }
            ],
            "kind": "union_of"
          }
        },
        {
          "description": "The number of top anomaly detection job bucket scores to be used in the overall_score calculation.",
          "name": "top_n",
          "required": false,
          "serverDefault": 1,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Returns overall buckets with timestamps earlier than this time.",
          "name": "end",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Returns overall buckets with timestamps after this time.",
          "name": "start",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "If true, the output excludes interim results. By default, interim results are included.",
          "name": "exclude_interim",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Whether to ignore if a wildcard expression matches no jobs. (This includes `_all` string or when no jobs have been specified)",
          "name": "allow_no_match",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "count",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "long",
                "namespace": "_types"
              }
            }
          },
          {
            "description": "Array of overall bucket objects",
            "name": "overall_buckets",
            "required": true,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "OverallBucket",
                  "namespace": "ml._types"
                }
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "ml.get_overall_buckets"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "desc",
            "required": false,
            "serverDefault": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "exclude_interim",
            "required": false,
            "serverDefault": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "page",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Page",
                "namespace": "ml._types"
              }
            }
          },
          {
            "name": "record_score",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "double",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Field",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "start",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "DateString",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "end",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "DateString",
                "namespace": "_types"
              }
            }
          }
        ]
      },
      "description": "Retrieves anomaly records for an anomaly detection job.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "ml.get_records"
      },
      "path": [
        {
          "description": "The ID of the job",
          "name": "job_id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "Exclude interim results",
          "name": "exclude_interim",
          "required": false,
          "serverDefault": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "skips a number of records",
          "name": "from",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "specifies a max number of records to get",
          "name": "size",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Start time filter for records",
          "name": "start",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DateString",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "End time filter for records",
          "name": "end",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DateString",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "count",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "long",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "records",
            "required": true,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "Anomaly",
                  "namespace": "ml._types"
                }
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "ml.get_records"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Retrieves configuration information for a trained inference model.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "ml.get_trained_models"
      },
      "path": [
        {
          "description": "The unique identifier of the trained model.",
          "name": "model_id",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "Specifies what to do when the request:\n- Contains wildcard expressions and there are no models that match.\n- Contains the _all string or no identifiers and there are no matches.\n- Contains wildcard expressions and there are only partial matches.",
          "name": "allow_no_match",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Specifies whether the included model definition should be returned as a JSON map (true) or in a custom compressed format (false).",
          "name": "decompress_definition",
          "required": false,
          "serverDefault": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Indicates if certain fields should be removed from the configuration on retrieval. This allows the configuration to be in an acceptable format to be retrieved and then added to another cluster.",
          "name": "exclude_generated",
          "required": false,
          "serverDefault": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Skips the specified number of models.",
          "name": "from",
          "required": false,
          "serverDefault": 0,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "A comma delimited string of optional fields to include in the response body.",
          "name": "include",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Specifies the maximum number of models to obtain.",
          "name": "size",
          "required": false,
          "serverDefault": 100,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "A comma delimited string of tags. A trained model can have many tags, or none. When supplied, only trained models that contain all the supplied tags are returned.",
          "name": "tags",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "count",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "integer",
                "namespace": "_types"
              }
            }
          },
          {
            "description": "An array of trained model resources, which are sorted by the model_id value in ascending order.",
            "name": "trained_model_configs",
            "required": true,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "TrainedModelConfig",
                  "namespace": "ml._types"
                }
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "ml.get_trained_models"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Retrieves usage information for trained inference models.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "ml.get_trained_models_stats"
      },
      "path": [
        {
          "description": "The unique identifier of the trained model.",
          "name": "model_id",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "Specifies what to do when the request:\n- Contains wildcard expressions and there are no models that match.\n- Contains the _all string or no identifiers and there are no matches.\n- Contains wildcard expressions and there are only partial matches.",
          "name": "allow_no_match",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Skips the specified number of models.",
          "name": "from",
          "required": false,
          "serverDefault": 0,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Specifies the maximum number of models to obtain.",
          "name": "size",
          "required": false,
          "serverDefault": 100,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "description": "The total number of trained model statistics that matched the requested ID patterns. Could be higher than the number of items in the trained_model_stats array as the size of the array is restricted by the supplied size parameter.",
            "name": "count",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "integer",
                "namespace": "_types"
              }
            }
          },
          {
            "description": "An array of trained model statistics, which are sorted by the model_id value in ascending order.",
            "name": "trained_model_stats",
            "required": true,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "TrainedModelStats",
                  "namespace": "ml._types"
                }
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "ml.get_trained_models_stats"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "AnomalyDetectors",
        "namespace": "ml.info"
      },
      "properties": [
        {
          "name": "categorization_analyzer",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "CategorizationAnalyzer",
              "namespace": "ml._types"
            }
          }
        },
        {
          "name": "categorization_examples_limit",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "model_memory_limit",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "model_snapshot_retention_days",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "daily_model_snapshot_retention_after_days",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "Datafeeds",
        "namespace": "ml.info"
      },
      "properties": [
        {
          "name": "scroll_size",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "Defaults",
        "namespace": "ml.info"
      },
      "properties": [
        {
          "name": "anomaly_detectors",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "AnomalyDetectors",
              "namespace": "ml.info"
            }
          }
        },
        {
          "name": "datafeeds",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Datafeeds",
              "namespace": "ml.info"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "Limits",
        "namespace": "ml.info"
      },
      "properties": [
        {
          "name": "max_model_memory_limit",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "effective_max_model_memory_limit",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "total_ml_memory",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "NativeCode",
        "namespace": "ml.info"
      },
      "properties": [
        {
          "name": "build_hash",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "version",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "VersionString",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Returns defaults and limits used by machine learning.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "ml.info"
      },
      "path": [],
      "query": []
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "defaults",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Defaults",
                "namespace": "ml.info"
              }
            }
          },
          {
            "name": "limits",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Limits",
                "namespace": "ml.info"
              }
            }
          },
          {
            "name": "upgrade_mode",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "native_code",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "NativeCode",
                "namespace": "ml.info"
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "ml.info"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "timeout",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Time",
                "namespace": "_types"
              }
            }
          }
        ]
      },
      "description": "Opens one or more anomaly detection jobs.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "ml.open_job"
      },
      "path": [
        {
          "description": "The ID of the job to open",
          "name": "job_id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": []
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "opened",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "ml.open_job"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "properties",
        "properties": [
          {
            "description": "A list of one of more scheduled events. The event’s start and end times may be specified as integer milliseconds since the epoch or as a string in ISO 8601 format.",
            "name": "events",
            "required": true,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "CalendarEvent",
                  "namespace": "ml._types"
                }
              }
            }
          }
        ]
      },
      "description": "Posts scheduled events in a calendar.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "ml.post_calendar_events"
      },
      "path": [
        {
          "description": "A string that uniquely identifies a calendar.",
          "name": "calendar_id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": []
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "events",
            "required": true,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "CalendarEvent",
                  "namespace": "ml._types"
                }
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "ml.post_calendar_events"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "identifier": "data",
        "kind": "value",
        "value": {
          "kind": "array_of",
          "value": {
            "kind": "instance_of",
            "type": {
              "name": "TData",
              "namespace": "ml.post_data"
            }
          }
        }
      },
      "description": "Sends data to an anomaly detection job for analysis.",
      "generics": [
        {
          "name": "TData",
          "namespace": "ml.post_data"
        }
      ],
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "ml.post_data"
      },
      "path": [
        {
          "description": "The name of the job receiving the data",
          "name": "job_id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "Optional parameter to specify the end of the bucket resetting range",
          "name": "reset_end",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DateString",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Optional parameter to specify the start of the bucket resetting range",
          "name": "reset_start",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DateString",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "bucket_count",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "long",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "earliest_record_timestamp",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "integer",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "empty_bucket_count",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "long",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "input_bytes",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "long",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "input_field_count",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "long",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "input_record_count",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "long",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "invalid_date_count",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "long",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "job_id",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Id",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "last_data_time",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "integer",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "latest_record_timestamp",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "integer",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "missing_field_count",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "long",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "out_of_order_timestamp_count",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "long",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "processed_field_count",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "long",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "processed_record_count",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "long",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "sparse_bucket_count",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "long",
                "namespace": "_types"
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "ml.post_data"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "DataframePreviewConfig",
        "namespace": "ml.preview_data_frame_analytics"
      },
      "properties": [
        {
          "name": "source",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DataframeAnalyticsSource",
              "namespace": "ml._types"
            }
          }
        },
        {
          "name": "analysis",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DataframeAnalysisContainer",
              "namespace": "ml._types"
            }
          }
        },
        {
          "name": "model_memory_limit",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "max_num_threads",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "analyzed_fields",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DataframeAnalysisAnalyzedFields",
              "namespace": "ml._types"
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "properties",
        "properties": [
          {
            "description": "A data frame analytics config as described in Create data frame analytics jobs. Note that id and dest don’t need to be provided in the context of this API.",
            "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/put-dfanalytics.html",
            "name": "config",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "DataframePreviewConfig",
                "namespace": "ml.preview_data_frame_analytics"
              }
            }
          }
        ]
      },
      "description": "Previews that will be analyzed given a data frame analytics config.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "ml.preview_data_frame_analytics"
      },
      "path": [
        {
          "description": "Identifier for the data frame analytics job.",
          "name": "id",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": []
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "description": "An array of objects that contain feature name and value pairs. The features have been processed and indicate what will be sent to the model for training.",
            "name": "feature_values",
            "required": true,
            "type": {
              "kind": "array_of",
              "value": {
                "key": {
                  "kind": "instance_of",
                  "type": {
                    "name": "Field",
                    "namespace": "_types"
                  }
                },
                "kind": "dictionary_of",
                "singleKey": false,
                "value": {
                  "kind": "instance_of",
                  "type": {
                    "name": "string",
                    "namespace": "internal"
                  }
                }
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "ml.preview_data_frame_analytics"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "job_config",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "JobConfig",
                "namespace": "ml._types"
              }
            }
          },
          {
            "name": "datafeed_config",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "DatafeedConfig",
                "namespace": "ml._types"
              }
            }
          }
        ]
      },
      "description": "Previews a datafeed.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "ml.preview_datafeed"
      },
      "path": [
        {
          "description": "The ID of the datafeed to preview",
          "name": "datafeed_id",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": []
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "data",
            "required": true,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "TDocument",
                  "namespace": "ml.preview_datafeed"
                }
              }
            }
          }
        ]
      },
      "generics": [
        {
          "name": "TDocument",
          "namespace": "ml.preview_datafeed"
        }
      ],
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "ml.preview_datafeed"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "description",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        ]
      },
      "description": "Instantiates a calendar.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "ml.put_calendar"
      },
      "path": [
        {
          "description": "The ID of the calendar to create",
          "name": "calendar_id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": []
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "calendar_id",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Id",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "description",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "job_ids",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Ids",
                "namespace": "_types"
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "ml.put_calendar"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Adds an anomaly detection job to a calendar.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "ml.put_calendar_job"
      },
      "path": [
        {
          "description": "A string that uniquely identifies a calendar.",
          "name": "calendar_id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "An identifier for the anomaly detection jobs. It can be a job identifier, a group name, or a comma-separated list of jobs or groups.",
          "name": "job_id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": []
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "calendar_id",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Id",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "description",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "job_ids",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Ids",
                "namespace": "_types"
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "ml.put_calendar_job"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "properties",
        "properties": [
          {
            "description": "Specifies whether this job can start when there is insufficient machine learning node capacity for it to be immediately assigned to a node. If set to false and a machine learning node with capacity to run the job cannot be immediately found, the API returns an error.  If set to true, the API does not return an error; the job waits in the `starting` state until sufficient machine learning node capacity is available. This behavior is also affected by the cluster-wide `xpack.ml.max_lazy_ml_nodes` setting.",
            "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-settings.html#advanced-ml-settings",
            "name": "allow_lazy_start",
            "required": false,
            "serverDefault": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          },
          {
            "description": "The analysis configuration, which contains the information necessary to perform one of the following types of analysis: classification, outlier detection, or regression.",
            "name": "analysis",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "DataframeAnalysisContainer",
                "namespace": "ml._types"
              }
            }
          },
          {
            "description": "Specifies `includes` and/or `excludes` patterns to select which fields will be included in the analysis. The patterns specified in `excludes` are applied last, therefore `excludes` takes precedence. In other words, if the same field is specified in both `includes` and `excludes`, then the field will not be included in the analysis. If `analyzed_fields` is not set, only the relevant fields will be included. For example, all the numeric fields for outlier detection.\nThe supported fields vary for each type of analysis. Outlier detection requires numeric or `boolean` data to analyze. The algorithms don’t support missing values therefore fields that have data types other than numeric or boolean are ignored. Documents where included fields contain missing values, null values, or an array are also ignored. Therefore the `dest` index may contain documents that don’t have an outlier score.\nRegression supports fields that are numeric, `boolean`, `text`, `keyword`, and `ip` data types. It is also tolerant of missing values. Fields that are supported are included in the analysis, other fields are ignored. Documents where included fields contain an array with two or more values are also ignored. Documents in the `dest` index that don’t contain a results field are not included in the regression analysis.\nClassification supports fields that are numeric, `boolean`, `text`, `keyword`, and `ip` data types. It is also tolerant of missing values. Fields that are supported are included in the analysis, other fields are ignored. Documents where included fields contain an array with two or more values are also ignored. Documents in the `dest` index that don’t contain a results field are not included in the classification analysis. Classification analysis can be improved by mapping ordinal variable values to a single number. For example, in case of age ranges, you can model the values as `0-14 = 0`, `15-24 = 1`, `25-34 = 2`, and so on.",
            "name": "analyzed_fields",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "DataframeAnalysisAnalyzedFields",
                "namespace": "ml._types"
              }
            }
          },
          {
            "description": "A description of the job.",
            "name": "description",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          },
          {
            "description": "The destination configuration.",
            "name": "dest",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "DataframeAnalyticsDestination",
                "namespace": "ml._types"
              }
            }
          },
          {
            "description": "The maximum number of threads to be used by the analysis. Using more threads may decrease the time necessary to complete the analysis at the cost of using more CPU. Note that the process may use additional threads for operational functionality other than the analysis itself.",
            "name": "max_num_threads",
            "required": false,
            "serverDefault": 1,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "integer",
                "namespace": "_types"
              }
            }
          },
          {
            "description": "The approximate maximum amount of memory resources that are permitted for analytical processing. If your `elasticsearch.yml` file contains an `xpack.ml.max_model_memory_limit` setting, an error occurs when you try to create data frame analytics jobs that have `model_memory_limit` values greater than that setting.",
            "name": "model_memory_limit",
            "required": false,
            "serverDefault": "1gb",
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          },
          {
            "description": "The configuration of how to source the analysis data.",
            "name": "source",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "DataframeAnalyticsSource",
                "namespace": "ml._types"
              }
            }
          }
        ]
      },
      "description": "Instantiates a data frame analytics job.\nThis API creates a data frame analytics job that performs an analysis on the source indices and stores the outcome in a destination index. You must have `read` and `view_index_metadata` security privileges for the source indices. You must have `read`, `create_index`, `manage` and `index` security privileges for the destination index.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "ml.put_data_frame_analytics"
      },
      "path": [
        {
          "description": "Identifier for the data frame analytics job. This identifier can contain lowercase alphanumeric characters (a-z and 0-9), hyphens, and underscores. It must start and end with alphanumeric characters.",
          "name": "id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": []
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "id",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Id",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "create_time",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "long",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "version",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "VersionString",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "source",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "DataframeAnalyticsSource",
                "namespace": "ml._types"
              }
            }
          },
          {
            "name": "description",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "dest",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "DataframeAnalyticsDestination",
                "namespace": "ml._types"
              }
            }
          },
          {
            "name": "model_memory_limit",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "allow_lazy_start",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "max_num_threads",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "integer",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "analysis",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "DataframeAnalysisContainer",
                "namespace": "ml._types"
              }
            }
          },
          {
            "name": "analyzed_fields",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "DataframeAnalysisAnalyzedFields",
                "namespace": "ml._types"
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "ml.put_data_frame_analytics"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "aggregations",
            "required": false,
            "type": {
              "key": {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              },
              "kind": "dictionary_of",
              "singleKey": false,
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "AggregationContainer",
                  "namespace": "_types.aggregations"
                }
              }
            }
          },
          {
            "name": "chunking_config",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "ChunkingConfig",
                "namespace": "ml._types"
              }
            }
          },
          {
            "name": "delayed_data_check_config",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "DelayedDataCheckConfig",
                "namespace": "ml._types"
              }
            }
          },
          {
            "name": "frequency",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Time",
                "namespace": "_types"
              }
            }
          },
          {
            "aliases": [
              "indexes"
            ],
            "name": "indices",
            "required": false,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              }
            }
          },
          {
            "name": "indices_options",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "DatafeedIndicesOptions",
                "namespace": "ml._types"
              }
            }
          },
          {
            "name": "job_id",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Id",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "max_empty_searches",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "integer",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "query",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "QueryContainer",
                "namespace": "_types.query_dsl"
              }
            }
          },
          {
            "name": "query_delay",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Time",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "runtime_mappings",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "RuntimeFields",
                "namespace": "_types.mapping"
              }
            }
          },
          {
            "name": "script_fields",
            "required": false,
            "type": {
              "key": {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              },
              "kind": "dictionary_of",
              "singleKey": false,
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "ScriptField",
                  "namespace": "_types"
                }
              }
            }
          },
          {
            "name": "scroll_size",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "integer",
                "namespace": "_types"
              }
            }
          }
        ]
      },
      "description": "Instantiates a datafeed.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "ml.put_datafeed"
      },
      "path": [
        {
          "description": "The ID of the datafeed to create",
          "name": "datafeed_id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "Ignore if the source indices expressions resolves to no concrete indices (default: true)",
          "name": "allow_no_indices",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Whether source index expressions should get expanded to open or closed indices (default: open)",
          "name": "expand_wildcards",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ExpandWildcards",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Ignore indices that are marked as throttled (default: true)",
          "name": "ignore_throttled",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Ignore unavailable indexes (default: false)",
          "name": "ignore_unavailable",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "aggregations",
            "required": true,
            "type": {
              "key": {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              },
              "kind": "dictionary_of",
              "singleKey": false,
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "AggregationContainer",
                  "namespace": "_types.aggregations"
                }
              }
            }
          },
          {
            "name": "chunking_config",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "ChunkingConfig",
                "namespace": "ml._types"
              }
            }
          },
          {
            "name": "delayed_data_check_config",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "DelayedDataCheckConfig",
                "namespace": "ml._types"
              }
            }
          },
          {
            "name": "datafeed_id",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Id",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "frequency",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Time",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "indices",
            "required": true,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              }
            }
          },
          {
            "name": "job_id",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Id",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "indices_options",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "DatafeedIndicesOptions",
                "namespace": "ml._types"
              }
            }
          },
          {
            "name": "max_empty_searches",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "integer",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "query",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "QueryContainer",
                "namespace": "_types.query_dsl"
              }
            }
          },
          {
            "name": "query_delay",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Time",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "runtime_mappings",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "RuntimeFields",
                "namespace": "_types.mapping"
              }
            }
          },
          {
            "name": "script_fields",
            "required": false,
            "type": {
              "key": {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              },
              "kind": "dictionary_of",
              "singleKey": false,
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "ScriptField",
                  "namespace": "_types"
                }
              }
            }
          },
          {
            "name": "scroll_size",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "integer",
                "namespace": "_types"
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "ml.put_datafeed"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "description",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "items",
            "required": false,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              }
            }
          }
        ]
      },
      "description": "Instantiates a filter.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "ml.put_filter"
      },
      "path": [
        {
          "description": "The ID of the filter to create",
          "name": "filter_id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": []
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "description",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "filter_id",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Id",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "items",
            "required": true,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "ml.put_filter"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "properties",
        "properties": [
          {
            "description": "Advanced configuration option. Specifies whether this job can open when there is insufficient machine learning node capacity for it to be immediately assigned to a node. By default, if a machine learning node with capacity to run the job cannot immediately be found, the open anomaly detection jobs API returns an error. However, this is also subject to the cluster-wide `xpack.ml.max_lazy_ml_nodes` setting. If this option is set to true, the open anomaly detection jobs API does not return an error and the job waits in the opening state until sufficient machine learning node capacity is available.",
            "name": "allow_lazy_open",
            "required": false,
            "serverDefault": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          },
          {
            "description": "Specifies how to analyze the data. After you create a job, you cannot change the analysis configuration; all the properties are informational.",
            "name": "analysis_config",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "AnalysisConfig",
                "namespace": "ml._types"
              }
            }
          },
          {
            "description": "Limits can be applied for the resources required to hold the mathematical models in memory. These limits are approximate and can be set per job. They do not control the memory used by other processes, for example the Elasticsearch Java processes.",
            "name": "analysis_limits",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "AnalysisLimits",
                "namespace": "ml._types"
              }
            }
          },
          {
            "description": "Advanced configuration option. The time between each periodic persistence of the model. The default value is a randomized value between 3 to 4 hours, which avoids all jobs persisting at exactly the same time. The smallest allowed value is 1 hour. For very large models (several GB), persistence could take 10-20 minutes, so do not set the `background_persist_interval` value too low.",
            "name": "background_persist_interval",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Time",
                "namespace": "_types"
              }
            }
          },
          {
            "description": "Advanced configuration option. Contains custom meta data about the job.",
            "name": "custom_settings",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "CustomSettings",
                "namespace": "ml._types"
              }
            }
          },
          {
            "description": "Advanced configuration option, which affects the automatic removal of old model snapshots for this job. It specifies a period of time (in days) after which only the first snapshot per day is retained. This period is relative to the timestamp of the most recent snapshot for this job. Valid values range from 0 to `model_snapshot_retention_days`.",
            "name": "daily_model_snapshot_retention_after_days",
            "required": false,
            "serverDefault": 1,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "long",
                "namespace": "_types"
              }
            }
          },
          {
            "description": "Defines the format of the input data when you send data to the job by using the post data API. Note that when configure a datafeed, these properties are automatically set. When data is received via the post data API, it is not stored in Elasticsearch. Only the results for anomaly detection are retained.",
            "name": "data_description",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "DataDescription",
                "namespace": "ml._types"
              }
            }
          },
          {
            "description": "Defines a datafeed for the anomaly detection job.",
            "name": "datafeed_config",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "DatafeedConfig",
                "namespace": "ml._types"
              }
            }
          },
          {
            "description": "A description of the job.",
            "name": "description",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          },
          {
            "description": "A list of job groups. A job can belong to no groups or many.",
            "name": "groups",
            "required": false,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              }
            }
          },
          {
            "description": "This advanced configuration option stores model information along with the results. It provides a more detailed view into anomaly detection. If you enable model plot it can add considerable overhead to the performance of the system; it is not feasible for jobs with many entities. Model plot provides a simplified and indicative view of the model and its bounds. It does not display complex features such as multivariate correlations or multimodal data. As such, anomalies may occasionally be reported which cannot be seen in the model plot. Model plot config can be configured when the job is created or updated later. It must be disabled if performance issues are experienced.",
            "name": "model_plot_config",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "ModelPlotConfig",
                "namespace": "ml._types"
              }
            }
          },
          {
            "description": "Advanced configuration option, which affects the automatic removal of old model snapshots for this job. It specifies the maximum period of time (in days) that snapshots are retained. This period is relative to the timestamp of the most recent snapshot for this job. By default, snapshots ten days older than the newest snapshot are deleted.",
            "name": "model_snapshot_retention_days",
            "required": false,
            "serverDefault": 10,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "long",
                "namespace": "_types"
              }
            }
          },
          {
            "description": "Advanced configuration option. The period over which adjustments to the score are applied, as new data is seen. The default value is the longer of 30 days or 100 bucket spans.",
            "name": "renormalization_window_days",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "long",
                "namespace": "_types"
              }
            }
          },
          {
            "description": "A text string that affects the name of the machine learning results index. By default, the job generates an index named .ml-anomalies-shared.",
            "name": "results_index_name",
            "required": false,
            "serverDefault": "shared",
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "IndexName",
                "namespace": "_types"
              }
            }
          },
          {
            "description": "Advanced configuration option. The period of time (in days) that results are retained. Age is calculated relative to the timestamp of the latest bucket result. If this property has a non-null value, once per day at 00:30 (server time), results that are the specified number of days older than the latest bucket result are deleted from Elasticsearch. The default value is null, which means all results are retained.",
            "name": "results_retention_days",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "long",
                "namespace": "_types"
              }
            }
          }
        ]
      },
      "description": "Instantiates an anomaly detection job.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "ml.put_job"
      },
      "path": [
        {
          "description": "The identifier for the anomaly detection job. This identifier can contain lowercase alphanumeric characters (a-z and 0-9), hyphens, and underscores. It must start and end with alphanumeric characters.",
          "name": "job_id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": []
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "allow_lazy_open",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "analysis_config",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "AnalysisConfigRead",
                "namespace": "ml._types"
              }
            }
          },
          {
            "name": "analysis_limits",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "AnalysisLimits",
                "namespace": "ml._types"
              }
            }
          },
          {
            "name": "background_persist_interval",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Time",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "create_time",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "DateString",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "custom_settings",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "CustomSettings",
                "namespace": "ml._types"
              }
            }
          },
          {
            "name": "daily_model_snapshot_retention_after_days",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "long",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "data_description",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "DataDescription",
                "namespace": "ml._types"
              }
            }
          },
          {
            "name": "datafeed_config",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Datafeed",
                "namespace": "ml._types"
              }
            }
          },
          {
            "name": "description",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "groups",
            "required": false,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              }
            }
          },
          {
            "name": "job_id",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Id",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "job_type",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "job_version",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "model_plot_config",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "ModelPlotConfig",
                "namespace": "ml._types"
              }
            }
          },
          {
            "name": "model_snapshot_id",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Id",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "model_snapshot_retention_days",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "long",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "renormalization_window_days",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "long",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "results_index_name",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "results_retention_days",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "long",
                "namespace": "_types"
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "ml.put_job"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "AggregateOutput",
        "namespace": "ml.put_trained_model"
      },
      "properties": [
        {
          "name": "logistic_regression",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Weights",
              "namespace": "ml.put_trained_model"
            }
          }
        },
        {
          "name": "weighted_sum",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Weights",
              "namespace": "ml.put_trained_model"
            }
          }
        },
        {
          "name": "weighted_mode",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Weights",
              "namespace": "ml.put_trained_model"
            }
          }
        },
        {
          "name": "exponent",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Weights",
              "namespace": "ml.put_trained_model"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "Definition",
        "namespace": "ml.put_trained_model"
      },
      "properties": [
        {
          "description": "Collection of preprocessors",
          "name": "preprocessors",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "Preprocessor",
                "namespace": "ml.put_trained_model"
              }
            }
          }
        },
        {
          "description": "The definition of the trained model.",
          "name": "trained_model",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "TrainedModel",
              "namespace": "ml.put_trained_model"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "Ensemble",
        "namespace": "ml.put_trained_model"
      },
      "properties": [
        {
          "name": "aggregate_output",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "AggregateOutput",
              "namespace": "ml.put_trained_model"
            }
          }
        },
        {
          "name": "classification_labels",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        },
        {
          "name": "feature_names",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        },
        {
          "name": "target_type",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "trained_models",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "TrainedModel",
                "namespace": "ml.put_trained_model"
              }
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "FrequencyEncodingPreprocessor",
        "namespace": "ml.put_trained_model"
      },
      "properties": [
        {
          "name": "field",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "feature_name",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "frequency_map",
          "required": true,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "double",
                "namespace": "_types"
              }
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "Input",
        "namespace": "ml.put_trained_model"
      },
      "properties": [
        {
          "name": "field_names",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Names",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "OneHotEncodingPreprocessor",
        "namespace": "ml.put_trained_model"
      },
      "properties": [
        {
          "name": "field",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "hot_map",
          "required": true,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "Preprocessor",
        "namespace": "ml.put_trained_model"
      },
      "properties": [
        {
          "name": "frequency_encoding",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "FrequencyEncodingPreprocessor",
              "namespace": "ml.put_trained_model"
            }
          }
        },
        {
          "name": "one_hot_encoding",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "OneHotEncodingPreprocessor",
              "namespace": "ml.put_trained_model"
            }
          }
        },
        {
          "name": "target_mean_encoding",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "TargetMeanEncodingPreprocessor",
              "namespace": "ml.put_trained_model"
            }
          }
        }
      ],
      "variants": {
        "kind": "container"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "properties",
        "properties": [
          {
            "description": "The compressed (GZipped and Base64 encoded) inference definition of the model. If compressed_definition is specified, then definition cannot be specified.",
            "name": "compressed_definition",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          },
          {
            "description": "The inference definition for the model. If definition is specified, then compressed_definition cannot be specified.",
            "name": "definition",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Definition",
                "namespace": "ml.put_trained_model"
              }
            }
          },
          {
            "description": "A human-readable description of the inference trained model.",
            "name": "description",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          },
          {
            "description": "The default configuration for inference. This can be either a regression or classification configuration. It must match the underlying definition.trained_model's target_type.",
            "name": "inference_config",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "InferenceConfigContainer",
                "namespace": "_types.aggregations"
              }
            }
          },
          {
            "description": "The input field names for the model definition.",
            "name": "input",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Input",
                "namespace": "ml.put_trained_model"
              }
            }
          },
          {
            "description": "An object map that contains metadata about the model.",
            "name": "metadata",
            "required": false,
            "type": {
              "kind": "user_defined_value"
            }
          },
          {
            "description": "An array of tags to organize the model.",
            "name": "tags",
            "required": false,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              }
            }
          }
        ]
      },
      "description": "Creates an inference trained model.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "ml.put_trained_model"
      },
      "path": [
        {
          "description": "The unique identifier of the trained model.",
          "name": "model_id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": []
    },
    {
      "body": {
        "kind": "value",
        "value": {
          "kind": "instance_of",
          "type": {
            "name": "TrainedModelConfig",
            "namespace": "ml._types"
          }
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "ml.put_trained_model"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "TargetMeanEncodingPreprocessor",
        "namespace": "ml.put_trained_model"
      },
      "properties": [
        {
          "name": "field",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "feature_name",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "target_map",
          "required": true,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "double",
                "namespace": "_types"
              }
            }
          }
        },
        {
          "name": "default_value",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "TrainedModel",
        "namespace": "ml.put_trained_model"
      },
      "properties": [
        {
          "description": "The definition for a binary decision tree.",
          "name": "tree",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "TrainedModelTree",
              "namespace": "ml.put_trained_model"
            }
          }
        },
        {
          "description": "The definition of a node in a tree.\nThere are two major types of nodes: leaf nodes and not-leaf nodes.\n- Leaf nodes only need node_index and leaf_value defined.\n- All other nodes need split_feature, left_child, right_child, threshold, decision_type, and default_left defined.",
          "name": "tree_node",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "TrainedModelTreeNode",
              "namespace": "ml.put_trained_model"
            }
          }
        },
        {
          "description": "The definition for an ensemble model",
          "name": "ensemble",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Ensemble",
              "namespace": "ml.put_trained_model"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "TrainedModelTree",
        "namespace": "ml.put_trained_model"
      },
      "properties": [
        {
          "name": "classification_labels",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        },
        {
          "name": "feature_names",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        },
        {
          "name": "target_type",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "tree_structure",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "TrainedModelTreeNode",
                "namespace": "ml.put_trained_model"
              }
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "TrainedModelTreeNode",
        "namespace": "ml.put_trained_model"
      },
      "properties": [
        {
          "name": "decision_type",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "default_left",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "leaf_value",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "left_child",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "node_index",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "right_child",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "split_feature",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "split_gain",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "threshold",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "Weights",
        "namespace": "ml.put_trained_model"
      },
      "properties": [
        {
          "name": "weights",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Creates a new model alias (or reassigns an existing one) to refer to the trained model",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "ml.put_trained_model_alias"
      },
      "path": [
        {
          "description": "The alias to create or update. This value cannot end in numbers.",
          "name": "model_alias",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "The identifier for the trained model that the alias refers to.",
          "name": "model_id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "Specifies whether the alias gets reassigned to the specified trained model if it is already assigned to a different model. If the alias is already assigned and this parameter is false, the API returns an error.",
          "name": "reassign",
          "required": false,
          "serverDefault": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": []
      },
      "inherits": {
        "type": {
          "name": "AcknowledgedResponseBase",
          "namespace": "_types"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "ml.put_trained_model_alias"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Resets an existing anomaly detection job.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "ml.reset_job"
      },
      "path": [
        {
          "description": "The ID of the job to reset.",
          "name": "job_id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "Should this request wait until the operation has completed before returning.",
          "name": "wait_for_completion",
          "required": false,
          "serverDefault": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": []
      },
      "inherits": {
        "type": {
          "name": "AcknowledgedResponseBase",
          "namespace": "_types"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "ml.reset_job"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "delete_intervening_results",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          }
        ]
      },
      "description": "Reverts to a specific snapshot.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "ml.revert_model_snapshot"
      },
      "path": [
        {
          "description": "The ID of the job to fetch",
          "name": "job_id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "The ID of the snapshot to revert to",
          "name": "snapshot_id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": []
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "model",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "ModelSnapshot",
                "namespace": "ml._types"
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "ml.revert_model_snapshot"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Sets a cluster wide upgrade_mode setting that prepares machine learning indices for an upgrade.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "ml.set_upgrade_mode"
      },
      "path": [],
      "query": [
        {
          "description": "Whether to enable upgrade_mode ML setting or not. Defaults to false.",
          "name": "enabled",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Controls the time to wait before action times out. Defaults to 30 seconds",
          "name": "timeout",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": []
      },
      "inherits": {
        "type": {
          "name": "AcknowledgedResponseBase",
          "namespace": "_types"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "ml.set_upgrade_mode"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Starts a data frame analytics job.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "ml.start_data_frame_analytics"
      },
      "path": [
        {
          "description": "The ID of the data frame analytics to start",
          "name": "id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "Controls the amount of time to wait until the data frame analytics job starts.",
          "name": "timeout",
          "required": false,
          "serverDefault": "20s",
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "description": "The ID of the node that the job was started on. If the job is allowed to open lazily and has not yet been assigned to a node, this value is an empty string.",
            "name": "node",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "NodeId",
                "namespace": "_types"
              }
            }
          }
        ]
      },
      "inherits": {
        "type": {
          "name": "AcknowledgedResponseBase",
          "namespace": "_types"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "ml.start_data_frame_analytics"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "end",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Time",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "start",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Time",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "timeout",
            "required": false,
            "serverDefault": "20s",
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Time",
                "namespace": "_types"
              }
            }
          }
        ]
      },
      "description": "Starts one or more datafeeds.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "ml.start_datafeed"
      },
      "path": [
        {
          "description": "The ID of the datafeed to start",
          "name": "datafeed_id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "The start time from where the datafeed should begin",
          "name": "start",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "node",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "NodeIds",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "started",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "ml.start_datafeed"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Stops one or more data frame analytics jobs.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "ml.stop_data_frame_analytics"
      },
      "path": [
        {
          "description": "Identifier for the data frame analytics job. This identifier can contain lowercase alphanumeric characters (a-z and 0-9), hyphens, and underscores. It must start and end with alphanumeric characters.",
          "name": "id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "Whether to ignore if a wildcard expression matches no data frame analytics. (This includes `_all` string or when no data frame analytics have been specified)",
          "name": "allow_no_match",
          "required": false,
          "serverDefault": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "If true, the data frame analytics job is stopped forcefully.",
          "name": "force",
          "required": false,
          "serverDefault": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Controls the amount of time to wait until the data frame analytics job stops. Defaults to 20 seconds.",
          "name": "timeout",
          "required": false,
          "serverDefault": "20s",
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "stopped",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "ml.stop_data_frame_analytics"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "force",
            "required": false,
            "serverDefault": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "timeout",
            "required": false,
            "serverDefault": "20s",
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Time",
                "namespace": "_types"
              }
            }
          }
        ]
      },
      "description": "Stops one or more datafeeds.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "ml.stop_datafeed"
      },
      "path": [
        {
          "description": "The ID of the datafeed to stop",
          "name": "datafeed_id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "Whether to ignore if a wildcard expression matches no datafeeds. (This includes `_all` string or when no datafeeds have been specified)",
          "name": "allow_no_match",
          "required": false,
          "serverDefault": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "True if the datafeed should be forcefully stopped.",
          "name": "force",
          "required": false,
          "serverDefault": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "stopped",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "ml.stop_datafeed"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "properties",
        "properties": [
          {
            "description": "A description of the job.",
            "name": "description",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          },
          {
            "description": "The approximate maximum amount of memory resources that are permitted for analytical processing. The default value for data frame analytics jobs is 1gb. If your elasticsearch.yml file contains an xpack.ml.max_model_memory_limit setting, an error occurs when you try to create data frame analytics jobs that have model_memory_limit values greater than that setting.",
            "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-settings.html",
            "name": "model_memory_limit",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          },
          {
            "description": "The maximum number of threads to be used by the analysis. The default value is 1. Using more threads may decrease the time necessary to complete the analysis at the cost of using more CPU. Note that the process may use additional threads for operational functionality other than the analysis itself.",
            "name": "max_num_threads",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "integer",
                "namespace": "_types"
              }
            }
          },
          {
            "description": "Specifies whether this job can start when there is insufficient machine learning node capacity for it to be immediately assigned to a node.",
            "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-settings.html#advanced-ml-settings",
            "name": "allow_lazy_start",
            "required": false,
            "serverDefault": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          }
        ]
      },
      "description": "Updates certain properties of a data frame analytics job.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "ml.update_data_frame_analytics"
      },
      "path": [
        {
          "description": "Identifier for the data frame analytics job. This identifier can contain lowercase alphanumeric characters (a-z and 0-9), hyphens, and underscores. It must start and end with alphanumeric characters.",
          "name": "id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": []
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "id",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Id",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "create_time",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "long",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "version",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "VersionString",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "source",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "DataframeAnalyticsSource",
                "namespace": "ml._types"
              }
            }
          },
          {
            "name": "description",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "dest",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "DataframeAnalyticsDestination",
                "namespace": "ml._types"
              }
            }
          },
          {
            "name": "model_memory_limit",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "allow_lazy_start",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "max_num_threads",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "integer",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "analysis",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "DataframeAnalysisContainer",
                "namespace": "ml._types"
              }
            }
          },
          {
            "name": "analyzed_fields",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "DataframeAnalysisAnalyzedFields",
                "namespace": "ml._types"
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "ml.update_data_frame_analytics"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "add_items",
            "required": false,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              }
            }
          },
          {
            "name": "description",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "remove_items",
            "required": false,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              }
            }
          }
        ]
      },
      "description": "Updates the description of a filter, adds items, or removes items.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "ml.update_filter"
      },
      "path": [
        {
          "description": "The ID of the filter to update",
          "name": "filter_id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": []
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "description",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "filter_id",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Id",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "items",
            "required": true,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "ml.update_filter"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "allow_lazy_open",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "analysis_limits",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "AnalysisMemoryLimit",
                "namespace": "ml._types"
              }
            }
          },
          {
            "description": "Advanced configuration option. The time between each periodic persistence of the model.\nThe default value is a randomized value between 3 to 4 hours, which avoids all jobs persisting at exactly the same time. The smallest allowed value is 1 hour.\nFor very large models (several GB), persistence could take 10-20 minutes, so do not set the value too low.\nIf the job is open when you make the update, you must stop the datafeed, close the job, then reopen the job and restart the datafeed for the changes to take effect.",
            "name": "background_persist_interval",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Time",
                "namespace": "_types"
              }
            }
          },
          {
            "description": "Advanced configuration option. Contains custom meta data about the job. For example, it can contain custom URL information as shown in Adding custom URLs to machine learning results.",
            "docId": "ml.customUrls",
            "name": "custom_settings",
            "required": false,
            "type": {
              "key": {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              },
              "kind": "dictionary_of",
              "singleKey": false,
              "value": {
                "kind": "user_defined_value"
              }
            }
          },
          {
            "name": "categorization_filters",
            "required": false,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              }
            }
          },
          {
            "description": "A description of the job.",
            "name": "description",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "model_plot_config",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "ModelPlotConfig",
                "namespace": "ml._types"
              }
            }
          },
          {
            "name": "daily_model_snapshot_retention_after_days",
            "required": false,
            "serverDefault": 1,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "long",
                "namespace": "_types"
              }
            }
          },
          {
            "description": "Advanced configuration option, which affects the automatic removal of old model snapshots for this job. It specifies the maximum period of time (in days) that snapshots are retained. This period is relative to the timestamp of the most recent snapshot for this job.",
            "name": "model_snapshot_retention_days",
            "required": false,
            "serverDefault": 10,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "long",
                "namespace": "_types"
              }
            }
          },
          {
            "description": "Advanced configuration option. The period over which adjustments to the score are applied, as new data is seen.",
            "name": "renormalization_window_days",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "long",
                "namespace": "_types"
              }
            }
          },
          {
            "description": "Advanced configuration option. The period of time (in days) that results are retained. Age is calculated relative to the timestamp of the latest bucket result. If this property has a non-null value, once per day at 00:30 (server time), results that are the specified number of days older than the latest bucket result are deleted from Elasticsearch. The default value is null, which means all results are retained.",
            "name": "results_retention_days",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "long",
                "namespace": "_types"
              }
            }
          },
          {
            "description": "A list of job groups. A job can belong to no groups or many.",
            "name": "groups",
            "required": false,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              }
            }
          },
          {
            "description": "An array of detector update objects.",
            "name": "detectors",
            "required": false,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "Detector",
                  "namespace": "ml._types"
                }
              }
            }
          },
          {
            "description": "Settings related to how categorization interacts with partition fields.",
            "name": "per_partition_categorization",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "PerPartitionCategorization",
                "namespace": "ml._types"
              }
            }
          }
        ]
      },
      "description": "Updates certain properties of an anomaly detection job.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "ml.update_job"
      },
      "path": [
        {
          "description": "Identifier for the job",
          "name": "job_id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": []
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "allow_lazy_open",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "analysis_config",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "AnalysisConfigRead",
                "namespace": "ml._types"
              }
            }
          },
          {
            "name": "analysis_limits",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "AnalysisLimits",
                "namespace": "ml._types"
              }
            }
          },
          {
            "name": "background_persist_interval",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Time",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "create_time",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "EpochMillis",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "finished_time",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "EpochMillis",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "custom_settings",
            "required": false,
            "type": {
              "key": {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              },
              "kind": "dictionary_of",
              "singleKey": false,
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              }
            }
          },
          {
            "name": "daily_model_snapshot_retention_after_days",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "long",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "data_description",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "DataDescription",
                "namespace": "ml._types"
              }
            }
          },
          {
            "name": "datafeed_config",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Datafeed",
                "namespace": "ml._types"
              }
            }
          },
          {
            "name": "description",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "groups",
            "required": false,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              }
            }
          },
          {
            "name": "job_id",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Id",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "job_type",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "job_version",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "VersionString",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "model_plot_config",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "ModelPlotConfig",
                "namespace": "ml._types"
              }
            }
          },
          {
            "name": "model_snapshot_id",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Id",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "model_snapshot_retention_days",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "long",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "renormalization_window_days",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "long",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "results_index_name",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "IndexName",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "results_retention_days",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "long",
                "namespace": "_types"
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "ml.update_job"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "description",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "retain",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          }
        ]
      },
      "description": "Updates certain properties of a snapshot.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "ml.update_model_snapshot"
      },
      "path": [
        {
          "description": "The ID of the job to fetch",
          "name": "job_id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "The ID of the snapshot to update",
          "name": "snapshot_id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": []
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "model",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "ModelSnapshot",
                "namespace": "ml._types"
              }
            }
          }
        ]
      },
      "inherits": {
        "type": {
          "name": "AcknowledgedResponseBase",
          "namespace": "_types"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "ml.update_model_snapshot"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Upgrades a given job snapshot to the current major version.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "ml.upgrade_job_snapshot"
      },
      "path": [
        {
          "description": "Identifier for the anomaly detection job.",
          "name": "job_id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "A numerical character string that uniquely identifies the model snapshot.",
          "name": "snapshot_id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "When true, the API won’t respond until the upgrade is complete. Otherwise, it responds as soon as the upgrade task is assigned to a node.",
          "name": "wait_for_completion",
          "required": false,
          "serverDefault": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Controls the time to wait for the request to complete.",
          "name": "timeout",
          "required": false,
          "serverDefault": "30s",
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "description": "The ID of the assigned node for the upgrade task if it is still running.",
            "name": "node",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "NodeId",
                "namespace": "_types"
              }
            }
          },
          {
            "description": "When true, this means the task is complete. When false, it is still running.",
            "name": "completed",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "ml.upgrade_job_snapshot"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "job_id",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Id",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "analysis_config",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "AnalysisConfig",
                "namespace": "ml._types"
              }
            }
          },
          {
            "name": "analysis_limits",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "AnalysisLimits",
                "namespace": "ml._types"
              }
            }
          },
          {
            "name": "data_description",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "DataDescription",
                "namespace": "ml._types"
              }
            }
          },
          {
            "name": "description",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "model_plot",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "ModelPlotConfig",
                "namespace": "ml._types"
              }
            }
          },
          {
            "name": "model_snapshot_retention_days",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "long",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "results_index_name",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "IndexName",
                "namespace": "_types"
              }
            }
          }
        ]
      },
      "description": "Validates an anomaly detection job.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "ml.validate"
      },
      "path": [],
      "query": []
    },
    {
      "body": {
        "kind": "properties",
        "properties": []
      },
      "inherits": {
        "type": {
          "name": "AcknowledgedResponseBase",
          "namespace": "_types"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "ml.validate"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "identifier": "detector",
        "kind": "value",
        "value": {
          "kind": "instance_of",
          "type": {
            "name": "Detector",
            "namespace": "ml._types"
          }
        }
      },
      "description": "Validates an anomaly detection detector.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "ml.validate_detector"
      },
      "path": [],
      "query": []
    },
    {
      "body": {
        "kind": "properties",
        "properties": []
      },
      "inherits": {
        "type": {
          "name": "AcknowledgedResponseBase",
          "namespace": "_types"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "ml.validate_detector"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "identifier": "operations",
        "kind": "value",
        "value": {
          "kind": "array_of",
          "value": {
            "items": [
              {
                "kind": "instance_of",
                "type": {
                  "name": "OperationContainer",
                  "namespace": "_global.bulk"
                }
              },
              {
                "kind": "instance_of",
                "type": {
                  "name": "TSource",
                  "namespace": "monitoring.bulk"
                }
              }
            ],
            "kind": "union_of"
          }
        }
      },
      "description": "Used by the monitoring features to send monitoring data.",
      "generics": [
        {
          "name": "TSource",
          "namespace": "monitoring.bulk"
        }
      ],
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "monitoring.bulk"
      },
      "path": [
        {
          "deprecation": {
            "description": "",
            "version": "7.0.0"
          },
          "description": "Default document type for items which don't provide one",
          "name": "type",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ],
      "query": [
        {
          "description": "Identifier of the monitored system",
          "name": "system_id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "",
          "name": "system_api_version",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Collection interval (e.g., '10s' or '10000ms') of the payload",
          "name": "interval",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "TimeSpan",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "error",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "ErrorCause",
                "namespace": "_types"
              }
            }
          },
          {
            "description": "True if there is was an error",
            "name": "errors",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          },
          {
            "description": "Was collection disabled?",
            "name": "ignored",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "took",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "long",
                "namespace": "_types"
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "monitoring.bulk"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "AdaptiveSelection",
        "namespace": "nodes._types"
      },
      "properties": [
        {
          "name": "avg_queue_size",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "avg_response_time",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "avg_response_time_ns",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "avg_service_time",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "avg_service_time_ns",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "outgoing_searches",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "rank",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "Breaker",
        "namespace": "nodes._types"
      },
      "properties": [
        {
          "name": "estimated_size",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "estimated_size_in_bytes",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "limit_size",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "limit_size_in_bytes",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "overhead",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "float",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "tripped",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "float",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "Cpu",
        "namespace": "nodes._types"
      },
      "properties": [
        {
          "name": "percent",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "sys",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "sys_in_millis",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "total",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "total_in_millis",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "user",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "user_in_millis",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "load_average",
          "required": false,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "double",
                "namespace": "_types"
              }
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "DataPathStats",
        "namespace": "nodes._types"
      },
      "properties": [
        {
          "name": "available",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "available_in_bytes",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "disk_queue",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "disk_reads",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "disk_read_size",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "disk_read_size_in_bytes",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "disk_writes",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "disk_write_size",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "disk_write_size_in_bytes",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "free",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "free_in_bytes",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "mount",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "path",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "total",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "total_in_bytes",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "MemoryStats",
          "namespace": "nodes._types"
        }
      },
      "kind": "interface",
      "name": {
        "name": "ExtendedMemoryStats",
        "namespace": "nodes._types"
      },
      "properties": [
        {
          "name": "free_percent",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "used_percent",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "total_in_bytes",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "free_in_bytes",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "used_in_bytes",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "FileSystem",
        "namespace": "nodes._types"
      },
      "properties": [
        {
          "name": "data",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "DataPathStats",
                "namespace": "nodes._types"
              }
            }
          }
        },
        {
          "name": "timestamp",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "total",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "FileSystemTotal",
              "namespace": "nodes._types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "FileSystemTotal",
        "namespace": "nodes._types"
      },
      "properties": [
        {
          "name": "available",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "available_in_bytes",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "free",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "free_in_bytes",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "total",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "total_in_bytes",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "GarbageCollector",
        "namespace": "nodes._types"
      },
      "properties": [
        {
          "name": "collectors",
          "required": true,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "GarbageCollectorTotal",
                "namespace": "nodes._types"
              }
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "GarbageCollectorTotal",
        "namespace": "nodes._types"
      },
      "properties": [
        {
          "name": "collection_count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "collection_time",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "collection_time_in_millis",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "Http",
        "namespace": "nodes._types"
      },
      "properties": [
        {
          "name": "current_open",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "total_opened",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "Ingest",
        "namespace": "nodes._types"
      },
      "properties": [
        {
          "name": "pipelines",
          "required": true,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "IngestTotal",
                "namespace": "nodes._types"
              }
            }
          }
        },
        {
          "name": "total",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IngestTotal",
              "namespace": "nodes._types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "IngestTotal",
        "namespace": "nodes._types"
      },
      "properties": [
        {
          "name": "count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "current",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "failed",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "processors",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "KeyedProcessor",
                "namespace": "nodes._types"
              }
            }
          }
        },
        {
          "name": "time_in_millis",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "Jvm",
        "namespace": "nodes._types"
      },
      "properties": [
        {
          "name": "buffer_pools",
          "required": true,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "NodeBufferPool",
                "namespace": "nodes._types"
              }
            }
          }
        },
        {
          "name": "classes",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "JvmClasses",
              "namespace": "nodes._types"
            }
          }
        },
        {
          "name": "gc",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "GarbageCollector",
              "namespace": "nodes._types"
            }
          }
        },
        {
          "name": "mem",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "MemoryStats",
              "namespace": "nodes._types"
            }
          }
        },
        {
          "name": "threads",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "JvmThreads",
              "namespace": "nodes._types"
            }
          }
        },
        {
          "name": "timestamp",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "uptime",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "uptime_in_millis",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "JvmClasses",
        "namespace": "nodes._types"
      },
      "properties": [
        {
          "name": "current_loaded_count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "total_loaded_count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "total_unloaded_count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "JvmThreads",
        "namespace": "nodes._types"
      },
      "properties": [
        {
          "name": "count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "peak_count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "KeyedProcessor",
        "namespace": "nodes._types"
      },
      "properties": [
        {
          "name": "statistics",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Process",
              "namespace": "nodes._types"
            }
          }
        },
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "MemoryStats",
        "namespace": "nodes._types"
      },
      "properties": [
        {
          "name": "resident",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "resident_in_bytes",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "share",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "share_in_bytes",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "total_virtual",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "total_virtual_in_bytes",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "total_in_bytes",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "free_in_bytes",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "used_in_bytes",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "NodeBufferPool",
        "namespace": "nodes._types"
      },
      "properties": [
        {
          "name": "count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "total_capacity",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "total_capacity_in_bytes",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "used",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "used_in_bytes",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "NodesResponseBase",
        "namespace": "nodes._types"
      },
      "properties": [
        {
          "description": "Contains statistics about the number of nodes selected by the request’s node filters.",
          "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/cluster.html#cluster-nodes",
          "identifier": "node_stats",
          "name": "_nodes",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "NodeStatistics",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "OperatingSystem",
        "namespace": "nodes._types"
      },
      "properties": [
        {
          "name": "cpu",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Cpu",
              "namespace": "nodes._types"
            }
          }
        },
        {
          "name": "mem",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ExtendedMemoryStats",
              "namespace": "nodes._types"
            }
          }
        },
        {
          "name": "swap",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "MemoryStats",
              "namespace": "nodes._types"
            }
          }
        },
        {
          "name": "timestamp",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "Process",
        "namespace": "nodes._types"
      },
      "properties": [
        {
          "name": "cpu",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Cpu",
              "namespace": "nodes._types"
            }
          }
        },
        {
          "name": "mem",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "MemoryStats",
              "namespace": "nodes._types"
            }
          }
        },
        {
          "name": "open_file_descriptors",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "timestamp",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "Scripting",
        "namespace": "nodes._types"
      },
      "properties": [
        {
          "name": "cache_evictions",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "compilations",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "Stats",
        "namespace": "nodes._types"
      },
      "properties": [
        {
          "name": "adaptive_selection",
          "required": true,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "AdaptiveSelection",
                "namespace": "nodes._types"
              }
            }
          }
        },
        {
          "name": "breakers",
          "required": true,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "Breaker",
                "namespace": "nodes._types"
              }
            }
          }
        },
        {
          "name": "fs",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "FileSystem",
              "namespace": "nodes._types"
            }
          }
        },
        {
          "name": "host",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Host",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "http",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Http",
              "namespace": "nodes._types"
            }
          }
        },
        {
          "name": "indices",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndexStats",
              "namespace": "indices.stats"
            }
          }
        },
        {
          "name": "ingest",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Ingest",
              "namespace": "nodes._types"
            }
          }
        },
        {
          "name": "ip",
          "required": true,
          "type": {
            "items": [
              {
                "kind": "instance_of",
                "type": {
                  "name": "Ip",
                  "namespace": "_types"
                }
              },
              {
                "kind": "array_of",
                "value": {
                  "kind": "instance_of",
                  "type": {
                    "name": "Ip",
                    "namespace": "_types"
                  }
                }
              }
            ],
            "kind": "union_of"
          }
        },
        {
          "name": "jvm",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Jvm",
              "namespace": "nodes._types"
            }
          }
        },
        {
          "name": "name",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "os",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "OperatingSystem",
              "namespace": "nodes._types"
            }
          }
        },
        {
          "name": "process",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Process",
              "namespace": "nodes._types"
            }
          }
        },
        {
          "name": "roles",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "NodeRoles",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "script",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Scripting",
              "namespace": "nodes._types"
            }
          }
        },
        {
          "name": "thread_pool",
          "required": true,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "ThreadCount",
                "namespace": "nodes._types"
              }
            }
          }
        },
        {
          "name": "timestamp",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "transport",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Transport",
              "namespace": "nodes._types"
            }
          }
        },
        {
          "name": "transport_address",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "TransportAddress",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "attributes",
          "required": true,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "Field",
                "namespace": "_types"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "ThreadCount",
        "namespace": "nodes._types"
      },
      "properties": [
        {
          "name": "active",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "completed",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "largest",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "queue",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "rejected",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "threads",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "Transport",
        "namespace": "nodes._types"
      },
      "properties": [
        {
          "name": "rx_count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "rx_size",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "rx_size_in_bytes",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "server_open",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "tx_count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "tx_size",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "tx_size_in_bytes",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "HotThread",
        "namespace": "nodes.hot_threads"
      },
      "properties": [
        {
          "name": "hosts",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "Host",
                "namespace": "_types"
              }
            }
          }
        },
        {
          "name": "node_id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "node_name",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "threads",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Returns information about hot threads on each node in the cluster.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "nodes.hot_threads"
      },
      "path": [
        {
          "description": "A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes",
          "name": "node_id",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "NodeIds",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "Don't show threads that are in known-idle places, such as waiting on a socket select or pulling from an empty task queue (default: true)",
          "name": "ignore_idle_threads",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "The interval for the second sampling of threads",
          "name": "interval",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Number of samples of thread stacktrace (default: 10)",
          "name": "snapshots",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Specify the number of threads to provide information for (default: 3)",
          "name": "threads",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "thread_type",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ThreadType",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Explicit operation timeout",
          "name": "timeout",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "hot_threads",
            "required": true,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "HotThread",
                  "namespace": "nodes.hot_threads"
                }
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "nodes.hot_threads"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "NodeInfo",
        "namespace": "nodes.info"
      },
      "properties": [
        {
          "name": "attributes",
          "required": true,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        },
        {
          "name": "build_flavor",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Short hash of the last git commit in this release.",
          "name": "build_hash",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "build_type",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "The node’s host name.",
          "name": "host",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Host",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "http",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "NodeInfoHttp",
              "namespace": "nodes.info"
            }
          }
        },
        {
          "description": "The node’s IP address.",
          "name": "ip",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Ip",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "jvm",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "NodeJvmInfo",
              "namespace": "nodes.info"
            }
          }
        },
        {
          "description": "The node's name",
          "name": "name",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "network",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "NodeInfoNetwork",
              "namespace": "nodes.info"
            }
          }
        },
        {
          "name": "os",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "NodeOperatingSystemInfo",
              "namespace": "nodes.info"
            }
          }
        },
        {
          "name": "plugins",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "PluginStats",
                "namespace": "_types"
              }
            }
          }
        },
        {
          "name": "process",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "NodeProcessInfo",
              "namespace": "nodes.info"
            }
          }
        },
        {
          "name": "roles",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "NodeRoles",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "settings",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "NodeInfoSettings",
              "namespace": "nodes.info"
            }
          }
        },
        {
          "name": "thread_pool",
          "required": false,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "NodeThreadPoolInfo",
                "namespace": "nodes.info"
              }
            }
          }
        },
        {
          "description": "Total heap allowed to be used to hold recently indexed documents before they must be written to disk. This size is a shared pool across all shards on this node, and is controlled by Indexing Buffer settings.",
          "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/master/indexing-buffer.html",
          "name": "total_indexing_buffer",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Same as total_indexing_buffer, but expressed in bytes.",
          "name": "total_indexing_buffer_in_bytes",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ByteSize",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "transport",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "NodeInfoTransport",
              "namespace": "nodes.info"
            }
          }
        },
        {
          "description": "Host and port where transport HTTP connections are accepted.",
          "name": "transport_address",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "TransportAddress",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Elasticsearch version running on this node.",
          "name": "version",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "VersionString",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "modules",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "PluginStats",
                "namespace": "_types"
              }
            }
          }
        },
        {
          "name": "ingest",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "NodeInfoIngest",
              "namespace": "nodes.info"
            }
          }
        },
        {
          "name": "aggregations",
          "required": false,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "NodeInfoAggregation",
                "namespace": "nodes.info"
              }
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "NodeInfoAction",
        "namespace": "nodes.info"
      },
      "properties": [
        {
          "name": "destructive_requires_name",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "NodeInfoAggregation",
        "namespace": "nodes.info"
      },
      "properties": [
        {
          "name": "types",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "NodeInfoBootstrap",
        "namespace": "nodes.info"
      },
      "properties": [
        {
          "name": "memory_lock",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "NodeInfoClient",
        "namespace": "nodes.info"
      },
      "properties": [
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "NodeInfoDiscover",
        "namespace": "nodes.info"
      },
      "properties": [
        {
          "name": "seed_hosts",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "NodeInfoHttp",
        "namespace": "nodes.info"
      },
      "properties": [
        {
          "name": "bound_address",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        },
        {
          "name": "max_content_length",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ByteSize",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "max_content_length_in_bytes",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "publish_address",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "NodeInfoIngest",
        "namespace": "nodes.info"
      },
      "properties": [
        {
          "name": "processors",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "NodeInfoIngestProcessor",
                "namespace": "nodes.info"
              }
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "NodeInfoIngestDownloader",
        "namespace": "nodes.info"
      },
      "properties": [
        {
          "name": "enabled",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "NodeInfoIngestInfo",
        "namespace": "nodes.info"
      },
      "properties": [
        {
          "name": "downloader",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "NodeInfoIngestDownloader",
              "namespace": "nodes.info"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "NodeInfoIngestProcessor",
        "namespace": "nodes.info"
      },
      "properties": [
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "NodeInfoJvmMemory",
        "namespace": "nodes.info"
      },
      "properties": [
        {
          "name": "direct_max",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ByteSize",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "direct_max_in_bytes",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "heap_init",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ByteSize",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "heap_init_in_bytes",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "heap_max",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ByteSize",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "heap_max_in_bytes",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "non_heap_init",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ByteSize",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "non_heap_init_in_bytes",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "non_heap_max",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ByteSize",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "non_heap_max_in_bytes",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "NodeInfoMemory",
        "namespace": "nodes.info"
      },
      "properties": [
        {
          "name": "total",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "total_in_bytes",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "NodeInfoNetwork",
        "namespace": "nodes.info"
      },
      "properties": [
        {
          "name": "primary_interface",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "NodeInfoNetworkInterface",
              "namespace": "nodes.info"
            }
          }
        },
        {
          "name": "refresh_interval",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "NodeInfoNetworkInterface",
        "namespace": "nodes.info"
      },
      "properties": [
        {
          "name": "address",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "mac_address",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "name",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "NodeInfoOSCPU",
        "namespace": "nodes.info"
      },
      "properties": [
        {
          "name": "cache_size",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "cache_size_in_bytes",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "cores_per_socket",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "mhz",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "model",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "total_cores",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "total_sockets",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "vendor",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "NodeInfoPath",
        "namespace": "nodes.info"
      },
      "properties": [
        {
          "name": "logs",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "home",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "repo",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        },
        {
          "name": "data",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "NodeInfoRepositories",
        "namespace": "nodes.info"
      },
      "properties": [
        {
          "name": "url",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "NodeInfoRepositoriesUrl",
              "namespace": "nodes.info"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "NodeInfoRepositoriesUrl",
        "namespace": "nodes.info"
      },
      "properties": [
        {
          "name": "allowed_urls",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "NodeInfoScript",
        "namespace": "nodes.info"
      },
      "properties": [
        {
          "name": "allowed_types",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "disable_max_compilations_rate",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "NodeInfoSearch",
        "namespace": "nodes.info"
      },
      "properties": [
        {
          "name": "remote",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "NodeInfoSearchRemote",
              "namespace": "nodes.info"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "NodeInfoSearchRemote",
        "namespace": "nodes.info"
      },
      "properties": [
        {
          "name": "connect",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "NodeInfoSettings",
        "namespace": "nodes.info"
      },
      "properties": [
        {
          "name": "cluster",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "NodeInfoSettingsCluster",
              "namespace": "nodes.info"
            }
          }
        },
        {
          "name": "node",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "NodeInfoSettingsNode",
              "namespace": "nodes.info"
            }
          }
        },
        {
          "name": "path",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "NodeInfoPath",
              "namespace": "nodes.info"
            }
          }
        },
        {
          "name": "repositories",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "NodeInfoRepositories",
              "namespace": "nodes.info"
            }
          }
        },
        {
          "name": "discovery",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "NodeInfoDiscover",
              "namespace": "nodes.info"
            }
          }
        },
        {
          "name": "action",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "NodeInfoAction",
              "namespace": "nodes.info"
            }
          }
        },
        {
          "name": "client",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "NodeInfoClient",
              "namespace": "nodes.info"
            }
          }
        },
        {
          "name": "http",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "NodeInfoSettingsHttp",
              "namespace": "nodes.info"
            }
          }
        },
        {
          "name": "bootstrap",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "NodeInfoBootstrap",
              "namespace": "nodes.info"
            }
          }
        },
        {
          "name": "transport",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "NodeInfoSettingsTransport",
              "namespace": "nodes.info"
            }
          }
        },
        {
          "name": "network",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "NodeInfoSettingsNetwork",
              "namespace": "nodes.info"
            }
          }
        },
        {
          "name": "xpack",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "NodeInfoXpack",
              "namespace": "nodes.info"
            }
          }
        },
        {
          "name": "script",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "NodeInfoScript",
              "namespace": "nodes.info"
            }
          }
        },
        {
          "name": "search",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "NodeInfoSearch",
              "namespace": "nodes.info"
            }
          }
        },
        {
          "name": "ingest",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "NodeInfoSettingsIngest",
              "namespace": "nodes.info"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "NodeInfoSettingsCluster",
        "namespace": "nodes.info"
      },
      "properties": [
        {
          "name": "name",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "routing",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndexRouting",
              "namespace": "indices._types"
            }
          }
        },
        {
          "name": "election",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "NodeInfoSettingsClusterElection",
              "namespace": "nodes.info"
            }
          }
        },
        {
          "name": "initial_master_nodes",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "NodeInfoSettingsClusterElection",
        "namespace": "nodes.info"
      },
      "properties": [
        {
          "name": "strategy",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "NodeInfoSettingsHttp",
        "namespace": "nodes.info"
      },
      "properties": [
        {
          "name": "type",
          "required": true,
          "type": {
            "items": [
              {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              },
              {
                "kind": "instance_of",
                "type": {
                  "name": "NodeInfoSettingsHttpType",
                  "namespace": "nodes.info"
                }
              }
            ],
            "kind": "union_of"
          }
        },
        {
          "name": "type.default",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "compression",
          "required": false,
          "type": {
            "items": [
              {
                "kind": "instance_of",
                "type": {
                  "name": "boolean",
                  "namespace": "internal"
                }
              },
              {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              }
            ],
            "kind": "union_of"
          }
        },
        {
          "name": "port",
          "required": false,
          "type": {
            "items": [
              {
                "kind": "instance_of",
                "type": {
                  "name": "integer",
                  "namespace": "_types"
                }
              },
              {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              }
            ],
            "kind": "union_of"
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "NodeInfoSettingsHttpType",
        "namespace": "nodes.info"
      },
      "properties": [
        {
          "name": "default",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "NodeInfoSettingsIngest",
        "namespace": "nodes.info"
      },
      "properties": [
        {
          "name": "attachment",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "NodeInfoIngestInfo",
              "namespace": "nodes.info"
            }
          }
        },
        {
          "name": "append",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "NodeInfoIngestInfo",
              "namespace": "nodes.info"
            }
          }
        },
        {
          "name": "csv",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "NodeInfoIngestInfo",
              "namespace": "nodes.info"
            }
          }
        },
        {
          "name": "convert",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "NodeInfoIngestInfo",
              "namespace": "nodes.info"
            }
          }
        },
        {
          "name": "date",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "NodeInfoIngestInfo",
              "namespace": "nodes.info"
            }
          }
        },
        {
          "name": "date_index_name",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "NodeInfoIngestInfo",
              "namespace": "nodes.info"
            }
          }
        },
        {
          "name": "dot_expander",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "NodeInfoIngestInfo",
              "namespace": "nodes.info"
            }
          }
        },
        {
          "name": "enrich",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "NodeInfoIngestInfo",
              "namespace": "nodes.info"
            }
          }
        },
        {
          "name": "fail",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "NodeInfoIngestInfo",
              "namespace": "nodes.info"
            }
          }
        },
        {
          "name": "foreach",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "NodeInfoIngestInfo",
              "namespace": "nodes.info"
            }
          }
        },
        {
          "name": "json",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "NodeInfoIngestInfo",
              "namespace": "nodes.info"
            }
          }
        },
        {
          "name": "user_agent",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "NodeInfoIngestInfo",
              "namespace": "nodes.info"
            }
          }
        },
        {
          "name": "kv",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "NodeInfoIngestInfo",
              "namespace": "nodes.info"
            }
          }
        },
        {
          "name": "geoip",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "NodeInfoIngestInfo",
              "namespace": "nodes.info"
            }
          }
        },
        {
          "name": "grok",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "NodeInfoIngestInfo",
              "namespace": "nodes.info"
            }
          }
        },
        {
          "name": "gsub",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "NodeInfoIngestInfo",
              "namespace": "nodes.info"
            }
          }
        },
        {
          "name": "join",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "NodeInfoIngestInfo",
              "namespace": "nodes.info"
            }
          }
        },
        {
          "name": "lowercase",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "NodeInfoIngestInfo",
              "namespace": "nodes.info"
            }
          }
        },
        {
          "name": "remove",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "NodeInfoIngestInfo",
              "namespace": "nodes.info"
            }
          }
        },
        {
          "name": "rename",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "NodeInfoIngestInfo",
              "namespace": "nodes.info"
            }
          }
        },
        {
          "name": "script",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "NodeInfoIngestInfo",
              "namespace": "nodes.info"
            }
          }
        },
        {
          "name": "set",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "NodeInfoIngestInfo",
              "namespace": "nodes.info"
            }
          }
        },
        {
          "name": "sort",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "NodeInfoIngestInfo",
              "namespace": "nodes.info"
            }
          }
        },
        {
          "name": "split",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "NodeInfoIngestInfo",
              "namespace": "nodes.info"
            }
          }
        },
        {
          "name": "trim",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "NodeInfoIngestInfo",
              "namespace": "nodes.info"
            }
          }
        },
        {
          "name": "uppercase",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "NodeInfoIngestInfo",
              "namespace": "nodes.info"
            }
          }
        },
        {
          "name": "urldecode",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "NodeInfoIngestInfo",
              "namespace": "nodes.info"
            }
          }
        },
        {
          "name": "bytes",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "NodeInfoIngestInfo",
              "namespace": "nodes.info"
            }
          }
        },
        {
          "name": "dissect",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "NodeInfoIngestInfo",
              "namespace": "nodes.info"
            }
          }
        },
        {
          "name": "set_security_user",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "NodeInfoIngestInfo",
              "namespace": "nodes.info"
            }
          }
        },
        {
          "name": "pipeline",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "NodeInfoIngestInfo",
              "namespace": "nodes.info"
            }
          }
        },
        {
          "name": "drop",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "NodeInfoIngestInfo",
              "namespace": "nodes.info"
            }
          }
        },
        {
          "name": "circle",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "NodeInfoIngestInfo",
              "namespace": "nodes.info"
            }
          }
        },
        {
          "name": "inference",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "NodeInfoIngestInfo",
              "namespace": "nodes.info"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "NodeInfoSettingsNetwork",
        "namespace": "nodes.info"
      },
      "properties": [
        {
          "name": "host",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Host",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "NodeInfoSettingsNode",
        "namespace": "nodes.info"
      },
      "properties": [
        {
          "name": "name",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "attr",
          "required": true,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "user_defined_value"
            }
          }
        },
        {
          "name": "max_local_storage_nodes",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "NodeInfoSettingsTransport",
        "namespace": "nodes.info"
      },
      "properties": [
        {
          "name": "type",
          "required": true,
          "type": {
            "items": [
              {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              },
              {
                "kind": "instance_of",
                "type": {
                  "name": "NodeInfoSettingsTransportType",
                  "namespace": "nodes.info"
                }
              }
            ],
            "kind": "union_of"
          }
        },
        {
          "name": "type.default",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "features",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "NodeInfoSettingsTransportFeatures",
              "namespace": "nodes.info"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "NodeInfoSettingsTransportFeatures",
        "namespace": "nodes.info"
      },
      "properties": [
        {
          "name": "x-pack",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "NodeInfoSettingsTransportType",
        "namespace": "nodes.info"
      },
      "properties": [
        {
          "name": "default",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "NodeInfoTransport",
        "namespace": "nodes.info"
      },
      "properties": [
        {
          "name": "bound_address",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        },
        {
          "name": "publish_address",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "profiles",
          "required": true,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "NodeInfoXpack",
        "namespace": "nodes.info"
      },
      "properties": [
        {
          "name": "license",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "NodeInfoXpackLicense",
              "namespace": "nodes.info"
            }
          }
        },
        {
          "name": "security",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "NodeInfoXpackSecurity",
              "namespace": "nodes.info"
            }
          }
        },
        {
          "name": "notification",
          "required": false,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "user_defined_value"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "NodeInfoXpackLicense",
        "namespace": "nodes.info"
      },
      "properties": [
        {
          "name": "self_generated",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "NodeInfoXpackLicenseType",
              "namespace": "nodes.info"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "NodeInfoXpackLicenseType",
        "namespace": "nodes.info"
      },
      "properties": [
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "NodeInfoXpackSecurity",
        "namespace": "nodes.info"
      },
      "properties": [
        {
          "name": "http",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "NodeInfoXpackSecuritySsl",
              "namespace": "nodes.info"
            }
          }
        },
        {
          "name": "enabled",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "transport",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "NodeInfoXpackSecuritySsl",
              "namespace": "nodes.info"
            }
          }
        },
        {
          "name": "authc",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "NodeInfoXpackSecurityAuthc",
              "namespace": "nodes.info"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "NodeInfoXpackSecurityAuthc",
        "namespace": "nodes.info"
      },
      "properties": [
        {
          "name": "realms",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "NodeInfoXpackSecurityAuthcRealms",
              "namespace": "nodes.info"
            }
          }
        },
        {
          "name": "token",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "NodeInfoXpackSecurityAuthcToken",
              "namespace": "nodes.info"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "NodeInfoXpackSecurityAuthcRealms",
        "namespace": "nodes.info"
      },
      "properties": [
        {
          "name": "file",
          "required": false,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "NodeInfoXpackSecurityAuthcRealmsStatus",
                "namespace": "nodes.info"
              }
            }
          }
        },
        {
          "name": "native",
          "required": false,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "NodeInfoXpackSecurityAuthcRealmsStatus",
                "namespace": "nodes.info"
              }
            }
          }
        },
        {
          "name": "pki",
          "required": false,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "NodeInfoXpackSecurityAuthcRealmsStatus",
                "namespace": "nodes.info"
              }
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "NodeInfoXpackSecurityAuthcRealmsStatus",
        "namespace": "nodes.info"
      },
      "properties": [
        {
          "name": "enabled",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "order",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "NodeInfoXpackSecurityAuthcToken",
        "namespace": "nodes.info"
      },
      "properties": [
        {
          "name": "enabled",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "NodeInfoXpackSecuritySsl",
        "namespace": "nodes.info"
      },
      "properties": [
        {
          "name": "ssl",
          "required": true,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "NodeJvmInfo",
        "namespace": "nodes.info"
      },
      "properties": [
        {
          "name": "gc_collectors",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        },
        {
          "name": "mem",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "NodeInfoJvmMemory",
              "namespace": "nodes.info"
            }
          }
        },
        {
          "name": "memory_pools",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        },
        {
          "name": "pid",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "start_time_in_millis",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "version",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "VersionString",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "vm_name",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "vm_vendor",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "vm_version",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "VersionString",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "bundled_jdk",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "using_bundled_jdk",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "using_compressed_ordinary_object_pointers",
          "required": false,
          "type": {
            "items": [
              {
                "kind": "instance_of",
                "type": {
                  "name": "boolean",
                  "namespace": "internal"
                }
              },
              {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              }
            ],
            "kind": "union_of"
          }
        },
        {
          "name": "input_arguments",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "NodeOperatingSystemInfo",
        "namespace": "nodes.info"
      },
      "properties": [
        {
          "description": "Name of the JVM architecture (ex: amd64, x86)",
          "name": "arch",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Number of processors available to the Java virtual machine",
          "name": "available_processors",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "The number of processors actually used to calculate thread pool size. This number can be set with the node.processors setting of a node and defaults to the number of processors reported by the OS.",
          "name": "allocated_processors",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Name of the operating system (ex: Linux, Windows, Mac OS X)",
          "name": "name",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "pretty_name",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Refresh interval for the OS statistics",
          "name": "refresh_interval_in_millis",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Version of the operating system",
          "name": "version",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "VersionString",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "cpu",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "NodeInfoOSCPU",
              "namespace": "nodes.info"
            }
          }
        },
        {
          "name": "mem",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "NodeInfoMemory",
              "namespace": "nodes.info"
            }
          }
        },
        {
          "name": "swap",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "NodeInfoMemory",
              "namespace": "nodes.info"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "NodeProcessInfo",
        "namespace": "nodes.info"
      },
      "properties": [
        {
          "description": "Process identifier (PID)",
          "name": "id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Indicates if the process address space has been successfully locked in memory",
          "name": "mlockall",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Refresh interval for the process statistics",
          "name": "refresh_interval_in_millis",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "NodeThreadPoolInfo",
        "namespace": "nodes.info"
      },
      "properties": [
        {
          "name": "core",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "keep_alive",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "max",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "queue_size",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "size",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Returns information about nodes in the cluster.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "nodes.info"
      },
      "path": [
        {
          "description": "Comma-separated list of node IDs or names used to limit returned information.",
          "name": "node_id",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "NodeIds",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Limits the information returned to the specific metrics. Supports a comma-separated list, such as http,ingest.",
          "name": "metric",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Metrics",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "If true, returns settings in flat format.",
          "name": "flat_settings",
          "required": false,
          "serverDefault": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Period to wait for a connection to the master node. If no response is received before the timeout expires, the request fails and returns an error.",
          "name": "master_timeout",
          "required": false,
          "serverDefault": "30s",
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Period to wait for a response. If no response is received before the timeout expires, the request fails and returns an error.",
          "name": "timeout",
          "required": false,
          "serverDefault": "30s",
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "cluster_name",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Name",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "nodes",
            "required": true,
            "type": {
              "key": {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              },
              "kind": "dictionary_of",
              "singleKey": false,
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "NodeInfo",
                  "namespace": "nodes.info"
                }
              }
            }
          }
        ]
      },
      "inherits": {
        "type": {
          "name": "NodesResponseBase",
          "namespace": "nodes._types"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "nodes.info"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "NodeReloadException",
        "namespace": "nodes.reload_secure_settings"
      },
      "properties": [
        {
          "name": "name",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "reload_exception",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "NodeReloadExceptionCausedBy",
              "namespace": "nodes.reload_secure_settings"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "NodeReloadExceptionCausedBy",
        "namespace": "nodes.reload_secure_settings"
      },
      "properties": [
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "reason",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "caused_by",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "NodeReloadExceptionCausedBy",
              "namespace": "nodes.reload_secure_settings"
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "secure_settings_password",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Password",
                "namespace": "_types"
              }
            }
          }
        ]
      },
      "description": "Reloads secure settings.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "nodes.reload_secure_settings"
      },
      "path": [
        {
          "description": "A comma-separated list of node IDs to span the reload/reinit call. Should stay empty because reloading usually involves all cluster nodes.",
          "name": "node_id",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "NodeIds",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "Explicit operation timeout",
          "name": "timeout",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "cluster_name",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Name",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "nodes",
            "required": true,
            "type": {
              "key": {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              },
              "kind": "dictionary_of",
              "singleKey": false,
              "value": {
                "items": [
                  {
                    "kind": "instance_of",
                    "type": {
                      "name": "Stats",
                      "namespace": "nodes._types"
                    }
                  },
                  {
                    "kind": "instance_of",
                    "type": {
                      "name": "NodeReloadException",
                      "namespace": "nodes.reload_secure_settings"
                    }
                  }
                ],
                "kind": "union_of"
              }
            }
          }
        ]
      },
      "inherits": {
        "type": {
          "name": "NodesResponseBase",
          "namespace": "nodes._types"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "nodes.reload_secure_settings"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Returns statistical information about nodes in the cluster.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "nodes.stats"
      },
      "path": [
        {
          "description": "Comma-separated list of node IDs or names used to limit returned information.",
          "name": "node_id",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "NodeIds",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Limit the information returned to the specified metrics",
          "name": "metric",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Metrics",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Limit the information returned for indices metric to the specific index metrics. It can be used only if indices (or all) metric is specified.",
          "name": "index_metric",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Metrics",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "Comma-separated list or wildcard expressions of fields to include in fielddata and suggest statistics.",
          "name": "completion_fields",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Fields",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Comma-separated list or wildcard expressions of fields to include in fielddata statistics.",
          "name": "fielddata_fields",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Fields",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Comma-separated list or wildcard expressions of fields to include in the statistics.",
          "name": "fields",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Fields",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Comma-separated list of search groups to include in the search statistics.",
          "name": "groups",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "If true, the call reports the aggregated disk usage of each one of the Lucene index files (only applies if segment stats are requested).",
          "name": "include_segment_file_sizes",
          "required": false,
          "serverDefault": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Indicates whether statistics are aggregated at the cluster, index, or shard level.",
          "name": "level",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Level",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Period to wait for a connection to the master node. If no response is received before the timeout expires, the request fails and returns an error.",
          "name": "master_timeout",
          "required": false,
          "serverDefault": "30s",
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Period to wait for a response. If no response is received before the timeout expires, the request fails and returns an error.",
          "name": "timeout",
          "required": false,
          "serverDefault": "30s",
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "A comma-separated list of document types for the indexing index metric.",
          "name": "types",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        },
        {
          "description": "If set to true segment stats will include stats for segments that are not currently loaded into memory",
          "name": "include_unloaded_segments",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "cluster_name",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Name",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "nodes",
            "required": true,
            "type": {
              "key": {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              },
              "kind": "dictionary_of",
              "singleKey": false,
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "Stats",
                  "namespace": "nodes._types"
                }
              }
            }
          }
        ]
      },
      "inherits": {
        "type": {
          "name": "NodesResponseBase",
          "namespace": "nodes._types"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "nodes.stats"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "NodeUsage",
        "namespace": "nodes.usage"
      },
      "properties": [
        {
          "name": "rest_actions",
          "required": true,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "integer",
                "namespace": "_types"
              }
            }
          }
        },
        {
          "name": "since",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "EpochMillis",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "timestamp",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "EpochMillis",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "aggregations",
          "required": true,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "user_defined_value"
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Returns low-level information about REST actions usage on nodes.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "nodes.usage"
      },
      "path": [
        {
          "description": "A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes",
          "name": "node_id",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "NodeIds",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Limit the information returned to the specified metrics",
          "name": "metric",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Metrics",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "Explicit operation timeout",
          "name": "timeout",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "cluster_name",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Name",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "nodes",
            "required": true,
            "type": {
              "key": {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              },
              "kind": "dictionary_of",
              "singleKey": false,
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "NodeUsage",
                  "namespace": "nodes.usage"
                }
              }
            }
          }
        ]
      },
      "inherits": {
        "type": {
          "name": "NodesResponseBase",
          "namespace": "nodes._types"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "nodes.usage"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "DateHistogramGrouping",
        "namespace": "rollup._types"
      },
      "properties": [
        {
          "name": "delay",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "field",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "format",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "interval",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "calendar_interval",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "fixed_interval",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "time_zone",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "FieldMetric",
        "namespace": "rollup._types"
      },
      "properties": [
        {
          "name": "field",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "metrics",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "Metric",
                "namespace": "rollup._types"
              }
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "Groupings",
        "namespace": "rollup._types"
      },
      "properties": [
        {
          "name": "date_histogram",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DateHistogramGrouping",
              "namespace": "rollup._types"
            }
          }
        },
        {
          "name": "histogram",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "HistogramGrouping",
              "namespace": "rollup._types"
            }
          }
        },
        {
          "name": "terms",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "TermsGrouping",
              "namespace": "rollup._types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "HistogramGrouping",
        "namespace": "rollup._types"
      },
      "properties": [
        {
          "name": "fields",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Fields",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "interval",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "min"
        },
        {
          "name": "max"
        },
        {
          "name": "sum"
        },
        {
          "name": "avg"
        },
        {
          "name": "value_count"
        }
      ],
      "name": {
        "name": "Metric",
        "namespace": "rollup._types"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "TermsGrouping",
        "namespace": "rollup._types"
      },
      "properties": [
        {
          "name": "fields",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Fields",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Deletes an existing rollup job.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "rollup.delete_job"
      },
      "path": [
        {
          "description": "The ID of the job to delete",
          "name": "id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": []
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "task_failures",
            "required": false,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "TaskFailure",
                  "namespace": "rollup.delete_job"
                }
              }
            }
          }
        ]
      },
      "inherits": {
        "type": {
          "name": "AcknowledgedResponseBase",
          "namespace": "_types"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "rollup.delete_job"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "TaskFailure",
        "namespace": "rollup.delete_job"
      },
      "properties": [
        {
          "name": "task_id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "TaskId",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "node_id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "status",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "reason",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "TaskFailureReason",
              "namespace": "rollup.delete_job"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "TaskFailureReason",
        "namespace": "rollup.delete_job"
      },
      "properties": [
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "reason",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "started"
        },
        {
          "name": "indexing"
        },
        {
          "name": "stopping"
        },
        {
          "name": "stopped"
        },
        {
          "name": "aborting"
        }
      ],
      "name": {
        "name": "IndexingJobState",
        "namespace": "rollup.get_jobs"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Retrieves the configuration, stats, and status of rollup jobs.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "rollup.get_jobs"
      },
      "path": [
        {
          "description": "The ID of the job(s) to fetch. Accepts glob patterns, or left blank for all jobs",
          "name": "id",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": []
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "jobs",
            "required": true,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "RollupJob",
                  "namespace": "rollup.get_jobs"
                }
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "rollup.get_jobs"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "RollupJob",
        "namespace": "rollup.get_jobs"
      },
      "properties": [
        {
          "name": "config",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "RollupJobConfiguration",
              "namespace": "rollup.get_jobs"
            }
          }
        },
        {
          "name": "stats",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "RollupJobStats",
              "namespace": "rollup.get_jobs"
            }
          }
        },
        {
          "name": "status",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "RollupJobStatus",
              "namespace": "rollup.get_jobs"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "RollupJobConfiguration",
        "namespace": "rollup.get_jobs"
      },
      "properties": [
        {
          "name": "cron",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "groups",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Groupings",
              "namespace": "rollup._types"
            }
          }
        },
        {
          "name": "id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "index_pattern",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "metrics",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "FieldMetric",
                "namespace": "rollup._types"
              }
            }
          }
        },
        {
          "name": "page_size",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "rollup_index",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndexName",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "timeout",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "RollupJobStats",
        "namespace": "rollup.get_jobs"
      },
      "properties": [
        {
          "name": "documents_processed",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "index_failures",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "index_time_in_ms",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "index_total",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "pages_processed",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "rollups_indexed",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "search_failures",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "search_time_in_ms",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "search_total",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "trigger_count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "processing_time_in_ms",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "processing_total",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "RollupJobStatus",
        "namespace": "rollup.get_jobs"
      },
      "properties": [
        {
          "name": "current_position",
          "required": false,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "user_defined_value"
            }
          }
        },
        {
          "name": "job_state",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndexingJobState",
              "namespace": "rollup.get_jobs"
            }
          }
        },
        {
          "name": "upgraded_doc_id",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Returns the capabilities of any rollup jobs that have been configured for a specific index or index pattern.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "rollup.get_rollup_caps"
      },
      "path": [
        {
          "description": "The ID of the index to check rollup capabilities on, or left blank for all jobs",
          "name": "id",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": []
    },
    {
      "body": {
        "kind": "properties",
        "properties": []
      },
      "inherits": {
        "generics": [
          {
            "kind": "instance_of",
            "type": {
              "name": "IndexName",
              "namespace": "_types"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "RollupCapabilities",
              "namespace": "rollup.get_rollup_caps"
            }
          }
        ],
        "type": {
          "name": "DictionaryResponseBase",
          "namespace": "_types"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "rollup.get_rollup_caps"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "RollupCapabilities",
        "namespace": "rollup.get_rollup_caps"
      },
      "properties": [
        {
          "name": "rollup_jobs",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "RollupCapabilitySummary",
                "namespace": "rollup.get_rollup_caps"
              }
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "RollupCapabilitySummary",
        "namespace": "rollup.get_rollup_caps"
      },
      "properties": [
        {
          "name": "fields",
          "required": true,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "Field",
                "namespace": "_types"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "key": {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              },
              "kind": "dictionary_of",
              "singleKey": false,
              "value": {
                "kind": "user_defined_value"
              }
            }
          }
        },
        {
          "name": "index_pattern",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "job_id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "rollup_index",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "IndexCapabilities",
        "namespace": "rollup.get_rollup_index_caps"
      },
      "properties": [
        {
          "name": "rollup_jobs",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "RollupJobSummary",
                "namespace": "rollup.get_rollup_index_caps"
              }
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Returns the rollup capabilities of all jobs inside of a rollup index (e.g. the index where rollup data is stored).",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "rollup.get_rollup_index_caps"
      },
      "path": [
        {
          "description": "The rollup index or index pattern to obtain rollup capabilities from.",
          "name": "index",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": []
    },
    {
      "body": {
        "kind": "properties",
        "properties": []
      },
      "inherits": {
        "generics": [
          {
            "kind": "instance_of",
            "type": {
              "name": "IndexName",
              "namespace": "_types"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "IndexCapabilities",
              "namespace": "rollup.get_rollup_index_caps"
            }
          }
        ],
        "type": {
          "name": "DictionaryResponseBase",
          "namespace": "_types"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "rollup.get_rollup_index_caps"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "RollupJobSummary",
        "namespace": "rollup.get_rollup_index_caps"
      },
      "properties": [
        {
          "name": "fields",
          "required": true,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "Field",
                "namespace": "_types"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "RollupJobSummaryField",
                  "namespace": "rollup.get_rollup_index_caps"
                }
              }
            }
          }
        },
        {
          "name": "index_pattern",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "job_id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "rollup_index",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndexName",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "RollupJobSummaryField",
        "namespace": "rollup.get_rollup_index_caps"
      },
      "properties": [
        {
          "name": "agg",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "time_zone",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "calendar_interval",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "cron",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "groups",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Groupings",
                "namespace": "rollup._types"
              }
            }
          },
          {
            "name": "index_pattern",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "metrics",
            "required": false,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "FieldMetric",
                  "namespace": "rollup._types"
                }
              }
            }
          },
          {
            "name": "page_size",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "long",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "rollup_index",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "IndexName",
                "namespace": "_types"
              }
            }
          }
        ]
      },
      "description": "Creates a rollup job.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "rollup.put_job"
      },
      "path": [
        {
          "description": "The ID of the job to create",
          "name": "id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": []
    },
    {
      "body": {
        "kind": "properties",
        "properties": []
      },
      "inherits": {
        "type": {
          "name": "AcknowledgedResponseBase",
          "namespace": "_types"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "rollup.put_job"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "identifier": "config",
        "kind": "value",
        "value": {
          "kind": "user_defined_value"
        }
      },
      "description": "Rollup an index",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "rollup.rollup"
      },
      "path": [
        {
          "description": "The index to roll up",
          "name": "index",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndexName",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "The name of the rollup index to create",
          "name": "rollup_index",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndexName",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": []
    },
    {
      "body": {
        "kind": "value",
        "value": {
          "kind": "user_defined_value"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "rollup.rollup"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "aggs",
            "required": false,
            "type": {
              "key": {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              },
              "kind": "dictionary_of",
              "singleKey": false,
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "AggregationContainer",
                  "namespace": "_types.aggregations"
                }
              }
            }
          },
          {
            "name": "query",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "QueryContainer",
                "namespace": "_types.query_dsl"
              }
            }
          },
          {
            "name": "size",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "integer",
                "namespace": "_types"
              }
            }
          }
        ]
      },
      "description": "Enables searching rolled-up data using the standard query DSL.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "rollup.rollup_search"
      },
      "path": [
        {
          "description": "The indices or index-pattern(s) (containing rollup or regular data) that should be searched",
          "name": "index",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Indices",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "The doc type inside the index",
          "name": "type",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Type",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "Indicates whether hits.total should be rendered as an integer or an object in the rest search response",
          "name": "rest_total_hits_as_int",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Specify whether aggregation and suggester names should be prefixed by their respective types in the response",
          "name": "typed_keys",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "took",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "long",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "timed_out",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "terminated_early",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "_shards",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "ShardStatistics",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "hits",
            "required": true,
            "type": {
              "generics": [
                {
                  "kind": "instance_of",
                  "type": {
                    "name": "TDocument",
                    "namespace": "rollup.rollup_search"
                  }
                }
              ],
              "kind": "instance_of",
              "type": {
                "name": "HitsMetadata",
                "namespace": "_global.search._types"
              }
            }
          },
          {
            "name": "aggregations",
            "required": false,
            "type": {
              "key": {
                "kind": "instance_of",
                "type": {
                  "name": "AggregateName",
                  "namespace": "_types"
                }
              },
              "kind": "dictionary_of",
              "singleKey": false,
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "Aggregate",
                  "namespace": "_types.aggregations"
                }
              }
            }
          }
        ]
      },
      "generics": [
        {
          "name": "TDocument",
          "namespace": "rollup.rollup_search"
        }
      ],
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "rollup.rollup_search"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Starts an existing, stopped rollup job.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "rollup.start_job"
      },
      "path": [
        {
          "description": "The ID of the job to start",
          "name": "id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": []
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "started",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "rollup.start_job"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Stops an existing, started rollup job.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "rollup.stop_job"
      },
      "path": [
        {
          "description": "The ID of the job to stop",
          "name": "id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "Block for (at maximum) the specified duration while waiting for the job to stop.  Defaults to 30s.",
          "name": "timeout",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "True if the API should block until the job has fully stopped, false if should be executed async. Defaults to false.",
          "name": "wait_for_completion",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "stopped",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "rollup.stop_job"
      }
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "cluster"
        },
        {
          "name": "indices"
        },
        {
          "name": "shards"
        }
      ],
      "name": {
        "name": "StatsLevel",
        "namespace": "searchable_snapshots._types"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Clear the cache of searchable snapshots.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "searchable_snapshots.clear_cache"
      },
      "path": [
        {
          "description": "A comma-separated list of index names",
          "name": "index",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Indices",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "Whether to expand wildcard expression to concrete indices that are open, closed or both.",
          "name": "expand_wildcards",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ExpandWildcards",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)",
          "name": "allow_no_indices",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Whether specified concrete indices should be ignored when unavailable (missing or closed)",
          "name": "ignore_unavailable",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "pretty",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "human",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "value",
        "value": {
          "kind": "user_defined_value"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "searchable_snapshots.clear_cache"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "MountedSnapshot",
        "namespace": "searchable_snapshots.mount"
      },
      "properties": [
        {
          "name": "snapshot",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "indices",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Indices",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "shards",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ShardStatistics",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "index",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "IndexName",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "renamed_index",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "IndexName",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "index_settings",
            "required": false,
            "type": {
              "key": {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              },
              "kind": "dictionary_of",
              "singleKey": false,
              "value": {
                "kind": "user_defined_value"
              }
            }
          },
          {
            "name": "ignore_index_settings",
            "required": false,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              }
            }
          }
        ]
      },
      "description": "Mount a snapshot as a searchable index.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "searchable_snapshots.mount"
      },
      "path": [
        {
          "description": "The name of the repository containing the snapshot of the index to mount",
          "name": "repository",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "The name of the snapshot of the index to mount",
          "name": "snapshot",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "Explicit operation timeout for connection to master node",
          "name": "master_timeout",
          "required": false,
          "serverDefault": "30s",
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Should this request wait until the operation has completed before returning",
          "name": "wait_for_completion",
          "required": false,
          "serverDefault": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Selects the kind of local storage used to accelerate searches. Experimental, and defaults to `full_copy`",
          "name": "storage",
          "required": false,
          "serverDefault": "full_copy",
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "snapshot",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "MountedSnapshot",
                "namespace": "searchable_snapshots.mount"
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "searchable_snapshots.mount"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Retrieve shard-level statistics about searchable snapshots.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "searchable_snapshots.stats"
      },
      "path": [
        {
          "description": "A comma-separated list of index names",
          "name": "index",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Indices",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "Return stats aggregated at cluster, index or shard level",
          "name": "level",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "StatsLevel",
              "namespace": "searchable_snapshots._types"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "stats",
            "required": true,
            "type": {
              "kind": "user_defined_value"
            }
          },
          {
            "name": "total",
            "required": true,
            "type": {
              "kind": "user_defined_value"
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "searchable_snapshots.stats"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "ApplicationGlobalUserPrivileges",
        "namespace": "security._types"
      },
      "properties": [
        {
          "name": "manage",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ManageUserPrivileges",
              "namespace": "security._types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "ApplicationPrivileges",
        "namespace": "security._types"
      },
      "properties": [
        {
          "description": "The name of the application to which this entry applies.",
          "name": "application",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "A list of strings, where each element is the name of an application privilege or action.",
          "name": "privileges",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        },
        {
          "description": "A list resources to which the privileges are applied.",
          "name": "resources",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "ClusterNode",
        "namespace": "security._types"
      },
      "properties": [
        {
          "name": "name",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "all"
        },
        {
          "name": "cancel_task"
        },
        {
          "name": "create_snapshot"
        },
        {
          "name": "grant_api_key"
        },
        {
          "name": "manage"
        },
        {
          "name": "manage_api_key"
        },
        {
          "name": "manage_ccr"
        },
        {
          "name": "manage_ilm"
        },
        {
          "name": "manage_index_templates"
        },
        {
          "name": "manage_ingest_pipelines"
        },
        {
          "name": "manage_logstash_pipelines"
        },
        {
          "name": "manage_ml"
        },
        {
          "name": "manage_oidc"
        },
        {
          "name": "manage_own_api_key"
        },
        {
          "name": "manage_pipeline"
        },
        {
          "name": "manage_rollup"
        },
        {
          "name": "manage_saml"
        },
        {
          "name": "manage_security"
        },
        {
          "name": "manage_service_account"
        },
        {
          "name": "manage_slm"
        },
        {
          "name": "manage_token"
        },
        {
          "name": "manage_transform"
        },
        {
          "name": "manage_watcher"
        },
        {
          "name": "monitor"
        },
        {
          "name": "monitor_ml"
        },
        {
          "name": "monitor_rollup"
        },
        {
          "name": "monitor_snapshot"
        },
        {
          "name": "monitor_text_structure"
        },
        {
          "name": "monitor_transform"
        },
        {
          "name": "monitor_watcher"
        },
        {
          "name": "read_ccr"
        },
        {
          "name": "read_ilm"
        },
        {
          "name": "read_pipeline"
        },
        {
          "name": "read_slm"
        },
        {
          "name": "transport_client"
        }
      ],
      "name": {
        "name": "ClusterPrivilege",
        "namespace": "security._types"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "CreatedStatus",
        "namespace": "security._types"
      },
      "properties": [
        {
          "name": "created",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "FieldRule",
        "namespace": "security._types"
      },
      "properties": [
        {
          "name": "username",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "dn",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Names",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "groups",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Names",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "metadata",
          "required": false,
          "type": {
            "kind": "user_defined_value"
          }
        },
        {
          "name": "realm",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Realm",
              "namespace": "security._types"
            }
          }
        }
      ],
      "variants": {
        "kind": "container"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "FieldSecurity",
        "namespace": "security._types"
      },
      "properties": [
        {
          "name": "except",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Fields",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "grant",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Fields",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "GlobalPrivilege",
        "namespace": "security._types"
      },
      "properties": [
        {
          "name": "application",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ApplicationGlobalUserPrivileges",
              "namespace": "security._types"
            }
          }
        }
      ]
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "all"
        },
        {
          "name": "auto_configure"
        },
        {
          "name": "create"
        },
        {
          "name": "create_doc"
        },
        {
          "name": "create_index"
        },
        {
          "name": "delete"
        },
        {
          "name": "delete_index"
        },
        {
          "name": "index"
        },
        {
          "name": "maintenance"
        },
        {
          "name": "manage"
        },
        {
          "name": "manage_follow_index"
        },
        {
          "name": "manage_ilm"
        },
        {
          "name": "manage_leader_index"
        },
        {
          "name": "monitor"
        },
        {
          "name": "read"
        },
        {
          "name": "read_cross_cluster"
        },
        {
          "name": "view_index_metadata"
        },
        {
          "name": "write"
        }
      ],
      "name": {
        "name": "IndexPrivilege",
        "namespace": "security._types"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "IndicesPrivileges",
        "namespace": "security._types"
      },
      "properties": [
        {
          "description": "The document fields that the owners of the role have read access to.",
          "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/field-and-document-access-control.html",
          "name": "field_security",
          "required": false,
          "type": {
            "items": [
              {
                "kind": "instance_of",
                "type": {
                  "name": "FieldSecurity",
                  "namespace": "security._types"
                }
              },
              {
                "kind": "array_of",
                "value": {
                  "kind": "instance_of",
                  "type": {
                    "name": "FieldSecurity",
                    "namespace": "security._types"
                  }
                }
              }
            ],
            "kind": "union_of"
          }
        },
        {
          "description": "A list of indices (or index name patterns) to which the permissions in this entry apply.",
          "name": "names",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Indices",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "The index level privileges that owners of the role have on the specified indices.",
          "name": "privileges",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "IndexPrivilege",
                "namespace": "security._types"
              }
            }
          }
        },
        {
          "description": "A search query that defines the documents the owners of the role have read access to. A document within the specified indices must match this query for it to be accessible by the owners of the role.",
          "name": "query",
          "required": false,
          "type": {
            "items": [
              {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              },
              {
                "kind": "array_of",
                "value": {
                  "kind": "instance_of",
                  "type": {
                    "name": "string",
                    "namespace": "internal"
                  }
                }
              },
              {
                "kind": "instance_of",
                "type": {
                  "name": "QueryContainer",
                  "namespace": "_types.query_dsl"
                }
              }
            ],
            "kind": "union_of"
          }
        },
        {
          "description": "Set to `true` if using wildcard or regular expressions for patterns that cover restricted indices. Implicitly, restricted indices have limited privileges that can cause pattern tests to fail. If restricted indices are explicitly included in the `names` list, Elasticsearch checks privileges against these indices regardless of the value set for `allow_restricted_indices`.",
          "name": "allow_restricted_indices",
          "required": false,
          "serverDefault": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "ManageUserPrivileges",
        "namespace": "security._types"
      },
      "properties": [
        {
          "name": "applications",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "Realm",
        "namespace": "security._types"
      },
      "properties": [
        {
          "name": "name",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "RealmInfo",
        "namespace": "security._types"
      },
      "properties": [
        {
          "name": "name",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "RoleMapping",
        "namespace": "security._types"
      },
      "properties": [
        {
          "name": "enabled",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "metadata",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Metadata",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "roles",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        },
        {
          "name": "rules",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "RoleMappingRule",
              "namespace": "security._types"
            }
          }
        },
        {
          "name": "role_templates",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "RoleTemplate",
                "namespace": "security.get_role"
              }
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "RoleMappingRule",
        "namespace": "security._types"
      },
      "properties": [
        {
          "name": "any",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "RoleMappingRule",
                "namespace": "security._types"
              }
            }
          }
        },
        {
          "name": "all",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "RoleMappingRule",
                "namespace": "security._types"
              }
            }
          }
        },
        {
          "name": "field",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "FieldRule",
              "namespace": "security._types"
            }
          }
        },
        {
          "name": "except",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "RoleMappingRule",
              "namespace": "security._types"
            }
          }
        }
      ],
      "variants": {
        "kind": "container"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "User",
        "namespace": "security._types"
      },
      "properties": [
        {
          "name": "email",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "full_name",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "metadata",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Metadata",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "roles",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        },
        {
          "name": "username",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Username",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "enabled",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Enables you to submit a request with a basic auth header to authenticate a user and retrieve information about the authenticated user.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "security.authenticate"
      },
      "path": [],
      "query": []
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "authentication_realm",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "RealmInfo",
                "namespace": "security._types"
              }
            }
          },
          {
            "name": "email",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "full_name",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Name",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "lookup_realm",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "RealmInfo",
                "namespace": "security._types"
              }
            }
          },
          {
            "name": "metadata",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Metadata",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "roles",
            "required": true,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              }
            }
          },
          {
            "name": "username",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Username",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "enabled",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "authentication_type",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "token",
            "required": false,
            "since": "7.14.0",
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Token",
                "namespace": "security.authenticate"
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "security.authenticate"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "Token",
        "namespace": "security.authenticate"
      },
      "properties": [
        {
          "name": "name",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "type",
          "required": false,
          "since": "7.14.0",
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "password",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Password",
                "namespace": "_types"
              }
            }
          }
        ]
      },
      "description": "Changes the passwords of users in the native realm and built-in users.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "security.change_password"
      },
      "path": [
        {
          "description": "The username of the user to change the password for",
          "name": "username",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Username",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "If `true` (the default) then refresh the affected shards to make this operation visible to search, if `wait_for` then wait for a refresh to make this operation visible to search, if `false` then do nothing with refreshes.",
          "name": "refresh",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Refresh",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": []
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "security.change_password"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Clear a subset or all entries from the API key cache.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "security.clear_api_key_cache"
      },
      "path": [
        {
          "description": "A comma-separated list of IDs of API keys to clear from the cache",
          "name": "ids",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Ids",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": []
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "identifier": "node_stats",
            "name": "_nodes",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "NodeStatistics",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "cluster_name",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Name",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "nodes",
            "required": true,
            "type": {
              "key": {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              },
              "kind": "dictionary_of",
              "singleKey": false,
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "ClusterNode",
                  "namespace": "security._types"
                }
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "security.clear_api_key_cache"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Evicts application privileges from the native application privileges cache.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "security.clear_cached_privileges"
      },
      "path": [
        {
          "description": "A comma-separated list of application names",
          "name": "application",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": []
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "identifier": "node_stats",
            "name": "_nodes",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "NodeStatistics",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "cluster_name",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Name",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "nodes",
            "required": true,
            "type": {
              "key": {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              },
              "kind": "dictionary_of",
              "singleKey": false,
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "ClusterNode",
                  "namespace": "security._types"
                }
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "security.clear_cached_privileges"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Evicts users from the user cache. Can completely clear the cache or evict specific users.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "security.clear_cached_realms"
      },
      "path": [
        {
          "description": "Comma-separated list of realms to clear",
          "name": "realms",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Names",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "Comma-separated list of usernames to clear from the cache",
          "name": "usernames",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "identifier": "node_stats",
            "name": "_nodes",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "NodeStatistics",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "cluster_name",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Name",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "nodes",
            "required": true,
            "type": {
              "key": {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              },
              "kind": "dictionary_of",
              "singleKey": false,
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "ClusterNode",
                  "namespace": "security._types"
                }
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "security.clear_cached_realms"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Evicts roles from the native role cache.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "security.clear_cached_roles"
      },
      "path": [
        {
          "description": "Role name",
          "name": "name",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Names",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": []
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "identifier": "node_stats",
            "name": "_nodes",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "NodeStatistics",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "cluster_name",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Name",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "nodes",
            "required": true,
            "type": {
              "key": {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              },
              "kind": "dictionary_of",
              "singleKey": false,
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "ClusterNode",
                  "namespace": "security._types"
                }
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "security.clear_cached_roles"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Evicts tokens from the service account token caches.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "security.clear_cached_service_tokens"
      },
      "path": [
        {
          "description": "An identifier for the namespace",
          "name": "namespace",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Namespace",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "An identifier for the service name",
          "name": "service",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Service",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "A comma-separated list of service token names",
          "name": "name",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Names",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": []
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "identifier": "node_stats",
            "name": "_nodes",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "NodeStatistics",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "cluster_name",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Name",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "nodes",
            "required": true,
            "type": {
              "key": {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              },
              "kind": "dictionary_of",
              "singleKey": false,
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "ClusterNode",
                  "namespace": "security._types"
                }
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "security.clear_cached_service_tokens"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "IndexPrivileges",
        "namespace": "security.create_api_key"
      },
      "properties": [
        {
          "name": "names",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Indices",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "privileges",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "IndexPrivilege",
                "namespace": "security._types"
              }
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "properties",
        "properties": [
          {
            "description": "Expiration time for the API key. By default, API keys never expire.",
            "name": "expiration",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Time",
                "namespace": "_types"
              }
            }
          },
          {
            "description": "Specifies the name for this API key.",
            "name": "name",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Name",
                "namespace": "_types"
              }
            }
          },
          {
            "description": "An array of role descriptors for this API key. This parameter is optional. When it is not specified or is an empty array, then the API key will have a point in time snapshot of permissions of the authenticated user. If you supply role descriptors then the resultant permissions would be an intersection of API keys permissions and authenticated user’s permissions thereby limiting the access scope for API keys. The structure of role descriptor is the same as the request for create role API. For more details, see create or update roles API.",
            "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-put-role.html",
            "name": "role_descriptors",
            "required": false,
            "type": {
              "key": {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              },
              "kind": "dictionary_of",
              "singleKey": false,
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "RoleDescriptor",
                  "namespace": "security.create_api_key"
                }
              }
            }
          },
          {
            "description": "Arbitrary metadata that you want to associate with the API key. It supports nested data structure. Within the metadata object, keys beginning with _ are reserved for system usage.",
            "name": "metadata",
            "required": false,
            "since": "7.13.0",
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Metadata",
                "namespace": "_types"
              }
            }
          }
        ]
      },
      "description": "Creates an API key for access without requiring basic authentication.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "security.create_api_key"
      },
      "path": [],
      "query": [
        {
          "description": "If `true` (the default) then refresh the affected shards to make this operation visible to search, if `wait_for` then wait for a refresh to make this operation visible to search, if `false` then do nothing with refreshes.",
          "name": "refresh",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Refresh",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "api_key",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "expiration",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "long",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "id",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Id",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "name",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Name",
                "namespace": "_types"
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "security.create_api_key"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "RoleDescriptor",
        "namespace": "security.create_api_key"
      },
      "properties": [
        {
          "name": "cluster",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        },
        {
          "name": "index",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "IndexPrivileges",
                "namespace": "security.create_api_key"
              }
            }
          }
        },
        {
          "name": "applications",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "ApplicationPrivileges",
                "namespace": "security._types"
              }
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Creates a service account token for access without requiring basic authentication.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "security.create_service_token"
      },
      "path": [
        {
          "description": "An identifier for the namespace",
          "name": "namespace",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Namespace",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "An identifier for the service name",
          "name": "service",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Service",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "An identifier for the token name",
          "name": "name",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": []
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "created",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "token",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Token",
                "namespace": "security.create_service_token"
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "security.create_service_token"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "Token",
        "namespace": "security.create_service_token"
      },
      "properties": [
        {
          "name": "name",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "value",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "FoundStatus",
        "namespace": "security.delete_privileges"
      },
      "properties": [
        {
          "name": "found",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Removes application privileges.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "security.delete_privileges"
      },
      "path": [
        {
          "description": "Application name",
          "name": "application",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Privilege name",
          "name": "name",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "If `true` (the default) then refresh the affected shards to make this operation visible to search, if `wait_for` then wait for a refresh to make this operation visible to search, if `false` then do nothing with refreshes.",
          "name": "refresh",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Refresh",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": []
      },
      "inherits": {
        "generics": [
          {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          },
          {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "FoundStatus",
                "namespace": "security.delete_privileges"
              }
            }
          }
        ],
        "type": {
          "name": "DictionaryResponseBase",
          "namespace": "_types"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "security.delete_privileges"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Removes roles in the native realm.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "security.delete_role"
      },
      "path": [
        {
          "description": "Role name",
          "name": "name",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "If `true` (the default) then refresh the affected shards to make this operation visible to search, if `wait_for` then wait for a refresh to make this operation visible to search, if `false` then do nothing with refreshes.",
          "name": "refresh",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Refresh",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "found",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "security.delete_role"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Removes role mappings.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "security.delete_role_mapping"
      },
      "path": [
        {
          "description": "Role-mapping name",
          "name": "name",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "If `true` (the default) then refresh the affected shards to make this operation visible to search, if `wait_for` then wait for a refresh to make this operation visible to search, if `false` then do nothing with refreshes.",
          "name": "refresh",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Refresh",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "found",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "security.delete_role_mapping"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Deletes a service account token.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "security.delete_service_token"
      },
      "path": [
        {
          "description": "An identifier for the namespace",
          "name": "namespace",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Namespace",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "An identifier for the service name",
          "name": "service",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Service",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "An identifier for the token name",
          "name": "name",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "If `true` then refresh the affected shards to make this operation visible to search, if `wait_for` (the default) then wait for a refresh to make this operation visible to search, if `false` then do nothing with refreshes.",
          "name": "refresh",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Refresh",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "found",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "security.delete_service_token"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Deletes users from the native realm.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "security.delete_user"
      },
      "path": [
        {
          "description": "username",
          "name": "username",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Username",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "If `true` (the default) then refresh the affected shards to make this operation visible to search, if `wait_for` then wait for a refresh to make this operation visible to search, if `false` then do nothing with refreshes.",
          "name": "refresh",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Refresh",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "found",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "security.delete_user"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Disables users in the native realm.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "security.disable_user"
      },
      "path": [
        {
          "description": "The username of the user to disable",
          "name": "username",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Username",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "If `true` (the default) then refresh the affected shards to make this operation visible to search, if `wait_for` then wait for a refresh to make this operation visible to search, if `false` then do nothing with refreshes.",
          "name": "refresh",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Refresh",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": []
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "security.disable_user"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Enables users in the native realm.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "security.enable_user"
      },
      "path": [
        {
          "description": "The username of the user to enable",
          "name": "username",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Username",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "If `true` (the default) then refresh the affected shards to make this operation visible to search, if `wait_for` then wait for a refresh to make this operation visible to search, if `false` then do nothing with refreshes.",
          "name": "refresh",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Refresh",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": []
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "security.enable_user"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "ApiKey",
        "namespace": "security.get_api_key"
      },
      "properties": [
        {
          "name": "creation",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "expiration",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "invalidated",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "name",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "realm",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "username",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Username",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "metadata",
          "required": false,
          "since": "7.13.0",
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Metadata",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Retrieves information for one or more API keys.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "security.get_api_key"
      },
      "path": [],
      "query": [
        {
          "description": "API key id of the API key to be retrieved",
          "name": "id",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "API key name of the API key to be retrieved",
          "name": "name",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "flag to query API keys owned by the currently authenticated user",
          "name": "owner",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "realm name of the user who created this API key to be retrieved",
          "name": "realm_name",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "user name of the user who created this API key to be retrieved",
          "name": "username",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Username",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "api_keys",
            "required": true,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "ApiKey",
                  "namespace": "security.get_api_key"
                }
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "security.get_api_key"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Retrieves the list of cluster privileges and index privileges that are available in this version of Elasticsearch.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "security.get_builtin_privileges"
      },
      "path": [],
      "query": []
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "cluster",
            "required": true,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              }
            }
          },
          {
            "name": "index",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Indices",
                "namespace": "_types"
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "security.get_builtin_privileges"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Retrieves application privileges.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "security.get_privileges"
      },
      "path": [
        {
          "description": "Application name",
          "name": "application",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Privilege name",
          "name": "name",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": []
    },
    {
      "body": {
        "kind": "properties",
        "properties": []
      },
      "inherits": {
        "generics": [
          {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          },
          {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "Actions",
                "namespace": "security.put_privileges"
              }
            }
          }
        ],
        "type": {
          "name": "DictionaryResponseBase",
          "namespace": "_types"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "security.get_privileges"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "InlineRoleTemplate",
        "namespace": "security.get_role"
      },
      "properties": [
        {
          "name": "template",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "InlineRoleTemplateSource",
              "namespace": "security.get_role"
            }
          }
        },
        {
          "name": "format",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "TemplateFormat",
              "namespace": "security.get_role"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "InlineRoleTemplateSource",
        "namespace": "security.get_role"
      },
      "properties": [
        {
          "name": "source",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "InvalidRoleTemplate",
        "namespace": "security.get_role"
      },
      "properties": [
        {
          "name": "template",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "format",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "TemplateFormat",
              "namespace": "security.get_role"
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Retrieves roles in the native realm.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "security.get_role"
      },
      "path": [
        {
          "description": "A comma-separated list of role names",
          "name": "name",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": []
    },
    {
      "body": {
        "kind": "properties",
        "properties": []
      },
      "inherits": {
        "generics": [
          {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "Role",
              "namespace": "security.get_role"
            }
          }
        ],
        "type": {
          "name": "DictionaryResponseBase",
          "namespace": "_types"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "security.get_role"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "Role",
        "namespace": "security.get_role"
      },
      "properties": [
        {
          "name": "cluster",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        },
        {
          "name": "indices",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "IndicesPrivileges",
                "namespace": "security._types"
              }
            }
          }
        },
        {
          "name": "metadata",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Metadata",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "run_as",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        },
        {
          "name": "transient_metadata",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "TransientMetadata",
              "namespace": "security.get_role"
            }
          }
        },
        {
          "name": "applications",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "ApplicationPrivileges",
                "namespace": "security._types"
              }
            }
          }
        },
        {
          "name": "role_templates",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "RoleTemplate",
                "namespace": "security.get_role"
              }
            }
          }
        }
      ]
    },
    {
      "kind": "type_alias",
      "name": {
        "name": "RoleTemplate",
        "namespace": "security.get_role"
      },
      "type": {
        "items": [
          {
            "kind": "instance_of",
            "type": {
              "name": "InlineRoleTemplate",
              "namespace": "security.get_role"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "StoredRoleTemplate",
              "namespace": "security.get_role"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "InvalidRoleTemplate",
              "namespace": "security.get_role"
            }
          }
        ],
        "kind": "union_of"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "StoredRoleTemplate",
        "namespace": "security.get_role"
      },
      "properties": [
        {
          "name": "template",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "StoredRoleTemplateId",
              "namespace": "security.get_role"
            }
          }
        },
        {
          "name": "format",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "TemplateFormat",
              "namespace": "security.get_role"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "StoredRoleTemplateId",
        "namespace": "security.get_role"
      },
      "properties": [
        {
          "name": "id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "string"
        },
        {
          "name": "json"
        }
      ],
      "name": {
        "name": "TemplateFormat",
        "namespace": "security.get_role"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "TransientMetadata",
        "namespace": "security.get_role"
      },
      "properties": [
        {
          "name": "enabled",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Retrieves role mappings.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "security.get_role_mapping"
      },
      "path": [
        {
          "description": "A comma-separated list of role-mapping names",
          "name": "name",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": []
    },
    {
      "body": {
        "kind": "properties",
        "properties": []
      },
      "inherits": {
        "generics": [
          {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "RoleMapping",
              "namespace": "security._types"
            }
          }
        ],
        "type": {
          "name": "DictionaryResponseBase",
          "namespace": "_types"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "security.get_role_mapping"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Retrieves information about service accounts.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "security.get_service_accounts"
      },
      "path": [
        {
          "description": "An identifier for the namespace",
          "name": "namespace",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Namespace",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "An identifier for the service name",
          "name": "service",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Service",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": []
    },
    {
      "body": {
        "kind": "properties",
        "properties": []
      },
      "inherits": {
        "generics": [
          {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "RoleDescriptorWrapper",
              "namespace": "security.get_service_accounts"
            }
          }
        ],
        "type": {
          "name": "DictionaryResponseBase",
          "namespace": "_types"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "security.get_service_accounts"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "RoleDescriptor",
        "namespace": "security.get_service_accounts"
      },
      "properties": [
        {
          "name": "cluster",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        },
        {
          "name": "indices",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "IndicesPrivileges",
                "namespace": "security._types"
              }
            }
          }
        },
        {
          "name": "global",
          "required": false,
          "type": {
            "items": [
              {
                "kind": "array_of",
                "value": {
                  "kind": "instance_of",
                  "type": {
                    "name": "GlobalPrivilege",
                    "namespace": "security._types"
                  }
                }
              },
              {
                "kind": "instance_of",
                "type": {
                  "name": "GlobalPrivilege",
                  "namespace": "security._types"
                }
              }
            ],
            "kind": "union_of"
          }
        },
        {
          "name": "applications",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "ApplicationPrivileges",
                "namespace": "security._types"
              }
            }
          }
        },
        {
          "name": "metadata",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Metadata",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "run_as",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        },
        {
          "name": "transient_metadata",
          "required": false,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "user_defined_value"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "RoleDescriptorWrapper",
        "namespace": "security.get_service_accounts"
      },
      "properties": [
        {
          "name": "role_descriptor",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "RoleDescriptor",
              "namespace": "security.get_service_accounts"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "NodesCredentials",
        "namespace": "security.get_service_credentials"
      },
      "properties": [
        {
          "description": "General status showing how nodes respond to the above collection request",
          "name": "_nodes",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "NodeStatistics",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "File-backed tokens collected from all nodes",
          "name": "file_tokens",
          "required": true,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "NodesCredentialsFileToken",
                "namespace": "security.get_service_credentials"
              }
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "NodesCredentialsFileToken",
        "namespace": "security.get_service_credentials"
      },
      "properties": [
        {
          "name": "nodes",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Retrieves information of all service credentials for a service account.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "security.get_service_credentials"
      },
      "path": [
        {
          "description": "Name of the namespace.",
          "name": "namespace",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Namespace",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Name of the service name.",
          "name": "service",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": []
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "service_account",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "count",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "integer",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "tokens",
            "required": true,
            "type": {
              "key": {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              },
              "kind": "dictionary_of",
              "singleKey": false,
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "Metadata",
                  "namespace": "_types"
                }
              }
            }
          },
          {
            "description": "Contains service account credentials collected from all nodes of the cluster",
            "name": "nodes_credentials",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "NodesCredentials",
                "namespace": "security.get_service_credentials"
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "security.get_service_credentials"
      }
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "password"
        },
        {
          "name": "client_credentials"
        },
        {
          "name": "_kerberos"
        },
        {
          "name": "refresh_token"
        }
      ],
      "name": {
        "name": "AccessTokenGrantType",
        "namespace": "security.get_token"
      }
    },
    {
      "inherits": {
        "type": {
          "name": "User",
          "namespace": "security._types"
        }
      },
      "kind": "interface",
      "name": {
        "name": "AuthenticatedUser",
        "namespace": "security.get_token"
      },
      "properties": [
        {
          "name": "authentication_realm",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "UserRealm",
              "namespace": "security.get_token"
            }
          }
        },
        {
          "name": "lookup_realm",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "UserRealm",
              "namespace": "security.get_token"
            }
          }
        },
        {
          "name": "authentication_provider",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "AuthenticationProvider",
              "namespace": "security.get_token"
            }
          }
        },
        {
          "name": "authentication_type",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "AuthenticationProvider",
        "namespace": "security.get_token"
      },
      "properties": [
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "name",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "grant_type",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "AccessTokenGrantType",
                "namespace": "security.get_token"
              }
            }
          },
          {
            "name": "scope",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "password",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Password",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "kerberos_ticket",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "refresh_token",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "username",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Username",
                "namespace": "_types"
              }
            }
          }
        ]
      },
      "description": "Creates a bearer token for access without requiring basic authentication.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "security.get_token"
      },
      "path": [],
      "query": []
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "access_token",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "expires_in",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "long",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "scope",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "type",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "refresh_token",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "kerberos_authentication_response_token",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "authentication",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "AuthenticatedUser",
                "namespace": "security.get_token"
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "security.get_token"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "UserRealm",
        "namespace": "security.get_token"
      },
      "properties": [
        {
          "name": "name",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Retrieves information about users in the native realm and built-in users.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "security.get_user"
      },
      "path": [
        {
          "description": "An identifier for the user. You can specify multiple usernames as a comma-separated list. If you omit this parameter, the API retrieves information about all users.",
          "name": "username",
          "required": false,
          "type": {
            "items": [
              {
                "kind": "instance_of",
                "type": {
                  "name": "Username",
                  "namespace": "_types"
                }
              },
              {
                "kind": "array_of",
                "value": {
                  "kind": "instance_of",
                  "type": {
                    "name": "Username",
                    "namespace": "_types"
                  }
                }
              }
            ],
            "kind": "union_of"
          }
        }
      ],
      "query": []
    },
    {
      "body": {
        "kind": "properties",
        "properties": []
      },
      "inherits": {
        "generics": [
          {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "User",
              "namespace": "security._types"
            }
          }
        ],
        "type": {
          "name": "DictionaryResponseBase",
          "namespace": "_types"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "security.get_user"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Retrieves security privileges for the logged in user.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "security.get_user_privileges"
      },
      "path": [],
      "query": [
        {
          "description": "The name of the application. Application privileges are always associated with exactly one application. If you do not specify this parameter, the API returns information about all privileges for all applications.",
          "name": "application",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "The name of the privilege. If you do not specify this parameter, the API returns information about all privileges for the requested application.",
          "name": "priviledge",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "applications",
            "required": true,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "ApplicationPrivileges",
                  "namespace": "security._types"
                }
              }
            }
          },
          {
            "name": "cluster",
            "required": true,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              }
            }
          },
          {
            "name": "global",
            "required": true,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "GlobalPrivilege",
                  "namespace": "security._types"
                }
              }
            }
          },
          {
            "name": "indices",
            "required": true,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "IndicesPrivileges",
                  "namespace": "security._types"
                }
              }
            }
          },
          {
            "name": "run_as",
            "required": true,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "security.get_user_privileges"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "ApiKey",
        "namespace": "security.grant_api_key"
      },
      "properties": [
        {
          "name": "name",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "expiration",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "role_descriptors",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "key": {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              },
              "kind": "dictionary_of",
              "singleKey": false,
              "value": {
                "kind": "user_defined_value"
              }
            }
          }
        }
      ]
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "access_token"
        },
        {
          "name": "password"
        }
      ],
      "name": {
        "name": "ApiKeyGrantType",
        "namespace": "security.grant_api_key"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "api_key",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "ApiKey",
                "namespace": "security.grant_api_key"
              }
            }
          },
          {
            "name": "grant_type",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "ApiKeyGrantType",
                "namespace": "security.grant_api_key"
              }
            }
          },
          {
            "name": "access_token",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "username",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Username",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "password",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Password",
                "namespace": "_types"
              }
            }
          }
        ]
      },
      "description": "Creates an API key on behalf of another user.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "security.grant_api_key"
      },
      "path": [],
      "query": []
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "api_key",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "id",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Id",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "name",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Name",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "expiration",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "EpochMillis",
                "namespace": "_types"
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "security.grant_api_key"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "ApplicationPrivilegesCheck",
        "namespace": "security.has_privileges"
      },
      "properties": [
        {
          "name": "application",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "privileges",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        },
        {
          "name": "resources",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        }
      ]
    },
    {
      "kind": "type_alias",
      "name": {
        "name": "ApplicationsPrivileges",
        "namespace": "security.has_privileges"
      },
      "type": {
        "key": {
          "kind": "instance_of",
          "type": {
            "name": "Name",
            "namespace": "_types"
          }
        },
        "kind": "dictionary_of",
        "singleKey": false,
        "value": {
          "kind": "instance_of",
          "type": {
            "name": "ResourcePrivileges",
            "namespace": "security.has_privileges"
          }
        }
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "IndexPrivilegesCheck",
        "namespace": "security.has_privileges"
      },
      "properties": [
        {
          "name": "names",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Indices",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "privileges",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "IndexPrivilege",
                "namespace": "security._types"
              }
            }
          }
        }
      ]
    },
    {
      "kind": "type_alias",
      "name": {
        "name": "Privileges",
        "namespace": "security.has_privileges"
      },
      "type": {
        "key": {
          "kind": "instance_of",
          "type": {
            "name": "string",
            "namespace": "internal"
          }
        },
        "kind": "dictionary_of",
        "singleKey": false,
        "value": {
          "kind": "instance_of",
          "type": {
            "name": "boolean",
            "namespace": "internal"
          }
        }
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "application",
            "required": false,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "ApplicationPrivilegesCheck",
                  "namespace": "security.has_privileges"
                }
              }
            }
          },
          {
            "name": "cluster",
            "required": false,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "ClusterPrivilege",
                  "namespace": "security._types"
                }
              }
            }
          },
          {
            "name": "index",
            "required": false,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "IndexPrivilegesCheck",
                  "namespace": "security.has_privileges"
                }
              }
            }
          }
        ]
      },
      "description": "Determines whether the specified user has a specified list of privileges.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "security.has_privileges"
      },
      "path": [
        {
          "description": "Username",
          "name": "user",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": []
    },
    {
      "kind": "type_alias",
      "name": {
        "name": "ResourcePrivileges",
        "namespace": "security.has_privileges"
      },
      "type": {
        "key": {
          "kind": "instance_of",
          "type": {
            "name": "Name",
            "namespace": "_types"
          }
        },
        "kind": "dictionary_of",
        "singleKey": false,
        "value": {
          "kind": "instance_of",
          "type": {
            "name": "Privileges",
            "namespace": "security.has_privileges"
          }
        }
      }
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "application",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "ApplicationsPrivileges",
                "namespace": "security.has_privileges"
              }
            }
          },
          {
            "name": "cluster",
            "required": true,
            "type": {
              "key": {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              },
              "kind": "dictionary_of",
              "singleKey": false,
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "boolean",
                  "namespace": "internal"
                }
              }
            }
          },
          {
            "name": "has_all_requested",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "index",
            "required": true,
            "type": {
              "key": {
                "kind": "instance_of",
                "type": {
                  "name": "IndexName",
                  "namespace": "_types"
                }
              },
              "kind": "dictionary_of",
              "singleKey": false,
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "Privileges",
                  "namespace": "security.has_privileges"
                }
              }
            }
          },
          {
            "name": "username",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Username",
                "namespace": "_types"
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "security.has_privileges"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "id",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Id",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "ids",
            "required": false,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "Id",
                  "namespace": "_types"
                }
              }
            }
          },
          {
            "name": "name",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Name",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "owner",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "realm_name",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "username",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Username",
                "namespace": "_types"
              }
            }
          }
        ]
      },
      "description": "Invalidates one or more API keys.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "security.invalidate_api_key"
      },
      "path": [],
      "query": []
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "error_count",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "integer",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "error_details",
            "required": false,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "ErrorCause",
                  "namespace": "_types"
                }
              }
            }
          },
          {
            "name": "invalidated_api_keys",
            "required": true,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              }
            }
          },
          {
            "name": "previously_invalidated_api_keys",
            "required": true,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "security.invalidate_api_key"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "token",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "refresh_token",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "realm_name",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Name",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "username",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Username",
                "namespace": "_types"
              }
            }
          }
        ]
      },
      "description": "Invalidates one or more access tokens or refresh tokens.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "security.invalidate_token"
      },
      "path": [],
      "query": []
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "error_count",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "long",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "error_details",
            "required": false,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "ErrorCause",
                  "namespace": "_types"
                }
              }
            }
          },
          {
            "name": "invalidated_tokens",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "long",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "previously_invalidated_tokens",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "long",
                "namespace": "_types"
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "security.invalidate_token"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "Actions",
        "namespace": "security.put_privileges"
      },
      "properties": [
        {
          "name": "actions",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        },
        {
          "name": "application",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "name",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "metadata",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Metadata",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "identifier": "privileges",
        "kind": "value",
        "value": {
          "key": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          },
          "kind": "dictionary_of",
          "singleKey": false,
          "value": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "Actions",
                "namespace": "security.put_privileges"
              }
            }
          }
        }
      },
      "description": "Adds or updates application privileges.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "security.put_privileges"
      },
      "path": [],
      "query": [
        {
          "description": "If `true` (the default) then refresh the affected shards to make this operation visible to search, if `wait_for` then wait for a refresh to make this operation visible to search, if `false` then do nothing with refreshes.",
          "name": "refresh",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Refresh",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": []
      },
      "inherits": {
        "generics": [
          {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          },
          {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "CreatedStatus",
                "namespace": "security._types"
              }
            }
          }
        ],
        "type": {
          "name": "DictionaryResponseBase",
          "namespace": "_types"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "security.put_privileges"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "properties",
        "properties": [
          {
            "description": "A list of application privilege entries.",
            "name": "applications",
            "required": false,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "ApplicationPrivileges",
                  "namespace": "security._types"
                }
              }
            }
          },
          {
            "description": "A list of cluster privileges. These privileges define the cluster-level actions for users with this role.",
            "name": "cluster",
            "required": false,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "ClusterPrivilege",
                  "namespace": "security._types"
                }
              }
            }
          },
          {
            "description": "An object defining global privileges. A global privilege is a form of cluster privilege that is request-aware. Support for global privileges is currently limited to the management of application privileges.",
            "name": "global",
            "required": false,
            "type": {
              "key": {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              },
              "kind": "dictionary_of",
              "singleKey": false,
              "value": {
                "kind": "user_defined_value"
              }
            }
          },
          {
            "description": "A list of indices permissions entries.",
            "name": "indices",
            "required": false,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "IndicesPrivileges",
                  "namespace": "security._types"
                }
              }
            }
          },
          {
            "description": "Optional metadata. Within the metadata object, keys that begin with an underscore (`_`) are reserved for system use.",
            "name": "metadata",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Metadata",
                "namespace": "_types"
              }
            }
          },
          {
            "description": "A list of users that the owners of this role can impersonate.",
            "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/run-as-privilege.html",
            "name": "run_as",
            "required": false,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              }
            }
          },
          {
            "description": "Indicates roles that might be incompatible with the current cluster license, specifically roles with document and field level security. When the cluster license doesn’t allow certain features for a given role, this parameter is updated dynamically to list the incompatible features. If `enabled` is `false`, the role is ignored, but is still listed in the response from the authenticate API.",
            "name": "transient_metadata",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "TransientMetadata",
                "namespace": "security.get_role"
              }
            }
          }
        ]
      },
      "description": "Adds and updates roles in the native realm.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "security.put_role"
      },
      "path": [
        {
          "description": "Role name",
          "name": "name",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "If `true` (the default) then refresh the affected shards to make this operation visible to search, if `wait_for` then wait for a refresh to make this operation visible to search, if `false` then do nothing with refreshes.",
          "name": "refresh",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Refresh",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "role",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "CreatedStatus",
                "namespace": "security._types"
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "security.put_role"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "enabled",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "metadata",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Metadata",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "roles",
            "required": false,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              }
            }
          },
          {
            "name": "rules",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "RoleMappingRule",
                "namespace": "security._types"
              }
            }
          },
          {
            "name": "run_as",
            "required": false,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              }
            }
          }
        ]
      },
      "description": "Creates and updates role mappings.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "security.put_role_mapping"
      },
      "path": [
        {
          "description": "Role-mapping name",
          "name": "name",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "If `true` (the default) then refresh the affected shards to make this operation visible to search, if `wait_for` then wait for a refresh to make this operation visible to search, if `false` then do nothing with refreshes.",
          "name": "refresh",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Refresh",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "created",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "role_mapping",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "CreatedStatus",
                "namespace": "security._types"
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "security.put_role_mapping"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "username",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Username",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "email",
            "required": false,
            "type": {
              "items": [
                {
                  "kind": "instance_of",
                  "type": {
                    "name": "string",
                    "namespace": "internal"
                  }
                },
                {
                  "kind": "instance_of",
                  "type": {
                    "name": "null",
                    "namespace": "internal"
                  }
                }
              ],
              "kind": "union_of"
            }
          },
          {
            "name": "full_name",
            "required": false,
            "type": {
              "items": [
                {
                  "kind": "instance_of",
                  "type": {
                    "name": "string",
                    "namespace": "internal"
                  }
                },
                {
                  "kind": "instance_of",
                  "type": {
                    "name": "null",
                    "namespace": "internal"
                  }
                }
              ],
              "kind": "union_of"
            }
          },
          {
            "name": "metadata",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Metadata",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "password",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Password",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "password_hash",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "roles",
            "required": false,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              }
            }
          },
          {
            "name": "enabled",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          }
        ]
      },
      "description": "Adds and updates users in the native realm. These users are commonly referred to as native users.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "security.put_user"
      },
      "path": [
        {
          "description": "The username of the User",
          "name": "username",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Username",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "If `true` (the default) then refresh the affected shards to make this operation visible to search, if `wait_for` then wait for a refresh to make this operation visible to search, if `false` then do nothing with refreshes.",
          "name": "refresh",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Refresh",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "created",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "security.put_user"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Removes a node from the shutdown list. Designed for indirect use by ECE/ESS and ECK. Direct use is not supported.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "shutdown.delete_node"
      },
      "path": [
        {
          "description": "The node id of node to be removed from the shutdown state",
          "name": "node_id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "NodeId",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": []
    },
    {
      "body": {
        "kind": "properties",
        "properties": []
      },
      "inherits": {
        "type": {
          "name": "AcknowledgedResponseBase",
          "namespace": "_types"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "shutdown.delete_node"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "NodeShutdownStatus",
        "namespace": "shutdown.get_node"
      },
      "properties": [
        {
          "name": "node_id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "NodeId",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ShutdownType",
              "namespace": "shutdown.get_node"
            }
          }
        },
        {
          "name": "reason",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "shutdown_startedmillis",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "EpochMillis",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "status",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ShutdownStatus",
              "namespace": "shutdown.get_node"
            }
          }
        },
        {
          "name": "shard_migration",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ShardMigrationStatus",
              "namespace": "shutdown.get_node"
            }
          }
        },
        {
          "name": "persistent_tasks",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "PersistentTaskStatus",
              "namespace": "shutdown.get_node"
            }
          }
        },
        {
          "name": "plugins",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "PluginsStatus",
              "namespace": "shutdown.get_node"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "PersistentTaskStatus",
        "namespace": "shutdown.get_node"
      },
      "properties": [
        {
          "name": "status",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ShutdownStatus",
              "namespace": "shutdown.get_node"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "PluginsStatus",
        "namespace": "shutdown.get_node"
      },
      "properties": [
        {
          "name": "status",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ShutdownStatus",
              "namespace": "shutdown.get_node"
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Retrieve status of a node or nodes that are currently marked as shutting down. Designed for indirect use by ECE/ESS and ECK. Direct use is not supported.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "shutdown.get_node"
      },
      "path": [
        {
          "description": "Which node for which to retrieve the shutdown status",
          "name": "node_id",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "NodeIds",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": []
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "nodes",
            "required": true,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "NodeShutdownStatus",
                  "namespace": "shutdown.get_node"
                }
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "shutdown.get_node"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "ShardMigrationStatus",
        "namespace": "shutdown.get_node"
      },
      "properties": [
        {
          "name": "status",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ShutdownStatus",
              "namespace": "shutdown.get_node"
            }
          }
        }
      ]
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "not_started"
        },
        {
          "name": "in_progress"
        },
        {
          "name": "stalled"
        },
        {
          "name": "complete"
        }
      ],
      "name": {
        "name": "ShutdownStatus",
        "namespace": "shutdown.get_node"
      }
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "remove"
        },
        {
          "name": "restart"
        }
      ],
      "name": {
        "name": "ShutdownType",
        "namespace": "shutdown.get_node"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Adds a node to be shut down. Designed for indirect use by ECE/ESS and ECK. Direct use is not supported.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "shutdown.put_node"
      },
      "path": [
        {
          "description": "The node id of node to be shut down",
          "name": "node_id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "NodeId",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": []
    },
    {
      "body": {
        "kind": "properties",
        "properties": []
      },
      "inherits": {
        "type": {
          "name": "AcknowledgedResponseBase",
          "namespace": "_types"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "shutdown.put_node"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "Configuration",
        "namespace": "slm._types"
      },
      "properties": [
        {
          "description": "If false, the snapshot fails if any data stream or index in indices is missing or closed. If true, the snapshot ignores missing or closed data streams and indices.",
          "name": "ignore_unavailable",
          "required": false,
          "serverDefault": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "A comma-separated list of data streams and indices to include in the snapshot. Multi-index syntax is supported.\nBy default, a snapshot includes all data streams and indices in the cluster. If this argument is provided, the snapshot only includes the specified data streams and clusters.",
          "name": "indices",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Indices",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "If true, the current global state is included in the snapshot.",
          "name": "include_global_state",
          "required": false,
          "serverDefault": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "A list of feature states to be included in this snapshot. A list of features available for inclusion in the snapshot and their descriptions be can be retrieved using the get features API.\nEach feature state includes one or more system indices containing data necessary for the function of that feature. Providing an empty array will include no feature states in the snapshot, regardless of the value of include_global_state. By default, all available feature states will be included in the snapshot if include_global_state is true, or no feature states if include_global_state is false.",
          "name": "feature_states",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        },
        {
          "description": "Attaches arbitrary metadata to the snapshot, such as a record of who took the snapshot, why it was taken, or any other useful data. Metadata must be less than 1024 bytes.",
          "name": "metadata",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Metadata",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "If false, the entire snapshot will fail if one or more indices included in the snapshot do not have all primary shards available.",
          "name": "partial",
          "required": false,
          "serverDefault": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "InProgress",
        "namespace": "slm._types"
      },
      "properties": [
        {
          "name": "name",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "start_time_millis",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DateString",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "state",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "uuid",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Uuid",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "Invocation",
        "namespace": "slm._types"
      },
      "properties": [
        {
          "name": "snapshot_name",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "time",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DateString",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "Policy",
        "namespace": "slm._types"
      },
      "properties": [
        {
          "name": "config",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Configuration",
              "namespace": "slm._types"
            }
          }
        },
        {
          "name": "name",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "repository",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "retention",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Retention",
              "namespace": "slm._types"
            }
          }
        },
        {
          "name": "schedule",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "CronExpression",
              "namespace": "watcher._types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "Retention",
        "namespace": "slm._types"
      },
      "properties": [
        {
          "description": "Time period after which a snapshot is considered expired and eligible for deletion. SLM deletes expired snapshots based on the slm.retention_schedule.",
          "name": "expire_after",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Maximum number of snapshots to retain, even if the snapshots have not yet expired. If the number of snapshots in the repository exceeds this limit, the policy retains the most recent snapshots and deletes older snapshots.",
          "name": "max_count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Minimum number of snapshots to retain, even if the snapshots have expired.",
          "name": "min_count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "SnapshotLifecycle",
        "namespace": "slm._types"
      },
      "properties": [
        {
          "name": "in_progress",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "InProgress",
              "namespace": "slm._types"
            }
          }
        },
        {
          "name": "last_failure",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Invocation",
              "namespace": "slm._types"
            }
          }
        },
        {
          "name": "last_success",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Invocation",
              "namespace": "slm._types"
            }
          }
        },
        {
          "name": "modified_date",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DateString",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "modified_date_millis",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "EpochMillis",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "next_execution",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DateString",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "next_execution_millis",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "EpochMillis",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "policy",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Policy",
              "namespace": "slm._types"
            }
          }
        },
        {
          "name": "version",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "VersionNumber",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "stats",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Statistics",
              "namespace": "slm._types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "Statistics",
        "namespace": "slm._types"
      },
      "properties": [
        {
          "name": "retention_deletion_time",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DateString",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "retention_deletion_time_millis",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "EpochMillis",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "retention_failed",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "retention_runs",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "retention_timed_out",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "policy",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        },
        {
          "aliases": [
            "snapshots_deleted"
          ],
          "name": "total_snapshots_deleted",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "aliases": [
            "snapshot_deletion_failures"
          ],
          "name": "total_snapshot_deletion_failures",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "aliases": [
            "snapshots_failed"
          ],
          "name": "total_snapshots_failed",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "aliases": [
            "snapshots_taken"
          ],
          "name": "total_snapshots_taken",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Deletes an existing snapshot lifecycle policy.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "slm.delete_lifecycle"
      },
      "path": [
        {
          "description": "The id of the snapshot lifecycle policy to remove",
          "name": "policy_id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": []
    },
    {
      "body": {
        "kind": "properties",
        "properties": []
      },
      "inherits": {
        "type": {
          "name": "AcknowledgedResponseBase",
          "namespace": "_types"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "slm.delete_lifecycle"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Immediately creates a snapshot according to the lifecycle policy, without waiting for the scheduled time.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "slm.execute_lifecycle"
      },
      "path": [
        {
          "description": "The id of the snapshot lifecycle policy to be executed",
          "name": "policy_id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": []
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "snapshot_name",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Name",
                "namespace": "_types"
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "slm.execute_lifecycle"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Deletes any snapshots that are expired according to the policy's retention rules.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "slm.execute_retention"
      },
      "path": [],
      "query": []
    },
    {
      "body": {
        "kind": "properties",
        "properties": []
      },
      "inherits": {
        "type": {
          "name": "AcknowledgedResponseBase",
          "namespace": "_types"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "slm.execute_retention"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Retrieves one or more snapshot lifecycle policy definitions and information about the latest snapshot attempts.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "slm.get_lifecycle"
      },
      "path": [
        {
          "description": "Comma-separated list of snapshot lifecycle policies to retrieve",
          "name": "policy_id",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Names",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": []
    },
    {
      "body": {
        "kind": "properties",
        "properties": []
      },
      "inherits": {
        "generics": [
          {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "SnapshotLifecycle",
              "namespace": "slm._types"
            }
          }
        ],
        "type": {
          "name": "DictionaryResponseBase",
          "namespace": "_types"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "slm.get_lifecycle"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Returns global and policy-level statistics about actions taken by snapshot lifecycle management.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "slm.get_stats"
      },
      "path": [],
      "query": []
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "retention_deletion_time",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "retention_deletion_time_millis",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "EpochMillis",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "retention_failed",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "long",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "retention_runs",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "long",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "retention_timed_out",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "long",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "total_snapshots_deleted",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "long",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "total_snapshot_deletion_failures",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "long",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "total_snapshots_failed",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "long",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "total_snapshots_taken",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "long",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "policy_stats",
            "required": true,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "slm.get_stats"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Retrieves the status of snapshot lifecycle management (SLM).",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "slm.get_status"
      },
      "path": [],
      "query": []
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "operation_mode",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "LifecycleOperationMode",
                "namespace": "_types"
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "slm.get_status"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "properties",
        "properties": [
          {
            "description": "Configuration for each snapshot created by the policy.",
            "name": "config",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Configuration",
                "namespace": "slm._types"
              }
            }
          },
          {
            "description": "Name automatically assigned to each snapshot created by the policy. Date math is supported. To prevent conflicting snapshot names, a UUID is automatically appended to each snapshot name.",
            "name": "name",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Name",
                "namespace": "_types"
              }
            }
          },
          {
            "description": "Repository used to store snapshots created by this policy. This repository must exist prior to the policy’s creation. You can create a repository using the snapshot repository API.",
            "name": "repository",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          },
          {
            "description": "Retention rules used to retain and delete snapshots created by the policy.",
            "name": "retention",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Retention",
                "namespace": "slm._types"
              }
            }
          },
          {
            "description": "Periodic or absolute schedule at which the policy creates snapshots. SLM applies schedule changes immediately.",
            "name": "schedule",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "CronExpression",
                "namespace": "watcher._types"
              }
            }
          }
        ]
      },
      "description": "Creates or updates a snapshot lifecycle policy.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "slm.put_lifecycle"
      },
      "path": [
        {
          "description": "ID for the snapshot lifecycle policy you want to create or update.",
          "name": "policy_id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "Period to wait for a connection to the master node. If no response is received before the timeout expires, the request fails and returns an error.",
          "name": "master_timeout",
          "required": false,
          "serverDefault": "30s",
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Period to wait for a response. If no response is received before the timeout expires, the request fails and returns an error.",
          "name": "timeout",
          "required": false,
          "serverDefault": "30s",
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": []
      },
      "inherits": {
        "type": {
          "name": "AcknowledgedResponseBase",
          "namespace": "_types"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "slm.put_lifecycle"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Turns on snapshot lifecycle management (SLM).",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "slm.start"
      },
      "path": [],
      "query": []
    },
    {
      "body": {
        "kind": "properties",
        "properties": []
      },
      "inherits": {
        "type": {
          "name": "AcknowledgedResponseBase",
          "namespace": "_types"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "slm.start"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Turns off snapshot lifecycle management (SLM).",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "slm.stop"
      },
      "path": [],
      "query": []
    },
    {
      "body": {
        "kind": "properties",
        "properties": []
      },
      "inherits": {
        "type": {
          "name": "AcknowledgedResponseBase",
          "namespace": "_types"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "slm.stop"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "FileCountSnapshotStats",
        "namespace": "snapshot._types"
      },
      "properties": [
        {
          "name": "file_count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "size_in_bytes",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "IndexDetails",
        "namespace": "snapshot._types"
      },
      "properties": [
        {
          "name": "shard_count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "size",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ByteSize",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "size_in_bytes",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "max_segments_per_shard",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "InfoFeatureState",
        "namespace": "snapshot._types"
      },
      "properties": [
        {
          "name": "feature_name",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "indices",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Indices",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "Repository",
        "namespace": "snapshot._types"
      },
      "properties": [
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "uuid",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Uuid",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "settings",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "RepositorySettings",
              "namespace": "snapshot._types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "RepositorySettings",
        "namespace": "snapshot._types"
      },
      "properties": [
        {
          "name": "chunk_size",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "compress",
          "required": false,
          "type": {
            "items": [
              {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              },
              {
                "kind": "instance_of",
                "type": {
                  "name": "boolean",
                  "namespace": "internal"
                }
              }
            ],
            "kind": "union_of"
          }
        },
        {
          "name": "concurrent_streams",
          "required": false,
          "type": {
            "items": [
              {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              },
              {
                "kind": "instance_of",
                "type": {
                  "name": "integer",
                  "namespace": "_types"
                }
              }
            ],
            "kind": "union_of"
          }
        },
        {
          "name": "location",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "aliases": [
            "readonly"
          ],
          "name": "read_only",
          "required": false,
          "type": {
            "items": [
              {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              },
              {
                "kind": "instance_of",
                "type": {
                  "name": "boolean",
                  "namespace": "internal"
                }
              }
            ],
            "kind": "union_of"
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "ShardsStats",
        "namespace": "snapshot._types"
      },
      "properties": [
        {
          "name": "done",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "failed",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "finalizing",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "initializing",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "started",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "total",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "enum",
      "members": [
        {
          "description": "Number of shards in the snapshot that were successfully stored in the repository.",
          "name": "DONE"
        },
        {
          "description": "Number of shards in the snapshot that were not successfully stored in the repository.",
          "name": "FAILURE"
        },
        {
          "description": "Number of shards in the snapshot that are in the finalizing stage of being stored in the repository.",
          "name": "FINALIZE"
        },
        {
          "description": "Number of shards in the snapshot that are in the initializing stage of being stored in the repository.",
          "name": "INIT"
        },
        {
          "description": "Number of shards in the snapshot that are in the started stage of being stored in the repository.",
          "name": "STARTED"
        }
      ],
      "name": {
        "name": "ShardsStatsStage",
        "namespace": "snapshot._types"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "ShardsStatsSummary",
        "namespace": "snapshot._types"
      },
      "properties": [
        {
          "name": "incremental",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ShardsStatsSummaryItem",
              "namespace": "snapshot._types"
            }
          }
        },
        {
          "name": "total",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ShardsStatsSummaryItem",
              "namespace": "snapshot._types"
            }
          }
        },
        {
          "name": "start_time_in_millis",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "time_in_millis",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "ShardsStatsSummaryItem",
        "namespace": "snapshot._types"
      },
      "properties": [
        {
          "name": "file_count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "size_in_bytes",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "SnapshotIndexStats",
        "namespace": "snapshot._types"
      },
      "properties": [
        {
          "name": "shards",
          "required": true,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "SnapshotShardsStatus",
                "namespace": "snapshot._types"
              }
            }
          }
        },
        {
          "name": "shards_stats",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ShardsStats",
              "namespace": "snapshot._types"
            }
          }
        },
        {
          "name": "stats",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "SnapshotStats",
              "namespace": "snapshot._types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "SnapshotInfo",
        "namespace": "snapshot._types"
      },
      "properties": [
        {
          "name": "data_streams",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        },
        {
          "name": "duration",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "duration_in_millis",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "EpochMillis",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "end_time",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "end_time_in_millis",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "EpochMillis",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "failures",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "SnapshotShardFailure",
                "namespace": "snapshot._types"
              }
            }
          }
        },
        {
          "name": "include_global_state",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "indices",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "IndexName",
                "namespace": "_types"
              }
            }
          }
        },
        {
          "name": "index_details",
          "required": false,
          "since": "7.13.0",
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "IndexName",
                "namespace": "_types"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "IndexDetails",
                "namespace": "snapshot._types"
              }
            }
          }
        },
        {
          "name": "metadata",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Metadata",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "reason",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "repository",
          "required": false,
          "since": "7.14.0",
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "snapshot",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "shards",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ShardStatistics",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "start_time",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "start_time_in_millis",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "EpochMillis",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "state",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "uuid",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Uuid",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "version",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "VersionString",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "version_id",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "VersionNumber",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "feature_states",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "InfoFeatureState",
                "namespace": "snapshot._types"
              }
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "SnapshotShardFailure",
        "namespace": "snapshot._types"
      },
      "properties": [
        {
          "name": "index",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndexName",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "node_id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "reason",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "shard_id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "status",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "SnapshotShardsStatus",
        "namespace": "snapshot._types"
      },
      "properties": [
        {
          "name": "stage",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ShardsStatsStage",
              "namespace": "snapshot._types"
            }
          }
        },
        {
          "name": "stats",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ShardsStatsSummary",
              "namespace": "snapshot._types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "SnapshotStats",
        "namespace": "snapshot._types"
      },
      "properties": [
        {
          "name": "incremental",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "FileCountSnapshotStats",
              "namespace": "snapshot._types"
            }
          }
        },
        {
          "name": "start_time_in_millis",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "time_in_millis",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "total",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "FileCountSnapshotStats",
              "namespace": "snapshot._types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "Status",
        "namespace": "snapshot._types"
      },
      "properties": [
        {
          "name": "include_global_state",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "indices",
          "required": true,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "SnapshotIndexStats",
                "namespace": "snapshot._types"
              }
            }
          }
        },
        {
          "name": "repository",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "shards_stats",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ShardsStats",
              "namespace": "snapshot._types"
            }
          }
        },
        {
          "name": "snapshot",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "state",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "stats",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "SnapshotStats",
              "namespace": "snapshot._types"
            }
          }
        },
        {
          "name": "uuid",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Uuid",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "CleanupRepositoryResults",
        "namespace": "snapshot.cleanup_repository"
      },
      "properties": [
        {
          "name": "deleted_blobs",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "deleted_bytes",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Removes stale data from repository.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "snapshot.cleanup_repository"
      },
      "path": [
        {
          "description": "A repository name",
          "name": "repository",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "Explicit operation timeout for connection to master node",
          "name": "master_timeout",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Explicit operation timeout",
          "name": "timeout",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "results",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "CleanupRepositoryResults",
                "namespace": "snapshot.cleanup_repository"
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "snapshot.cleanup_repository"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "indices",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        ]
      },
      "description": "Clones indices from one snapshot into another snapshot in the same repository.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "snapshot.clone"
      },
      "path": [
        {
          "description": "A repository name",
          "name": "repository",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "The name of the snapshot to clone from",
          "name": "snapshot",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "The name of the cloned snapshot to create",
          "name": "target_snapshot",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "Explicit operation timeout for connection to master node",
          "name": "master_timeout",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "timeout",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": []
      },
      "inherits": {
        "type": {
          "name": "AcknowledgedResponseBase",
          "namespace": "_types"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "snapshot.clone"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "properties",
        "properties": [
          {
            "description": "If `true`, the request ignores data streams and indices in `indices` that are missing or closed. If `false`, the request returns an error for any data stream or index that is missing or closed.",
            "name": "ignore_unavailable",
            "required": false,
            "serverDefault": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          },
          {
            "description": "If `true`, the current cluster state is included in the snapshot. The cluster state includes persistent cluster settings, composable index templates, legacy index templates, ingest pipelines, and ILM policies. It also includes data stored in system indices, such as Watches and task records (configurable via `feature_states`).",
            "name": "include_global_state",
            "required": false,
            "serverDefault": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          },
          {
            "description": "Data streams and indices to include in the snapshot. Supports multi-target syntax. Includes all data streams and indices by default.",
            "name": "indices",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Indices",
                "namespace": "_types"
              }
            }
          },
          {
            "description": "Feature states to include in the snapshot. Each feature state includes one or more system indices containing related data. You can view a list of eligible features using the get features API. If `include_global_state` is `true`, all current feature states are included by default. If `include_global_state` is `false`, no feature states are included by default.",
            "name": "feature_states",
            "required": false,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              }
            }
          },
          {
            "description": "Optional metadata for the snapshot. May have any contents. Must be less than 1024 bytes. This map is not automatically generated by Elasticsearch.",
            "name": "metadata",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Metadata",
                "namespace": "_types"
              }
            }
          },
          {
            "description": "If `true`, allows restoring a partial snapshot of indices with unavailable shards. Only shards that were successfully included in the snapshot will be restored. All missing shards will be recreated as empty. If `false`, the entire restore operation will fail if one or more indices included in the snapshot do not have all primary shards available.",
            "name": "partial",
            "required": false,
            "serverDefault": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          }
        ]
      },
      "description": "Creates a snapshot in a repository.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "snapshot.create"
      },
      "path": [
        {
          "description": "Repository for the snapshot.",
          "name": "repository",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Name of the snapshot. Must be unique in the repository.",
          "name": "snapshot",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "Period to wait for a connection to the master node. If no response is received before the timeout expires, the request fails and returns an error.",
          "name": "master_timeout",
          "required": false,
          "serverDefault": "30s",
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "If `true`, the request returns a response when the snapshot is complete. If `false`, the request returns a response when the snapshot initializes.",
          "name": "wait_for_completion",
          "required": false,
          "serverDefault": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "accepted",
            "required": false,
            "since": "7.15.0",
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "snapshot",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "SnapshotInfo",
                "namespace": "snapshot._types"
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "snapshot.create"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "repository",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Repository",
                "namespace": "snapshot._types"
              }
            }
          },
          {
            "name": "type",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "settings",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "RepositorySettings",
                "namespace": "snapshot._types"
              }
            }
          }
        ]
      },
      "description": "Creates a repository.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "snapshot.create_repository"
      },
      "path": [
        {
          "description": "A repository name",
          "name": "repository",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "Explicit operation timeout for connection to master node",
          "name": "master_timeout",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Explicit operation timeout",
          "name": "timeout",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Whether to verify the repository after creation",
          "name": "verify",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": []
      },
      "inherits": {
        "type": {
          "name": "AcknowledgedResponseBase",
          "namespace": "_types"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "snapshot.create_repository"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Deletes one or more snapshots.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "snapshot.delete"
      },
      "path": [
        {
          "description": "A repository name",
          "name": "repository",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "A comma-separated list of snapshot names",
          "name": "snapshot",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "Explicit operation timeout for connection to master node",
          "name": "master_timeout",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": []
      },
      "inherits": {
        "type": {
          "name": "AcknowledgedResponseBase",
          "namespace": "_types"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "snapshot.delete"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Deletes a repository.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "snapshot.delete_repository"
      },
      "path": [
        {
          "description": "Name of the snapshot repository to unregister. Wildcard (`*`) patterns are supported.",
          "name": "repository",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Names",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "Explicit operation timeout for connection to master node",
          "name": "master_timeout",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Explicit operation timeout",
          "name": "timeout",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": []
      },
      "inherits": {
        "type": {
          "name": "AcknowledgedResponseBase",
          "namespace": "_types"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "snapshot.delete_repository"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Returns information about a snapshot.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "snapshot.get"
      },
      "path": [
        {
          "description": "Comma-separated list of snapshot repository names used to limit the request. Wildcard (*) expressions are supported.",
          "name": "repository",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Comma-separated list of snapshot names to retrieve. Also accepts wildcards (*).\n- To get information about all snapshots in a registered repository, use a wildcard (*) or _all.\n- To get information about any snapshots that are currently running, use _current.",
          "name": "snapshot",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Names",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "If false, the request returns an error for any snapshots that are unavailable.",
          "name": "ignore_unavailable",
          "required": false,
          "serverDefault": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Period to wait for a connection to the master node. If no response is received before the timeout expires, the request fails and returns an error.",
          "name": "master_timeout",
          "required": false,
          "serverDefault": "30s",
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "If true, returns additional information about each snapshot such as the version of Elasticsearch which took the snapshot, the start and end times of the snapshot, and the number of shards snapshotted.",
          "name": "verbose",
          "required": false,
          "serverDefault": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "If true, returns additional information about each index in the snapshot comprising the number of shards in the index, the total size of the index in bytes, and the maximum number of segments per shard in the index. Defaults to false, meaning that this information is omitted.",
          "name": "index_details",
          "required": false,
          "serverDefault": false,
          "since": "7.13.0",
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "human",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Whether to include the repository name in the snapshot info. Defaults to true.",
          "name": "include_repository",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "responses",
            "required": false,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "SnapshotResponseItem",
                  "namespace": "snapshot.get"
                }
              }
            }
          },
          {
            "name": "snapshots",
            "required": false,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "SnapshotInfo",
                  "namespace": "snapshot._types"
                }
              }
            }
          },
          {
            "description": "The total number of snapshots that match the request when ignoring size limit or after query parameter.",
            "name": "total",
            "required": true,
            "since": "7.15.0",
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "integer",
                "namespace": "_types"
              }
            }
          },
          {
            "description": "The number of remaining snapshots that were not returned due to size limits and that can be fetched by additional requests using the next field value.",
            "name": "remaining",
            "required": true,
            "since": "7.15.0",
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "integer",
                "namespace": "_types"
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "snapshot.get"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "SnapshotResponseItem",
        "namespace": "snapshot.get"
      },
      "properties": [
        {
          "name": "repository",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "snapshots",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "SnapshotInfo",
                "namespace": "snapshot._types"
              }
            }
          }
        },
        {
          "name": "error",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ErrorCause",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Returns information about a repository.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "snapshot.get_repository"
      },
      "path": [
        {
          "description": "A comma-separated list of repository names",
          "name": "repository",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Names",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "Return local information, do not retrieve the state from master node (default: false)",
          "name": "local",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Explicit operation timeout for connection to master node",
          "name": "master_timeout",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": []
      },
      "inherits": {
        "generics": [
          {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "Repository",
              "namespace": "snapshot._types"
            }
          }
        ],
        "type": {
          "name": "DictionaryResponseBase",
          "namespace": "_types"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "snapshot.get_repository"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "ignore_index_settings",
            "required": false,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              }
            }
          },
          {
            "name": "ignore_unavailable",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "include_aliases",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "include_global_state",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "index_settings",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Request",
                "namespace": "indices.put_settings"
              }
            }
          },
          {
            "name": "indices",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Indices",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "partial",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "rename_pattern",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "rename_replacement",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        ]
      },
      "description": "Restores a snapshot.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "snapshot.restore"
      },
      "path": [
        {
          "description": "A repository name",
          "name": "repository",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "A snapshot name",
          "name": "snapshot",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "Explicit operation timeout for connection to master node",
          "name": "master_timeout",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Should this request wait until the operation has completed before returning",
          "name": "wait_for_completion",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "snapshot",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "SnapshotRestore",
                "namespace": "snapshot.restore"
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "snapshot.restore"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "SnapshotRestore",
        "namespace": "snapshot.restore"
      },
      "properties": [
        {
          "name": "indices",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "IndexName",
                "namespace": "_types"
              }
            }
          }
        },
        {
          "name": "snapshot",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "shards",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ShardStatistics",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Returns information about the status of a snapshot.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "snapshot.status"
      },
      "path": [
        {
          "description": "A repository name",
          "name": "repository",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "A comma-separated list of snapshot names",
          "name": "snapshot",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Names",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "Whether to ignore unavailable snapshots, defaults to false which means a SnapshotMissingException is thrown",
          "name": "ignore_unavailable",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Explicit operation timeout for connection to master node",
          "name": "master_timeout",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "snapshots",
            "required": true,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "Status",
                  "namespace": "snapshot._types"
                }
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "snapshot.status"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "CompactNodeInfo",
        "namespace": "snapshot.verify_repository"
      },
      "properties": [
        {
          "name": "name",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Verifies a repository.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "snapshot.verify_repository"
      },
      "path": [
        {
          "description": "A repository name",
          "name": "repository",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "Explicit operation timeout for connection to master node",
          "name": "master_timeout",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Explicit operation timeout",
          "name": "timeout",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "nodes",
            "required": true,
            "type": {
              "key": {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              },
              "kind": "dictionary_of",
              "singleKey": false,
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "CompactNodeInfo",
                  "namespace": "snapshot.verify_repository"
                }
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "snapshot.verify_repository"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "cursor",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        ]
      },
      "description": "Clears the SQL cursor",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "sql.clear_cursor"
      },
      "path": [],
      "query": []
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "succeeded",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "sql.clear_cursor"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "Column",
        "namespace": "sql.query"
      },
      "properties": [
        {
          "name": "name",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "columnar",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "cursor",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          },
          {
            "description": "The maximum number of rows (or entries) to return in one response",
            "name": "fetch_size",
            "required": false,
            "serverDefault": 1000,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "integer",
                "namespace": "_types"
              }
            }
          },
          {
            "description": "Optional Elasticsearch query DSL for additional filtering.",
            "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/sql-rest-filtering.html",
            "name": "filter",
            "required": false,
            "serverDefault": "none",
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "QueryContainer",
                "namespace": "_types.query_dsl"
              }
            }
          },
          {
            "description": "SQL query to execute",
            "name": "query",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          },
          {
            "description": "The timeout before the request fails.",
            "name": "request_timeout",
            "required": false,
            "serverDefault": "90s",
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Time",
                "namespace": "_types"
              }
            }
          },
          {
            "description": "The timeout before a pagination request fails.",
            "name": "page_timeout",
            "required": false,
            "serverDefault": "45s",
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Time",
                "namespace": "_types"
              }
            }
          },
          {
            "description": "Time-zone in ISO 8601 used for executing the query on the server. More information available here.",
            "docUrl": "https://docs.oracle.com/javase/8/docs/api/java/time/ZoneId.html",
            "name": "time_zone",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          },
          {
            "description": "Throw an exception when encountering multiple values for a field (default) or be lenient and return the first value from the list (without any guarantees of what that will be - typically the first in natural ascending order).",
            "name": "field_multi_value_leniency",
            "required": false,
            "serverDefault": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          }
        ]
      },
      "description": "Executes a SQL request",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "sql.query"
      },
      "path": [],
      "query": [
        {
          "description": "a short version of the Accept header, e.g. json, yaml",
          "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/sql-rest-format.html#sql-rest-format",
          "name": "format",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "columns",
            "required": false,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "Column",
                  "namespace": "sql.query"
                }
              }
            }
          },
          {
            "name": "cursor",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "rows",
            "required": true,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "Row",
                  "namespace": "sql.query"
                }
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "sql.query"
      }
    },
    {
      "kind": "type_alias",
      "name": {
        "name": "Row",
        "namespace": "sql.query"
      },
      "type": {
        "kind": "array_of",
        "value": {
          "kind": "user_defined_value"
        }
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "fetch_size",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "integer",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "filter",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "QueryContainer",
                "namespace": "_types.query_dsl"
              }
            }
          },
          {
            "name": "query",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "time_zone",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        ]
      },
      "description": "Translates SQL into Elasticsearch queries",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "sql.translate"
      },
      "path": [],
      "query": []
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "size",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "long",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "_source",
            "required": true,
            "type": {
              "items": [
                {
                  "kind": "instance_of",
                  "type": {
                    "name": "boolean",
                    "namespace": "internal"
                  }
                },
                {
                  "kind": "instance_of",
                  "type": {
                    "name": "Fields",
                    "namespace": "_types"
                  }
                },
                {
                  "kind": "instance_of",
                  "type": {
                    "name": "SourceFilter",
                    "namespace": "_global.search._types"
                  }
                }
              ],
              "kind": "union_of"
            }
          },
          {
            "name": "fields",
            "required": true,
            "type": {
              "kind": "array_of",
              "value": {
                "key": {
                  "kind": "instance_of",
                  "type": {
                    "name": "Field",
                    "namespace": "_types"
                  }
                },
                "kind": "dictionary_of",
                "singleKey": false,
                "value": {
                  "kind": "instance_of",
                  "type": {
                    "name": "string",
                    "namespace": "internal"
                  }
                }
              }
            }
          },
          {
            "name": "sort",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Sort",
                "namespace": "_global.search._types"
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "sql.translate"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "CertificateInformation",
        "namespace": "ssl.certificates"
      },
      "properties": [
        {
          "name": "alias",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "expiry",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DateString",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "format",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "has_private_key",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "path",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "serial_number",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "subject_dn",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Retrieves information about the X.509 certificates used to encrypt communications in the cluster.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "ssl.certificates"
      },
      "path": [],
      "query": []
    },
    {
      "body": {
        "kind": "value",
        "value": {
          "kind": "array_of",
          "value": {
            "kind": "instance_of",
            "type": {
              "name": "CertificateInformation",
              "namespace": "ssl.certificates"
            }
          }
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "ssl.certificates"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "Info",
        "namespace": "tasks._types"
      },
      "properties": [
        {
          "name": "action",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "cancellable",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "children",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "Info",
                "namespace": "tasks._types"
              }
            }
          }
        },
        {
          "name": "description",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "headers",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "HttpHeaders",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "node",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "running_time_in_nanos",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "start_time_in_millis",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "status",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Status",
              "namespace": "tasks._types"
            }
          }
        },
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "parent_task_id",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "State",
        "namespace": "tasks._types"
      },
      "properties": [
        {
          "name": "action",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "cancellable",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "description",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "headers",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "HttpHeaders",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "node",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "parent_task_id",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "TaskId",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "running_time_in_nanos",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "start_time_in_millis",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "status",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Status",
              "namespace": "tasks._types"
            }
          }
        },
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "Status",
        "namespace": "tasks._types"
      },
      "properties": [
        {
          "name": "batches",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "canceled",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "created",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "deleted",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "noops",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "failures",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        },
        {
          "name": "requests_per_second",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "float",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "retries",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Retries",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "throttled",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "throttled_millis",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "throttled_until",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "throttled_until_millis",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "timed_out",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "took",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "total",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "updated",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "version_conflicts",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "BaseNode",
          "namespace": "_spec_utils"
        }
      },
      "kind": "interface",
      "name": {
        "name": "TaskExecutingNode",
        "namespace": "tasks._types"
      },
      "properties": [
        {
          "name": "tasks",
          "required": true,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "TaskId",
                "namespace": "_types"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "State",
                "namespace": "tasks._types"
              }
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Cancels a task, if it can be cancelled through an API.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "tasks.cancel"
      },
      "path": [
        {
          "description": "Cancel the task with specified task id (node_id:task_number)",
          "name": "task_id",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "TaskId",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "A comma-separated list of actions that should be cancelled. Leave empty to cancel all.",
          "name": "actions",
          "required": false,
          "type": {
            "items": [
              {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              },
              {
                "kind": "array_of",
                "value": {
                  "kind": "instance_of",
                  "type": {
                    "name": "string",
                    "namespace": "internal"
                  }
                }
              }
            ],
            "kind": "union_of"
          }
        },
        {
          "description": "A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes",
          "name": "nodes",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        },
        {
          "description": "Cancel tasks with specified parent task id (node_id:task_number). Set to -1 to cancel all.",
          "name": "parent_task_id",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Should the request block until the cancellation of the task and its descendant tasks is completed. Defaults to false",
          "name": "wait_for_completion",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "node_failures",
            "required": false,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "ErrorCause",
                  "namespace": "_types"
                }
              }
            }
          },
          {
            "name": "nodes",
            "required": true,
            "type": {
              "key": {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              },
              "kind": "dictionary_of",
              "singleKey": false,
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "TaskExecutingNode",
                  "namespace": "tasks._types"
                }
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "tasks.cancel"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Returns information about a task.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "tasks.get"
      },
      "path": [
        {
          "description": "Return the task with specified id (node_id:task_number)",
          "name": "task_id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "Explicit operation timeout",
          "name": "timeout",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Wait for the matching tasks to complete (default: false)",
          "name": "wait_for_completion",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "completed",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "task",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Info",
                "namespace": "tasks._types"
              }
            }
          },
          {
            "name": "response",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Status",
                "namespace": "tasks._types"
              }
            }
          },
          {
            "name": "error",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "ErrorCause",
                "namespace": "_types"
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "tasks.get"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Returns a list of tasks.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "tasks.list"
      },
      "path": [],
      "query": [
        {
          "description": "A comma-separated list of actions that should be returned. Leave empty to return all.",
          "name": "actions",
          "required": false,
          "type": {
            "items": [
              {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              },
              {
                "kind": "array_of",
                "value": {
                  "kind": "instance_of",
                  "type": {
                    "name": "string",
                    "namespace": "internal"
                  }
                }
              }
            ],
            "kind": "union_of"
          }
        },
        {
          "description": "Return detailed task information (default: false)",
          "name": "detailed",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Group tasks by nodes or parent/child relationships",
          "name": "group_by",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "GroupBy",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes",
          "name": "nodes",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        },
        {
          "description": "Return tasks with specified parent task id (node_id:task_number). Set to -1 to return all.",
          "name": "parent_task_id",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Explicit operation timeout",
          "name": "timeout",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Wait for the matching tasks to complete (default: false)",
          "name": "wait_for_completion",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "node_failures",
            "required": false,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "ErrorCause",
                  "namespace": "_types"
                }
              }
            }
          },
          {
            "name": "nodes",
            "required": false,
            "type": {
              "key": {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              },
              "kind": "dictionary_of",
              "singleKey": false,
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "TaskExecutingNode",
                  "namespace": "tasks._types"
                }
              }
            }
          },
          {
            "name": "tasks",
            "required": false,
            "type": {
              "items": [
                {
                  "key": {
                    "kind": "instance_of",
                    "type": {
                      "name": "string",
                      "namespace": "internal"
                    }
                  },
                  "kind": "dictionary_of",
                  "singleKey": false,
                  "value": {
                    "kind": "instance_of",
                    "type": {
                      "name": "Info",
                      "namespace": "tasks._types"
                    }
                  }
                },
                {
                  "kind": "array_of",
                  "value": {
                    "kind": "instance_of",
                    "type": {
                      "name": "Info",
                      "namespace": "tasks._types"
                    }
                  }
                }
              ],
              "kind": "union_of"
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "tasks.list"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "FieldStat",
        "namespace": "text_structure.find_structure"
      },
      "properties": [
        {
          "name": "count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "cardinality",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "top_hits",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "TopHit",
                "namespace": "text_structure.find_structure"
              }
            }
          }
        },
        {
          "name": "mean_value",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "median_value",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "max_value",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "min_value",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "earliest",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "latest",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "body": {
        "identifier": "text_files",
        "kind": "value",
        "value": {
          "kind": "array_of",
          "value": {
            "kind": "instance_of",
            "type": {
              "name": "TJsonDocument",
              "namespace": "text_structure.find_structure"
            }
          }
        }
      },
      "description": "Finds the structure of a text file. The text file must contain data that is suitable to be ingested into Elasticsearch.",
      "generics": [
        {
          "name": "TJsonDocument",
          "namespace": "text_structure.find_structure"
        }
      ],
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "text_structure.find_structure"
      },
      "path": [],
      "query": [
        {
          "description": "The text’s character set. It must be a character set that is supported by the JVM that Elasticsearch uses. For example, UTF-8, UTF-16LE, windows-1252, or EUC-JP. If this parameter is not specified, the structure finder chooses an appropriate character set.",
          "name": "charset",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "If you have set format to delimited, you can specify the column names in a comma-separated list. If this parameter is not specified, the structure finder uses the column names from the header row of the text. If the text does not have a header role, columns are named \"column1\", \"column2\", \"column3\", etc.",
          "name": "column_names",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "If you have set format to delimited, you can specify the character used to delimit the values in each row. Only a single character is supported; the delimiter cannot have multiple characters. By default, the API considers the following possibilities: comma, tab, semi-colon, and pipe (|). In this default scenario, all rows must have the same number of fields for the delimited format to be detected. If you specify a delimiter, up to 10% of the rows can have a different number of columns than the first row.",
          "name": "delimiter",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "If this parameter is set to true, the response includes a field named explanation, which is an array of strings that indicate how the structure finder produced its result.",
          "name": "explain",
          "required": false,
          "serverDefault": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "The high level structure of the text. Valid values are ndjson, xml, delimited, and semi_structured_text. By default, the API chooses the format. In this default scenario, all rows must have the same number of fields for a delimited format to be detected. If the format is set to delimited and the delimiter is not set, however, the API tolerates up to 5% of rows that have a different number of columns than the first row.",
          "name": "format",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "If you have set format to semi_structured_text, you can specify a Grok pattern that is used to extract fields from every message in the text. The name of the timestamp field in the Grok pattern must match what is specified in the timestamp_field parameter. If that parameter is not specified, the name of the timestamp field in the Grok pattern must match \"timestamp\". If grok_pattern is not specified, the structure finder creates a Grok pattern.",
          "name": "grok_pattern",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "If you have set format to delimited, you can use this parameter to indicate whether the column names are in the first row of the text. If this parameter is not specified, the structure finder guesses based on the similarity of the first row of the text to other rows.",
          "name": "has_header_row",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "The maximum number of characters in a message when lines are merged to form messages while analyzing semi-structured text. If you have extremely long messages you may need to increase this, but be aware that this may lead to very long processing times if the way to group lines into messages is misdetected.",
          "name": "line_merge_size_limit",
          "required": false,
          "serverDefault": 10000,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "uint",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "The number of lines to include in the structural analysis, starting from the beginning of the text. The minimum is 2; If the value of this parameter is greater than the number of lines in the text, the analysis proceeds (as long as there are at least two lines in the text) for all of the lines.",
          "name": "lines_to_sample",
          "required": false,
          "serverDefault": 1000,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "uint",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "If you have set format to delimited, you can specify the character used to quote the values in each row if they contain newlines or the delimiter character. Only a single character is supported. If this parameter is not specified, the default value is a double quote (\"). If your delimited text format does not use quoting, a workaround is to set this argument to a character that does not appear anywhere in the sample.",
          "name": "quote",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "If you have set format to delimited, you can specify whether values between delimiters should have whitespace trimmed from them. If this parameter is not specified and the delimiter is pipe (|), the default value is true. Otherwise, the default value is false.",
          "name": "should_trim_fields",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Sets the maximum amount of time that the structure analysis make take. If the analysis is still running when the timeout expires then it will be aborted.",
          "name": "timeout",
          "required": false,
          "serverDefault": "25s",
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Optional parameter to specify the timestamp field in the file",
          "name": "timestamp_field",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "The Java time format of the timestamp field in the text.",
          "name": "timestamp_format",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "charset",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "has_header_row",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "has_byte_order_marker",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "format",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "field_stats",
            "required": true,
            "type": {
              "key": {
                "kind": "instance_of",
                "type": {
                  "name": "Field",
                  "namespace": "_types"
                }
              },
              "kind": "dictionary_of",
              "singleKey": false,
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "FieldStat",
                  "namespace": "text_structure.find_structure"
                }
              }
            }
          },
          {
            "name": "sample_start",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "num_messages_analyzed",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "integer",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "mappings",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "TypeMapping",
                "namespace": "_types.mapping"
              }
            }
          },
          {
            "name": "quote",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "delimiter",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "need_client_timezone",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "num_lines_analyzed",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "integer",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "column_names",
            "required": false,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              }
            }
          },
          {
            "name": "explanation",
            "required": false,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              }
            }
          },
          {
            "name": "grok_pattern",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "multiline_start_pattern",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "exclude_lines_pattern",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "java_timestamp_formats",
            "required": false,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              }
            }
          },
          {
            "name": "joda_timestamp_formats",
            "required": false,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              }
            }
          },
          {
            "name": "timestamp_field",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Field",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "should_trim_fields",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "ingest_pipeline",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "PipelineConfig",
                "namespace": "ingest._types"
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "text_structure.find_structure"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "TopHit",
        "namespace": "text_structure.find_structure"
      },
      "properties": [
        {
          "name": "count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "value",
          "required": true,
          "type": {
            "kind": "user_defined_value"
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "Latest",
        "namespace": "transform._types"
      },
      "properties": [
        {
          "description": "Specifies the date field that is used to identify the latest documents.",
          "name": "sort",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Specifies an array of one or more fields that are used to group the data.",
          "name": "unique_key",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "Field",
                "namespace": "_types"
              }
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "Pivot",
        "namespace": "transform._types"
      },
      "properties": [
        {
          "aliases": [
            "aggs"
          ],
          "name": "aggregations",
          "required": false,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "AggregationContainer",
                "namespace": "_types.aggregations"
              }
            }
          }
        },
        {
          "name": "group_by",
          "required": false,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "PivotGroupByContainer",
                "namespace": "transform._types"
              }
            }
          }
        },
        {
          "name": "max_page_search_size",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "PivotGroupByContainer",
        "namespace": "transform._types"
      },
      "properties": [
        {
          "name": "date_histogram",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DateHistogramAggregation",
              "namespace": "_types.aggregations"
            }
          }
        },
        {
          "name": "geotile_grid",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "GeoTileGridAggregation",
              "namespace": "_types.aggregations"
            }
          }
        },
        {
          "name": "histogram",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "HistogramAggregation",
              "namespace": "_types.aggregations"
            }
          }
        },
        {
          "name": "terms",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "TermsAggregation",
              "namespace": "_types.aggregations"
            }
          }
        }
      ],
      "variants": {
        "kind": "container"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "RetentionPolicy",
        "namespace": "transform._types"
      },
      "properties": [
        {
          "description": "The date field that is used to calculate the age of the document.",
          "name": "field",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Specifies the maximum age of a document in the destination index. Documents that are older than the configured value are removed from the destination index.",
          "name": "max_age",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "RetentionPolicyContainer",
        "namespace": "transform._types"
      },
      "properties": [
        {
          "description": "Specifies that the transform uses a time field to set the retention policy.",
          "name": "time",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "RetentionPolicy",
              "namespace": "transform._types"
            }
          }
        }
      ],
      "variants": {
        "kind": "container"
      }
    },
    {
      "description": "The source of the data for the transform.",
      "kind": "interface",
      "name": {
        "name": "Settings",
        "namespace": "transform._types"
      },
      "properties": [
        {
          "description": "Defines if dates in the ouput should be written as ISO formatted string (default) or as millis since epoch. epoch_millis has been the default for transforms created before version 7.11. For compatible output set this to true.",
          "name": "dates_as_epoch_millis",
          "required": false,
          "serverDefault": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Specifies a limit on the number of input documents per second. This setting throttles the transform by adding a wait time between search requests. The default value is null, which disables throttling.",
          "name": "docs_per_second",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "float",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Defines the initial page size to use for the composite aggregation for each checkpoint. If circuit breaker exceptions occur, the page size is dynamically adjusted to a lower value. The minimum value is 10 and the maximum is 10,000.",
          "name": "max_page_search_size",
          "required": false,
          "serverDefault": 500,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "SyncContainer",
        "namespace": "transform._types"
      },
      "properties": [
        {
          "description": "Specifies that the transform uses a time field to synchronize the source and destination indices.",
          "name": "time",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "TimeSync",
              "namespace": "transform._types"
            }
          }
        }
      ],
      "variants": {
        "kind": "container"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "TimeSync",
        "namespace": "transform._types"
      },
      "properties": [
        {
          "description": "The time delay between the current time and the latest input data time.",
          "name": "delay",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "The date field that is used to identify new documents in the source.",
          "name": "field",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Deletes an existing transform.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "transform.delete_transform"
      },
      "path": [
        {
          "description": "The id of the transform to delete",
          "name": "transform_id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "When `true`, the transform is deleted regardless of its current state. The default value is `false`, meaning that the transform must be `stopped` before it can be deleted.",
          "name": "force",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": []
      },
      "inherits": {
        "type": {
          "name": "AcknowledgedResponseBase",
          "namespace": "_types"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "transform.delete_transform"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Retrieves configuration information for transforms.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "transform.get_transform"
      },
      "path": [
        {
          "description": "The id or comma delimited list of id expressions of the transforms to get, '_all' or '*' implies get all transforms",
          "name": "transform_id",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "Whether to ignore if a wildcard expression matches no transforms. (This includes `_all` string or when no transforms have been specified)",
          "name": "allow_no_match",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "skips a number of transform configs, defaults to 0",
          "name": "from",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "specifies a max number of transforms to get, defaults to 100",
          "name": "size",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Omits fields that are illegal to set on transform PUT",
          "name": "exclude_generated",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "count",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "long",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "transforms",
            "required": true,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "Transform",
                  "namespace": "_types"
                }
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "transform.get_transform"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "CheckpointStats",
        "namespace": "transform.get_transform_stats"
      },
      "properties": [
        {
          "name": "checkpoint",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "checkpoint_progress",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "TransformProgress",
              "namespace": "transform.get_transform_stats"
            }
          }
        },
        {
          "name": "timestamp",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DateString",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "timestamp_millis",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "EpochMillis",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "time_upper_bound",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DateString",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "time_upper_bound_millis",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "EpochMillis",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "Checkpointing",
        "namespace": "transform.get_transform_stats"
      },
      "properties": [
        {
          "name": "changes_last_detected_at",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "changes_last_detected_at_date_time",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DateString",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "last",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "CheckpointStats",
              "namespace": "transform.get_transform_stats"
            }
          }
        },
        {
          "name": "next",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "CheckpointStats",
              "namespace": "transform.get_transform_stats"
            }
          }
        },
        {
          "name": "operations_behind",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Retrieves usage information for transforms.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "transform.get_transform_stats"
      },
      "path": [
        {
          "description": "The id of the transform for which to get stats. '_all' or '*' implies all transforms",
          "name": "transform_id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "Whether to ignore if a wildcard expression matches no transforms. (This includes `_all` string or when no transforms have been specified)",
          "name": "allow_no_match",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "skips a number of transform stats, defaults to 0",
          "name": "from",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "specifies a max number of transform stats to get, defaults to 100",
          "name": "size",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "count",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "long",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "transforms",
            "required": true,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "TransformStats",
                  "namespace": "transform.get_transform_stats"
                }
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "transform.get_transform_stats"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "TransformIndexerStats",
        "namespace": "transform.get_transform_stats"
      },
      "properties": [
        {
          "name": "documents_indexed",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "documents_processed",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "exponential_avg_checkpoint_duration_ms",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "exponential_avg_documents_indexed",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "exponential_avg_documents_processed",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "index_failures",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "index_time_in_ms",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "index_total",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "pages_processed",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "processing_time_in_ms",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "processing_total",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "search_failures",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "search_time_in_ms",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "search_total",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "trigger_count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "TransformProgress",
        "namespace": "transform.get_transform_stats"
      },
      "properties": [
        {
          "name": "docs_indexed",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "docs_processed",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "docs_remaining",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "percent_complete",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "double",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "total_docs",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "TransformStats",
        "namespace": "transform.get_transform_stats"
      },
      "properties": [
        {
          "name": "checkpointing",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Checkpointing",
              "namespace": "transform.get_transform_stats"
            }
          }
        },
        {
          "name": "id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "node",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "NodeAttributes",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "reason",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "state",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "stats",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "TransformIndexerStats",
              "namespace": "transform.get_transform_stats"
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "properties",
        "properties": [
          {
            "description": "The destination for the transform.",
            "name": "dest",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Destination",
                "namespace": "_global.reindex"
              }
            }
          },
          {
            "description": "Free text description of the transform.",
            "name": "description",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          },
          {
            "description": "The interval between checks for changes in the source indices when the transform is running continuously. Also determines the retry interval in the event of transient failures while the transform is searching or indexing. The minimum value is 1s and the maximum is 1h.",
            "name": "frequency",
            "required": false,
            "serverDefault": "1m",
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Time",
                "namespace": "_types"
              }
            }
          },
          {
            "description": "The pivot method transforms the data by aggregating and grouping it. These objects define the group by fields and the aggregation to reduce the data.",
            "name": "pivot",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Pivot",
                "namespace": "transform._types"
              }
            }
          },
          {
            "description": "The source of the data for the transform.",
            "name": "source",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Source",
                "namespace": "_global.reindex"
              }
            }
          },
          {
            "description": "Defines optional transform settings.",
            "name": "settings",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Settings",
                "namespace": "transform._types"
              }
            }
          },
          {
            "description": "Defines the properties transforms require to run continuously.",
            "name": "sync",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "SyncContainer",
                "namespace": "transform._types"
              }
            }
          },
          {
            "description": "Defines a retention policy for the transform. Data that meets the defined criteria is deleted from the destination index.",
            "name": "retention_policy",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "RetentionPolicyContainer",
                "namespace": "transform._types"
              }
            }
          },
          {
            "description": "The latest method transforms the data by finding the latest document for each unique key.",
            "name": "latest",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Latest",
                "namespace": "transform._types"
              }
            }
          }
        ]
      },
      "description": "Previews a transform.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "transform.preview_transform"
      },
      "path": [
        {
          "description": "The id of the transform to preview.",
          "name": "transform_id",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": []
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "generated_dest_index",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "IndexState",
                "namespace": "indices._types"
              }
            }
          },
          {
            "name": "preview",
            "required": true,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "TTransform",
                  "namespace": "transform.preview_transform"
                }
              }
            }
          }
        ]
      },
      "generics": [
        {
          "name": "TTransform",
          "namespace": "transform.preview_transform"
        }
      ],
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "transform.preview_transform"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "properties",
        "properties": []
      },
      "description": "Instantiates a transform.",
      "inherits": {
        "type": {
          "name": "Request",
          "namespace": "transform.preview_transform"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "transform.put_transform"
      },
      "path": [
        {
          "description": "Identifier for the transform. This identifier can contain lowercase alphanumeric characters (a-z and 0-9), hyphens, and underscores. It must start and end with alphanumeric characters.",
          "name": "transform_id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "When true, deferrable validations are not run. This behavior may be desired if the source index does not exist until after the transform is created.",
          "name": "defer_validation",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": []
      },
      "inherits": {
        "type": {
          "name": "AcknowledgedResponseBase",
          "namespace": "_types"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "transform.put_transform"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Starts one or more transforms.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "transform.start_transform"
      },
      "path": [
        {
          "description": "The id of the transform to start",
          "name": "transform_id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "Controls the time to wait for the transform to start",
          "name": "timeout",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": []
      },
      "inherits": {
        "type": {
          "name": "AcknowledgedResponseBase",
          "namespace": "_types"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "transform.start_transform"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Stops one or more transforms.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "transform.stop_transform"
      },
      "path": [
        {
          "description": "The id of the transform to stop",
          "name": "transform_id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "Whether to ignore if a wildcard expression matches no transforms. (This includes `_all` string or when no transforms have been specified)",
          "name": "allow_no_match",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Whether to force stop a failed transform or not. Default to false",
          "name": "force",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Controls the time to wait until the transform has stopped. Default to 30 seconds",
          "name": "timeout",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Whether to wait for the transform to reach a checkpoint before stopping. Default to false",
          "name": "wait_for_checkpoint",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Whether to wait for the transform to fully stop before returning or not. Default to false",
          "name": "wait_for_completion",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": []
      },
      "inherits": {
        "type": {
          "name": "AcknowledgedResponseBase",
          "namespace": "_types"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "transform.stop_transform"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "properties",
        "properties": []
      },
      "description": "Updates certain properties of a transform.",
      "inherits": {
        "type": {
          "name": "Request",
          "namespace": "transform.put_transform"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "transform.update_transform"
      },
      "path": [],
      "query": []
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "create_time",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "long",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "description",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "dest",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Destination",
                "namespace": "_global.reindex"
              }
            }
          },
          {
            "name": "frequency",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Time",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "id",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Id",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "pivot",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Pivot",
                "namespace": "transform._types"
              }
            }
          },
          {
            "name": "settings",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Settings",
                "namespace": "transform._types"
              }
            }
          },
          {
            "name": "source",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Source",
                "namespace": "_global.reindex"
              }
            }
          },
          {
            "name": "sync",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "SyncContainer",
                "namespace": "transform._types"
              }
            }
          },
          {
            "name": "version",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "VersionString",
                "namespace": "_types"
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "transform.update_transform"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "AcknowledgeState",
        "namespace": "watcher._types"
      },
      "properties": [
        {
          "name": "state",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "AcknowledgementOptions",
              "namespace": "watcher._types"
            }
          }
        },
        {
          "name": "timestamp",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DateString",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "awaits_successful_execution"
        },
        {
          "name": "ackable"
        },
        {
          "name": "acked"
        }
      ],
      "name": {
        "name": "AcknowledgementOptions",
        "namespace": "watcher._types"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "Action",
        "namespace": "watcher._types"
      },
      "properties": [
        {
          "name": "action_type",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ActionType",
              "namespace": "watcher._types"
            }
          }
        },
        {
          "name": "condition",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ConditionContainer",
              "namespace": "watcher._types"
            }
          }
        },
        {
          "name": "foreach",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "max_iterations",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "name",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "throttle_period",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "throttle_period_in_millis",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "EpochMillis",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "transform",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "TransformContainer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "index",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Index",
              "namespace": "watcher._types"
            }
          }
        },
        {
          "name": "logging",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Logging",
              "namespace": "watcher._types"
            }
          }
        },
        {
          "name": "webhook",
          "required": false,
          "since": "7.14.0",
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ActionWebhook",
              "namespace": "watcher._types"
            }
          }
        }
      ]
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "simulate"
        },
        {
          "name": "force_simulate"
        },
        {
          "name": "execute"
        },
        {
          "name": "force_execute"
        },
        {
          "name": "skip"
        }
      ],
      "name": {
        "name": "ActionExecutionMode",
        "namespace": "watcher._types"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "ActionStatus",
        "namespace": "watcher._types"
      },
      "properties": [
        {
          "name": "ack",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "AcknowledgeState",
              "namespace": "watcher._types"
            }
          }
        },
        {
          "name": "last_execution",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ExecutionState",
              "namespace": "watcher._types"
            }
          }
        },
        {
          "name": "last_successful_execution",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ExecutionState",
              "namespace": "watcher._types"
            }
          }
        },
        {
          "name": "last_throttle",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ThrottleState",
              "namespace": "watcher._types"
            }
          }
        }
      ]
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "success"
        },
        {
          "name": "failure"
        },
        {
          "name": "simulated"
        },
        {
          "name": "throttled"
        }
      ],
      "name": {
        "name": "ActionStatusOptions",
        "namespace": "watcher._types"
      }
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "email"
        },
        {
          "name": "webhook"
        },
        {
          "name": "index"
        },
        {
          "name": "logging"
        },
        {
          "name": "slack"
        },
        {
          "name": "pagerduty"
        }
      ],
      "name": {
        "name": "ActionType",
        "namespace": "watcher._types"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "ActionWebhook",
        "namespace": "watcher._types"
      },
      "properties": [
        {
          "name": "host",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Host",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "port",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "type_alias",
      "name": {
        "name": "Actions",
        "namespace": "watcher._types"
      },
      "type": {
        "key": {
          "kind": "instance_of",
          "type": {
            "name": "IndexName",
            "namespace": "_types"
          }
        },
        "kind": "dictionary_of",
        "singleKey": false,
        "value": {
          "kind": "instance_of",
          "type": {
            "name": "ActionStatus",
            "namespace": "watcher._types"
          }
        }
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "ActivationState",
        "namespace": "watcher._types"
      },
      "properties": [
        {
          "name": "active",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "timestamp",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Timestamp",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "ActivationStatus",
        "namespace": "watcher._types"
      },
      "properties": [
        {
          "name": "actions",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Actions",
              "namespace": "watcher._types"
            }
          }
        },
        {
          "name": "state",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ActivationState",
              "namespace": "watcher._types"
            }
          }
        },
        {
          "name": "version",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "VersionNumber",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "AlwaysCondition",
        "namespace": "watcher._types"
      },
      "properties": []
    },
    {
      "kind": "interface",
      "name": {
        "name": "ArrayCompareCondition",
        "namespace": "watcher._types"
      },
      "properties": [
        {
          "name": "array_path",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "comparison",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "path",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "quantifier",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Quantifier",
              "namespace": "watcher._types"
            }
          }
        },
        {
          "name": "value",
          "required": true,
          "type": {
            "kind": "user_defined_value"
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "ChainInput",
        "namespace": "watcher._types"
      },
      "properties": [
        {
          "name": "inputs",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "InputContainer",
                "namespace": "watcher._types"
              }
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "CompareCondition",
        "namespace": "watcher._types"
      },
      "properties": [
        {
          "name": "comparison",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "path",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "value",
          "required": false,
          "type": {
            "kind": "user_defined_value"
          }
        },
        {
          "name": "ctx.payload.match",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "CompareContextPayloadCondition",
              "namespace": "watcher._types"
            }
          }
        },
        {
          "name": "ctx.payload.value",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "CompareContextPayloadCondition",
              "namespace": "watcher._types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "CompareContextPayloadCondition",
        "namespace": "watcher._types"
      },
      "properties": [
        {
          "name": "eq",
          "required": false,
          "type": {
            "kind": "user_defined_value"
          }
        },
        {
          "name": "lt",
          "required": false,
          "type": {
            "kind": "user_defined_value"
          }
        },
        {
          "name": "gt",
          "required": false,
          "type": {
            "kind": "user_defined_value"
          }
        },
        {
          "name": "lte",
          "required": false,
          "type": {
            "kind": "user_defined_value"
          }
        },
        {
          "name": "gte",
          "required": false,
          "type": {
            "kind": "user_defined_value"
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "ConditionContainer",
        "namespace": "watcher._types"
      },
      "properties": [
        {
          "name": "always",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "AlwaysCondition",
              "namespace": "watcher._types"
            }
          }
        },
        {
          "name": "array_compare",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ArrayCompareCondition",
              "namespace": "watcher._types"
            }
          }
        },
        {
          "name": "compare",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "CompareCondition",
              "namespace": "watcher._types"
            }
          }
        },
        {
          "name": "never",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "NeverCondition",
              "namespace": "watcher._types"
            }
          }
        },
        {
          "name": "script",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ScriptCondition",
              "namespace": "watcher._types"
            }
          }
        }
      ],
      "variants": {
        "kind": "container"
      }
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "always"
        },
        {
          "name": "never"
        },
        {
          "name": "script"
        },
        {
          "name": "compare"
        },
        {
          "name": "array_compare"
        }
      ],
      "name": {
        "name": "ConditionType",
        "namespace": "watcher._types"
      }
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "http"
        },
        {
          "name": "https"
        }
      ],
      "name": {
        "name": "ConnectionScheme",
        "namespace": "watcher._types"
      }
    },
    {
      "docUrl": "https://www.elastic.co/guide/en/elasticsearch/reference/current/cron-expressions.html",
      "kind": "type_alias",
      "name": {
        "name": "CronExpression",
        "namespace": "watcher._types"
      },
      "type": {
        "kind": "instance_of",
        "type": {
          "name": "string",
          "namespace": "internal"
        }
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "DailySchedule",
        "namespace": "watcher._types"
      },
      "properties": [
        {
          "name": "at",
          "required": true,
          "type": {
            "items": [
              {
                "kind": "array_of",
                "value": {
                  "kind": "instance_of",
                  "type": {
                    "name": "string",
                    "namespace": "internal"
                  }
                }
              },
              {
                "kind": "instance_of",
                "type": {
                  "name": "TimeOfDay",
                  "namespace": "watcher._types"
                }
              }
            ],
            "kind": "union_of"
          }
        }
      ]
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "sunday"
        },
        {
          "name": "monday"
        },
        {
          "name": "tuesday"
        },
        {
          "name": "wednesday"
        },
        {
          "name": "thursday"
        },
        {
          "name": "friday"
        },
        {
          "name": "saturday"
        }
      ],
      "name": {
        "name": "Day",
        "namespace": "watcher._types"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "EmailResult",
        "namespace": "watcher._types"
      },
      "properties": [
        {
          "name": "account",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "message",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "EmailResult",
              "namespace": "watcher._types"
            }
          }
        },
        {
          "name": "reason",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "awaits_execution"
        },
        {
          "name": "started"
        },
        {
          "name": "input"
        },
        {
          "name": "condition"
        },
        {
          "name": "actions"
        },
        {
          "name": "watch_transform"
        },
        {
          "name": "aborted"
        },
        {
          "name": "finished"
        }
      ],
      "name": {
        "name": "ExecutionPhase",
        "namespace": "watcher._types"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "ExecutionResult",
        "namespace": "watcher._types"
      },
      "properties": [
        {
          "name": "actions",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "ExecutionResultAction",
                "namespace": "watcher._types"
              }
            }
          }
        },
        {
          "name": "condition",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ExecutionResultCondition",
              "namespace": "watcher._types"
            }
          }
        },
        {
          "name": "execution_duration",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "execution_time",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DateString",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "input",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ExecutionResultInput",
              "namespace": "watcher._types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "ExecutionResultAction",
        "namespace": "watcher._types"
      },
      "properties": [
        {
          "name": "email",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "EmailResult",
              "namespace": "watcher._types"
            }
          }
        },
        {
          "name": "id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "index",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndexResult",
              "namespace": "watcher._types"
            }
          }
        },
        {
          "name": "logging",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "LoggingResult",
              "namespace": "watcher._types"
            }
          }
        },
        {
          "name": "pagerduty",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "PagerDutyResult",
              "namespace": "watcher._types"
            }
          }
        },
        {
          "name": "reason",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "slack",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "SlackResult",
              "namespace": "watcher._types"
            }
          }
        },
        {
          "name": "status",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ActionStatusOptions",
              "namespace": "watcher._types"
            }
          }
        },
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ActionType",
              "namespace": "watcher._types"
            }
          }
        },
        {
          "name": "webhook",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "WebhookResult",
              "namespace": "watcher._types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "ExecutionResultCondition",
        "namespace": "watcher._types"
      },
      "properties": [
        {
          "name": "met",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "status",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ActionStatusOptions",
              "namespace": "watcher._types"
            }
          }
        },
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ConditionType",
              "namespace": "watcher._types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "ExecutionResultInput",
        "namespace": "watcher._types"
      },
      "properties": [
        {
          "name": "payload",
          "required": true,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "user_defined_value"
            }
          }
        },
        {
          "name": "status",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ActionStatusOptions",
              "namespace": "watcher._types"
            }
          }
        },
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "InputType",
              "namespace": "watcher._types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "ExecutionState",
        "namespace": "watcher._types"
      },
      "properties": [
        {
          "name": "successful",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "timestamp",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DateString",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "awaits_execution"
        },
        {
          "name": "checking"
        },
        {
          "name": "execution_not_needed"
        },
        {
          "name": "throttled"
        },
        {
          "name": "executed"
        },
        {
          "name": "failed"
        },
        {
          "name": "deleted_while_queued"
        },
        {
          "name": "not_executed_already_queued"
        }
      ],
      "name": {
        "name": "ExecutionStatus",
        "namespace": "watcher._types"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "ExecutionThreadPool",
        "namespace": "watcher._types"
      },
      "properties": [
        {
          "name": "max_size",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "queue_size",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "HourlySchedule",
        "namespace": "watcher._types"
      },
      "properties": [
        {
          "name": "minute",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "integer",
                "namespace": "_types"
              }
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "HttpInput",
        "namespace": "watcher._types"
      },
      "properties": [
        {
          "name": "http",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "HttpInput",
              "namespace": "watcher._types"
            }
          }
        },
        {
          "name": "extract",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        },
        {
          "name": "request",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "HttpInputRequestDefinition",
              "namespace": "watcher._types"
            }
          }
        },
        {
          "name": "response_content_type",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ResponseContentType",
              "namespace": "watcher._types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "HttpInputAuthentication",
        "namespace": "watcher._types"
      },
      "properties": [
        {
          "name": "basic",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "HttpInputBasicAuthentication",
              "namespace": "watcher._types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "HttpInputBasicAuthentication",
        "namespace": "watcher._types"
      },
      "properties": [
        {
          "name": "password",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Password",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "username",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Username",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "head"
        },
        {
          "name": "get"
        },
        {
          "name": "post"
        },
        {
          "name": "put"
        },
        {
          "name": "delete"
        }
      ],
      "name": {
        "name": "HttpInputMethod",
        "namespace": "watcher._types"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "HttpInputProxy",
        "namespace": "watcher._types"
      },
      "properties": [
        {
          "name": "host",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Host",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "port",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "uint",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "HttpInputRequestDefinition",
        "namespace": "watcher._types"
      },
      "properties": [
        {
          "name": "auth",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "HttpInputAuthentication",
              "namespace": "watcher._types"
            }
          }
        },
        {
          "name": "body",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "connection_timeout",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "headers",
          "required": false,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        },
        {
          "name": "host",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Host",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "method",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "HttpInputMethod",
              "namespace": "watcher._types"
            }
          }
        },
        {
          "name": "params",
          "required": false,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        },
        {
          "name": "path",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "port",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "uint",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "proxy",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "HttpInputProxy",
              "namespace": "watcher._types"
            }
          }
        },
        {
          "name": "read_timeout",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "scheme",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ConnectionScheme",
              "namespace": "watcher._types"
            }
          }
        },
        {
          "name": "url",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "HttpInputRequestDefinition",
          "namespace": "watcher._types"
        }
      },
      "kind": "interface",
      "name": {
        "name": "HttpInputRequestResult",
        "namespace": "watcher._types"
      },
      "properties": []
    },
    {
      "kind": "interface",
      "name": {
        "name": "HttpInputResponseResult",
        "namespace": "watcher._types"
      },
      "properties": [
        {
          "name": "body",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "headers",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "HttpHeaders",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "status",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "Index",
        "namespace": "watcher._types"
      },
      "properties": [
        {
          "name": "index",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndexName",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "doc_id",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "refresh",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Refresh",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "IndexResult",
        "namespace": "watcher._types"
      },
      "properties": [
        {
          "name": "response",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndexResultSummary",
              "namespace": "watcher._types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "IndexResultSummary",
        "namespace": "watcher._types"
      },
      "properties": [
        {
          "name": "created",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "index",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndexName",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "result",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Result",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "version",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "VersionNumber",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "type",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Type",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "IndicesOptions",
        "namespace": "watcher._types"
      },
      "properties": [
        {
          "name": "allow_no_indices",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "expand_wildcards",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ExpandWildcards",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "ignore_unavailable",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "ignore_throttled",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "InputContainer",
        "namespace": "watcher._types"
      },
      "properties": [
        {
          "name": "chain",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ChainInput",
              "namespace": "watcher._types"
            }
          }
        },
        {
          "name": "http",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "HttpInput",
              "namespace": "watcher._types"
            }
          }
        },
        {
          "name": "search",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "SearchInput",
              "namespace": "watcher._types"
            }
          }
        },
        {
          "name": "simple",
          "required": false,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "user_defined_value"
            }
          }
        }
      ],
      "variants": {
        "kind": "container"
      }
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "http"
        },
        {
          "name": "search"
        },
        {
          "name": "simple"
        }
      ],
      "name": {
        "name": "InputType",
        "namespace": "watcher._types"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "Logging",
        "namespace": "watcher._types"
      },
      "properties": [
        {
          "name": "level",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "text",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "category",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "LoggingResult",
        "namespace": "watcher._types"
      },
      "properties": [
        {
          "name": "logged_text",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "january"
        },
        {
          "name": "february"
        },
        {
          "name": "march"
        },
        {
          "name": "april"
        },
        {
          "name": "may"
        },
        {
          "name": "june"
        },
        {
          "name": "july"
        },
        {
          "name": "august"
        },
        {
          "name": "september"
        },
        {
          "name": "october"
        },
        {
          "name": "november"
        },
        {
          "name": "december"
        }
      ],
      "name": {
        "name": "Month",
        "namespace": "watcher._types"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "NeverCondition",
        "namespace": "watcher._types"
      },
      "properties": []
    },
    {
      "kind": "interface",
      "name": {
        "name": "PagerDutyActionEventResult",
        "namespace": "watcher._types"
      },
      "properties": [
        {
          "name": "event",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "PagerDutyEvent",
              "namespace": "watcher._types"
            }
          }
        },
        {
          "name": "reason",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "request",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "HttpInputRequestResult",
              "namespace": "watcher._types"
            }
          }
        },
        {
          "name": "response",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "HttpInputResponseResult",
              "namespace": "watcher._types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "PagerDutyContext",
        "namespace": "watcher._types"
      },
      "properties": [
        {
          "name": "href",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "src",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "PagerDutyContextType",
              "namespace": "watcher._types"
            }
          }
        }
      ]
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "link"
        },
        {
          "name": "image"
        }
      ],
      "name": {
        "name": "PagerDutyContextType",
        "namespace": "watcher._types"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "PagerDutyEvent",
        "namespace": "watcher._types"
      },
      "properties": [
        {
          "name": "account",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "attach_payload",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "client",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "client_url",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "context",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "PagerDutyContext",
                "namespace": "watcher._types"
              }
            }
          }
        },
        {
          "name": "description",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "event_type",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "PagerDutyEventType",
              "namespace": "watcher._types"
            }
          }
        },
        {
          "name": "incident_key",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "trigger"
        },
        {
          "name": "resolve"
        },
        {
          "name": "acknowledge"
        }
      ],
      "name": {
        "name": "PagerDutyEventType",
        "namespace": "watcher._types"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "PagerDutyResult",
        "namespace": "watcher._types"
      },
      "properties": [
        {
          "name": "sent_event",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "PagerDutyActionEventResult",
              "namespace": "watcher._types"
            }
          }
        }
      ]
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "some"
        },
        {
          "name": "all"
        }
      ],
      "name": {
        "name": "Quantifier",
        "namespace": "watcher._types"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "QueryWatch",
        "namespace": "watcher._types"
      },
      "properties": [
        {
          "name": "_id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "status",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "WatchStatus",
              "namespace": "watcher._types"
            }
          }
        },
        {
          "name": "watch",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Watch",
              "namespace": "watcher._types"
            }
          }
        },
        {
          "name": "_primary_term",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "_seq_no",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "SequenceNumber",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "json"
        },
        {
          "name": "yaml"
        },
        {
          "name": "text"
        }
      ],
      "name": {
        "name": "ResponseContentType",
        "namespace": "watcher._types"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "ScheduleContainer",
        "namespace": "watcher._types"
      },
      "properties": [
        {
          "name": "cron",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "CronExpression",
              "namespace": "watcher._types"
            }
          }
        },
        {
          "name": "daily",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DailySchedule",
              "namespace": "watcher._types"
            }
          }
        },
        {
          "name": "hourly",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "HourlySchedule",
              "namespace": "watcher._types"
            }
          }
        },
        {
          "name": "interval",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "monthly",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "TimeOfMonth",
                "namespace": "watcher._types"
              }
            }
          }
        },
        {
          "name": "weekly",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "TimeOfWeek",
                "namespace": "watcher._types"
              }
            }
          }
        },
        {
          "name": "yearly",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "TimeOfYear",
                "namespace": "watcher._types"
              }
            }
          }
        }
      ],
      "variants": {
        "kind": "container"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "ScheduleTriggerEvent",
        "namespace": "watcher._types"
      },
      "properties": [
        {
          "name": "scheduled_time",
          "required": true,
          "type": {
            "items": [
              {
                "kind": "instance_of",
                "type": {
                  "name": "DateString",
                  "namespace": "_types"
                }
              },
              {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              }
            ],
            "kind": "union_of"
          }
        },
        {
          "name": "triggered_time",
          "required": false,
          "type": {
            "items": [
              {
                "kind": "instance_of",
                "type": {
                  "name": "DateString",
                  "namespace": "_types"
                }
              },
              {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              }
            ],
            "kind": "union_of"
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "ScriptCondition",
        "namespace": "watcher._types"
      },
      "properties": [
        {
          "name": "lang",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "params",
          "required": false,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "user_defined_value"
            }
          }
        },
        {
          "name": "source",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "SearchInput",
        "namespace": "watcher._types"
      },
      "properties": [
        {
          "name": "extract",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        },
        {
          "name": "request",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "SearchInputRequestDefinition",
              "namespace": "watcher._types"
            }
          }
        },
        {
          "name": "timeout",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "SearchInputRequestBody",
        "namespace": "watcher._types"
      },
      "properties": [
        {
          "name": "query",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "QueryContainer",
              "namespace": "_types.query_dsl"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "SearchInputRequestDefinition",
        "namespace": "watcher._types"
      },
      "properties": [
        {
          "name": "body",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "SearchInputRequestBody",
              "namespace": "watcher._types"
            }
          }
        },
        {
          "name": "indices",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "IndexName",
                "namespace": "_types"
              }
            }
          }
        },
        {
          "name": "indices_options",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IndicesOptions",
              "namespace": "watcher._types"
            }
          }
        },
        {
          "name": "search_type",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "SearchType",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "template",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Request",
              "namespace": "_global.search_template"
            }
          }
        },
        {
          "name": "rest_total_hits_as_int",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "SimulatedActions",
        "namespace": "watcher._types"
      },
      "properties": [
        {
          "name": "actions",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        },
        {
          "name": "all",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "SimulatedActions",
              "namespace": "watcher._types"
            }
          }
        },
        {
          "name": "use_all",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "SlackAttachment",
        "namespace": "watcher._types"
      },
      "properties": [
        {
          "name": "author_icon",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "author_link",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "author_name",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "color",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "fallback",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "fields",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "SlackAttachmentField",
                "namespace": "watcher._types"
              }
            }
          }
        },
        {
          "name": "footer",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "footer_icon",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "image_url",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "pretext",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "text",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "thumb_url",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "title",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "title_link",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "ts",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DateString",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "SlackAttachmentField",
        "namespace": "watcher._types"
      },
      "properties": [
        {
          "name": "short",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "title",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "value",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "SlackDynamicAttachment",
        "namespace": "watcher._types"
      },
      "properties": [
        {
          "name": "attachment_template",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "SlackAttachment",
              "namespace": "watcher._types"
            }
          }
        },
        {
          "name": "list_path",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "SlackMessage",
        "namespace": "watcher._types"
      },
      "properties": [
        {
          "name": "attachments",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "SlackAttachment",
                "namespace": "watcher._types"
              }
            }
          }
        },
        {
          "name": "dynamic_attachments",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "SlackDynamicAttachment",
              "namespace": "watcher._types"
            }
          }
        },
        {
          "name": "from",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "icon",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "text",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "to",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "SlackResult",
        "namespace": "watcher._types"
      },
      "properties": [
        {
          "name": "account",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "message",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "SlackMessage",
              "namespace": "watcher._types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "ThrottleState",
        "namespace": "watcher._types"
      },
      "properties": [
        {
          "name": "reason",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "timestamp",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DateString",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "TimeOfDay",
        "namespace": "watcher._types"
      },
      "properties": [
        {
          "name": "hour",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "integer",
                "namespace": "_types"
              }
            }
          }
        },
        {
          "name": "minute",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "integer",
                "namespace": "_types"
              }
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "TimeOfMonth",
        "namespace": "watcher._types"
      },
      "properties": [
        {
          "name": "at",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        },
        {
          "name": "on",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "integer",
                "namespace": "_types"
              }
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "TimeOfWeek",
        "namespace": "watcher._types"
      },
      "properties": [
        {
          "name": "at",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        },
        {
          "name": "on",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "Day",
                "namespace": "watcher._types"
              }
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "TimeOfYear",
        "namespace": "watcher._types"
      },
      "properties": [
        {
          "name": "at",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        },
        {
          "name": "int",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "Month",
                "namespace": "watcher._types"
              }
            }
          }
        },
        {
          "name": "on",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "integer",
                "namespace": "_types"
              }
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "TriggerContainer",
        "namespace": "watcher._types"
      },
      "properties": [
        {
          "name": "schedule",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ScheduleContainer",
              "namespace": "watcher._types"
            }
          }
        }
      ],
      "variants": {
        "kind": "container"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "TriggerEventContainer",
        "namespace": "watcher._types"
      },
      "properties": [
        {
          "name": "schedule",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ScheduleTriggerEvent",
              "namespace": "watcher._types"
            }
          }
        }
      ],
      "variants": {
        "kind": "container"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "TriggerEventResult",
        "namespace": "watcher._types"
      },
      "properties": [
        {
          "name": "manual",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "TriggerEventContainer",
              "namespace": "watcher._types"
            }
          }
        },
        {
          "name": "triggered_time",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DateString",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "Watch",
        "namespace": "watcher._types"
      },
      "properties": [
        {
          "name": "actions",
          "required": true,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "IndexName",
                "namespace": "_types"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "Action",
                "namespace": "watcher._types"
              }
            }
          }
        },
        {
          "name": "condition",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ConditionContainer",
              "namespace": "watcher._types"
            }
          }
        },
        {
          "name": "input",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "InputContainer",
              "namespace": "watcher._types"
            }
          }
        },
        {
          "name": "metadata",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Metadata",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "status",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "WatchStatus",
              "namespace": "watcher._types"
            }
          }
        },
        {
          "name": "throttle_period",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "transform",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "TransformContainer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "trigger",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "TriggerContainer",
              "namespace": "watcher._types"
            }
          }
        },
        {
          "name": "throttle_period_in_millis",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "WatchStatus",
        "namespace": "watcher._types"
      },
      "properties": [
        {
          "name": "actions",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Actions",
              "namespace": "watcher._types"
            }
          }
        },
        {
          "name": "last_checked",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DateString",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "last_met_condition",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DateString",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "state",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ActivationState",
              "namespace": "watcher._types"
            }
          }
        },
        {
          "name": "version",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "VersionNumber",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "execution_state",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "WebhookResult",
        "namespace": "watcher._types"
      },
      "properties": [
        {
          "name": "request",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "HttpInputRequestResult",
              "namespace": "watcher._types"
            }
          }
        },
        {
          "name": "response",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "HttpInputResponseResult",
              "namespace": "watcher._types"
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Acknowledges a watch, manually throttling the execution of the watch's actions.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "watcher.ack_watch"
      },
      "path": [
        {
          "description": "Watch ID",
          "name": "watch_id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "A comma-separated list of the action ids to be acked",
          "name": "action_id",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Names",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": []
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "status",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "WatchStatus",
                "namespace": "watcher._types"
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "watcher.ack_watch"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Activates a currently inactive watch.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "watcher.activate_watch"
      },
      "path": [
        {
          "description": "Watch ID",
          "name": "watch_id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": []
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "status",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "ActivationStatus",
                "namespace": "watcher._types"
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "watcher.activate_watch"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Deactivates a currently active watch.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "watcher.deactivate_watch"
      },
      "path": [
        {
          "description": "Watch ID",
          "name": "watch_id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": []
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "status",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "ActivationStatus",
                "namespace": "watcher._types"
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "watcher.deactivate_watch"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Removes a watch from Watcher.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "watcher.delete_watch"
      },
      "path": [
        {
          "description": "Watch ID",
          "name": "id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": []
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "found",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "_id",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Id",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "_version",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "VersionNumber",
                "namespace": "_types"
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "watcher.delete_watch"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "action_modes",
            "required": false,
            "type": {
              "key": {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              },
              "kind": "dictionary_of",
              "singleKey": false,
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "ActionExecutionMode",
                  "namespace": "watcher._types"
                }
              }
            }
          },
          {
            "name": "alternative_input",
            "required": false,
            "type": {
              "key": {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              },
              "kind": "dictionary_of",
              "singleKey": false,
              "value": {
                "kind": "user_defined_value"
              }
            }
          },
          {
            "name": "ignore_condition",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "record_execution",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "simulated_actions",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "SimulatedActions",
                "namespace": "watcher._types"
              }
            }
          },
          {
            "name": "trigger_data",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "ScheduleTriggerEvent",
                "namespace": "watcher._types"
              }
            }
          },
          {
            "name": "watch",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Watch",
                "namespace": "watcher._types"
              }
            }
          }
        ]
      },
      "description": "Forces the execution of a stored watch.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "watcher.execute_watch"
      },
      "path": [
        {
          "description": "Watch ID",
          "name": "id",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "indicates whether the watch should execute in debug mode",
          "name": "debug",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "_id",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Id",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "watch_record",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "WatchRecord",
                "namespace": "watcher.execute_watch"
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "watcher.execute_watch"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "WatchRecord",
        "namespace": "watcher.execute_watch"
      },
      "properties": [
        {
          "name": "condition",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ConditionContainer",
              "namespace": "watcher._types"
            }
          }
        },
        {
          "name": "input",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "InputContainer",
              "namespace": "watcher._types"
            }
          }
        },
        {
          "name": "messages",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        },
        {
          "name": "metadata",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Metadata",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "node",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "result",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ExecutionResult",
              "namespace": "watcher._types"
            }
          }
        },
        {
          "name": "state",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ExecutionStatus",
              "namespace": "watcher._types"
            }
          }
        },
        {
          "name": "trigger_event",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "TriggerEventResult",
              "namespace": "watcher._types"
            }
          }
        },
        {
          "name": "user",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Username",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "watch_id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Retrieves a watch by its ID.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "watcher.get_watch"
      },
      "path": [
        {
          "description": "Watch ID",
          "name": "id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Name",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": []
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "found",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "_id",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Id",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "status",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "WatchStatus",
                "namespace": "watcher._types"
              }
            }
          },
          {
            "name": "watch",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Watch",
                "namespace": "watcher._types"
              }
            }
          },
          {
            "name": "_primary_term",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "integer",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "_seq_no",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "SequenceNumber",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "_version",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "VersionNumber",
                "namespace": "_types"
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "watcher.get_watch"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "actions",
            "required": false,
            "type": {
              "key": {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              },
              "kind": "dictionary_of",
              "singleKey": false,
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "Action",
                  "namespace": "watcher._types"
                }
              }
            }
          },
          {
            "name": "condition",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "ConditionContainer",
                "namespace": "watcher._types"
              }
            }
          },
          {
            "name": "input",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "InputContainer",
                "namespace": "watcher._types"
              }
            }
          },
          {
            "name": "metadata",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Metadata",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "throttle_period",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "transform",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "TransformContainer",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "trigger",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "TriggerContainer",
                "namespace": "watcher._types"
              }
            }
          }
        ]
      },
      "description": "Creates a new watch, or updates an existing one.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "watcher.put_watch"
      },
      "path": [
        {
          "description": "Watch ID",
          "name": "id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        }
      ],
      "query": [
        {
          "description": "Specify whether the watch is in/active by default",
          "name": "active",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "only update the watch if the last operation that has changed the watch has the specified primary term",
          "name": "if_primary_term",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "if_sequence_number",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "description": "Explicit version number for concurrency control",
          "name": "version",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "VersionNumber",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "created",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "_id",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Id",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "_primary_term",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "long",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "_seq_no",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "SequenceNumber",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "_version",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "VersionNumber",
                "namespace": "_types"
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "watcher.put_watch"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "properties",
        "properties": [
          {
            "description": "The offset from the first result to fetch. Needs to be non-negative.",
            "name": "from",
            "required": false,
            "serverDefault": 0,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "integer",
                "namespace": "_types"
              }
            }
          },
          {
            "description": "The number of hits to return. Needs to be non-negative.",
            "name": "size",
            "required": false,
            "serverDefault": 10,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "integer",
                "namespace": "_types"
              }
            }
          },
          {
            "description": "Optional, query filter watches to be returned.",
            "name": "query",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "QueryContainer",
                "namespace": "_types.query_dsl"
              }
            }
          },
          {
            "description": "Optional sort definition.",
            "name": "sort",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Sort",
                "namespace": "_global.search._types"
              }
            }
          },
          {
            "description": "Optional search After to do pagination using last hit’s sort values.",
            "name": "search_after",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "SortResults",
                "namespace": "_global.search._types"
              }
            }
          }
        ]
      },
      "description": "Retrieves stored watches.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "watcher.query_watches"
      },
      "path": [],
      "query": []
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "count",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "integer",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "watches",
            "required": true,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "QueryWatch",
                  "namespace": "watcher._types"
                }
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "watcher.query_watches"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Starts Watcher if it is not already running.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "watcher.start"
      },
      "path": [],
      "query": []
    },
    {
      "body": {
        "kind": "properties",
        "properties": []
      },
      "inherits": {
        "type": {
          "name": "AcknowledgedResponseBase",
          "namespace": "_types"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "watcher.start"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Retrieves the current Watcher metrics.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "watcher.stats"
      },
      "path": [
        {
          "description": "Defines which additional metrics are included in the response.",
          "name": "metric",
          "required": false,
          "type": {
            "items": [
              {
                "kind": "instance_of",
                "type": {
                  "name": "WatcherMetric",
                  "namespace": "watcher.stats"
                }
              },
              {
                "kind": "array_of",
                "value": {
                  "kind": "instance_of",
                  "type": {
                    "name": "WatcherMetric",
                    "namespace": "watcher.stats"
                  }
                }
              }
            ],
            "kind": "union_of"
          }
        }
      ],
      "query": [
        {
          "description": "Defines whether stack traces are generated for each watch that is running.",
          "name": "emit_stacktraces",
          "required": false,
          "serverDefault": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "description": "Defines which additional metrics are included in the response.",
          "name": "metric",
          "required": false,
          "type": {
            "items": [
              {
                "kind": "instance_of",
                "type": {
                  "name": "WatcherMetric",
                  "namespace": "watcher.stats"
                }
              },
              {
                "kind": "array_of",
                "value": {
                  "kind": "instance_of",
                  "type": {
                    "name": "WatcherMetric",
                    "namespace": "watcher.stats"
                  }
                }
              }
            ],
            "kind": "union_of"
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "identifier": "node_stats",
            "name": "_nodes",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "NodeStatistics",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "cluster_name",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Name",
                "namespace": "_types"
              }
            }
          },
          {
            "name": "manually_stopped",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          },
          {
            "name": "stats",
            "required": true,
            "type": {
              "kind": "array_of",
              "value": {
                "kind": "instance_of",
                "type": {
                  "name": "WatcherNodeStats",
                  "namespace": "watcher.stats"
                }
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "watcher.stats"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "WatchRecordQueuedStats",
        "namespace": "watcher.stats"
      },
      "properties": [
        {
          "name": "execution_time",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DateString",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "WatchRecordQueuedStats",
          "namespace": "watcher.stats"
        }
      },
      "kind": "interface",
      "name": {
        "name": "WatchRecordStats",
        "namespace": "watcher.stats"
      },
      "properties": [
        {
          "name": "execution_phase",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ExecutionPhase",
              "namespace": "watcher._types"
            }
          }
        },
        {
          "name": "triggered_time",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DateString",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "executed_actions",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        },
        {
          "name": "watch_id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "watch_record_id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "_all"
        },
        {
          "name": "queued_watches"
        },
        {
          "name": "current_watches"
        },
        {
          "name": "pending_watches"
        }
      ],
      "name": {
        "name": "WatcherMetric",
        "namespace": "watcher.stats"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "WatcherNodeStats",
        "namespace": "watcher.stats"
      },
      "properties": [
        {
          "name": "current_watches",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "WatchRecordStats",
                "namespace": "watcher.stats"
              }
            }
          }
        },
        {
          "name": "execution_thread_pool",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ExecutionThreadPool",
              "namespace": "watcher._types"
            }
          }
        },
        {
          "name": "queued_watches",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "WatchRecordQueuedStats",
                "namespace": "watcher.stats"
              }
            }
          }
        },
        {
          "name": "watch_count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "watcher_state",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "WatcherState",
              "namespace": "watcher.stats"
            }
          }
        },
        {
          "name": "node_id",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Id",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "enum",
      "members": [
        {
          "name": "stopped"
        },
        {
          "name": "starting"
        },
        {
          "name": "started"
        },
        {
          "name": "stopping"
        }
      ],
      "name": {
        "name": "WatcherState",
        "namespace": "watcher.stats"
      }
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Stops Watcher if it is running.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "watcher.stop"
      },
      "path": [],
      "query": []
    },
    {
      "body": {
        "kind": "properties",
        "properties": []
      },
      "inherits": {
        "type": {
          "name": "AcknowledgedResponseBase",
          "namespace": "_types"
        }
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "watcher.stop"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "BuildInformation",
        "namespace": "xpack.info"
      },
      "properties": [
        {
          "name": "date",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DateString",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "hash",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "Feature",
        "namespace": "xpack.info"
      },
      "properties": [
        {
          "name": "available",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "description",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "enabled",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "native_code_info",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "NativeCodeInformation",
              "namespace": "xpack.info"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "Features",
        "namespace": "xpack.info"
      },
      "properties": [
        {
          "name": "aggregate_metric",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Feature",
              "namespace": "xpack.info"
            }
          }
        },
        {
          "name": "analytics",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Feature",
              "namespace": "xpack.info"
            }
          }
        },
        {
          "name": "ccr",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Feature",
              "namespace": "xpack.info"
            }
          }
        },
        {
          "name": "data_frame",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Feature",
              "namespace": "xpack.info"
            }
          }
        },
        {
          "name": "data_science",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Feature",
              "namespace": "xpack.info"
            }
          }
        },
        {
          "name": "data_streams",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Feature",
              "namespace": "xpack.info"
            }
          }
        },
        {
          "name": "data_tiers",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Feature",
              "namespace": "xpack.info"
            }
          }
        },
        {
          "name": "enrich",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Feature",
              "namespace": "xpack.info"
            }
          }
        },
        {
          "name": "eql",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Feature",
              "namespace": "xpack.info"
            }
          }
        },
        {
          "name": "flattened",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Feature",
              "namespace": "xpack.info"
            }
          }
        },
        {
          "name": "frozen_indices",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Feature",
              "namespace": "xpack.info"
            }
          }
        },
        {
          "name": "graph",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Feature",
              "namespace": "xpack.info"
            }
          }
        },
        {
          "name": "ilm",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Feature",
              "namespace": "xpack.info"
            }
          }
        },
        {
          "name": "logstash",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Feature",
              "namespace": "xpack.info"
            }
          }
        },
        {
          "name": "ml",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Feature",
              "namespace": "xpack.info"
            }
          }
        },
        {
          "name": "monitoring",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Feature",
              "namespace": "xpack.info"
            }
          }
        },
        {
          "name": "rollup",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Feature",
              "namespace": "xpack.info"
            }
          }
        },
        {
          "name": "runtime_fields",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Feature",
              "namespace": "xpack.info"
            }
          }
        },
        {
          "name": "searchable_snapshots",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Feature",
              "namespace": "xpack.info"
            }
          }
        },
        {
          "name": "security",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Feature",
              "namespace": "xpack.info"
            }
          }
        },
        {
          "name": "slm",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Feature",
              "namespace": "xpack.info"
            }
          }
        },
        {
          "name": "spatial",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Feature",
              "namespace": "xpack.info"
            }
          }
        },
        {
          "name": "sql",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Feature",
              "namespace": "xpack.info"
            }
          }
        },
        {
          "name": "transform",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Feature",
              "namespace": "xpack.info"
            }
          }
        },
        {
          "name": "vectors",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Feature",
              "namespace": "xpack.info"
            }
          }
        },
        {
          "name": "voting_only",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Feature",
              "namespace": "xpack.info"
            }
          }
        },
        {
          "name": "watcher",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Feature",
              "namespace": "xpack.info"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "MinimalLicenseInformation",
        "namespace": "xpack.info"
      },
      "properties": [
        {
          "name": "expiry_date_in_millis",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "EpochMillis",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "mode",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "LicenseType",
              "namespace": "license._types"
            }
          }
        },
        {
          "name": "status",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "LicenseStatus",
              "namespace": "license._types"
            }
          }
        },
        {
          "name": "type",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "LicenseType",
              "namespace": "license._types"
            }
          }
        },
        {
          "name": "uid",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "NativeCodeInformation",
        "namespace": "xpack.info"
      },
      "properties": [
        {
          "name": "build_hash",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "version",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "VersionString",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Retrieves information about the installed X-Pack features.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "xpack.info"
      },
      "path": [],
      "query": [
        {
          "description": "Comma-separated list of info categories. Can be any of: build, license, features",
          "name": "categories",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "build",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "BuildInformation",
                "namespace": "xpack.info"
              }
            }
          },
          {
            "name": "features",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Features",
                "namespace": "xpack.info"
              }
            }
          },
          {
            "name": "license",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "MinimalLicenseInformation",
                "namespace": "xpack.info"
              }
            }
          },
          {
            "name": "tagline",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "xpack.info"
      }
    },
    {
      "inherits": {
        "type": {
          "name": "Base",
          "namespace": "xpack.usage"
        }
      },
      "kind": "interface",
      "name": {
        "name": "Analytics",
        "namespace": "xpack.usage"
      },
      "properties": [
        {
          "name": "stats",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "AnalyticsStatistics",
              "namespace": "xpack.usage"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "AnalyticsStatistics",
        "namespace": "xpack.usage"
      },
      "properties": [
        {
          "name": "boxplot_usage",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "cumulative_cardinality_usage",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "string_stats_usage",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "top_metrics_usage",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "t_test_usage",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "moving_percentiles_usage",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "normalize_usage",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "rate_usage",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "multi_terms_usage",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "FeatureToggle",
          "namespace": "xpack.usage"
        }
      },
      "kind": "interface",
      "name": {
        "name": "Audit",
        "namespace": "xpack.usage"
      },
      "properties": [
        {
          "name": "outputs",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "Base",
        "namespace": "xpack.usage"
      },
      "properties": [
        {
          "name": "available",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "enabled",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "BaseUrlConfig",
        "namespace": "xpack.usage"
      },
      "properties": [
        {
          "name": "url_name",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "url_value",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "Base",
          "namespace": "xpack.usage"
        }
      },
      "kind": "interface",
      "name": {
        "name": "Ccr",
        "namespace": "xpack.usage"
      },
      "properties": [
        {
          "name": "auto_follow_patterns_count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "follower_indices_count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "Counter",
        "namespace": "xpack.usage"
      },
      "properties": [
        {
          "name": "active",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "total",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "Base",
          "namespace": "xpack.usage"
        }
      },
      "kind": "interface",
      "name": {
        "name": "DataStreams",
        "namespace": "xpack.usage"
      },
      "properties": [
        {
          "name": "data_streams",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "indices_count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "DataTierPhaseStatistics",
        "namespace": "xpack.usage"
      },
      "properties": [
        {
          "name": "node_count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "index_count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "total_shard_count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "primary_shard_count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "doc_count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "total_size_bytes",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "primary_size_bytes",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "primary_shard_size_avg_bytes",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "primary_shard_size_median_bytes",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "primary_shard_size_mad_bytes",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "Base",
          "namespace": "xpack.usage"
        }
      },
      "kind": "interface",
      "name": {
        "name": "DataTiers",
        "namespace": "xpack.usage"
      },
      "properties": [
        {
          "name": "data_warm",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DataTierPhaseStatistics",
              "namespace": "xpack.usage"
            }
          }
        },
        {
          "name": "data_frozen",
          "required": false,
          "since": "7.13.0",
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DataTierPhaseStatistics",
              "namespace": "xpack.usage"
            }
          }
        },
        {
          "name": "data_cold",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DataTierPhaseStatistics",
              "namespace": "xpack.usage"
            }
          }
        },
        {
          "name": "data_content",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DataTierPhaseStatistics",
              "namespace": "xpack.usage"
            }
          }
        },
        {
          "name": "data_hot",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "DataTierPhaseStatistics",
              "namespace": "xpack.usage"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "Datafeed",
        "namespace": "xpack.usage"
      },
      "properties": [
        {
          "name": "count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "Base",
          "namespace": "xpack.usage"
        }
      },
      "kind": "interface",
      "name": {
        "name": "Eql",
        "namespace": "xpack.usage"
      },
      "properties": [
        {
          "name": "features",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "EqlFeatures",
              "namespace": "xpack.usage"
            }
          }
        },
        {
          "name": "queries",
          "required": true,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "Query",
                "namespace": "xpack.usage"
              }
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "EqlFeatures",
        "namespace": "xpack.usage"
      },
      "properties": [
        {
          "name": "join",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "uint",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "joins",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "EqlFeaturesJoin",
              "namespace": "xpack.usage"
            }
          }
        },
        {
          "name": "keys",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "EqlFeaturesKeys",
              "namespace": "xpack.usage"
            }
          }
        },
        {
          "name": "event",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "uint",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "pipes",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "EqlFeaturesPipes",
              "namespace": "xpack.usage"
            }
          }
        },
        {
          "name": "sequence",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "uint",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "sequences",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "EqlFeaturesSequences",
              "namespace": "xpack.usage"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "EqlFeaturesJoin",
        "namespace": "xpack.usage"
      },
      "properties": [
        {
          "name": "join_queries_two",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "uint",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "join_queries_three",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "uint",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "join_until",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "uint",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "join_queries_five_or_more",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "uint",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "join_queries_four",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "uint",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "EqlFeaturesKeys",
        "namespace": "xpack.usage"
      },
      "properties": [
        {
          "name": "join_keys_two",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "uint",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "join_keys_one",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "uint",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "join_keys_three",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "uint",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "join_keys_five_or_more",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "uint",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "join_keys_four",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "uint",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "EqlFeaturesPipes",
        "namespace": "xpack.usage"
      },
      "properties": [
        {
          "name": "pipe_tail",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "uint",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "pipe_head",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "uint",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "EqlFeaturesSequences",
        "namespace": "xpack.usage"
      },
      "properties": [
        {
          "name": "sequence_queries_three",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "uint",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "sequence_queries_four",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "uint",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "sequence_queries_two",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "uint",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "sequence_until",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "uint",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "sequence_queries_five_or_more",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "uint",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "sequence_maxspan",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "uint",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "FeatureToggle",
        "namespace": "xpack.usage"
      },
      "properties": [
        {
          "name": "enabled",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "Base",
          "namespace": "xpack.usage"
        }
      },
      "kind": "interface",
      "name": {
        "name": "Flattened",
        "namespace": "xpack.usage"
      },
      "properties": [
        {
          "name": "field_count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "Base",
          "namespace": "xpack.usage"
        }
      },
      "kind": "interface",
      "name": {
        "name": "FrozenIndices",
        "namespace": "xpack.usage"
      },
      "properties": [
        {
          "name": "indices_count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "Ilm",
        "namespace": "xpack.usage"
      },
      "properties": [
        {
          "name": "policy_count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "policy_stats",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "IlmPolicyStatistics",
                "namespace": "xpack.usage"
              }
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "IlmPolicyStatistics",
        "namespace": "xpack.usage"
      },
      "properties": [
        {
          "name": "indices_managed",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "phases",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Phases",
              "namespace": "ilm._types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "IpFilter",
        "namespace": "xpack.usage"
      },
      "properties": [
        {
          "name": "http",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "transport",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "BaseUrlConfig",
          "namespace": "xpack.usage"
        }
      },
      "kind": "interface",
      "name": {
        "name": "KibanaUrlConfig",
        "namespace": "xpack.usage"
      },
      "properties": [
        {
          "name": "time_range",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "Base",
          "namespace": "xpack.usage"
        }
      },
      "kind": "interface",
      "name": {
        "name": "MachineLearning",
        "namespace": "xpack.usage"
      },
      "properties": [
        {
          "name": "datafeeds",
          "required": true,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "Datafeed",
                "namespace": "xpack.usage"
              }
            }
          }
        },
        {
          "name": "jobs",
          "required": true,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "Job",
                "namespace": "ml._types"
              }
            }
          }
        },
        {
          "name": "node_count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "data_frame_analytics_jobs",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "MlDataFrameAnalyticsJobs",
              "namespace": "xpack.usage"
            }
          }
        },
        {
          "name": "inference",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "MlInference",
              "namespace": "xpack.usage"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "MlCounter",
        "namespace": "xpack.usage"
      },
      "properties": [
        {
          "name": "count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "MlDataFrameAnalyticsJobs",
        "namespace": "xpack.usage"
      },
      "properties": [
        {
          "name": "memory_usage",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "MlDataFrameAnalyticsJobsMemory",
              "namespace": "xpack.usage"
            }
          }
        },
        {
          "name": "_all",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "MlDataFrameAnalyticsJobsCount",
              "namespace": "xpack.usage"
            }
          }
        },
        {
          "name": "analysis_counts",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "EmptyObject",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "MlDataFrameAnalyticsJobsCount",
        "namespace": "xpack.usage"
      },
      "properties": [
        {
          "name": "count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "MlDataFrameAnalyticsJobsMemory",
        "namespace": "xpack.usage"
      },
      "properties": [
        {
          "name": "peak_usage_bytes",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "JobStatistics",
              "namespace": "ml._types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "MlInference",
        "namespace": "xpack.usage"
      },
      "properties": [
        {
          "name": "ingest_processors",
          "required": true,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "MlInferenceIngestProcessor",
                "namespace": "xpack.usage"
              }
            }
          }
        },
        {
          "name": "trained_models",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "MlInferenceTrainedModels",
              "namespace": "xpack.usage"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "MlInferenceIngestProcessor",
        "namespace": "xpack.usage"
      },
      "properties": [
        {
          "name": "num_docs_processed",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "MlInferenceIngestProcessorCount",
              "namespace": "xpack.usage"
            }
          }
        },
        {
          "name": "pipelines",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "MlCounter",
              "namespace": "xpack.usage"
            }
          }
        },
        {
          "name": "num_failures",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "MlInferenceIngestProcessorCount",
              "namespace": "xpack.usage"
            }
          }
        },
        {
          "name": "time_ms",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "MlInferenceIngestProcessorCount",
              "namespace": "xpack.usage"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "MlInferenceIngestProcessorCount",
        "namespace": "xpack.usage"
      },
      "properties": [
        {
          "name": "max",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "sum",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "min",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "MlInferenceTrainedModels",
        "namespace": "xpack.usage"
      },
      "properties": [
        {
          "name": "estimated_operations",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "JobStatistics",
              "namespace": "ml._types"
            }
          }
        },
        {
          "name": "estimated_heap_memory_usage_bytes",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "JobStatistics",
              "namespace": "ml._types"
            }
          }
        },
        {
          "name": "count",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "MlInferenceTrainedModelsCount",
              "namespace": "xpack.usage"
            }
          }
        },
        {
          "name": "_all",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "MlCounter",
              "namespace": "xpack.usage"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "MlInferenceTrainedModelsCount",
        "namespace": "xpack.usage"
      },
      "properties": [
        {
          "name": "total",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "prepackaged",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "other",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "regression",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "classification",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "Base",
          "namespace": "xpack.usage"
        }
      },
      "kind": "interface",
      "name": {
        "name": "Monitoring",
        "namespace": "xpack.usage"
      },
      "properties": [
        {
          "name": "collection_enabled",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "enabled_exporters",
          "required": true,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "long",
                "namespace": "_types"
              }
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "Query",
        "namespace": "xpack.usage"
      },
      "properties": [
        {
          "name": "count",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "failed",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "paging",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "total",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "Base",
          "namespace": "xpack.usage"
        }
      },
      "kind": "interface",
      "name": {
        "name": "Realm",
        "namespace": "xpack.usage"
      },
      "properties": [
        {
          "name": "name",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        },
        {
          "name": "order",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "long",
                "namespace": "_types"
              }
            }
          }
        },
        {
          "name": "size",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "long",
                "namespace": "_types"
              }
            }
          }
        },
        {
          "name": "cache",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "RealmCache",
                "namespace": "xpack.usage"
              }
            }
          }
        },
        {
          "name": "has_authorization_realms",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          }
        },
        {
          "name": "has_default_username_pattern",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          }
        },
        {
          "name": "has_truststore",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          }
        },
        {
          "name": "is_authentication_delegated",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "boolean",
                "namespace": "internal"
              }
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "RealmCache",
        "namespace": "xpack.usage"
      },
      "properties": [
        {
          "name": "size",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "attachedBehaviors": [
        "CommonQueryParameters"
      ],
      "body": {
        "kind": "no_body"
      },
      "description": "Retrieves usage information about the installed X-Pack features.",
      "inherits": {
        "type": {
          "name": "RequestBase",
          "namespace": "_types"
        }
      },
      "kind": "request",
      "name": {
        "name": "Request",
        "namespace": "xpack.usage"
      },
      "path": [],
      "query": [
        {
          "description": "Specify timeout for watch write operation",
          "name": "master_timeout",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "body": {
        "kind": "properties",
        "properties": [
          {
            "name": "aggregate_metric",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Base",
                "namespace": "xpack.usage"
              }
            }
          },
          {
            "name": "analytics",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Analytics",
                "namespace": "xpack.usage"
              }
            }
          },
          {
            "name": "watcher",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Watcher",
                "namespace": "xpack.usage"
              }
            }
          },
          {
            "name": "ccr",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Ccr",
                "namespace": "xpack.usage"
              }
            }
          },
          {
            "name": "data_frame",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Base",
                "namespace": "xpack.usage"
              }
            }
          },
          {
            "name": "data_science",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Base",
                "namespace": "xpack.usage"
              }
            }
          },
          {
            "name": "data_streams",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "DataStreams",
                "namespace": "xpack.usage"
              }
            }
          },
          {
            "name": "data_tiers",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "DataTiers",
                "namespace": "xpack.usage"
              }
            }
          },
          {
            "name": "enrich",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Base",
                "namespace": "xpack.usage"
              }
            }
          },
          {
            "name": "eql",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Eql",
                "namespace": "xpack.usage"
              }
            }
          },
          {
            "name": "flattened",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Flattened",
                "namespace": "xpack.usage"
              }
            }
          },
          {
            "name": "frozen_indices",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "FrozenIndices",
                "namespace": "xpack.usage"
              }
            }
          },
          {
            "name": "graph",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Base",
                "namespace": "xpack.usage"
              }
            }
          },
          {
            "name": "ilm",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Ilm",
                "namespace": "xpack.usage"
              }
            }
          },
          {
            "name": "logstash",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Base",
                "namespace": "xpack.usage"
              }
            }
          },
          {
            "name": "ml",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "MachineLearning",
                "namespace": "xpack.usage"
              }
            }
          },
          {
            "name": "monitoring",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Monitoring",
                "namespace": "xpack.usage"
              }
            }
          },
          {
            "name": "rollup",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Base",
                "namespace": "xpack.usage"
              }
            }
          },
          {
            "name": "runtime_fields",
            "required": false,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "RuntimeFieldTypes",
                "namespace": "xpack.usage"
              }
            }
          },
          {
            "name": "spatial",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Base",
                "namespace": "xpack.usage"
              }
            }
          },
          {
            "name": "searchable_snapshots",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "SearchableSnapshots",
                "namespace": "xpack.usage"
              }
            }
          },
          {
            "name": "security",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Security",
                "namespace": "xpack.usage"
              }
            }
          },
          {
            "name": "slm",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Slm",
                "namespace": "xpack.usage"
              }
            }
          },
          {
            "name": "sql",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Sql",
                "namespace": "xpack.usage"
              }
            }
          },
          {
            "name": "transform",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Base",
                "namespace": "xpack.usage"
              }
            }
          },
          {
            "name": "vectors",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Vector",
                "namespace": "xpack.usage"
              }
            }
          },
          {
            "name": "voting_only",
            "required": true,
            "type": {
              "kind": "instance_of",
              "type": {
                "name": "Base",
                "namespace": "xpack.usage"
              }
            }
          }
        ]
      },
      "kind": "response",
      "name": {
        "name": "Response",
        "namespace": "xpack.usage"
      }
    },
    {
      "kind": "interface",
      "name": {
        "name": "RoleMapping",
        "namespace": "xpack.usage"
      },
      "properties": [
        {
          "name": "enabled",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "size",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "Base",
          "namespace": "xpack.usage"
        }
      },
      "kind": "interface",
      "name": {
        "name": "RuntimeFieldTypes",
        "namespace": "xpack.usage"
      },
      "properties": [
        {
          "name": "field_types",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "RuntimeFieldsType",
                "namespace": "xpack.usage"
              }
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "RuntimeFieldsType",
        "namespace": "xpack.usage"
      },
      "properties": [
        {
          "name": "chars_max",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "chars_total",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "doc_max",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "doc_total",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "index_count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "lang",
          "required": true,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        },
        {
          "name": "lines_max",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "lines_total",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "name",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Field",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "scriptless_count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "shadowed_count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "source_max",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "source_total",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "Base",
          "namespace": "xpack.usage"
        }
      },
      "kind": "interface",
      "name": {
        "name": "SearchableSnapshots",
        "namespace": "xpack.usage"
      },
      "properties": [
        {
          "name": "indices_count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "full_copy_indices_count",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "shared_cache_indices_count",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "Base",
          "namespace": "xpack.usage"
        }
      },
      "kind": "interface",
      "name": {
        "name": "Security",
        "namespace": "xpack.usage"
      },
      "properties": [
        {
          "name": "api_key_service",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "FeatureToggle",
              "namespace": "xpack.usage"
            }
          }
        },
        {
          "name": "anonymous",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "FeatureToggle",
              "namespace": "xpack.usage"
            }
          }
        },
        {
          "name": "audit",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Audit",
              "namespace": "xpack.usage"
            }
          }
        },
        {
          "name": "fips_140",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "FeatureToggle",
              "namespace": "xpack.usage"
            }
          }
        },
        {
          "name": "ipfilter",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "IpFilter",
              "namespace": "xpack.usage"
            }
          }
        },
        {
          "name": "realms",
          "required": true,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "Realm",
                "namespace": "xpack.usage"
              }
            }
          }
        },
        {
          "name": "role_mapping",
          "required": true,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "RoleMapping",
                "namespace": "xpack.usage"
              }
            }
          }
        },
        {
          "name": "roles",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "SecurityRoles",
              "namespace": "xpack.usage"
            }
          }
        },
        {
          "name": "ssl",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Ssl",
              "namespace": "xpack.usage"
            }
          }
        },
        {
          "name": "system_key",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "FeatureToggle",
              "namespace": "xpack.usage"
            }
          }
        },
        {
          "name": "token_service",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "FeatureToggle",
              "namespace": "xpack.usage"
            }
          }
        },
        {
          "name": "operator_privileges",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Base",
              "namespace": "xpack.usage"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "SecurityRoles",
        "namespace": "xpack.usage"
      },
      "properties": [
        {
          "name": "native",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "SecurityRolesNative",
              "namespace": "xpack.usage"
            }
          }
        },
        {
          "name": "dls",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "SecurityRolesDls",
              "namespace": "xpack.usage"
            }
          }
        },
        {
          "name": "file",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "SecurityRolesFile",
              "namespace": "xpack.usage"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "SecurityRolesDls",
        "namespace": "xpack.usage"
      },
      "properties": [
        {
          "name": "bit_set_cache",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "SecurityRolesDlsBitSetCache",
              "namespace": "xpack.usage"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "SecurityRolesDlsBitSetCache",
        "namespace": "xpack.usage"
      },
      "properties": [
        {
          "name": "count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "memory",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ByteSize",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "memory_in_bytes",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "ulong",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "SecurityRolesFile",
        "namespace": "xpack.usage"
      },
      "properties": [
        {
          "name": "dls",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "fls",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "size",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "SecurityRolesNative",
        "namespace": "xpack.usage"
      },
      "properties": [
        {
          "name": "dls",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "fls",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "size",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "Base",
          "namespace": "xpack.usage"
        }
      },
      "kind": "interface",
      "name": {
        "name": "Slm",
        "namespace": "xpack.usage"
      },
      "properties": [
        {
          "name": "policy_count",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "policy_stats",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Statistics",
              "namespace": "slm._types"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "Base",
          "namespace": "xpack.usage"
        }
      },
      "kind": "interface",
      "name": {
        "name": "Sql",
        "namespace": "xpack.usage"
      },
      "properties": [
        {
          "name": "features",
          "required": true,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "integer",
                "namespace": "_types"
              }
            }
          }
        },
        {
          "name": "queries",
          "required": true,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "Query",
                "namespace": "xpack.usage"
              }
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "Ssl",
        "namespace": "xpack.usage"
      },
      "properties": [
        {
          "name": "http",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "FeatureToggle",
              "namespace": "xpack.usage"
            }
          }
        },
        {
          "name": "transport",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "FeatureToggle",
              "namespace": "xpack.usage"
            }
          }
        }
      ]
    },
    {
      "kind": "type_alias",
      "name": {
        "name": "UrlConfig",
        "namespace": "xpack.usage"
      },
      "type": {
        "items": [
          {
            "kind": "instance_of",
            "type": {
              "name": "BaseUrlConfig",
              "namespace": "xpack.usage"
            }
          },
          {
            "kind": "instance_of",
            "type": {
              "name": "KibanaUrlConfig",
              "namespace": "xpack.usage"
            }
          }
        ],
        "kind": "union_of"
      }
    },
    {
      "inherits": {
        "type": {
          "name": "Base",
          "namespace": "xpack.usage"
        }
      },
      "kind": "interface",
      "name": {
        "name": "Vector",
        "namespace": "xpack.usage"
      },
      "properties": [
        {
          "name": "dense_vector_dims_avg_count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "dense_vector_fields_count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "sparse_vector_fields_count",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "integer",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "Base",
          "namespace": "xpack.usage"
        }
      },
      "kind": "interface",
      "name": {
        "name": "Watcher",
        "namespace": "xpack.usage"
      },
      "properties": [
        {
          "name": "execution",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "WatcherActions",
              "namespace": "xpack.usage"
            }
          }
        },
        {
          "name": "watch",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "WatcherWatch",
              "namespace": "xpack.usage"
            }
          }
        },
        {
          "name": "count",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Counter",
              "namespace": "xpack.usage"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "WatcherActionTotals",
        "namespace": "xpack.usage"
      },
      "properties": [
        {
          "name": "total",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "total_time_in_ms",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "long",
              "namespace": "_types"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "WatcherActions",
        "namespace": "xpack.usage"
      },
      "properties": [
        {
          "name": "actions",
          "required": true,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "Name",
                "namespace": "_types"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "WatcherActionTotals",
                "namespace": "xpack.usage"
              }
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "WatcherWatch",
        "namespace": "xpack.usage"
      },
      "properties": [
        {
          "name": "input",
          "required": true,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "Name",
                "namespace": "_types"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "Counter",
                "namespace": "xpack.usage"
              }
            }
          }
        },
        {
          "name": "condition",
          "required": false,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "Name",
                "namespace": "_types"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "Counter",
                "namespace": "xpack.usage"
              }
            }
          }
        },
        {
          "name": "action",
          "required": false,
          "type": {
            "key": {
              "kind": "instance_of",
              "type": {
                "name": "Name",
                "namespace": "_types"
              }
            },
            "kind": "dictionary_of",
            "singleKey": false,
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "Counter",
                "namespace": "xpack.usage"
              }
            }
          }
        },
        {
          "name": "trigger",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "WatcherWatchTrigger",
              "namespace": "xpack.usage"
            }
          }
        }
      ]
    },
    {
      "kind": "interface",
      "name": {
        "name": "WatcherWatchTrigger",
        "namespace": "xpack.usage"
      },
      "properties": [
        {
          "name": "schedule",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "WatcherWatchTriggerSchedule",
              "namespace": "xpack.usage"
            }
          }
        },
        {
          "name": "_all",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Counter",
              "namespace": "xpack.usage"
            }
          }
        }
      ]
    },
    {
      "inherits": {
        "type": {
          "name": "Counter",
          "namespace": "xpack.usage"
        }
      },
      "kind": "interface",
      "name": {
        "name": "WatcherWatchTriggerSchedule",
        "namespace": "xpack.usage"
      },
      "properties": [
        {
          "name": "cron",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Counter",
              "namespace": "xpack.usage"
            }
          }
        },
        {
          "name": "_all",
          "required": true,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Counter",
              "namespace": "xpack.usage"
            }
          }
        }
      ]
    },
    {
      "description": "In some places in the specification an object consists of the union of a set of known properties\nand a set of runtime injected properties. Meaning that object should theoretically extend Dictionary but expose\na set of known keys and possibly. The object might already be part of an object graph and have a parent class.\nThis puts it into a bind that needs a client specific solution.\nWe therefore document the requirement to behave like a dictionary for unknown properties with this interface.",
      "generics": [
        {
          "name": "TKey",
          "namespace": "_spec_utils"
        },
        {
          "name": "TValue",
          "namespace": "_spec_utils"
        }
      ],
      "kind": "interface",
      "name": {
        "name": "AdditionalProperties",
        "namespace": "_spec_utils"
      },
      "properties": []
    },
    {
      "description": "Implements a set of common query parameters all API's support.\nSince these can break the request structure these are listed explicitly as a behavior.\nIts up to individual clients to define support although `error_trace` and `pretty` are\nrecommended as a minimum.",
      "kind": "interface",
      "name": {
        "name": "CommonQueryParameters",
        "namespace": "_spec_utils"
      },
      "properties": [
        {
          "name": "error_trace",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "filter_path",
          "required": false,
          "type": {
            "items": [
              {
                "kind": "instance_of",
                "type": {
                  "name": "string",
                  "namespace": "internal"
                }
              },
              {
                "kind": "array_of",
                "value": {
                  "kind": "instance_of",
                  "type": {
                    "name": "string",
                    "namespace": "internal"
                  }
                }
              }
            ],
            "kind": "union_of"
          }
        },
        {
          "name": "human",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "pretty",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "source_query_string",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "description": "In some places in the specification an object consists of a static set of properties and a single additional property\nwith an arbitrary name but a statically defined type. This is typically used for configurations associated\nto a single field. Meaning that object should theoretically extend SingleKeyDictionary but expose\na set of known keys. And possibly the object might already be part of an object graph and have a parent class.\nThis puts it into a bind that needs a client specific solution.\nWe therefore document the requirement to accept a single unknown property with this interface.",
      "generics": [
        {
          "name": "TKey",
          "namespace": "_spec_utils"
        },
        {
          "name": "TValue",
          "namespace": "_spec_utils"
        }
      ],
      "kind": "interface",
      "name": {
        "name": "AdditionalProperty",
        "namespace": "_spec_utils"
      },
      "properties": []
    },
    {
      "description": "Implements a set of common query parameters all Cat API's support.\nSince these can break the request structure these are listed explicitly as a behavior.",
      "kind": "interface",
      "name": {
        "name": "CommonCatQueryParameters",
        "namespace": "_spec_utils"
      },
      "properties": [
        {
          "name": "format",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "string",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "h",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Names",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "help",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "local",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        },
        {
          "name": "master_timeout",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "Time",
              "namespace": "_types"
            }
          }
        },
        {
          "name": "s",
          "required": false,
          "type": {
            "kind": "array_of",
            "value": {
              "kind": "instance_of",
              "type": {
                "name": "string",
                "namespace": "internal"
              }
            }
          }
        },
        {
          "name": "v",
          "required": false,
          "type": {
            "kind": "instance_of",
            "type": {
              "name": "boolean",
              "namespace": "internal"
            }
          }
        }
      ]
    },
    {
      "description": "A class that implements `OverloadOf` should have the exact same properties with the same types.\nIt can change if a property is required or not. There is no need to port the descriptions\nand js doc tags, the compiler will do that for you.",
      "generics": [
        {
          "name": "TDefinition",
          "namespace": "_spec_utils"
        }
      ],
      "kind": "interface",
      "name": {
        "name": "OverloadOf",
        "namespace": "_spec_utils"
      },
      "properties": []
    }
  ]
}